---
description: 
globs: 
alwaysApply: false
---
# 사용자가 레시피를 저장할 때, 사용자가 회원가입시 개인화를 위한 정보를 입력하면 그 후 저장을 할 때, 등 데이터를 저장을 할 때 AWS S3를 사용해서 데이터를 관리하고 싶어 

# AWS 의 EC2를 통해 인스턴스를 생성하고 두개 생성해서 서버를 이중화 시키고 싶어

# 다른 좋은 방안이 있을까

# 내 프로젝트 구성 규칙
- [002-hyeongjoon.mdc](mdc:.cursor/rules/002-hyeongjoon.mdc)

# 소규모 서비스를 위한 AWS 프리티어 활용 가이드

## 1. 기본 구성
### EC2 (12개월 무료)
- 인스턴스: t2.micro (1vCPU, 1GB RAM)
- 운영체제: Amazon Linux 2023 또는 Ubuntu 22.04
- 스토리지: EBS 30GB (프리티어 무료)
- 용도: 웹 서버 + 데이터베이스 (H2 DB)

### S3 (12개월 무료)
- 저장 용량: 5GB
- 월간 요청 제한
  - GET: 20,000회
  - PUT: 2,000회
- 용도: 이미지 저장 및 백업

### Route 53 (유료)
- 도메인 관리: $0.50/월
- DNS 쿼리: 백만 쿼리당 $0.40

## 2. 예상 비용
### 프리티어 기간 (첫 12개월)
- Route 53만 과금: 월 $0.50 (약 700원)

### 프리티어 이후
- EC2: $8.35/월
- S3 (5GB): $0.12/월
- Route 53: $0.50/월
- 총 비용: 월 $8.97 (약 12,000원)

## 3. 서버 구성
### 웹 서버
- Java 17
- Nginx (리버스 프록시)
- Let's Encrypt (무료 SSL)

### 데이터베이스
- H2 Database (파일 모드)
- 위치: /home/ec2-user/app/data/db
- 일일 백업: S3 자동 업로드

### 보안 설정
- 스프링 시큐리티 기본 설정
- HTTPS 적용 (Let's Encrypt)
- 정기적 보안 업데이트

## 4. 운영 최적화
### 백업 전략
- DB 백업: 일 1회 S3 업로드
- 백업 보관: 7일간 보관
- EC2 스냅샷: 주 1회 생성

### 성능 최적화
- 이미지 최적화 (WebP 사용)
- Nginx 캐싱 설정
- Gzip 압축 활성화

### 모니터링
- CloudWatch 기본 지표 활용
  - CPU 사용률
  - 메모리 사용률
  - 디스크 사용량

## 5. 확장 계획
### 트래픽 증가 시
1. 수직적 확장
   - t2.micro → t2.small/t2.medium

2. 데이터베이스 마이그레이션
   - H2 → RDS (필요시)

### 스토리지 확장 시
- S3 용량 증설
- EBS 볼륨 확장

## 6. 유지보수
### 정기 점검 항목
- 보안 업데이트 적용
- 백업 상태 확인
- 디스크 공간 확인
- 로그 파일 정리

### 모니터링 항목
- 서버 상태
- 애플리케이션 로그
- 백업 완료 여부
- SSL 인증서 만료일

# 개선된 클라우드 인프라 설계 방안

## 1. 컨테이너 기반 구성
- Amazon ECS(Elastic Container Service) 또는 EKS(Elastic Kubernetes Service) 사용
- 컨테이너화를 통한 확장성과 관리 용이성 확보
- 마이크로서비스 아키텍처 지원 가능

## 2. 로드밸런싱 및 오토스케일링
- Application Load Balancer(ALB) 사용
- Auto Scaling Group 구성으로 트래픽에 따른 자동 확장/축소
- 여러 가용영역(AZ)에 분산 배치로 고가용성 확보

## 3. 데이터 계층
- RDS Multi-AZ 구성으로 데이터베이스 이중화
- ElastiCache를 통한 세션 관리 및 캐싱
- S3는 정적 파일 저장 및 백업용으로 활용

## 4. 보안 강화
- WAF(Web Application Firewall) 적용
- AWS Shield로 DDoS 방어
- AWS KMS로 데이터 암호화
- Security Group과 NACL을 통한 네트워크 보안

## 5. 모니터링 및 로깅
- CloudWatch로 시스템 모니터링
- X-Ray로 분산 추적
- CloudTrail로 API 활동 로깅

## 6. CI/CD 파이프라인
- CodePipeline을 통한 자동화된 배포
- CodeBuild로 빌드 자동화
- CodeDeploy로 무중단 배포

## 7. CDN 구성
- CloudFront를 통한 전역 콘텐츠 전송
- Edge Location을 활용한 지연시간 감소

# 장점
- 높은 확장성과 가용성
- 자동화된 운영 관리
- 비용 최적화 가능
- 글로벌 서비스 제공 용이
- 보안 강화

# 고려사항
- 초기 구성의 복잡성
- 운영 인력의 클라우드 기술 숙련도 필요
- 비용 모니터링 필요
