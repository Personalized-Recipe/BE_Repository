{"ast":null,"code":"import axios from'axios';const API_URL='/api';// 토큰 가져오기\nconst getToken=()=>{return localStorage.getItem('token');};// axios 인스턴스 생성\nconst api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// 요청 인터셉터\napi.interceptors.request.use(config=>{const token=getToken();if(token){config.headers['Authorization']=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// 인증 관련 API\nexport const authAPI={login:credentials=>api.post('/auth/login',credentials),register:userData=>api.post('/users/register',userData)};// 사용자 관련 API\nexport const userAPI={getProfile:userId=>api.get(\"/users/\".concat(userId)),updateProfile:(userId,userData)=>api.put(\"/users/\".concat(userId),userData)};// 레시피 관련 API\nexport const recipeAPI={requestRecipe:recipeRequest=>api.post('/recipes',recipeRequest),getHistory:userId=>api.get(\"/recipes/user/\".concat(userId))};// 프롬프트 관련 API\nexport const promptAPI={generatePrompt:promptRequest=>api.post('/prompt/generate',promptRequest)};","map":{"version":3,"names":["axios","API_URL","getToken","localStorage","getItem","api","create","baseURL","headers","interceptors","request","use","config","token","concat","error","Promise","reject","authAPI","login","credentials","post","register","userData","userAPI","getProfile","userId","get","updateProfile","put","recipeAPI","requestRecipe","recipeRequest","getHistory","promptAPI","generatePrompt","promptRequest"],"sources":["/Users/lhj/Workspace/prompt-test/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api';\n\n// 토큰 가져오기\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    const token = getToken();\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 인증 관련 API\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/users/register', userData),\n};\n\n// 사용자 관련 API\nexport const userAPI = {\n  getProfile: (userId) => api.get(`/users/${userId}`),\n  updateProfile: (userId, userData) => api.put(`/users/${userId}`, userData),\n};\n\n// 레시피 관련 API\nexport const recipeAPI = {\n  requestRecipe: (recipeRequest) => api.post('/recipes', recipeRequest),\n  getHistory: (userId) => api.get(`/recipes/user/${userId}`),\n};\n\n// 프롬프트 관련 API\nexport const promptAPI = {\n  generatePrompt: (promptRequest) => api.post('/prompt/generate', promptRequest),\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,OAAO,CAAG,MAAM,CAEtB;AACA,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,MAAO,CAAAC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACtC,CAAC,CAED;AACA,KAAM,CAAAC,GAAG,CAAGL,KAAK,CAACM,MAAM,CAAC,CACvBC,OAAO,CAAEN,OAAO,CAChBO,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGX,QAAQ,CAAC,CAAC,CACxB,GAAIW,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,WAAAM,MAAA,CAAaD,KAAK,CAAE,CACrD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAG,KAAK,EAAK,CACT,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,OAAO,CAAG,CACrBC,KAAK,CAAGC,WAAW,EAAKf,GAAG,CAACgB,IAAI,CAAC,aAAa,CAAED,WAAW,CAAC,CAC5DE,QAAQ,CAAGC,QAAQ,EAAKlB,GAAG,CAACgB,IAAI,CAAC,iBAAiB,CAAEE,QAAQ,CAC9D,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,OAAO,CAAG,CACrBC,UAAU,CAAGC,MAAM,EAAKrB,GAAG,CAACsB,GAAG,WAAAb,MAAA,CAAWY,MAAM,CAAE,CAAC,CACnDE,aAAa,CAAEA,CAACF,MAAM,CAAEH,QAAQ,GAAKlB,GAAG,CAACwB,GAAG,WAAAf,MAAA,CAAWY,MAAM,EAAIH,QAAQ,CAC3E,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,SAAS,CAAG,CACvBC,aAAa,CAAGC,aAAa,EAAK3B,GAAG,CAACgB,IAAI,CAAC,UAAU,CAAEW,aAAa,CAAC,CACrEC,UAAU,CAAGP,MAAM,EAAKrB,GAAG,CAACsB,GAAG,kBAAAb,MAAA,CAAkBY,MAAM,CAAE,CAC3D,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,SAAS,CAAG,CACvBC,cAAc,CAAGC,aAAa,EAAK/B,GAAG,CAACgB,IAAI,CAAC,kBAAkB,CAAEe,aAAa,CAC/E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}