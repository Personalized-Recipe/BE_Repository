{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\n\n// 토큰 가져오기\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 인증 관련 API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/users/register', userData)\n};\n\n// 사용자 관련 API\nexport const userAPI = {\n  getProfile: userId => api.get(`/users/${userId}`),\n  updateProfile: (userId, userData) => api.put(`/users/${userId}`, userData)\n};\n\n// 레시피 관련 API\nexport const recipeAPI = {\n  requestRecipe: recipeRequest => api.post('/recipes', recipeRequest),\n  getHistory: userId => api.get(`/recipes/user/${userId}`)\n};\n\n// 프롬프트 관련 API\nexport const promptAPI = {\n  generatePrompt: promptRequest => api.post('/prompt/generate', promptRequest)\n};","map":{"version":3,"names":["axios","API_URL","getToken","localStorage","getItem","api","create","baseURL","headers","interceptors","request","use","config","token","error","Promise","reject","authAPI","login","credentials","post","register","userData","userAPI","getProfile","userId","get","updateProfile","put","recipeAPI","requestRecipe","recipeRequest","getHistory","promptAPI","generatePrompt","promptRequest"],"sources":["/Users/gyudeok0202/Workspace/BE_Repository/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api';\n\n// 토큰 가져오기\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    const token = getToken();\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 인증 관련 API\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/users/register', userData),\n};\n\n// 사용자 관련 API\nexport const userAPI = {\n  getProfile: (userId) => api.get(`/users/${userId}`),\n  updateProfile: (userId, userData) => api.put(`/users/${userId}`, userData),\n};\n\n// 레시피 관련 API\nexport const recipeAPI = {\n  requestRecipe: (recipeRequest) => api.post('/recipes', recipeRequest),\n  getHistory: (userId) => api.get(`/recipes/user/${userId}`),\n};\n\n// 프롬프트 관련 API\nexport const promptAPI = {\n  generatePrompt: (promptRequest) => api.post('/prompt/generate', promptRequest),\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGX,QAAQ,CAAC,CAAC;EACxB,IAAIW,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAE,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKd,GAAG,CAACe,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAKjB,GAAG,CAACe,IAAI,CAAC,iBAAiB,EAAEE,QAAQ;AAC9D,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG;EACrBC,UAAU,EAAGC,MAAM,IAAKpB,GAAG,CAACqB,GAAG,CAAC,UAAUD,MAAM,EAAE,CAAC;EACnDE,aAAa,EAAEA,CAACF,MAAM,EAAEH,QAAQ,KAAKjB,GAAG,CAACuB,GAAG,CAAC,UAAUH,MAAM,EAAE,EAAEH,QAAQ;AAC3E,CAAC;;AAED;AACA,OAAO,MAAMO,SAAS,GAAG;EACvBC,aAAa,EAAGC,aAAa,IAAK1B,GAAG,CAACe,IAAI,CAAC,UAAU,EAAEW,aAAa,CAAC;EACrEC,UAAU,EAAGP,MAAM,IAAKpB,GAAG,CAACqB,GAAG,CAAC,iBAAiBD,MAAM,EAAE;AAC3D,CAAC;;AAED;AACA,OAAO,MAAMQ,SAAS,GAAG;EACvBC,cAAc,EAAGC,aAAa,IAAK9B,GAAG,CAACe,IAAI,CAAC,kBAAkB,EAAEe,aAAa;AAC/E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}