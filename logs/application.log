2025-06-27 00:05:23.449 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=17m45s697ms).
2025-06-27 01:05:23.372 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=59m59s924ms).
2025-06-27 01:23:25.036 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=18m1s664ms).
2025-06-27 02:23:40.737 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h15s701ms).
2025-06-27 02:39:22.803 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m42s66ms).
2025-06-27 03:27:40.860 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=48m18s56ms).
2025-06-27 03:52:40.854 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=24m59s995ms).
2025-06-27 04:41:23.389 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=48m42s535ms).
2025-06-27 05:28:16.748 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=46m53s359ms).
2025-06-27 05:52:47.006 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=24m30s258ms).
2025-06-27 06:56:16.927 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h3m29s921ms).
2025-06-27 08:29:42.013 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h33m25s86ms).
2025-06-27 09:30:48.659 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m6s646ms).
2025-06-27 09:40:24.551 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=9m35s891ms).
2025-06-27 10:31:52.898 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=51m28s347ms).
2025-06-27 11:04:32.533 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=32m39s636ms).
2025-06-27 11:33:04.864 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=28m32s331ms).
2025-06-27 12:33:46.773 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h41s909ms).
2025-06-27 12:51:17.599 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=17m30s821ms).
2025-06-27 13:34:58.604 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=43m41s10ms).
2025-06-27 14:27:14.584 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=52m15s980ms).
2025-06-27 14:36:10.237 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=8m55s652ms).
2025-06-27 15:36:51.761 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h41s525ms).
2025-06-27 15:54:28.479 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=17m36s718ms).
2025-06-27 15:56:52.778 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m24s299ms).
2025-06-27 16:14:16.075 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=17m23s297ms).
2025-06-27 16:15:15.377 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 16:15:15.388 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 16:15:15.393 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 16:25:30.410 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 16:25:30.438 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 92185 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 16:25:30.439 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 16:25:30.440 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 16:25:30.491 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 16:25:30.491 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 16:25:31.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:25:31.330 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 16:25:31.370 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:25:31.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:25:31.373 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:25:31.374 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:25:31.375 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:25:31.375 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:25:31.376 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:25:31.377 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:25:31.377 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 JDBC repository interfaces.
2025-06-27 16:25:31.390 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:25:31.391 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 16:25:31.500 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 106 ms. Found 8 JPA repository interfaces.
2025-06-27 16:25:31.531 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:25:31.532 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 16:25:31.546 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:25:31.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:25:31.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:25:31.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:25:31.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:25:31.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:25:31.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:25:31.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:25:31.548 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-27 16:25:32.198 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 16:25:32.207 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 16:25:32.209 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 16:25:32.209 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 16:25:32.248 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 16:25:32.250 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1757 ms
2025-06-27 16:25:32.283 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 16:25:32.424 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@31006e1
2025-06-27 16:25:32.427 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 16:25:32.444 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 16:25:32.570 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 16:25:32.602 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 16:25:32.625 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 16:25:32.788 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 16:25:32.930 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 16:25:32.931 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 16:25:33.799 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 16:25:33.937 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 16:25:34.320 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 16:25:34.558 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 16:25:34.559 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 16:25:35.441 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 16:25:35.522 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 16:25:35.647 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@75df76c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4a8a353b, org.springframework.security.web.context.SecurityContextHolderFilter@12c68aab, org.springframework.security.web.header.HeaderWriterFilter@534fd5b3, org.springframework.web.filter.CorsFilter@674b2548, org.springframework.security.web.authentication.logout.LogoutFilter@5d442acf, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@61315f0b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7427e3, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@48b14332, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@42344668, org.springframework.security.web.session.SessionManagementFilter@6fabea4f, org.springframework.security.web.access.ExceptionTranslationFilter@603e35b9, org.springframework.security.web.access.intercept.AuthorizationFilter@22dde8f4]
2025-06-27 16:25:35.970 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 16:25:35.987 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 16:25:35.993 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 16:25:36.005 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.894 seconds (process running for 6.495)
2025-06-27 16:25:51.732 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 16:25:51.733 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 16:25:51.739 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 6 ms
2025-06-27 16:25:52.596 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-27 16:25:52.613 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-27 16:25:52.639 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.User */update user 
    set
        created_at=?,
        email=?,
        nickname=?,
        password=?,
        profile_image=?,
        provider=?,
        provider_id=?,
        updated_at=?,
        username=? 
    where
        user_id=?
2025-06-27 16:25:53.911 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:25:53.920 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:53.924 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:53.929 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:53.938 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:53.946 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:25:53.992 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:25:53.992 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:25:53.994 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:53.994 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:53.998 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:54.000 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:54.004 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:54.003 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:54.014 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:54.016 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:54.020 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:25:54.021 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:25:56.738 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:25:56.745 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:25:56.751 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:56.751 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:56.754 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.754 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.758 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.759 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.759 [http-nio-8080-exec-6] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-27 16:25:56.759 [http-nio-8080-exec-5] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-27 16:25:56.759 [http-nio-8080-exec-6] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-27 16:25:56.760 [http-nio-8080-exec-5] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-27 16:25:56.760 [http-nio-8080-exec-6] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.760 [http-nio-8080-exec-6] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-27 16:25:56.760 [http-nio-8080-exec-5] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.762 [http-nio-8080-exec-5] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-27 16:25:56.794 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:25:56.794 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:25:56.796 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:56.796 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:56.802 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.802 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.803 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.803 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:25:56.811 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:56.811 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:25:56.815 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:25:56.815 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:26:13.442 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:26:13.442 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:26:13.449 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:13.450 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:13.459 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.463 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.469 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.472 [http-nio-8080-exec-10] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-27 16:26:13.473 [http-nio-8080-exec-10] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-27 16:26:13.473 [http-nio-8080-exec-10] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.473 [http-nio-8080-exec-10] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-27 16:26:13.477 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.480 [http-nio-8080-exec-9] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-27 16:26:13.480 [http-nio-8080-exec-9] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-27 16:26:13.480 [http-nio-8080-exec-9] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.480 [http-nio-8080-exec-9] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-27 16:26:13.494 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:26:13.495 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:26:13.497 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:13.498 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:13.504 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.504 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.509 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.509 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:13.518 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:13.518 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:13.533 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:26:13.533 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:26:18.773 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:26:18.777 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:18.780 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:18.787 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:18.793 [http-nio-8080-exec-4] INFO  a.s.k.p.c.UserPromptController - 프롬프트 생성 요청 - userId: 8, data: {name=이형준, nickname=형주니의레싀픠, age=25, gender=M, pregnant=true, allergy=새우, health=아침에 밥먹으면 배아파요, preference=한식, isUpdate=true}
2025-06-27 16:26:18.797 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:18.804 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:26:18.805 [http-nio-8080-exec-4] INFO  a.s.k.p.service.UserPromptService - 기존 프롬프트 발견 - 업데이트 수행: promptId=4
2025-06-27 16:26:18.828 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.UserPrompt */update user_prompt 
    set
        age=?,
        allergy=?,
        created_at=?,
        gender=?,
        health_status=?,
        is_pregnant=?,
        name=?,
        nickname=?,
        preference=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-06-27 16:26:18.832 [http-nio-8080-exec-4] INFO  a.s.k.p.c.UserPromptController - 프롬프트 생성 성공 - promptId: 4
2025-06-27 16:26:18.855 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        ui1_0.user_id,
        ui1_0.ingredient_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=?
2025-06-27 16:26:22.560 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:26:22.562 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:22.566 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:22.576 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:22.579 [http-nio-8080-exec-3] INFO  a.s.k.p.c.UserPromptController - 프롬프트 생성 요청 - userId: 8, data: {name=이형준, nickname=형주니의레싀픠, age=25, gender=M, pregnant=true, allergy=새우, health=아침에 밥먹으면 배아파요, preference=한식, isUpdate=true}
2025-06-27 16:26:22.580 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:22.585 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:26:22.587 [http-nio-8080-exec-3] INFO  a.s.k.p.service.UserPromptService - 기존 프롬프트 발견 - 업데이트 수행: promptId=4
2025-06-27 16:26:22.588 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.UserPrompt */update user_prompt 
    set
        age=?,
        allergy=?,
        created_at=?,
        gender=?,
        health_status=?,
        is_pregnant=?,
        name=?,
        nickname=?,
        preference=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-06-27 16:26:22.590 [http-nio-8080-exec-3] INFO  a.s.k.p.c.UserPromptController - 프롬프트 생성 성공 - promptId: 4
2025-06-27 16:26:22.591 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ui1_0.user_id,
        ui1_0.ingredient_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=?
2025-06-27 16:26:59.010 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:26:59.028 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:59.036 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:59.039 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:26:59.096 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:26:59.097 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:26:59.097 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 오늘 아침 메뉴 추천해줘
2025-06-27 16:26:59.097 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:26:59.097 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:26:59.101 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:26:59.103 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:26:59.103 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 오늘 아침 메뉴 추천해줘
2025-06-27 16:26:59.103 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:26:59.103 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:26:59.103 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:26:59.104 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:26:59.104 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:26:59.104 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 16:26:59.104 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:26:59.105 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:26:59.105 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:26:59.105 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:26:59.112 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:26:59.113 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:26:59.114 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:26:59.114 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:26:59.114 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:26:59.115 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:26:59.116 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:26:59.116 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:26:59.116 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:26:59.117 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751009219116
2025-06-27 16:26:59.117 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:26:59.121 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751009219116)}], model=sonar-pro}
2025-06-27 16:27:15.337 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:27:15.338 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Response: {id=e972ce1b-7317-4cbe-a6b7-da109f5d4fe8, model=sonar-pro, created=1751009235, usage={prompt_tokens=1470, completion_tokens=464, total_tokens=1934, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/r040415/222082579451, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/playlist?list=PLo3Tol4ym6Et_vouLL1YB6xvw1yqrj0Cd], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=간단한 아침식사 메뉴 집밥이 최고! 주간밥상 일주일식단 - 네이버 블로그, url=https://blog.naver.com/r040415/222082579451, date=2020-09-07, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요! 일주일 아침밥 7 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=간단한 아침&저녁메뉴 - YouTube, url=https://www.youtube.com/playlist?list=PLo3Tol4ym6Et_vouLL1YB6xvw1yqrj0Cd, date=null, last_updated=null}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 에그치즈토스트  
2. 조리 시간: 10분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 식빵 1장, 계란 2개, 슬라이스 치즈 1장, 우유(선택), 버터(또는 식용유), 소금 약간  
- 조리 방법:  
  1. 계란 2개를 그릇에 깨서 소금 약간을 넣고 잘 풀어줍니다.  
  2. 프라이팬을 중약불로 달군 뒤 버터를 살짝 녹입니다.  
  3. 풀어둔 계란을 팬에 붓고 스크램블 형태로 익힙니다.  
  4. 식빵 위에 익힌 계란을 올리고, 그 위에 치즈를 올립니다.  
  5. 토스트 위에 우유나 커피 등 원하는 음료와 함께 드시면 좋습니다.  
- 조리 팁: 계란을 너무 익히지 않으면 더 부드러운 토스트가 완성됩니다. 식빵을 토스터에 한 번 구운 후 사용해도 더욱 바삭하게 즐길 수 있습니다[1].

추천 이유:  
- 아침에 밥을 먹으면 속이 불편하신 분도 식빵, 계란, 치즈로 부드럽게 한식을 응용한 한 끼를 드실 수 있습니다.  
- 새우 등 알레르기 재료는 전혀 포함되어 있지 않으니 안심하고 섭취 가능합니다.  
- 준비와 조리가 간단하고 영양 균형이 좋으며, 바쁜 아침에도 빠르게 준비할 수 있습니다.

추가 제안:  
우유나 두유, 커피와 곁들여 아침을 든든하게 시작하세요.  
(만약 식빵이 없다면, 밥 대신 계란찜이나 계란말이밥도 무난합니다[4][5].)}, delta={role=assistant, content=}}]}
2025-06-27 16:27:15.339 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:27:15.339 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 에그치즈토스트  
2. 조리 시간: 10분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 식빵 1장, 계란 2개, 슬라이스 치즈 1장, 우유(선택), 버터(또는 식용유), 소금 약간  
- 조리 방법:  
  1. 계란 2개를 그릇에 깨서 소금 약간을 넣고 잘 풀어줍니다.  
  2. 프라이팬을 중약불로 달군 뒤 버터를 살짝 녹입니다.  
  3. 풀어둔 계란을 팬에 붓고 스크램블 형태로 익힙니다.  
  4. 식빵 위에 익힌 계란을 올리고, 그 위에 치즈를 올립니다.  
  5. 토스트 위에 우유나 커피 등 원하는 음료와 함께 드시면 좋습니다.  
- 조리 팁: 계란을 너무 익히지 않으면 더 부드러운 토스트가 완성됩니다. 식빵을 토스터에 한 번 구운 후 사용해도 더욱 바삭하게 즐길 수 있습니다[1].

추천 이유:  
- 아침에 밥을 먹으면 속이 불편하신 분도 식빵, 계란, 치즈로 부드럽게 한식을 응용한 한 끼를 드실 수 있습니다.  
- 새우 등 알레르기 재료는 전혀 포함되어 있지 않으니 안심하고 섭취 가능합니다.  
- 준비와 조리가 간단하고 영양 균형이 좋으며, 바쁜 아침에도 빠르게 준비할 수 있습니다.

추가 제안:  
우유나 두유, 커피와 곁들여 아침을 든든하게 시작하세요.  
(만약 식빵이 없다면, 밥 대신 계란찜이나 계란말이밥도 무난합니다[4][5].)
2025-06-27 16:27:15.339 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:27:15.339 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:27:15.339 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그치즈토스트  
2. 조리 시간: 10분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 식빵 1장, 계란 2개, 슬라이스 치즈 1장, 우유(선택), 버터(또는 식용유), 소금 약간  
- 조리 방법:  
  1. 계란 2개를 그릇에 깨서 소금 약간을 넣고 잘 풀어줍니다.  
  2. 프라이팬을 중약불로 달군 뒤 버터를 살짝 녹입니다.  
  3. 풀어둔 계란을 팬에 붓고 스크램블 형태로 익힙니다.  
  4. 식빵 위에 익힌 계란을 올리고, 그 위에 치즈를 올립니다.  
  5. 토스트 위에 우유나 커피 등 원하는 음료와 함께 드시면 좋습니다.  
- 조리 팁: 계란을 너무 익히지 않으면 더 부드러운 토스트가 완성됩니다. 식빵을 토스터에 한 번 구운 후 사용해도 더욱 바삭하게 즐길 수 있습니다[1].

추천 이유:  
- 아침에 밥을 먹으면 속이 불편하신 분도 식빵, 계란, 치즈로 부드럽게 한식을 응용한 한 끼를 드실 수 있습니다.  
- 새우 등 알레르기 재료는 전혀 포함되어 있지 않으니 안심하고 섭취 가능합니다.  
- 준비와 조리가 간단하고 영양 균형이 좋으며, 바쁜 아침에도 빠르게 준비할 수 있습니다.

추가 제안:  
우유나 두유, 커피와 곁들여 아침을 든든하게 시작하세요.  
(만약 식빵이 없다면, 밥 대신 계란찜이나 계란말이밥도 무난합니다[4][5].)
2025-06-27 16:27:15.344 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:27:15.351 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Pattern 4 (4. 상세한 조리 방법과 팁) not found
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Pattern 5 (5. 조리 방법) not found
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Markdown pattern (**상세한 조리 방법**) not found
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - === 전체 AI 응답 내용 ===
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 1. 요리 이름: 에그치즈토스트  
2. 조리 시간: 10분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 식빵 1장, 계란 2개, 슬라이스 치즈 1장, 우유(선택), 버터(또는 식용유), 소금 약간  
- 조리 방법:  
  1. 계란 2개를 그릇에 깨서 소금 약간을 넣고 잘 풀어줍니다.  
  2. 프라이팬을 중약불로 달군 뒤 버터를 살짝 녹입니다.  
  3. 풀어둔 계란을 팬에 붓고 스크램블 형태로 익힙니다.  
  4. 식빵 위에 익힌 계란을 올리고, 그 위에 치즈를 올립니다.  
  5. 토스트 위에 우유나 커피 등 원하는 음료와 함께 드시면 좋습니다.  
- 조리 팁: 계란을 너무 익히지 않으면 더 부드러운 토스트가 완성됩니다. 식빵을 토스터에 한 번 구운 후 사용해도 더욱 바삭하게 즐길 수 있습니다[1].

추천 이유:  
- 아침에 밥을 먹으면 속이 불편하신 분도 식빵, 계란, 치즈로 부드럽게 한식을 응용한 한 끼를 드실 수 있습니다.  
- 새우 등 알레르기 재료는 전혀 포함되어 있지 않으니 안심하고 섭취 가능합니다.  
- 준비와 조리가 간단하고 영양 균형이 좋으며, 바쁜 아침에도 빠르게 준비할 수 있습니다.

추가 제안:  
우유나 두유, 커피와 곁들여 아침을 든든하게 시작하세요.  
(만약 식빵이 없다면, 밥 대신 계란찜이나 계란말이밥도 무난합니다[4][5].)
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - === AI 응답 내용 끝 ===
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법 정보를 찾을 수 없습니다.
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 조리 방법 정보가 없어서 null을 반환합니다.
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 조리 방법이 없어서 재시도합니다. (retry: 1)
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 1
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:27:15.352 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:27:15.352 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:27:15.356 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:27:15.357 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:27:15.357 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:27:15.357 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:27:15.357 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:27:15.357 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:27:15.358 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:27:15.358 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:27:15.358 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:27:15.358 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751009235358
2025-06-27 16:27:15.358 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:27:15.358 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751009235358)}], model=sonar-pro}
2025-06-27 16:27:20.800 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:27:20.800 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Response: {id=286e37ca-15be-45e1-9e50-cec580ce97b7, model=sonar-pro, created=1751009240, usage={prompt_tokens=1470, completion_tokens=381, total_tokens=1851, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/r040415/222082579451, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/playlist?list=PLo3Tol4ym6Et_vouLL1YB6xvw1yqrj0Cd], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=간단한 아침식사 메뉴 집밥이 최고! 주간밥상 일주일식단 - 네이버 블로그, url=https://blog.naver.com/r040415/222082579451, date=2020-09-07, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요! 일주일 아침밥 7 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=간단한 아침&저녁메뉴 - YouTube, url=https://www.youtube.com/playlist?list=PLo3Tol4ym6Et_vouLL1YB6xvw1yqrj0Cd, date=null, last_updated=null}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 에그치즈토스트  
2. 조리 시간: 10분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 재료: 식빵 1장, 계란 2개, 치즈 1장, 우유 또는 커피(선택)  
- 만드는 법:  
  1. 팬을 예열한 후 계란 2개를 풀어 스크램블해줍니다.  
  2. 스크램블한 계란을 식빵 위에 올리고 치즈 1장을 덮습니다.  
  3. 팬에 식빵을 올리고 약불에서 치즈가 녹을 때까지 굽습니다.  
  4. 완성된 토스트를 반으로 잘라 접시에 담아 냅니다.  
  5. 우유나 커피와 함께 곁들이면 든든한 아침 식사로 좋습니다.  

- 팁:  
  - 아침에 밥을 먹으면 배가 아픈 경우, 토스트나 빵 종류가 소화에 부담이 적어 적합합니다.  
  - 치즈 대신 아보카도, 햄, 채소 등 원하는 재료를 추가해도 좋습니다.  
  - 설거지 거리도 적고 10분 내로 간편하게 만들 수 있어 바쁜 아침에 추천합니다[1].  

※ 새우가 포함되지 않아 알레르기 걱정 없이 안심하고 드실 수 있습니다.  
※ 한식 선호라면 곁들일 수 있는 두유, 고소한 콩국물과 함께 드셔도 좋습니다.}, delta={role=assistant, content=}}]}
2025-06-27 16:27:20.800 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:27:20.800 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 에그치즈토스트  
2. 조리 시간: 10분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 재료: 식빵 1장, 계란 2개, 치즈 1장, 우유 또는 커피(선택)  
- 만드는 법:  
  1. 팬을 예열한 후 계란 2개를 풀어 스크램블해줍니다.  
  2. 스크램블한 계란을 식빵 위에 올리고 치즈 1장을 덮습니다.  
  3. 팬에 식빵을 올리고 약불에서 치즈가 녹을 때까지 굽습니다.  
  4. 완성된 토스트를 반으로 잘라 접시에 담아 냅니다.  
  5. 우유나 커피와 함께 곁들이면 든든한 아침 식사로 좋습니다.  

- 팁:  
  - 아침에 밥을 먹으면 배가 아픈 경우, 토스트나 빵 종류가 소화에 부담이 적어 적합합니다.  
  - 치즈 대신 아보카도, 햄, 채소 등 원하는 재료를 추가해도 좋습니다.  
  - 설거지 거리도 적고 10분 내로 간편하게 만들 수 있어 바쁜 아침에 추천합니다[1].  

※ 새우가 포함되지 않아 알레르기 걱정 없이 안심하고 드실 수 있습니다.  
※ 한식 선호라면 곁들일 수 있는 두유, 고소한 콩국물과 함께 드셔도 좋습니다.
2025-06-27 16:27:20.800 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:27:20.801 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:27:20.801 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그치즈토스트  
2. 조리 시간: 10분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 재료: 식빵 1장, 계란 2개, 치즈 1장, 우유 또는 커피(선택)  
- 만드는 법:  
  1. 팬을 예열한 후 계란 2개를 풀어 스크램블해줍니다.  
  2. 스크램블한 계란을 식빵 위에 올리고 치즈 1장을 덮습니다.  
  3. 팬에 식빵을 올리고 약불에서 치즈가 녹을 때까지 굽습니다.  
  4. 완성된 토스트를 반으로 잘라 접시에 담아 냅니다.  
  5. 우유나 커피와 함께 곁들이면 든든한 아침 식사로 좋습니다.  

- 팁:  
  - 아침에 밥을 먹으면 배가 아픈 경우, 토스트나 빵 종류가 소화에 부담이 적어 적합합니다.  
  - 치즈 대신 아보카도, 햄, 채소 등 원하는 재료를 추가해도 좋습니다.  
  - 설거지 거리도 적고 10분 내로 간편하게 만들 수 있어 바쁜 아침에 추천합니다[1].  

※ 새우가 포함되지 않아 알레르기 걱정 없이 안심하고 드실 수 있습니다.  
※ 한식 선호라면 곁들일 수 있는 두유, 고소한 콩국물과 함께 드셔도 좋습니다.
2025-06-27 16:27:20.809 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:27:20.812 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Pattern 4 (4. 상세한 조리 방법과 팁) not found
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Pattern 5 (5. 조리 방법) not found
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Markdown pattern (**상세한 조리 방법**) not found
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - === 전체 AI 응답 내용 ===
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 1. 요리 이름: 에그치즈토스트  
2. 조리 시간: 10분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 재료: 식빵 1장, 계란 2개, 치즈 1장, 우유 또는 커피(선택)  
- 만드는 법:  
  1. 팬을 예열한 후 계란 2개를 풀어 스크램블해줍니다.  
  2. 스크램블한 계란을 식빵 위에 올리고 치즈 1장을 덮습니다.  
  3. 팬에 식빵을 올리고 약불에서 치즈가 녹을 때까지 굽습니다.  
  4. 완성된 토스트를 반으로 잘라 접시에 담아 냅니다.  
  5. 우유나 커피와 함께 곁들이면 든든한 아침 식사로 좋습니다.  

- 팁:  
  - 아침에 밥을 먹으면 배가 아픈 경우, 토스트나 빵 종류가 소화에 부담이 적어 적합합니다.  
  - 치즈 대신 아보카도, 햄, 채소 등 원하는 재료를 추가해도 좋습니다.  
  - 설거지 거리도 적고 10분 내로 간편하게 만들 수 있어 바쁜 아침에 추천합니다[1].  

※ 새우가 포함되지 않아 알레르기 걱정 없이 안심하고 드실 수 있습니다.  
※ 한식 선호라면 곁들일 수 있는 두유, 고소한 콩국물과 함께 드셔도 좋습니다.
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - === AI 응답 내용 끝 ===
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법 정보를 찾을 수 없습니다.
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 조리 방법 정보가 없어서 null을 반환합니다.
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 조리 방법이 없어서 재시도합니다. (retry: 2)
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 2
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:27:20.813 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:27:20.813 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:27:20.816 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:27:20.817 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:27:20.817 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:27:20.818 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:27:20.818 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:27:20.819 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:27:20.820 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:27:20.821 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:27:20.821 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:27:20.821 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751009240821
2025-06-27 16:27:20.821 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:27:20.821 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751009240821)}], model=sonar-pro}
2025-06-27 16:27:28.026 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:27:28.027 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Response: {id=45585869-0595-4881-b960-d021101be8f7, model=sonar-pro, created=1751009247, usage={prompt_tokens=1470, completion_tokens=362, total_tokens=1832, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/r040415/222082579451, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/watch?v=GyJS53u3U-c], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=간단한 아침식사 메뉴 집밥이 최고! 주간밥상 일주일식단 - 네이버 블로그, url=https://blog.naver.com/r040415/222082579451, date=2020-09-07, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요! 일주일 아침밥 7 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=아침밥 9가지. 국과 반찬이 있는 아침식단 - YouTube, url=https://www.youtube.com/watch?v=GyJS53u3U-c, date=2022-10-03, last_updated=2025-05-25}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 에그치즈토스트
2. 조리 시간: 10분
3. 난이도: 하
4. 조리 방법과 팁:
- 재료: 식빵 1장, 계란 2개, 슬라이스 치즈 1장, 버터 약간(선택), 소금·후추 약간
- 만드는 법:
  1. 계란 2개를 그릇에 풀어 소금·후추로 밑간합니다.
  2. 프라이팬에 버터를 녹여 약불에서 계란물을 가장자리까지 넓게 부어 익힙니다.
  3. 계란이 반쯤 익으면 식빵 1장을 올리고, 치즈 1장을 빵 위에 올립니다.
  4. 계란이 완전히 익으면 계란 양 끝을 빵 위로 접어서 덮어줍니다.
  5. 뒤집어 치즈가 녹을 때까지 1~2분 더 구워 완성합니다.
- 팁: 기호에 따라 토마토, 양파 슬라이스 등을 추가해도 좋고, 우유 또는 따뜻한 커피와 함께 먹으면 속이 덜 부담스럽습니다.

추천 이유: 밥보다 소화 부담이 적고, 군더더기 없이 빠르게 만들 수 있어 아침에 허기만 달랠 때 적합합니다. 새우 알레르기 위험이 없으며 한식 선호를 고려해 속까지 든든함을 느낄 수 있도록 계란과 치즈를 활용했습니다[1].}, delta={role=assistant, content=}}]}
2025-06-27 16:27:28.027 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:27:28.027 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 에그치즈토스트
2. 조리 시간: 10분
3. 난이도: 하
4. 조리 방법과 팁:
- 재료: 식빵 1장, 계란 2개, 슬라이스 치즈 1장, 버터 약간(선택), 소금·후추 약간
- 만드는 법:
  1. 계란 2개를 그릇에 풀어 소금·후추로 밑간합니다.
  2. 프라이팬에 버터를 녹여 약불에서 계란물을 가장자리까지 넓게 부어 익힙니다.
  3. 계란이 반쯤 익으면 식빵 1장을 올리고, 치즈 1장을 빵 위에 올립니다.
  4. 계란이 완전히 익으면 계란 양 끝을 빵 위로 접어서 덮어줍니다.
  5. 뒤집어 치즈가 녹을 때까지 1~2분 더 구워 완성합니다.
- 팁: 기호에 따라 토마토, 양파 슬라이스 등을 추가해도 좋고, 우유 또는 따뜻한 커피와 함께 먹으면 속이 덜 부담스럽습니다.

추천 이유: 밥보다 소화 부담이 적고, 군더더기 없이 빠르게 만들 수 있어 아침에 허기만 달랠 때 적합합니다. 새우 알레르기 위험이 없으며 한식 선호를 고려해 속까지 든든함을 느낄 수 있도록 계란과 치즈를 활용했습니다[1].
2025-06-27 16:27:28.028 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:27:28.028 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:27:28.028 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그치즈토스트
2. 조리 시간: 10분
3. 난이도: 하
4. 조리 방법과 팁:
- 재료: 식빵 1장, 계란 2개, 슬라이스 치즈 1장, 버터 약간(선택), 소금·후추 약간
- 만드는 법:
  1. 계란 2개를 그릇에 풀어 소금·후추로 밑간합니다.
  2. 프라이팬에 버터를 녹여 약불에서 계란물을 가장자리까지 넓게 부어 익힙니다.
  3. 계란이 반쯤 익으면 식빵 1장을 올리고, 치즈 1장을 빵 위에 올립니다.
  4. 계란이 완전히 익으면 계란 양 끝을 빵 위로 접어서 덮어줍니다.
  5. 뒤집어 치즈가 녹을 때까지 1~2분 더 구워 완성합니다.
- 팁: 기호에 따라 토마토, 양파 슬라이스 등을 추가해도 좋고, 우유 또는 따뜻한 커피와 함께 먹으면 속이 덜 부담스럽습니다.

추천 이유: 밥보다 소화 부담이 적고, 군더더기 없이 빠르게 만들 수 있어 아침에 허기만 달랠 때 적합합니다. 새우 알레르기 위험이 없으며 한식 선호를 고려해 속까지 든든함을 느낄 수 있도록 계란과 치즈를 활용했습니다[1].
2025-06-27 16:27:28.040 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Pattern 4 (4. 상세한 조리 방법과 팁) not found
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Pattern 5 (5. 조리 방법) not found
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Markdown pattern (**상세한 조리 방법**) not found
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - === 전체 AI 응답 내용 ===
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 1. 요리 이름: 에그치즈토스트
2. 조리 시간: 10분
3. 난이도: 하
4. 조리 방법과 팁:
- 재료: 식빵 1장, 계란 2개, 슬라이스 치즈 1장, 버터 약간(선택), 소금·후추 약간
- 만드는 법:
  1. 계란 2개를 그릇에 풀어 소금·후추로 밑간합니다.
  2. 프라이팬에 버터를 녹여 약불에서 계란물을 가장자리까지 넓게 부어 익힙니다.
  3. 계란이 반쯤 익으면 식빵 1장을 올리고, 치즈 1장을 빵 위에 올립니다.
  4. 계란이 완전히 익으면 계란 양 끝을 빵 위로 접어서 덮어줍니다.
  5. 뒤집어 치즈가 녹을 때까지 1~2분 더 구워 완성합니다.
- 팁: 기호에 따라 토마토, 양파 슬라이스 등을 추가해도 좋고, 우유 또는 따뜻한 커피와 함께 먹으면 속이 덜 부담스럽습니다.

추천 이유: 밥보다 소화 부담이 적고, 군더더기 없이 빠르게 만들 수 있어 아침에 허기만 달랠 때 적합합니다. 새우 알레르기 위험이 없으며 한식 선호를 고려해 속까지 든든함을 느낄 수 있도록 계란과 치즈를 활용했습니다[1].
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - === AI 응답 내용 끝 ===
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법 정보를 찾을 수 없습니다.
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 조리 방법 정보가 없어서 null을 반환합니다.
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - 조리 방법이 없어서 재시도합니다. (retry: 3)
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 3
2025-06-27 16:27:28.042 [http-nio-8080-exec-6] ERROR a.s.k.p.service.PerplexityService - 최대 재시도 횟수 초과. 기본 레시피를 반환합니다.
2025-06-27 16:27:28.056 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:29:02.887 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 16:29:02.894 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 16:29:02.904 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 16:29:07.411 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 16:29:07.437 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 92435 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 16:29:07.437 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 16:29:07.438 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 16:29:07.488 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 16:29:07.488 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 16:29:08.298 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:29:08.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 16:29:08.337 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:29:08.339 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:29:08.340 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:29:08.342 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:29:08.342 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:29:08.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:29:08.355 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:29:08.357 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:29:08.358 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 56 ms. Found 0 JDBC repository interfaces.
2025-06-27 16:29:08.378 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:29:08.378 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 16:29:08.469 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 88 ms. Found 8 JPA repository interfaces.
2025-06-27 16:29:08.494 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:29:08.495 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 16:29:08.504 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:29:08.504 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:29:08.504 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:29:08.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:29:08.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:29:08.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:29:08.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:29:08.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:29:08.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-27 16:29:09.073 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 16:29:09.079 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 16:29:09.081 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 16:29:09.081 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 16:29:09.114 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 16:29:09.116 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1626 ms
2025-06-27 16:29:09.153 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 16:29:09.293 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5b3e9087
2025-06-27 16:29:09.296 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 16:29:09.312 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 16:29:09.422 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 16:29:09.446 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 16:29:09.465 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 16:29:09.571 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 16:29:09.618 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 16:29:09.618 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 16:29:10.414 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 16:29:10.525 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 16:29:10.887 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 16:29:11.101 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 16:29:11.102 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 16:29:12.051 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 16:29:12.119 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 16:29:12.230 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@39d1076d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6ea5e97c, org.springframework.security.web.context.SecurityContextHolderFilter@7b6d2433, org.springframework.security.web.header.HeaderWriterFilter@4c04475e, org.springframework.web.filter.CorsFilter@6171a836, org.springframework.security.web.authentication.logout.LogoutFilter@28012bb6, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@191bccd9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6394beb8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18aec02, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5e8b86a8, org.springframework.security.web.session.SessionManagementFilter@1fe5307e, org.springframework.security.web.access.ExceptionTranslationFilter@42ac6588, org.springframework.security.web.access.intercept.AuthorizationFilter@55b04261]
2025-06-27 16:29:12.530 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 16:29:12.549 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 16:29:12.555 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 16:29:12.564 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.455 seconds (process running for 6.046)
2025-06-27 16:29:21.460 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 16:29:21.461 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 16:29:21.463 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-27 16:29:21.521 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:29:21.558 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:29:21.574 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:29:21.579 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:29:21.616 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:29:21.616 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:29:21.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 오늘 아침 메뉴 추천
2025-06-27 16:29:21.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:29:21.618 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:29:21.675 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:29:21.678 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:29:21.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 오늘 아침 메뉴 추천
2025-06-27 16:29:21.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:29:21.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:29:21.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:29:21.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:29:21.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:29:21.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 16:29:21.680 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:29:21.681 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:29:21.681 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:29:21.681 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:29:21.683 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:29:21.685 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:29:21.685 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:29:21.685 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:29:21.685 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:29:21.686 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:29:21.687 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:29:21.687 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:29:21.687 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:29:21.688 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751009361688
2025-06-27 16:29:21.688 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:29:21.689 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751009361688)}], model=sonar-pro}
2025-06-27 16:29:27.939 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:29:27.940 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=f4c2b68a-963b-4e28-b14c-98fa3d58005e, model=sonar-pro, created=1751009367, usage={prompt_tokens=1464, completion_tokens=485, total_tokens=1949, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/r040415/222082579451, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/watch?v=GyJS53u3U-c], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요!, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=간단한 아침식사 메뉴 집밥이 최고! 주간밥상 일주일식단, url=https://blog.naver.com/r040415/222082579451, date=2020-09-07, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=아침밥 9가지. 국과 반찬이 있는 아침식단, url=https://www.youtube.com/watch?v=GyJS53u3U-c, date=2022-10-03, last_updated=2025-05-25}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=## 아침 메뉴 추천: 김치 참치볶음

### 요리 설명
김치 참치볶음은 간단하고 맛있는 한식 아침 메뉴로, 사용자의 선호도와 알레르기 정보를 고려하여 새우가 포함되지 않은 요리를 추천합니다. 아침에 밥을 먹으면 배가 아프다면, 밥 대신에 참치볶음을 먹는 것이 좋습니다. 이 요리는 간단하게 조리할 수 있으며, 건강한 아침 식사를 제공합니다.

### 요리 정보

1. **요리 이름**: 김치 참치볶음
2. **조리 시간**: 약 15분
3. **난이도**: 하

### 재료
- **김치** (1/2컵)
- **참치** (1캔, 기름이 아닌 물에젖은 참치)
- **첫풀** (1/4컵)
- **대파** (1/4컵)
- **마늘** (1쪽)
- **들기름** (1큰술)
- **참기름** (1작은술)
- **소금, 후추** (시즈닝)

### 조리 방법
1. **대파와 마늘 준비**: 대파는 송송 썰고, 마늘은 다져서 준비합니다.
2. **팬에 기름 두르기**: 들기름을 팬에 두르고 온도를 중불로 유지합니다.
3. ** PIXI 준비**: 대파와 마늘을 약 2분간 볶습니다.
4. **김치와 참치 추가**: 김치와 참치를 넣고 약 5분간 볶습니다.
5. **시즈닝**: 소금과 후추로 간을 맞추고, 참기름 한 숟가락을 넣어 마무리합니다.
6. **완성**: 참기름이 잘 섞이면 완성입니다.

### 팁
- 김치의 양을 조절하여 맵기를 맞춰주세요.
- 참치를 잘게 잘라서 넣으면 더 잘 섞여요.
- 참기름은 요리 마무리 시점에 넣어야 향이 잘 나옵니다.}, delta={role=assistant, content=}}]}
2025-06-27 16:29:27.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:29:27.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
## 아침 메뉴 추천: 김치 참치볶음

### 요리 설명
김치 참치볶음은 간단하고 맛있는 한식 아침 메뉴로, 사용자의 선호도와 알레르기 정보를 고려하여 새우가 포함되지 않은 요리를 추천합니다. 아침에 밥을 먹으면 배가 아프다면, 밥 대신에 참치볶음을 먹는 것이 좋습니다. 이 요리는 간단하게 조리할 수 있으며, 건강한 아침 식사를 제공합니다.

### 요리 정보

1. **요리 이름**: 김치 참치볶음
2. **조리 시간**: 약 15분
3. **난이도**: 하

### 재료
- **김치** (1/2컵)
- **참치** (1캔, 기름이 아닌 물에젖은 참치)
- **첫풀** (1/4컵)
- **대파** (1/4컵)
- **마늘** (1쪽)
- **들기름** (1큰술)
- **참기름** (1작은술)
- **소금, 후추** (시즈닝)

### 조리 방법
1. **대파와 마늘 준비**: 대파는 송송 썰고, 마늘은 다져서 준비합니다.
2. **팬에 기름 두르기**: 들기름을 팬에 두르고 온도를 중불로 유지합니다.
3. ** PIXI 준비**: 대파와 마늘을 약 2분간 볶습니다.
4. **김치와 참치 추가**: 김치와 참치를 넣고 약 5분간 볶습니다.
5. **시즈닝**: 소금과 후추로 간을 맞추고, 참기름 한 숟가락을 넣어 마무리합니다.
6. **완성**: 참기름이 잘 섞이면 완성입니다.

### 팁
- 김치의 양을 조절하여 맵기를 맞춰주세요.
- 참치를 잘게 잘라서 넣으면 더 잘 섞여요.
- 참기름은 요리 마무리 시점에 넣어야 향이 잘 나옵니다.
2025-06-27 16:29:27.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:29:27.942 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:29:27.942 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ## 아침 메뉴 추천: 김치 참치볶음

### 요리 설명
김치 참치볶음은 간단하고 맛있는 한식 아침 메뉴로, 사용자의 선호도와 알레르기 정보를 고려하여 새우가 포함되지 않은 요리를 추천합니다. 아침에 밥을 먹으면 배가 아프다면, 밥 대신에 참치볶음을 먹는 것이 좋습니다. 이 요리는 간단하게 조리할 수 있으며, 건강한 아침 식사를 제공합니다.

### 요리 정보

1. **요리 이름**: 김치 참치볶음
2. **조리 시간**: 약 15분
3. **난이도**: 하

### 재료
- **김치** (1/2컵)
- **참치** (1캔, 기름이 아닌 물에젖은 참치)
- **첫풀** (1/4컵)
- **대파** (1/4컵)
- **마늘** (1쪽)
- **들기름** (1큰술)
- **참기름** (1작은술)
- **소금, 후추** (시즈닝)

### 조리 방법
1. **대파와 마늘 준비**: 대파는 송송 썰고, 마늘은 다져서 준비합니다.
2. **팬에 기름 두르기**: 들기름을 팬에 두르고 온도를 중불로 유지합니다.
3. ** PIXI 준비**: 대파와 마늘을 약 2분간 볶습니다.
4. **김치와 참치 추가**: 김치와 참치를 넣고 약 5분간 볶습니다.
5. **시즈닝**: 소금과 후추로 간을 맞추고, 참기름 한 숟가락을 넣어 마무리합니다.
6. **완성**: 참기름이 잘 섞이면 완성입니다.

### 팁
- 김치의 양을 조절하여 맵기를 맞춰주세요.
- 참치를 잘게 잘라서 넣으면 더 잘 섞여요.
- 참기름은 요리 마무리 시점에 넣어야 향이 잘 나옵니다.
2025-06-27 16:29:27.945 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:29:27.948 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:29:27.949 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Pattern 4 (4. 상세한 조리 방법과 팁) not found
2025-06-27 16:29:27.949 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Pattern 5 (5. 조리 방법) not found
2025-06-27 16:29:27.949 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Markdown pattern (**상세한 조리 방법**) not found
2025-06-27 16:29:27.949 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method (Flexible pattern): 김치 참치볶음은 간단하고 맛있는 한식 아침 메뉴로, 사용자의 선호도와 알레르기 정보를 고려하여 새우가 포함되지 않은 요리를 추천합니다. 아침에 밥을 먹으면 배가 아프다면, 밥 대신
2025-06-27 16:29:27.949 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
김치 참치볶음은 간단하고 맛있는 한식 아침 메뉴로, 사용자의 선호도와 알레르기 정보를 고려하여 새우가 포함되지 않은 요리를 추천합니다. 아침에 밥을 먹으면 배가 아프다면, 밥 대신에 참치볶음을 먹는 것이 좋습니다. 이 요리는 간단하게 조리할 수 있으며, 건강한 아침 식사를 제공합니다.
2025-06-27 16:29:27.949 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 아침 메뉴 추천: 김치 참치볶음
2025-06-27 16:29:27.974 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:29:27.986 [http-nio-8080-exec-1] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1406, SQLState: 22001
2025-06-27 16:29:27.986 [http-nio-8080-exec-1] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Data truncation: Data too long for column 'title' at row 1
2025-06-27 16:29:27.992 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe or recipe ingredients
org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy153.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:503)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy140.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy140.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 189 common frames omitted
2025-06-27 16:29:27.994 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:509)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy153.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:503)
	... 125 common frames omitted
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy140.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy140.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 189 common frames omitted
2025-06-27 16:29:27.999 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:128)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 16:30:44.015 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 16:30:44.022 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 16:30:44.030 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 16:30:48.646 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 16:30:48.673 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 92575 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 16:30:48.673 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 16:30:48.674 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 16:30:48.728 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 16:30:48.729 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 16:30:49.553 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:30:49.555 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 16:30:49.592 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:30:49.594 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:30:49.595 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:30:49.596 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:30:49.596 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:30:49.597 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:30:49.609 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:30:49.611 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 16:30:49.611 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 54 ms. Found 0 JDBC repository interfaces.
2025-06-27 16:30:49.632 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:30:49.633 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 16:30:49.723 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 88 ms. Found 8 JPA repository interfaces.
2025-06-27 16:30:49.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 16:30:49.749 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 16:30:49.760 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:30:49.760 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:30:49.760 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:30:49.760 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:30:49.760 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:30:49.760 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:30:49.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:30:49.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 16:30:49.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-27 16:30:50.321 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 16:30:50.327 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 16:30:50.329 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 16:30:50.329 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 16:30:50.368 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 16:30:50.369 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1639 ms
2025-06-27 16:30:50.401 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 16:30:50.536 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7b8c2aa5
2025-06-27 16:30:50.540 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 16:30:50.555 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 16:30:50.665 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 16:30:50.690 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 16:30:50.707 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 16:30:50.813 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 16:30:50.865 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 16:30:50.865 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 16:30:51.761 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 16:30:51.891 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 16:30:52.259 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 16:30:52.465 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 16:30:52.465 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 16:30:53.348 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 16:30:53.423 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 16:30:53.540 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4a8a353b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@674b2548, org.springframework.security.web.context.SecurityContextHolderFilter@228fe32e, org.springframework.security.web.header.HeaderWriterFilter@78849a0a, org.springframework.web.filter.CorsFilter@42344668, org.springframework.security.web.authentication.logout.LogoutFilter@55b04261, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@3eb08623, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@48b14332, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6e041b5d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2aba2fd5, org.springframework.security.web.session.SessionManagementFilter@2b512115, org.springframework.security.web.access.ExceptionTranslationFilter@4b7200a3, org.springframework.security.web.access.intercept.AuthorizationFilter@1f865d47]
2025-06-27 16:30:53.847 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 16:30:53.865 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 16:30:53.871 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 16:30:53.889 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.54 seconds (process running for 6.247)
2025-06-27 16:30:55.285 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 16:30:55.285 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 16:30:55.287 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-27 16:30:55.363 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:30:55.391 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:30:55.407 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:30:55.412 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:30:55.450 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:30:55.450 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:30:55.451 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 오늘 아침 메뉴 추천
2025-06-27 16:30:55.451 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:30:55.451 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:30:55.511 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:30:55.514 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:30:55.514 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 오늘 아침 메뉴 추천
2025-06-27 16:30:55.514 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:30:55.514 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:30:55.515 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:30:55.515 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:30:55.515 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:30:55.515 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 16:30:55.516 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:30:55.517 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:30:55.517 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:30:55.517 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:30:55.520 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:30:55.521 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:30:55.521 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:30:55.521 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:30:55.521 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:30:55.522 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:30:55.522 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:30:55.522 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:30:55.522 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:30:55.523 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751009455523
2025-06-27 16:30:55.524 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:30:55.526 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 오늘 아침 메뉴 추천
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751009455523)}], model=sonar-pro}
2025-06-27 16:31:06.514 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:31:06.515 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=3b3443f4-9643-485e-b5c1-f05849616b8b, model=sonar-pro, created=1751009466, usage={prompt_tokens=1464, completion_tokens=543, total_tokens=2007, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/r040415/222082579451, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/watch?v=GyJS53u3U-c], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=간단한 아침식사 메뉴 집밥이 최고! 주간밥상 일주일식단 - 네이버 블로그, url=https://blog.naver.com/r040415/222082579451, date=2020-09-07, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요! 일주일 아침밥 7 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=아침밥 9가지. 국과 반찬이 있는 아침식단 - YouTube, url=https://www.youtube.com/watch?v=GyJS53u3U-c, date=2022-10-03, last_updated=2025-05-25}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 조리 방법과 팁:  
- 준비 재료: 대파(흰 부분 위주, 넉넉하게), 베이컨(손바닥만큼 한 줌), 찬밥 한 공기, 계란 2개, 식용유, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파를 송송 썰고, 베이컨도 먹기 좋은 크기로 자릅니다.  
  2. 팬에 식용유를 두르고 대파를 먼저 볶아 파기름을 내줍니다.  
  3. 대파가 숨이 죽으면 베이컨을 넣고 같이 볶아 풍미를 더합니다.  
  4. 베이컨이 익으면 찬밥을 넣고 밥알이 풀어지게 고루 섞어가며 볶습니다.  
  5. 밥이 전체적으로 뜨거워졌을 때 굴소스 1스푼을 넣어 간을 맞춥니다.  
  6. 팬 한쪽에 밥을 밀어 두고, 남는 공간에 계란 2개를 풀어 스크램블 하듯 저어 익힌 뒤 밥과 합쳐 볶아줍니다.  
  7. 마지막에 참기름을 한 바퀴 두르고 불을 끕니다. 원하는 경우 통깨를 뿌려 마무리합니다.  
  *TIP: 밥은 찬밥을 사용하는 게 퍼지지 않고 볶기 좋습니다. 베이컨 대신 햄이나 닭가슴살 큐브도 활용할 수 있습니다.  
  *이 레시피는 밥이 들어가긴 하지만, 계란과 베이컨, 대파로 주 재료가 구성되어 아침에 속이 부담스럽지 않고, 빠르게 조리할 수 있습니다[4].

**새우 알레르기 정보 확인:**  
해당 레시피에는 새우가 포함되지 않아 안전합니다.  
또한 요청에 따라 한식 스타일의 아침 메뉴이며, 간편하고 속 부담을 줄이기 위해 굴소스 양을 조절하거나 밥의 양을 줄여도 좋습니다.}, delta={role=assistant, content=}}]}
2025-06-27 16:31:06.516 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:31:06.516 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 조리 방법과 팁:  
- 준비 재료: 대파(흰 부분 위주, 넉넉하게), 베이컨(손바닥만큼 한 줌), 찬밥 한 공기, 계란 2개, 식용유, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파를 송송 썰고, 베이컨도 먹기 좋은 크기로 자릅니다.  
  2. 팬에 식용유를 두르고 대파를 먼저 볶아 파기름을 내줍니다.  
  3. 대파가 숨이 죽으면 베이컨을 넣고 같이 볶아 풍미를 더합니다.  
  4. 베이컨이 익으면 찬밥을 넣고 밥알이 풀어지게 고루 섞어가며 볶습니다.  
  5. 밥이 전체적으로 뜨거워졌을 때 굴소스 1스푼을 넣어 간을 맞춥니다.  
  6. 팬 한쪽에 밥을 밀어 두고, 남는 공간에 계란 2개를 풀어 스크램블 하듯 저어 익힌 뒤 밥과 합쳐 볶아줍니다.  
  7. 마지막에 참기름을 한 바퀴 두르고 불을 끕니다. 원하는 경우 통깨를 뿌려 마무리합니다.  
  *TIP: 밥은 찬밥을 사용하는 게 퍼지지 않고 볶기 좋습니다. 베이컨 대신 햄이나 닭가슴살 큐브도 활용할 수 있습니다.  
  *이 레시피는 밥이 들어가긴 하지만, 계란과 베이컨, 대파로 주 재료가 구성되어 아침에 속이 부담스럽지 않고, 빠르게 조리할 수 있습니다[4].

**새우 알레르기 정보 확인:**  
해당 레시피에는 새우가 포함되지 않아 안전합니다.  
또한 요청에 따라 한식 스타일의 아침 메뉴이며, 간편하고 속 부담을 줄이기 위해 굴소스 양을 조절하거나 밥의 양을 줄여도 좋습니다.
2025-06-27 16:31:06.517 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:31:06.518 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:31:06.518 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 조리 방법과 팁:  
- 준비 재료: 대파(흰 부분 위주, 넉넉하게), 베이컨(손바닥만큼 한 줌), 찬밥 한 공기, 계란 2개, 식용유, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파를 송송 썰고, 베이컨도 먹기 좋은 크기로 자릅니다.  
  2. 팬에 식용유를 두르고 대파를 먼저 볶아 파기름을 내줍니다.  
  3. 대파가 숨이 죽으면 베이컨을 넣고 같이 볶아 풍미를 더합니다.  
  4. 베이컨이 익으면 찬밥을 넣고 밥알이 풀어지게 고루 섞어가며 볶습니다.  
  5. 밥이 전체적으로 뜨거워졌을 때 굴소스 1스푼을 넣어 간을 맞춥니다.  
  6. 팬 한쪽에 밥을 밀어 두고, 남는 공간에 계란 2개를 풀어 스크램블 하듯 저어 익힌 뒤 밥과 합쳐 볶아줍니다.  
  7. 마지막에 참기름을 한 바퀴 두르고 불을 끕니다. 원하는 경우 통깨를 뿌려 마무리합니다.  
  *TIP: 밥은 찬밥을 사용하는 게 퍼지지 않고 볶기 좋습니다. 베이컨 대신 햄이나 닭가슴살 큐브도 활용할 수 있습니다.  
  *이 레시피는 밥이 들어가긴 하지만, 계란과 베이컨, 대파로 주 재료가 구성되어 아침에 속이 부담스럽지 않고, 빠르게 조리할 수 있습니다[4].

**새우 알레르기 정보 확인:**  
해당 레시피에는 새우가 포함되지 않아 안전합니다.  
또한 요청에 따라 한식 스타일의 아침 메뉴이며, 간편하고 속 부담을 줄이기 위해 굴소스 양을 조절하거나 밥의 양을 줄여도 좋습니다.
2025-06-27 16:31:06.523 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:31:06.527 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:31:06.528 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Pattern 4 (4. 상세한 조리 방법과 팁) not found
2025-06-27 16:31:06.528 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Pattern 5 (5. 조리 방법) not found
2025-06-27 16:31:06.529 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Markdown pattern (**상세한 조리 방법**) not found
2025-06-27 16:31:06.529 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method (Flexible pattern): 2. 조리 시간: 15분  
3. 난이도: 하  
4. 조리 방법과 팁:  
- 준비 재료: 대파(흰 부분 위주, 넉넉하게), 베이컨(손바닥만큼 한 줌), 찬밥 한 공기, 계란 2
2025-06-27 16:31:06.529 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
2. 조리 시간: 15분  
3. 난이도: 하  
4. 조리 방법과 팁:  
- 준비 재료: 대파(흰 부분 위주, 넉넉하게), 베이컨(손바닥만큼 한 줌), 찬밥 한 공기, 계란 2개, 식용유, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파를 송송 썰고, 베이컨도 먹기 좋은 크기로 자릅니다.  
  2. 팬에 식용유를 두르고 대파를 먼저 볶아 파기름을 내줍니다.  
  3. 대파가 숨이 죽으면 베이컨을 넣고 같이 볶아 풍미를 더합니다.  
  4. 베이컨이 익으면 찬밥을 넣고 밥알이 풀어지게 고루 섞어가며 볶습니다.  
  5. 밥이 전체적으로 뜨거워졌을 때 굴소스 1스푼을 넣어 간을 맞춥니다.  
  6. 팬 한쪽에 밥을 밀어 두고, 남는 공간에 계란 2개를 풀어 스크램블 하듯 저어 익힌 뒤 밥과 합쳐 볶아줍니다.  
  7. 마지막에 참기름을 한 바퀴 두르고 불을 끕니다. 원하는 경우 통깨를 뿌려 마무리합니다.  
  *TIP: 밥은 찬밥을 사용하는 게 퍼지지 않고 볶기 좋습니다. 베이컨 대신 햄이나 닭가슴살 큐브도 활용할 수 있습니다.  
  *이 레시피는 밥이 들어가긴 하지만, 계란과 베이컨, 대파로 주 재료가 구성되어 아침에 속이 부담스럽지 않고, 빠르게 조리할 수 있습니다[4].
2025-06-27 16:31:06.530 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 대파베이컨볶음밥
2025-06-27 16:31:06.561 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:31:06.569 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 48
2025-06-27 16:31:06.569 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 16:31:06.569 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 대파베이컨볶음밥
2025-06-27 16:31:06.569 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 조리 방법:
2. 조리 시간: 15분  
3. 난이도: 하  
4. 조리 방법과 팁:  
- 준비 재료: 대파(흰 부분 위주, 넉넉하게), 베이컨(손바닥만큼 한 줌), 찬밥 한 공기, 계란 2개, 식용유, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파를 송송 썰고, 베이컨도 먹기 좋은 크기로 자릅니다.  
  2. 팬에 식용유를 두르고 대파를 먼저 볶아 파기름을 내줍니다.  
  3. 대파가 숨이 죽으면 베이컨을 넣고 같이 볶아 풍미를 더합니다.  
  4. 베이컨이 익으면 찬밥을 넣고 밥알이 풀어지게 고루 섞어가며 볶습니다.  
  5. 밥이 전체적으로 뜨거워졌을 때 굴소스 1스푼을 넣어 간을 맞춥니다.  
  6. 팬 한쪽에 밥을 밀어 두고, 남는 공간에 계란 2개를 풀어 스크램블 하듯 저어 익힌 뒤 밥과 합쳐 볶아줍니다.  
  7. 마지막에 참기름을 한 바퀴 두르고 불을 끕니다. 원하는 경우 통깨를 뿌려 마무리합니다.  
  *TIP: 밥은 찬밥을 사용하는 게 퍼지지 않고 볶기 좋습니다. 베이컨 대신 햄이나 닭가슴살 큐브도 활용할 수 있습니다.  
  *이 레시피는 밥이 들어가긴 하지만, 계란과 베이컨, 대파로 주 재료가 구성되어 아침에 속이 부담스럽지 않고, 빠르게 조리할 수 있습니다[4].
2025-06-27 16:31:06.569 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 16:31:06.571 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:35:48.315 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:35:48.326 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:35:48.335 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:35:48.338 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:35:48.343 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:35:48.344 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:35:48.344 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
2025-06-27 16:35:48.344 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:35:48.346 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:35:48.353 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:35:48.368 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:35:48.369 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:35:48.370 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:35:48.372 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:35:48.373 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:35:48.373 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:35:48.373 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:35:48.373 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:35:48.374 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:35:48.374 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:35:48.374 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:35:48.374 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:35:48.374 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751009748374
2025-06-27 16:35:48.374 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:35:48.374 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 내일 내 결혼이 있어서 결혼식장 가기전에 밥한끼 하려하는데 뭐 먹는게 좋을까?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751009748374)}], model=sonar-pro}
2025-06-27 16:36:16.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:36:16.124 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Response: {id=509e461f-81d5-4cc3-a91e-6253a36db530, model=sonar-pro, created=1751009776, usage={prompt_tokens=1506, completion_tokens=656, total_tokens=2162, search_context_size=low}, citations=[https://blog.naver.com/mggmlwnd/222177746949, https://www.youtube.com/watch?v=EEl-vkUvBu8, https://m.10000recipe.com/recipe/list.html?q=%EB%A9%94%EB%89%B4%EC%B6%94%EC%B2%9C, https://blog.naver.com/cutesiwoo/222172007876, https://m.10000recipe.com/recipe/list.html?q=%EB%A9%B4%EC%9A%94%EB%A6%AC%EB%A9%94%EB%89%B4%EC%B6%94%EC%B2%9C], search_results=[{title=점심메뉴 추천 모음 12가지 간단점심 한그릇요리 베스트 - 네이버 블로그, url=https://blog.naver.com/mggmlwnd/222177746949, date=2020-12-18, last_updated=2025-06-14}, {title=[recipe] 혼자 먹을 때 대충먹지 말고, 나만을 위한 멋진 점심 식사를 ..., url=https://www.youtube.com/watch?v=EEl-vkUvBu8, date=2024-04-01, last_updated=2025-04-19}, {title=메뉴추천 - 요리를 즐겁게~ 만개의레시피, url=https://m.10000recipe.com/recipe/list.html?q=%EB%A9%94%EB%89%B4%EC%B6%94%EC%B2%9C, date=null, last_updated=null}, {title=홈파티음식, 집에서 간단한 요리 레시피 30가지 - 네이버 블로그, url=https://blog.naver.com/cutesiwoo/222172007876, date=2020-12-13, last_updated=2025-06-13}, {title=면요리메뉴추천 - 만개의레시피, url=https://m.10000recipe.com/recipe/list.html?q=%EB%A9%B4%EC%9A%94%EB%A6%AC%EB%A9%94%EB%89%B4%EC%B6%94%EC%B2%9C, date=null, last_updated=null}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 소고기미역국 & 구운두부 한접시  
2. 조리 시간: 20분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:

**추천 이유:**  
결혼식 당일 부담없이 속을 든든하게 해주고 자극적이지 않아 아침에 배가 아픈 분에게 잘 맞는 한식 메뉴입니다. 미역국은 결혼식의 의미도 담고 있어 특별한 하루의 시작에 잘 어울립니다. 새우 알레르기도 피해 안전합니다.

**재료:**  
- (미역국)  
  - 건미역 5g  
  - 소고기(국거리) 60~80g  
  - 참기름 1큰술  
  - 국간장 1큰술  
  - 다진 마늘 0.5작은술  
  - 소금 약간  
  - 물 700ml

- (구운두부)  
  - 두부 반 모  
  - 소금, 후춧가루 약간  
  - 식용유 약간  
  - 간장, 참기름, 깨소금(양념 간장용, 선택)

**조리 방법:**  
1. 미역은 10분간 찬물에 불린 후 깨끗이 씻어 물기를 살짝 짠다.
2. 냄비에 참기름을 두르고 소고기를 살짝 볶은 뒤, 불린 미역을 넣어 함께 2~3분 볶는다.
3. 국간장과 다진 마늘을 넣고 섞은 뒤, 물을 부어 끓인다.
4. 한소끔 끓으면 중간 불로 줄여 10분간 뭉근하게 끓이고 마지막에 소금으로 간을 한다.
5. 두부는 키친타월로 물기를 제거한 뒤 1cm 두께로 썬다.
6. 팬에 식용유를 두르고 중~약불에서 두부를 노릇하게 앞뒤로 구운 후 소금, 후춧가루를 뿌린다.
7. 기호에 따라 간장+참기름+깨소금으로 간장 양념장을 곁들인다.

**팁:**  
- 미역국은 미리 끓여 놓고 아침에 데워 먹어도 소화가 더 잘 됩니다.
- 두부 대신 계란찜, 삶은 달걀, 바나나 등 간단한 사이드도 곁들이기 좋습니다.
- 자극적인 양념은 피하고 천천히 꼭꼭 씹어 드시길 권장합니다.

**알레르기 정보:**  
새우 등 갑각류가 포함되지 않은 레시피로 안전하게 드실 수 있습니다.  
결혼식장 가기 전, 간편하고 속 편하게 한끼 챙기시기에 아주 적합한 메뉴입니다.}, delta={role=assistant, content=}}]}
2025-06-27 16:36:16.126 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:36:16.126 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 소고기미역국 & 구운두부 한접시  
2. 조리 시간: 20분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:

**추천 이유:**  
결혼식 당일 부담없이 속을 든든하게 해주고 자극적이지 않아 아침에 배가 아픈 분에게 잘 맞는 한식 메뉴입니다. 미역국은 결혼식의 의미도 담고 있어 특별한 하루의 시작에 잘 어울립니다. 새우 알레르기도 피해 안전합니다.

**재료:**  
- (미역국)  
  - 건미역 5g  
  - 소고기(국거리) 60~80g  
  - 참기름 1큰술  
  - 국간장 1큰술  
  - 다진 마늘 0.5작은술  
  - 소금 약간  
  - 물 700ml

- (구운두부)  
  - 두부 반 모  
  - 소금, 후춧가루 약간  
  - 식용유 약간  
  - 간장, 참기름, 깨소금(양념 간장용, 선택)

**조리 방법:**  
1. 미역은 10분간 찬물에 불린 후 깨끗이 씻어 물기를 살짝 짠다.
2. 냄비에 참기름을 두르고 소고기를 살짝 볶은 뒤, 불린 미역을 넣어 함께 2~3분 볶는다.
3. 국간장과 다진 마늘을 넣고 섞은 뒤, 물을 부어 끓인다.
4. 한소끔 끓으면 중간 불로 줄여 10분간 뭉근하게 끓이고 마지막에 소금으로 간을 한다.
5. 두부는 키친타월로 물기를 제거한 뒤 1cm 두께로 썬다.
6. 팬에 식용유를 두르고 중~약불에서 두부를 노릇하게 앞뒤로 구운 후 소금, 후춧가루를 뿌린다.
7. 기호에 따라 간장+참기름+깨소금으로 간장 양념장을 곁들인다.

**팁:**  
- 미역국은 미리 끓여 놓고 아침에 데워 먹어도 소화가 더 잘 됩니다.
- 두부 대신 계란찜, 삶은 달걀, 바나나 등 간단한 사이드도 곁들이기 좋습니다.
- 자극적인 양념은 피하고 천천히 꼭꼭 씹어 드시길 권장합니다.

**알레르기 정보:**  
새우 등 갑각류가 포함되지 않은 레시피로 안전하게 드실 수 있습니다.  
결혼식장 가기 전, 간편하고 속 편하게 한끼 챙기시기에 아주 적합한 메뉴입니다.
2025-06-27 16:36:16.126 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:36:16.126 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:36:16.126 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 소고기미역국 & 구운두부 한접시  
2. 조리 시간: 20분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:

**추천 이유:**  
결혼식 당일 부담없이 속을 든든하게 해주고 자극적이지 않아 아침에 배가 아픈 분에게 잘 맞는 한식 메뉴입니다. 미역국은 결혼식의 의미도 담고 있어 특별한 하루의 시작에 잘 어울립니다. 새우 알레르기도 피해 안전합니다.

**재료:**  
- (미역국)  
  - 건미역 5g  
  - 소고기(국거리) 60~80g  
  - 참기름 1큰술  
  - 국간장 1큰술  
  - 다진 마늘 0.5작은술  
  - 소금 약간  
  - 물 700ml

- (구운두부)  
  - 두부 반 모  
  - 소금, 후춧가루 약간  
  - 식용유 약간  
  - 간장, 참기름, 깨소금(양념 간장용, 선택)

**조리 방법:**  
1. 미역은 10분간 찬물에 불린 후 깨끗이 씻어 물기를 살짝 짠다.
2. 냄비에 참기름을 두르고 소고기를 살짝 볶은 뒤, 불린 미역을 넣어 함께 2~3분 볶는다.
3. 국간장과 다진 마늘을 넣고 섞은 뒤, 물을 부어 끓인다.
4. 한소끔 끓으면 중간 불로 줄여 10분간 뭉근하게 끓이고 마지막에 소금으로 간을 한다.
5. 두부는 키친타월로 물기를 제거한 뒤 1cm 두께로 썬다.
6. 팬에 식용유를 두르고 중~약불에서 두부를 노릇하게 앞뒤로 구운 후 소금, 후춧가루를 뿌린다.
7. 기호에 따라 간장+참기름+깨소금으로 간장 양념장을 곁들인다.

**팁:**  
- 미역국은 미리 끓여 놓고 아침에 데워 먹어도 소화가 더 잘 됩니다.
- 두부 대신 계란찜, 삶은 달걀, 바나나 등 간단한 사이드도 곁들이기 좋습니다.
- 자극적인 양념은 피하고 천천히 꼭꼭 씹어 드시길 권장합니다.

**알레르기 정보:**  
새우 등 갑각류가 포함되지 않은 레시피로 안전하게 드실 수 있습니다.  
결혼식장 가기 전, 간편하고 속 편하게 한끼 챙기시기에 아주 적합한 메뉴입니다.
2025-06-27 16:36:16.130 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:36:16.136 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:36:16.137 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Pattern 4 (4. 상세한 조리 방법과 팁) not found
2025-06-27 16:36:16.138 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Pattern 5 (5. 조리 방법) not found
2025-06-27 16:36:16.138 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Markdown pattern (**상세한 조리 방법**) not found
2025-06-27 16:36:16.138 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method (Flexible pattern): 2. 조리 시간: 20분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:
2025-06-27 16:36:16.138 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
2. 조리 시간: 20분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:
2025-06-27 16:36:16.138 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 소고기미역국 & 구운두부 한접시
2025-06-27 16:36:16.141 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:36:16.161 [http-nio-8080-exec-2] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1406, SQLState: 22001
2025-06-27 16:36:16.161 [http-nio-8080-exec-2] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Data truncation: Data too long for column 'title' at row 1
2025-06-27 16:36:16.173 [http-nio-8080-exec-2] ERROR a.s.k.p.service.PerplexityService - Error saving recipe or recipe ingredients
org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy153.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:503)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy140.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy140.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 189 common frames omitted
2025-06-27 16:36:16.176 [http-nio-8080-exec-2] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:509)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy153.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:503)
	... 125 common frames omitted
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy140.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy140.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 189 common frames omitted
2025-06-27 16:36:16.183 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:128)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 16:36:34.896 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:36:34.902 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:36:34.928 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:36:34.936 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:36:34.943 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:36:34.943 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:36:34.943 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 다시 말해줄래?
2025-06-27 16:36:34.943 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:36:34.945 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:36:34.952 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 다시 말해줄래?
2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 16:36:34.955 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:36:34.956 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:36:34.956 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:36:34.956 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:36:34.960 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:36:34.962 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:36:34.963 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:36:34.963 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:36:34.963 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:36:34.963 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:36:34.963 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:36:34.963 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:36:34.963 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:36:34.964 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751009794964
2025-06-27 16:36:34.964 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:36:34.964 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751009794964)}], model=sonar-pro}
2025-06-27 16:36:40.228 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:36:40.228 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Response: {id=4d3378c2-b279-4505-80e0-00980ac348cf, model=sonar-pro, created=1751009800, usage={prompt_tokens=1464, completion_tokens=392, total_tokens=1856, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/xhtnfl/222891013968, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/watch?v=GyJS53u3U-c], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=아침밥 9가지, 뚝딱 차리는 국과 반찬이 있는 아침식단. - 블로그, url=https://blog.naver.com/xhtnfl/222891013968, date=2022-10-04, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요! 일주일 아침밥 7 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=아침밥 9가지. 국과 반찬이 있는 아침식단 - YouTube, url=https://www.youtube.com/watch?v=GyJS53u3U-c, date=2022-10-03, last_updated=2025-05-25}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파(많이), 베이컨(한 줌), 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파는 송송 썰고, 베이컨도 적당한 크기로 자릅니다.  
  2. 기름을 두른 팬에 대파를 먼저 볶다가, 베이컨을 넣어 함께 볶습니다.  
  3. 베이컨이 모두 익으면 찬밥을 넣고 밥알이 잘 풀어질 때까지 섞어줍니다.  
  4. 굴소스 1스푼을 넣고 볶다가, 밥을 한쪽으로 밀고 계란 2개를 풀어 스크램블 해줍니다.  
  5. 밥과 스크램블한 계란을 잘 섞고 마지막에 참기름을 뿌려 마무리합니다.  
- 팁: 대파를 넉넉히 넣으면 파향이 살아나고, 베이컨 대신 햄을 사용해도 좋습니다. 아침에 부담 없이 가볍고 빠르게 한 끼를 해결할 수 있습니다.  
- 추천 사유: 새우 알레르기가 없으며, 아침에 밥을 먹고 속이 불편하다면 밥양을 줄여 조절하거나, 계란 위주로 섭취하셔도 좋습니다.  
[4]}, delta={role=assistant, content=}}]}
2025-06-27 16:36:40.228 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:36:40.228 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파(많이), 베이컨(한 줌), 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파는 송송 썰고, 베이컨도 적당한 크기로 자릅니다.  
  2. 기름을 두른 팬에 대파를 먼저 볶다가, 베이컨을 넣어 함께 볶습니다.  
  3. 베이컨이 모두 익으면 찬밥을 넣고 밥알이 잘 풀어질 때까지 섞어줍니다.  
  4. 굴소스 1스푼을 넣고 볶다가, 밥을 한쪽으로 밀고 계란 2개를 풀어 스크램블 해줍니다.  
  5. 밥과 스크램블한 계란을 잘 섞고 마지막에 참기름을 뿌려 마무리합니다.  
- 팁: 대파를 넉넉히 넣으면 파향이 살아나고, 베이컨 대신 햄을 사용해도 좋습니다. 아침에 부담 없이 가볍고 빠르게 한 끼를 해결할 수 있습니다.  
- 추천 사유: 새우 알레르기가 없으며, 아침에 밥을 먹고 속이 불편하다면 밥양을 줄여 조절하거나, 계란 위주로 섭취하셔도 좋습니다.  
[4]
2025-06-27 16:36:40.228 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:36:40.228 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:36:40.228 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파(많이), 베이컨(한 줌), 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파는 송송 썰고, 베이컨도 적당한 크기로 자릅니다.  
  2. 기름을 두른 팬에 대파를 먼저 볶다가, 베이컨을 넣어 함께 볶습니다.  
  3. 베이컨이 모두 익으면 찬밥을 넣고 밥알이 잘 풀어질 때까지 섞어줍니다.  
  4. 굴소스 1스푼을 넣고 볶다가, 밥을 한쪽으로 밀고 계란 2개를 풀어 스크램블 해줍니다.  
  5. 밥과 스크램블한 계란을 잘 섞고 마지막에 참기름을 뿌려 마무리합니다.  
- 팁: 대파를 넉넉히 넣으면 파향이 살아나고, 베이컨 대신 햄을 사용해도 좋습니다. 아침에 부담 없이 가볍고 빠르게 한 끼를 해결할 수 있습니다.  
- 추천 사유: 새우 알레르기가 없으며, 아침에 밥을 먹고 속이 불편하다면 밥양을 줄여 조절하거나, 계란 위주로 섭취하셔도 좋습니다.  
[4]
2025-06-27 16:36:40.231 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:36:40.237 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:36:40.238 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Pattern 4 (4. 상세한 조리 방법과 팁) not found
2025-06-27 16:36:40.238 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Pattern 5 (5. 조리 방법) not found
2025-06-27 16:36:40.238 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Markdown pattern (**상세한 조리 방법**) not found
2025-06-27 16:36:40.239 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method (Flexible pattern): 2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파(많이), 베이컨(한 줌), 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스
2025-06-27 16:36:40.239 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파(많이), 베이컨(한 줌), 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파는 송송 썰고, 베이컨도 적당한 크기로 자릅니다.  
  2. 기름을 두른 팬에 대파를 먼저 볶다가, 베이컨을 넣어 함께 볶습니다.  
  3. 베이컨이 모두 익으면 찬밥을 넣고 밥알이 잘 풀어질 때까지 섞어줍니다.  
  4. 굴소스 1스푼을 넣고 볶다가, 밥을 한쪽으로 밀고 계란 2개를 풀어 스크램블 해줍니다.  
  5. 밥과 스크램블한 계란을 잘 섞고 마지막에 참기름을 뿌려 마무리합니다.  
- 팁: 대파를 넉넉히 넣으면 파향이 살아나고, 베이컨 대신 햄을 사용해도 좋습니다. 아침에 부담 없이 가볍고 빠르게 한 끼를 해결할 수 있습니다.  
- 추천 사유: 새우 알레르기가 없으며, 아침에 밥을 먹고 속이 불편하다면 밥양을 줄여 조절하거나, 계란 위주로 섭취하셔도 좋습니다.  
[4]
2025-06-27 16:36:40.240 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 대파베이컨볶음밥
2025-06-27 16:36:40.241 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:36:40.246 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 50
2025-06-27 16:36:40.246 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 16:36:40.247 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - 제목: 대파베이컨볶음밥
2025-06-27 16:36:40.247 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - 설명: 조리 방법:
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파(많이), 베이컨(한 줌), 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
  1. 대파는 송송 썰고, 베이컨도 적당한 크기로 자릅니다.  
  2. 기름을 두른 팬에 대파를 먼저 볶다가, 베이컨을 넣어 함께 볶습니다.  
  3. 베이컨이 모두 익으면 찬밥을 넣고 밥알이 잘 풀어질 때까지 섞어줍니다.  
  4. 굴소스 1스푼을 넣고 볶다가, 밥을 한쪽으로 밀고 계란 2개를 풀어 스크램블 해줍니다.  
  5. 밥과 스크램블한 계란을 잘 섞고 마지막에 참기름을 뿌려 마무리합니다.  
- 팁: 대파를 넉넉히 넣으면 파향이 살아나고, 베이컨 대신 햄을 사용해도 좋습니다. 아침에 부담 없이 가볍고 빠르게 한 끼를 해결할 수 있습니다.  
- 추천 사유: 새우 알레르기가 없으며, 아침에 밥을 먹고 속이 불편하다면 밥양을 줄여 조절하거나, 계란 위주로 섭취하셔도 좋습니다.  
[4]
2025-06-27 16:36:40.247 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 16:36:40.249 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:37:02.480 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:37:02.485 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:37:02.489 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:37:02.495 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:37:02.498 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:37:02.498 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:37:02.498 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 다시 말해줄래?
2025-06-27 16:37:02.498 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:37:02.499 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:37:02.505 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:37:02.507 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:37:02.507 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 다시 말해줄래?
2025-06-27 16:37:02.507 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:37:02.507 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:37:02.507 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:37:02.507 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:37:02.508 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:37:02.508 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 16:37:02.508 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:37:02.508 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:37:02.508 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:37:02.508 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:37:02.512 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:37:02.514 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:37:02.514 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:37:02.514 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:37:02.514 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:37:02.514 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:37:02.514 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:37:02.514 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:37:02.514 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:37:02.514 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751009822514
2025-06-27 16:37:02.514 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:37:02.514 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 다시 말해줄래?
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751009822514)}], model=sonar-pro}
2025-06-27 16:37:09.843 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:37:09.844 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Response: {id=8e9e8db0-3658-40d2-9260-95c9421949a1, model=sonar-pro, created=1751009829, usage={prompt_tokens=1464, completion_tokens=418, total_tokens=1882, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/r040415/222082579451, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/playlist?list=PLo3Tol4ym6Et_vouLL1YB6xvw1yqrj0Cd], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요!, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=간단한 아침식사 메뉴 집밥이 최고! 주간밥상 일주일식단, url=https://blog.naver.com/r040415/222082579451, date=2020-09-07, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=간단한 아침&저녁메뉴, url=https://www.youtube.com/playlist?list=PLo3Tol4ym6Et_vouLL1YB6xvw1yqrj0Cd, date=null, last_updated=null}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파 많이, 베이컨 한 줌, 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
   1. 대파를 송송 썰고, 베이컨도 한입 크기로 자릅니다.  
   2. 팬에 기름을 두르고 대파를 먼저 볶아 향을 내줍니다.  
   3. 베이컨을 넣어 함께 볶습니다.  
   4. 베이컨이 모두 익으면 찬밥을 넣어 밥이 고슬고슬하게 풀릴 때까지 볶습니다.  
   5. 굴소스를 넣어 간을 맞춥니다.  
   6. 한쪽에 밥을 밀어두고, 계란 2개를 풀어 스크램블을 만든 뒤 밥과 섞습니다.  
   7. 마지막에 참기름을 뿌려 고소함을 더해줍니다.  
- 팁: 대파를 충분히 볶아주면 볶음밥의 향이 한층 살아납니다. 취향에 따라 후추를 살짝 뿌려도 좋습니다.  

이 레시피는 새우(알레르기) 재료가 포함되어 있지 않으므로 안심하고 드실 수 있습니다.  
볶음밥 형태로 부담 없이 먹을 수 있고, 한식 재료와 조리법을 활용해 속에도 부담이 덜하며 아침을 피하는 분들께도 비교적 소화가 쉬운 메뉴입니다[4].}, delta={role=assistant, content=}}]}
2025-06-27 16:37:09.845 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:37:09.845 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파 많이, 베이컨 한 줌, 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
   1. 대파를 송송 썰고, 베이컨도 한입 크기로 자릅니다.  
   2. 팬에 기름을 두르고 대파를 먼저 볶아 향을 내줍니다.  
   3. 베이컨을 넣어 함께 볶습니다.  
   4. 베이컨이 모두 익으면 찬밥을 넣어 밥이 고슬고슬하게 풀릴 때까지 볶습니다.  
   5. 굴소스를 넣어 간을 맞춥니다.  
   6. 한쪽에 밥을 밀어두고, 계란 2개를 풀어 스크램블을 만든 뒤 밥과 섞습니다.  
   7. 마지막에 참기름을 뿌려 고소함을 더해줍니다.  
- 팁: 대파를 충분히 볶아주면 볶음밥의 향이 한층 살아납니다. 취향에 따라 후추를 살짝 뿌려도 좋습니다.  

이 레시피는 새우(알레르기) 재료가 포함되어 있지 않으므로 안심하고 드실 수 있습니다.  
볶음밥 형태로 부담 없이 먹을 수 있고, 한식 재료와 조리법을 활용해 속에도 부담이 덜하며 아침을 피하는 분들께도 비교적 소화가 쉬운 메뉴입니다[4].
2025-06-27 16:37:09.845 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:37:09.845 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:37:09.845 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 대파베이컨볶음밥  
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파 많이, 베이컨 한 줌, 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
   1. 대파를 송송 썰고, 베이컨도 한입 크기로 자릅니다.  
   2. 팬에 기름을 두르고 대파를 먼저 볶아 향을 내줍니다.  
   3. 베이컨을 넣어 함께 볶습니다.  
   4. 베이컨이 모두 익으면 찬밥을 넣어 밥이 고슬고슬하게 풀릴 때까지 볶습니다.  
   5. 굴소스를 넣어 간을 맞춥니다.  
   6. 한쪽에 밥을 밀어두고, 계란 2개를 풀어 스크램블을 만든 뒤 밥과 섞습니다.  
   7. 마지막에 참기름을 뿌려 고소함을 더해줍니다.  
- 팁: 대파를 충분히 볶아주면 볶음밥의 향이 한층 살아납니다. 취향에 따라 후추를 살짝 뿌려도 좋습니다.  

이 레시피는 새우(알레르기) 재료가 포함되어 있지 않으므로 안심하고 드실 수 있습니다.  
볶음밥 형태로 부담 없이 먹을 수 있고, 한식 재료와 조리법을 활용해 속에도 부담이 덜하며 아침을 피하는 분들께도 비교적 소화가 쉬운 메뉴입니다[4].
2025-06-27 16:37:09.855 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:37:09.859 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:37:09.859 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Pattern 4 (4. 상세한 조리 방법과 팁) not found
2025-06-27 16:37:09.859 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Pattern 5 (5. 조리 방법) not found
2025-06-27 16:37:09.859 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Markdown pattern (**상세한 조리 방법**) not found
2025-06-27 16:37:09.859 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method (Flexible pattern): 2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파 많이, 베이컨 한 줌, 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼 
2025-06-27 16:37:09.859 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파 많이, 베이컨 한 줌, 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
   1. 대파를 송송 썰고, 베이컨도 한입 크기로 자릅니다.  
   2. 팬에 기름을 두르고 대파를 먼저 볶아 향을 내줍니다.  
   3. 베이컨을 넣어 함께 볶습니다.  
   4. 베이컨이 모두 익으면 찬밥을 넣어 밥이 고슬고슬하게 풀릴 때까지 볶습니다.  
   5. 굴소스를 넣어 간을 맞춥니다.  
   6. 한쪽에 밥을 밀어두고, 계란 2개를 풀어 스크램블을 만든 뒤 밥과 섞습니다.  
   7. 마지막에 참기름을 뿌려 고소함을 더해줍니다.  
- 팁: 대파를 충분히 볶아주면 볶음밥의 향이 한층 살아납니다. 취향에 따라 후추를 살짝 뿌려도 좋습니다.
2025-06-27 16:37:09.859 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 대파베이컨볶음밥
2025-06-27 16:37:09.861 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:37:09.863 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 52
2025-06-27 16:37:09.863 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 16:37:09.863 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 제목: 대파베이컨볶음밥
2025-06-27 16:37:09.863 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 설명: 조리 방법:
2. 조리 시간: 15분  
3. 난이도: 하  
4. 상세한 조리 방법과 팁:  
- 준비 재료: 대파 많이, 베이컨 한 줌, 찬밥, 기름, 계란 2개, 참기름, 굴소스 1스푼  
- 만드는 법:  
   1. 대파를 송송 썰고, 베이컨도 한입 크기로 자릅니다.  
   2. 팬에 기름을 두르고 대파를 먼저 볶아 향을 내줍니다.  
   3. 베이컨을 넣어 함께 볶습니다.  
   4. 베이컨이 모두 익으면 찬밥을 넣어 밥이 고슬고슬하게 풀릴 때까지 볶습니다.  
   5. 굴소스를 넣어 간을 맞춥니다.  
   6. 한쪽에 밥을 밀어두고, 계란 2개를 풀어 스크램블을 만든 뒤 밥과 섞습니다.  
   7. 마지막에 참기름을 뿌려 고소함을 더해줍니다.  
- 팁: 대파를 충분히 볶아주면 볶음밥의 향이 한층 살아납니다. 취향에 따라 후추를 살짝 뿌려도 좋습니다.
2025-06-27 16:37:09.863 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 16:37:09.865 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:53:13.936 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 16:53:13.947 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:53:13.954 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 16:53:13.957 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 16:53:13.963 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:53:13.963 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:53:13.963 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 덮밥 레시피 알려줘
2025-06-27 16:53:13.963 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:53:13.964 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 16:53:13.972 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 덮밥 레시피 알려줘
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:53:13.986 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 16:53:13.989 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:53:13.991 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 16:53:13.991 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:53:13.991 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 16:53:13.991 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 16:53:13.991 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 16:53:13.991 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:53:13.991 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 16:53:13.991 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 16:53:13.991 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751010793991
2025-06-27 16:53:13.991 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 16:53:13.992 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751010793991)}], model=sonar-pro}
2025-06-27 16:53:22.985 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 16:53:22.986 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Response: {id=870b6e4a-d2c6-4a03-ae87-85d081f774c6, model=sonar-pro, created=1751010802, usage={prompt_tokens=1394, completion_tokens=737, total_tokens=2131, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6882381, https://blog.naver.com/starship89/223451205222, https://blog.naver.com/catseyesung/222509655920, https://www.10000recipe.com/recipe/6836534, https://www.youtube.com/watch?v=njnISC6D-ng], search_results=[{title=제육볶음 만드는 법 :: 제육덮밥 만들기 - 만개의레시피, url=https://www.10000recipe.com/recipe/6882381, date=null, last_updated=null}, {title=기사식당 제육볶음 레시피 제육덮밥 만드는법 제육볶음 양념장 만들기 ..., url=https://blog.naver.com/starship89/223451205222, date=2024-05-20, last_updated=2025-03-09}, {title=매콤한 제육덮밥 만들기. 맛있게 비벼 먹는 한그릇 요리. : 네이버 블로그, url=https://blog.naver.com/catseyesung/222509655920, date=2021-09-18, last_updated=null}, {title=백종원 제육볶음 응용해, '제육덮밥' 만들기! - 만개의레시피, url=https://www.10000recipe.com/recipe/6836534, date=null, last_updated=null}, {title=이렇게 만드시면 제육덮밥 고수 소리 듣습니다 ㅣ100 ... - YouTube, url=https://www.youtube.com/watch?v=njnISC6D-ng, date=2025-03-02, last_updated=2025-06-02}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 제육 덮밥

2. 조리 시간: 약 25분

3. 난이도: 중

4. 상세한 조리 방법과 팁

**재료 (2~3인분 기준)**
- 돼지고기(목살 또는 대패 삼겹살) 500g
- 양파 1개
- 대파 1대
- 당근 1/4개
- 청양고추 또는 풋고추 2~3개
- (선택) 애호박, 버섯 약간
- 밥 2~3공기

**양념 재료**
- 간장 2스푼
- 고추장 1스푼
- 고춧가루 2~3스푼
- 설탕 1~2스푼
- 미림(맛술) 1~2스푼
- 다진 마늘 1스푼
- 다진 생강 약간(생략 가능)
- 굴소스 1스푼(없으면 생략 가능)
- 물엿 1~2스푼(또는 올리고당)
- 후추 약간
- 참기름/참깨 약간

**조리 방법**
1. 돼지고기는 먹기 좋은 크기로 자르고, 양파·당근·대파·고추 등은 채를 썰어 준비합니다.
2. 볼에 고기와 양념 재료(간장, 고추장, 고춧가루, 설탕, 미림, 다진 마늘, 굴소스, 물엿, 후추, 다진 생강)를 넣어 잘 버무려 10~15분간 재웁니다.
3. 달군 팬에 고기를 먼저 볶다가, 고기가 반쯤 익으면 양파, 당근 등 손질한 야채를 넣고 함께 볶습니다.
4. 수분이 너무 많으면 중불~센불로 볶아 양념이 졸여지도록 하고, 필요시 물 100~200ml 넣어 촉촉함을 조절하세요.
5. 마지막에 대파, 고추, 참기름, 참깨를 넣어 한 번 더 볶아줍니다.
6. 뜨거운 밥 위에 볶은 제육을 올려 덮밥 스타일로 완성합니다.

**조리 팁**
- 냉장고에 있는 버섯, 애호박 등 야채를 추가해서 넣어도 좋습니다.
- 고기는 앞다리살, 목살, 대패 등 기름기가 적당히 있는 부위를 사용해야 풍미가 좋고 식감이 연합니다.
- 국물이 거의 없이 바싹하게 볶아야 덮밥에 어울립니다.
- 매운맛을 원하면 청양고추를 추가하거나 고춧가루 양을 늘릴 수 있습니다[1][2][5].

**알레르기 안내**
- 요청하신 제육덮밥 레시피에는 새우가 들어가지 않으므로 알레르기 걱정 없이 섭취하실 수 있습니다.

정확한 요청에 맞는 제육 덮밥 레시피만 안내드렸습니다.}, delta={role=assistant, content=}}]}
2025-06-27 16:53:22.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 16:53:22.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 제육 덮밥

2. 조리 시간: 약 25분

3. 난이도: 중

4. 상세한 조리 방법과 팁

**재료 (2~3인분 기준)**
- 돼지고기(목살 또는 대패 삼겹살) 500g
- 양파 1개
- 대파 1대
- 당근 1/4개
- 청양고추 또는 풋고추 2~3개
- (선택) 애호박, 버섯 약간
- 밥 2~3공기

**양념 재료**
- 간장 2스푼
- 고추장 1스푼
- 고춧가루 2~3스푼
- 설탕 1~2스푼
- 미림(맛술) 1~2스푼
- 다진 마늘 1스푼
- 다진 생강 약간(생략 가능)
- 굴소스 1스푼(없으면 생략 가능)
- 물엿 1~2스푼(또는 올리고당)
- 후추 약간
- 참기름/참깨 약간

**조리 방법**
1. 돼지고기는 먹기 좋은 크기로 자르고, 양파·당근·대파·고추 등은 채를 썰어 준비합니다.
2. 볼에 고기와 양념 재료(간장, 고추장, 고춧가루, 설탕, 미림, 다진 마늘, 굴소스, 물엿, 후추, 다진 생강)를 넣어 잘 버무려 10~15분간 재웁니다.
3. 달군 팬에 고기를 먼저 볶다가, 고기가 반쯤 익으면 양파, 당근 등 손질한 야채를 넣고 함께 볶습니다.
4. 수분이 너무 많으면 중불~센불로 볶아 양념이 졸여지도록 하고, 필요시 물 100~200ml 넣어 촉촉함을 조절하세요.
5. 마지막에 대파, 고추, 참기름, 참깨를 넣어 한 번 더 볶아줍니다.
6. 뜨거운 밥 위에 볶은 제육을 올려 덮밥 스타일로 완성합니다.

**조리 팁**
- 냉장고에 있는 버섯, 애호박 등 야채를 추가해서 넣어도 좋습니다.
- 고기는 앞다리살, 목살, 대패 등 기름기가 적당히 있는 부위를 사용해야 풍미가 좋고 식감이 연합니다.
- 국물이 거의 없이 바싹하게 볶아야 덮밥에 어울립니다.
- 매운맛을 원하면 청양고추를 추가하거나 고춧가루 양을 늘릴 수 있습니다[1][2][5].

**알레르기 안내**
- 요청하신 제육덮밥 레시피에는 새우가 들어가지 않으므로 알레르기 걱정 없이 섭취하실 수 있습니다.

정확한 요청에 맞는 제육 덮밥 레시피만 안내드렸습니다.
2025-06-27 16:53:22.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 16:53:22.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 16:53:22.988 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육 덮밥

2. 조리 시간: 약 25분

3. 난이도: 중

4. 상세한 조리 방법과 팁

**재료 (2~3인분 기준)**
- 돼지고기(목살 또는 대패 삼겹살) 500g
- 양파 1개
- 대파 1대
- 당근 1/4개
- 청양고추 또는 풋고추 2~3개
- (선택) 애호박, 버섯 약간
- 밥 2~3공기

**양념 재료**
- 간장 2스푼
- 고추장 1스푼
- 고춧가루 2~3스푼
- 설탕 1~2스푼
- 미림(맛술) 1~2스푼
- 다진 마늘 1스푼
- 다진 생강 약간(생략 가능)
- 굴소스 1스푼(없으면 생략 가능)
- 물엿 1~2스푼(또는 올리고당)
- 후추 약간
- 참기름/참깨 약간

**조리 방법**
1. 돼지고기는 먹기 좋은 크기로 자르고, 양파·당근·대파·고추 등은 채를 썰어 준비합니다.
2. 볼에 고기와 양념 재료(간장, 고추장, 고춧가루, 설탕, 미림, 다진 마늘, 굴소스, 물엿, 후추, 다진 생강)를 넣어 잘 버무려 10~15분간 재웁니다.
3. 달군 팬에 고기를 먼저 볶다가, 고기가 반쯤 익으면 양파, 당근 등 손질한 야채를 넣고 함께 볶습니다.
4. 수분이 너무 많으면 중불~센불로 볶아 양념이 졸여지도록 하고, 필요시 물 100~200ml 넣어 촉촉함을 조절하세요.
5. 마지막에 대파, 고추, 참기름, 참깨를 넣어 한 번 더 볶아줍니다.
6. 뜨거운 밥 위에 볶은 제육을 올려 덮밥 스타일로 완성합니다.

**조리 팁**
- 냉장고에 있는 버섯, 애호박 등 야채를 추가해서 넣어도 좋습니다.
- 고기는 앞다리살, 목살, 대패 등 기름기가 적당히 있는 부위를 사용해야 풍미가 좋고 식감이 연합니다.
- 국물이 거의 없이 바싹하게 볶아야 덮밥에 어울립니다.
- 매운맛을 원하면 청양고추를 추가하거나 고춧가루 양을 늘릴 수 있습니다[1][2][5].

**알레르기 안내**
- 요청하신 제육덮밥 레시피에는 새우가 들어가지 않으므로 알레르기 걱정 없이 섭취하실 수 있습니다.

정확한 요청에 맞는 제육 덮밥 레시피만 안내드렸습니다.
2025-06-27 16:53:22.995 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 16:53:22.997 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 16:53:22.998 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found method section: **재료 (2~3인분 기준)**
- 돼지고기(목살 또는 대패 삼겹살) 500g
- 양파 1개
- 대파 1대
- 당근 1/4개
- 청양고추 또는 풋고추 2~3개
- (선택) 애호박, 버섯 약간
- 밥 2~3공기

**양념 재료**
- 간장 2스푼
- 고추장 1스푼
- 고춧가루 2~3스푼
- 설탕 1~2스푼
- 미림(맛술) 1~2스푼
- 다진 마늘 1스푼
- 다진 생강 약간(생략 가능)
- 굴소스 1스푼(없으면 생략 가능)
- 물엿 1~2스푼(또는 올리고당)
- 후추 약간
- 참기름/참깨 약간

**조리 방법**
2025-06-27 16:53:22.998 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Using full method section as cooking method: **재료 (2~3인분 기준)**
- 돼지고기(목살 또는 대패 삼겹살) 500g
- 양파 1개
- 대파 1대
- 당근 1/4개
- 청양고추 또는 풋고추 2~3개
- (선택) 애호박,
2025-06-27 16:53:22.998 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
**재료 (2~3인분 기준)**
- 돼지고기(목살 또는 대패 삼겹살) 500g
- 양파 1개
- 대파 1대
- 당근 1/4개
- 청양고추 또는 풋고추 2~3개
- (선택) 애호박, 버섯 약간
- 밥 2~3공기

**양념 재료**
- 간장 2스푼
- 고추장 1스푼
- 고춧가루 2~3스푼
- 설탕 1~2스푼
- 미림(맛술) 1~2스푼
- 다진 마늘 1스푼
- 다진 생강 약간(생략 가능)
- 굴소스 1스푼(없으면 생략 가능)
- 물엿 1~2스푼(또는 올리고당)
- 후추 약간
- 참기름/참깨 약간

**조리 방법**
2025-06-27 16:53:22.998 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 제육 덮밥
2025-06-27 16:53:23.001 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 16:53:23.016 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 54
2025-06-27 16:53:23.016 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 16:53:23.016 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - 제목: 제육 덮밥
2025-06-27 16:53:23.016 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - 설명: 조리 방법:
**재료 (2~3인분 기준)**
- 돼지고기(목살 또는 대패 삼겹살) 500g
- 양파 1개
- 대파 1대
- 당근 1/4개
- 청양고추 또는 풋고추 2~3개
- (선택) 애호박, 버섯 약간
- 밥 2~3공기

**양념 재료**
- 간장 2스푼
- 고추장 1스푼
- 고춧가루 2~3스푼
- 설탕 1~2스푼
- 미림(맛술) 1~2스푼
- 다진 마늘 1스푼
- 다진 생강 약간(생략 가능)
- 굴소스 1스푼(없으면 생략 가능)
- 물엿 1~2스푼(또는 올리고당)
- 후추 약간
- 참기름/참깨 약간

**조리 방법**
2025-06-27 16:53:23.016 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 16:53:23.016 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:03:21.299 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:03:21.305 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:03:21.308 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 17:03:26.918 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 17:03:26.949 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 94594 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 17:03:26.949 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 17:03:26.950 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 17:03:26.995 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 17:03:26.995 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 17:03:28.118 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:03:28.119 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 17:03:28.159 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:03:28.163 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:03:28.164 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:03:28.165 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:03:28.166 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:03:28.167 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:03:28.168 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:03:28.169 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:03:28.169 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46 ms. Found 0 JDBC repository interfaces.
2025-06-27 17:03:28.184 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:03:28.184 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 17:03:28.286 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 100 ms. Found 8 JPA repository interfaces.
2025-06-27 17:03:28.314 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:03:28.315 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 17:03:28.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:03:28.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:03:28.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:03:28.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:03:28.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:03:28.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:03:28.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:03:28.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:03:28.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-27 17:03:28.932 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 17:03:28.941 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 17:03:28.943 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 17:03:28.943 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 17:03:28.984 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 17:03:28.985 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1989 ms
2025-06-27 17:03:29.033 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 17:03:29.174 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5b3e9087
2025-06-27 17:03:29.178 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 17:03:29.195 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 17:03:29.320 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 17:03:29.353 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 17:03:29.387 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 17:03:29.514 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 17:03:29.563 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 17:03:29.563 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 17:03:30.416 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 17:03:30.519 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:03:30.890 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 17:03:31.124 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 17:03:31.125 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 17:03:32.035 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 17:03:32.124 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 17:03:32.244 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@39d1076d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6ea5e97c, org.springframework.security.web.context.SecurityContextHolderFilter@7b6d2433, org.springframework.security.web.header.HeaderWriterFilter@4c04475e, org.springframework.web.filter.CorsFilter@6171a836, org.springframework.security.web.authentication.logout.LogoutFilter@28012bb6, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@191bccd9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6394beb8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18aec02, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5e8b86a8, org.springframework.security.web.session.SessionManagementFilter@1fe5307e, org.springframework.security.web.access.ExceptionTranslationFilter@42ac6588, org.springframework.security.web.access.intercept.AuthorizationFilter@55b04261]
2025-06-27 17:03:32.564 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 17:03:32.580 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 17:03:32.594 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 17:03:32.607 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.998 seconds (process running for 6.603)
2025-06-27 17:03:33.123 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 17:03:33.123 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 17:03:33.124 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-27 17:03:33.186 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:03:33.215 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:03:33.230 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:03:33.235 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:03:33.276 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:03:33.276 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:03:33.277 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육덮밥 레시피 알려줘
2025-06-27 17:03:33.277 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:03:33.278 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:03:33.335 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:03:33.338 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:03:33.339 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육덮밥 레시피 알려줘
2025-06-27 17:03:33.339 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:03:33.339 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:03:33.339 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:03:33.339 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:03:33.339 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:03:33.340 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 17:03:33.340 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:03:33.340 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:03:33.340 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:03:33.341 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:03:33.343 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:03:33.344 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:03:33.344 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:03:33.345 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:03:33.345 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:03:33.345 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:03:33.345 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:03:33.345 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:03:33.345 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:03:33.346 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751011413346
2025-06-27 17:03:33.348 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:03:33.349 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751011413346)}], model=sonar-pro}
2025-06-27 17:03:46.182 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:03:46.183 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=3f0f5b07-9f6d-46f0-894d-afe2c03cb5eb, model=sonar-pro, created=1751011425, usage={prompt_tokens=1508, completion_tokens=734, total_tokens=2242, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6882381, https://blog.naver.com/starship89/223451205222, https://blog.naver.com/catseyesung/222509655920, https://www.10000recipe.com/recipe/6836534, https://www.youtube.com/watch?v=njnISC6D-ng], search_results=[{title=제육볶음 만드는 법 :: 제육덮밥 만들기, url=https://www.10000recipe.com/recipe/6882381, date=2018-01-16, last_updated=2025-02-21}, {title=기사식당 제육볶음 레시피 제육덮밥 만드는법 ..., url=https://blog.naver.com/starship89/223451205222, date=2024-05-20, last_updated=2025-03-09}, {title=매콤한 제육덮밥 만들기. 맛있게 비벼 먹는 한그릇 요리., url=https://blog.naver.com/catseyesung/222509655920, date=2021-09-18, last_updated=null}, {title=백종원 제육볶음 응용해, '제육덮밥' 만들기!, url=https://www.10000recipe.com/recipe/6836534, date=2015-10-21, last_updated=2025-05-18}, {title=이렇게 만드시면 제육덮밥 고수 소리 듣습니다 ㅣ100% 성공 ..., url=https://www.youtube.com/watch?v=njnISC6D-ng, date=2025-03-29, last_updated=2025-06-02}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 제육덮밥
2. 카테고리: 한식
3. 조리 시간: 약 30분
4. 난이도: 중
5. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/01/16/9424aebb21eaa7d81d09046f39df3ea01.jpg[1]
6. 상세한 조리 방법과 팁:

**재료**
- 돼지고기 (불고기용, 앞다리살 또는 목살) 400g
- 양파 1개
- 대파 1대
- 청양고추 1~2개 (선택)
- 당근 약간 (선택)
- 밥 2공기

**양념장**
- 고춧가루 3스푼
- 고추장 1스푼
- 간장 2스푼
- 설탕 2스푼
- 굴소스 1스푼 (생략 가능)
- 미림 또는 맛술 1스푼
- 다진 마늘 1스푼
- 후추 약간

**조리 방법**
1. 돼지고기는 먹기 좋은 크기로 썰고, 소주와 미림(소주:미림 = 3:1)에 10분 정도 재워 잡내를 제거합니다.
2. 분량의 양념장 재료를 모두 섞어 양념장을 만듭니다.
3. 양파, 대파, 당근, 청양고추를 먹기 좋게 썰어줍니다.
4. 재운 돼지고기에서 물기를 제거한 후, 양념장에 잘 버무려 10분간 재워둡니다.
5. 예열된 팬에 식용유를 두르고 대파를 먼저 볶아 파기름을 만듭니다.
6. 고기와 양념을 팬에 넣고 센 불에서 볶아줍니다. (수분이 많으면 중불~강불에서 한 번에 졸여주는 게 포인트)
7. 고기가 반쯤 익으면 양파, 당근, 청양고추를 추가하고 계속 볶아줍니다.
8. 고기가 완전히 익고 양념이 자작해지면 불을 끄고, 밥 위에 올려 담아내면 완성입니다.

**팁**
- 고기를 재울 때 소주나 미림을 사용하면 잡내 제거에 도움이 됩니다.
- 국물이 많지 않게 졸여서 덮밥에 올려야 밥이 질어지지 않습니다.
- 취향에 따라 참기름, 깨 등을 추가해 마무리해도 좋습니다[1][2][4].

**알레르기 주의사항**
- 제육덮밥에는 새우 등 갑각류가 기본적으로 들어가지 않습니다. 혹시 집에 굴소스에 새우 성분이 들어있는지 확인하세요. 새우가 포함된 재료(예: 일부 굴소스)가 있다면 굴소스를 빼고 조리하시기 바랍니다. 

요청에 맞는 제육덮밥 레시피만 정확히 추천하였습니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:03:46.185 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:03:46.185 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 제육덮밥
2. 카테고리: 한식
3. 조리 시간: 약 30분
4. 난이도: 중
5. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/01/16/9424aebb21eaa7d81d09046f39df3ea01.jpg[1]
6. 상세한 조리 방법과 팁:

**재료**
- 돼지고기 (불고기용, 앞다리살 또는 목살) 400g
- 양파 1개
- 대파 1대
- 청양고추 1~2개 (선택)
- 당근 약간 (선택)
- 밥 2공기

**양념장**
- 고춧가루 3스푼
- 고추장 1스푼
- 간장 2스푼
- 설탕 2스푼
- 굴소스 1스푼 (생략 가능)
- 미림 또는 맛술 1스푼
- 다진 마늘 1스푼
- 후추 약간

**조리 방법**
1. 돼지고기는 먹기 좋은 크기로 썰고, 소주와 미림(소주:미림 = 3:1)에 10분 정도 재워 잡내를 제거합니다.
2. 분량의 양념장 재료를 모두 섞어 양념장을 만듭니다.
3. 양파, 대파, 당근, 청양고추를 먹기 좋게 썰어줍니다.
4. 재운 돼지고기에서 물기를 제거한 후, 양념장에 잘 버무려 10분간 재워둡니다.
5. 예열된 팬에 식용유를 두르고 대파를 먼저 볶아 파기름을 만듭니다.
6. 고기와 양념을 팬에 넣고 센 불에서 볶아줍니다. (수분이 많으면 중불~강불에서 한 번에 졸여주는 게 포인트)
7. 고기가 반쯤 익으면 양파, 당근, 청양고추를 추가하고 계속 볶아줍니다.
8. 고기가 완전히 익고 양념이 자작해지면 불을 끄고, 밥 위에 올려 담아내면 완성입니다.

**팁**
- 고기를 재울 때 소주나 미림을 사용하면 잡내 제거에 도움이 됩니다.
- 국물이 많지 않게 졸여서 덮밥에 올려야 밥이 질어지지 않습니다.
- 취향에 따라 참기름, 깨 등을 추가해 마무리해도 좋습니다[1][2][4].

**알레르기 주의사항**
- 제육덮밥에는 새우 등 갑각류가 기본적으로 들어가지 않습니다. 혹시 집에 굴소스에 새우 성분이 들어있는지 확인하세요. 새우가 포함된 재료(예: 일부 굴소스)가 있다면 굴소스를 빼고 조리하시기 바랍니다. 

요청에 맞는 제육덮밥 레시피만 정확히 추천하였습니다.
2025-06-27 17:03:46.186 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:03:46.186 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:03:46.190 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:03:46.193 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - 알러지 재료(새우)가 포함된 레시피
2025-06-27 17:03:46.194 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:03:46.194 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 알러지 주의
2025-06-27 17:03:46.194 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 알러지 재료가 포함된 요리는 추천할 수 없습니다.
2025-06-27 17:03:46.194 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:03:46.224 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:04:10.656 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:04:10.657 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:04:10.674 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:04:10.674 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:04:10.681 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.681 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.683 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.683 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.693 [http-nio-8080-exec-2] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-27 17:04:10.693 [http-nio-8080-exec-3] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-27 17:04:10.694 [http-nio-8080-exec-3] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-27 17:04:10.694 [http-nio-8080-exec-2] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-27 17:04:10.694 [http-nio-8080-exec-3] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.694 [http-nio-8080-exec-2] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.694 [http-nio-8080-exec-2] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-27 17:04:10.694 [http-nio-8080-exec-3] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-27 17:04:10.732 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:04:10.732 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:04:10.737 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:04:10.740 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:04:10.751 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.754 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.756 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.756 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:04:10.764 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:04:10.764 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:04:10.775 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:04:10.775 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:16:59.744 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:16:59.750 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:16:59.754 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 17:17:05.351 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 17:17:05.377 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 95472 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 17:17:05.378 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 17:17:05.378 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 17:17:05.425 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 17:17:05.426 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 17:17:06.239 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:17:06.241 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 17:17:06.286 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:17:06.288 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:17:06.289 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:17:06.290 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:17:06.291 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:17:06.291 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:17:06.292 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:17:06.293 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:17:06.294 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 48 ms. Found 0 JDBC repository interfaces.
2025-06-27 17:17:06.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:17:06.308 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 17:17:06.426 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 115 ms. Found 8 JPA repository interfaces.
2025-06-27 17:17:06.457 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:17:06.457 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 17:17:06.469 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:17:06.469 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:17:06.469 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:17:06.469 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:17:06.470 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:17:06.470 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:17:06.470 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:17:06.470 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:17:06.470 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-27 17:17:07.085 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 17:17:07.094 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 17:17:07.096 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 17:17:07.096 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 17:17:07.133 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 17:17:07.134 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1707 ms
2025-06-27 17:17:07.179 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 17:17:07.378 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7bbcf0d7
2025-06-27 17:17:07.381 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 17:17:07.399 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 17:17:07.543 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 17:17:07.571 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 17:17:07.591 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 17:17:07.707 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 17:17:07.764 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 17:17:07.764 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 17:17:08.798 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 17:17:08.913 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:17:09.340 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 17:17:09.692 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 17:17:09.693 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 17:17:10.571 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 17:17:10.640 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 17:17:10.756 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6fd0087b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2efff2f4, org.springframework.security.web.context.SecurityContextHolderFilter@13d40cbc, org.springframework.security.web.header.HeaderWriterFilter@639c61ff, org.springframework.web.filter.CorsFilter@4223df05, org.springframework.security.web.authentication.logout.LogoutFilter@63f27b6d, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@1ba41732, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7480d829, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@22bcd047, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@409fbf2f, org.springframework.security.web.session.SessionManagementFilter@4d3d8de0, org.springframework.security.web.access.ExceptionTranslationFilter@344d9a1b, org.springframework.security.web.access.intercept.AuthorizationFilter@6ea5e97c]
2025-06-27 17:17:11.083 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 17:17:11.108 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 17:17:11.115 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 17:17:11.127 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.105 seconds (process running for 6.907)
2025-06-27 17:17:12.743 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 17:17:12.746 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 17:17:12.762 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 10 ms
2025-06-27 17:17:12.818 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:17:12.843 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:17:12.857 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:17:12.863 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:17:12.901 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:17:12.901 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:17:12.901 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 레시피 알려줘
2025-06-27 17:17:12.902 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:17:12.902 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:17:12.953 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:17:12.970 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:17:12.970 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 레시피 알려줘
2025-06-27 17:17:12.971 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:17:12.971 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:17:12.971 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:17:12.971 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:17:12.971 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:17:12.971 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
, useRefrigerator: false, retry: 0
2025-06-27 17:17:12.972 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:17:12.973 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:17:12.973 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:17:12.973 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:17:12.975 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:17:12.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:17:12.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:17:12.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:17:12.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:17:12.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:17:12.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:17:12.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:17:12.977 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

2025-06-27 17:17:12.978 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751012232978
2025-06-27 17:17:12.979 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:17:12.981 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
1. 요리 이름: [요리명]
2. 조리 시간: [분]
3. 난이도: [상/중/하]
4. [상세한 조리 방법과 팁]

**최종 확인**: 사용자 요청에 정확히 맞는 레시피만 추천했는지 확인하세요.
**필수**: 어떤 요청이든 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요. 일반적인 조언이나 추천만으로는 안 됩니다.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751012232978)}], model=sonar-pro}
2025-06-27 17:17:20.743 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:17:20.744 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=a6db0b12-0770-47f0-a530-9b6ff27ff5fc, model=sonar-pro, created=1751012240, usage={prompt_tokens=1386, completion_tokens=663, total_tokens=2049, search_context_size=low}, citations=[https://blog.naver.com/PostView.naver?blogId=troopy2016&logNo=221409998881&categoryNo=8&proxyReferer=&noTrackingCode=true, https://www.10000recipe.com/recipe/6905743, https://www.youtube.com/watch?v=tRrCFm_PHDc, https://www.youtube.com/watch?v=j4uYLMKrHf4, https://www.youtube.com/watch?v=WjXne21i8Q4], search_results=[{title=밖에서 잘 사먹는 한식, 제육볶음 만들기 - 네이버 블로그, url=https://blog.naver.com/PostView.naver?blogId=troopy2016&logNo=221409998881&categoryNo=8&proxyReferer=&noTrackingCode=true, date=2018-12-01, last_updated=2025-06-25}, {title=절대 실패없는 제육볶음 황금레시피 감칠맛과 매운맛이 좋아요~!!, url=https://www.10000recipe.com/recipe/6905743, date=2019-02-01, last_updated=2025-06-16}, {title=tvnzipbob2 쉽게쉽게! 백선생표 ′제육볶음′ 레시피 대공개! 160412 ..., url=https://www.youtube.com/watch?v=tRrCFm_PHDc, date=2016-04-12, last_updated=null}, {title=절대 양념 재우지마세요 물 생겨요! 함바집 물 없는 제육볶음은 이렇게 ..., url=https://www.youtube.com/watch?v=j4uYLMKrHf4, date=2022-07-03, last_updated=null}, {title=제육볶음 / 간단하고맛있는제육볶음만들기 / 백종원제육볶음만드는법, url=https://www.youtube.com/watch?v=WjXne21i8Q4, date=2022-05-22, last_updated=2025-06-09}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 제육볶음  
2. 조리 시간: 30분  
3. 난이도: 중  
4. 상세한 조리 방법과 팁

**재료**  
- 돼지고기 앞다리살(300g)  
- 양파 1/2개  
- 대파 1대  
- 당근(선택)  
- 버섯(선택)  
- 배추(선택)  
- 식용유 2큰술  
- 고춧가루 2큰술  
- 고추장 3큰술  
- 간장 1~3.5큰술 (입맛에 따라 조절)  
- 다진마늘 1큰술  
- 설탕 1~2큰술  
- 매실액(또는 요리당) 1큰술(선택)  
- 후추 약간  
- 참기름 1큰술  
- 통깨 약간  
- 물 50ml  

**조리 방법**  
1. 돼지고기는 먹기 좋은 크기로 썰고, 양파·대파 등 채소도 썰어 준비합니다.  
2. 볼에 고춧가루, 고추장, 간장, 다진마늘, 설탕, 매실액, 후추를 넣고 잘 섞어 양념장을 만듭니다[2][5].  
3. 팬에 식용유를 두르고 돼지고기를 센 불에서 먼저 볶아 겉면을 익힙니다[1][5].  
4. 고기가 반쯤 익으면 준비한 양념장을 넣고 재빨리 볶으며 고기에 잘 배도록 섞어줍니다[1][2][5].  
5. 양파, 대파, 당근, 버섯, 배추 등 준비한 채소를 함께 넣고 중불에서 볶습니다. 물 50ml를 더해 촉촉함을 더할 수 있습니다[5].  
6. 채소가 익고 양념이 고기에 잘 배면 불을 끄고 참기름, 통깨를 뿌려 마무리합니다[5].  
7. 취향에 따라 청양고추를 추가해 매운맛을 조절하거나, 채소의 종류와 양을 자유롭게 조정할 수 있습니다.  

**tip:**  
- 고기를 양념에 오래 재우지 않아도 바로 볶으면서 맛있게 즐길 수 있습니다.  
- 양념에 물기가 적어도 볶다보면 고기에서 육즙이 나오니 걱정하지 않아도 됩니다[2].  
- 대파를 마지막에 넣으면 향이 더 살아납니다.  

**알레르기 확인:**  
본 레시피에는 새우 등 해산물이 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.

요청하신 '제육' 레시피를 정확히 안내드렸습니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:17:20.745 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:17:20.745 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 제육볶음  
2. 조리 시간: 30분  
3. 난이도: 중  
4. 상세한 조리 방법과 팁

**재료**  
- 돼지고기 앞다리살(300g)  
- 양파 1/2개  
- 대파 1대  
- 당근(선택)  
- 버섯(선택)  
- 배추(선택)  
- 식용유 2큰술  
- 고춧가루 2큰술  
- 고추장 3큰술  
- 간장 1~3.5큰술 (입맛에 따라 조절)  
- 다진마늘 1큰술  
- 설탕 1~2큰술  
- 매실액(또는 요리당) 1큰술(선택)  
- 후추 약간  
- 참기름 1큰술  
- 통깨 약간  
- 물 50ml  

**조리 방법**  
1. 돼지고기는 먹기 좋은 크기로 썰고, 양파·대파 등 채소도 썰어 준비합니다.  
2. 볼에 고춧가루, 고추장, 간장, 다진마늘, 설탕, 매실액, 후추를 넣고 잘 섞어 양념장을 만듭니다[2][5].  
3. 팬에 식용유를 두르고 돼지고기를 센 불에서 먼저 볶아 겉면을 익힙니다[1][5].  
4. 고기가 반쯤 익으면 준비한 양념장을 넣고 재빨리 볶으며 고기에 잘 배도록 섞어줍니다[1][2][5].  
5. 양파, 대파, 당근, 버섯, 배추 등 준비한 채소를 함께 넣고 중불에서 볶습니다. 물 50ml를 더해 촉촉함을 더할 수 있습니다[5].  
6. 채소가 익고 양념이 고기에 잘 배면 불을 끄고 참기름, 통깨를 뿌려 마무리합니다[5].  
7. 취향에 따라 청양고추를 추가해 매운맛을 조절하거나, 채소의 종류와 양을 자유롭게 조정할 수 있습니다.  

**tip:**  
- 고기를 양념에 오래 재우지 않아도 바로 볶으면서 맛있게 즐길 수 있습니다.  
- 양념에 물기가 적어도 볶다보면 고기에서 육즙이 나오니 걱정하지 않아도 됩니다[2].  
- 대파를 마지막에 넣으면 향이 더 살아납니다.  

**알레르기 확인:**  
본 레시피에는 새우 등 해산물이 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.

요청하신 '제육' 레시피를 정확히 안내드렸습니다.
2025-06-27 17:17:20.746 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:17:20.746 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:17:20.746 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육볶음  
2. 조리 시간: 30분  
3. 난이도: 중  
4. 상세한 조리 방법과 팁

**재료**  
- 돼지고기 앞다리살(300g)  
- 양파 1/2개  
- 대파 1대  
- 당근(선택)  
- 버섯(선택)  
- 배추(선택)  
- 식용유 2큰술  
- 고춧가루 2큰술  
- 고추장 3큰술  
- 간장 1~3.5큰술 (입맛에 따라 조절)  
- 다진마늘 1큰술  
- 설탕 1~2큰술  
- 매실액(또는 요리당) 1큰술(선택)  
- 후추 약간  
- 참기름 1큰술  
- 통깨 약간  
- 물 50ml  

**조리 방법**  
1. 돼지고기는 먹기 좋은 크기로 썰고, 양파·대파 등 채소도 썰어 준비합니다.  
2. 볼에 고춧가루, 고추장, 간장, 다진마늘, 설탕, 매실액, 후추를 넣고 잘 섞어 양념장을 만듭니다[2][5].  
3. 팬에 식용유를 두르고 돼지고기를 센 불에서 먼저 볶아 겉면을 익힙니다[1][5].  
4. 고기가 반쯤 익으면 준비한 양념장을 넣고 재빨리 볶으며 고기에 잘 배도록 섞어줍니다[1][2][5].  
5. 양파, 대파, 당근, 버섯, 배추 등 준비한 채소를 함께 넣고 중불에서 볶습니다. 물 50ml를 더해 촉촉함을 더할 수 있습니다[5].  
6. 채소가 익고 양념이 고기에 잘 배면 불을 끄고 참기름, 통깨를 뿌려 마무리합니다[5].  
7. 취향에 따라 청양고추를 추가해 매운맛을 조절하거나, 채소의 종류와 양을 자유롭게 조정할 수 있습니다.  

**tip:**  
- 고기를 양념에 오래 재우지 않아도 바로 볶으면서 맛있게 즐길 수 있습니다.  
- 양념에 물기가 적어도 볶다보면 고기에서 육즙이 나오니 걱정하지 않아도 됩니다[2].  
- 대파를 마지막에 넣으면 향이 더 살아납니다.  

**알레르기 확인:**  
본 레시피에는 새우 등 해산물이 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.

요청하신 '제육' 레시피를 정확히 안내드렸습니다.
2025-06-27 17:17:20.750 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:17:20.753 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 17:17:20.754 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): **재료**  
- 돼지고기 앞다리살(300g)  
- 양파 1/2개  
- 대파 1대  
- 당근(선택)  
- 버섯(선택)  
- 배추(선택)  
- 식용유 2큰술  
- 고춧
2025-06-27 17:17:20.755 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:17:20.755 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
**재료**  
- 돼지고기 앞다리살(300g)  
- 양파 1/2개  
- 대파 1대  
- 당근(선택)  
- 버섯(선택)  
- 배추(선택)  
- 식용유 2큰술  
- 고춧가루 2큰술  
- 고추장 3큰술  
- 간장 1~3.5큰술 (입맛에 따라 조절)  
- 다진마늘 1큰술  
- 설탕 1~2큰술  
- 매실액(또는 요리당) 1큰술(선택)  
- 후추 약간  
- 참기름 1큰술  
- 통깨 약간  
- 물 50ml  

**조리 방법**
2025-06-27 17:17:20.755 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 제육볶음
2025-06-27 17:17:20.785 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:17:20.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 57
2025-06-27 17:17:20.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:17:20.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 제육볶음
2025-06-27 17:17:20.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 조리 방법:
**재료**  
- 돼지고기 앞다리살(300g)  
- 양파 1/2개  
- 대파 1대  
- 당근(선택)  
- 버섯(선택)  
- 배추(선택)  
- 식용유 2큰술  
- 고춧가루 2큰술  
- 고추장 3큰술  
- 간장 1~3.5큰술 (입맛에 따라 조절)  
- 다진마늘 1큰술  
- 설탕 1~2큰술  
- 매실액(또는 요리당) 1큰술(선택)  
- 후추 약간  
- 참기름 1큰술  
- 통깨 약간  
- 물 50ml  

**조리 방법**
2025-06-27 17:17:20.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:17:20.792 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:19:28.486 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:19:28.501 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:19:28.508 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 17:19:33.588 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 17:19:33.618 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 95654 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 17:19:33.619 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 17:19:33.619 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 17:19:33.671 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 17:19:33.672 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 17:19:34.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:19:34.549 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 17:19:34.589 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:19:34.590 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:19:34.591 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:19:34.592 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:19:34.593 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:19:34.593 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:19:34.595 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:19:34.596 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:19:34.596 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 JDBC repository interfaces.
2025-06-27 17:19:34.610 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:19:34.611 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 17:19:34.719 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 105 ms. Found 8 JPA repository interfaces.
2025-06-27 17:19:34.750 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:19:34.751 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 17:19:34.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:19:34.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:19:34.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:19:34.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:19:34.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:19:34.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:19:34.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:19:34.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:19:34.764 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-27 17:19:35.381 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 17:19:35.388 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 17:19:35.390 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 17:19:35.390 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 17:19:35.430 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 17:19:35.432 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1759 ms
2025-06-27 17:19:35.475 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 17:19:35.614 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5b3e9087
2025-06-27 17:19:35.618 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 17:19:35.635 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 17:19:35.754 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 17:19:35.781 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 17:19:35.800 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 17:19:35.913 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 17:19:35.954 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 17:19:35.955 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 17:19:36.794 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 17:19:36.910 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:19:37.307 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 17:19:37.537 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 17:19:37.538 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 17:19:38.243 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 17:19:38.326 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 17:19:38.450 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@39d1076d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6ea5e97c, org.springframework.security.web.context.SecurityContextHolderFilter@7b6d2433, org.springframework.security.web.header.HeaderWriterFilter@4c04475e, org.springframework.web.filter.CorsFilter@6171a836, org.springframework.security.web.authentication.logout.LogoutFilter@28012bb6, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@191bccd9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6394beb8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18aec02, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5e8b86a8, org.springframework.security.web.session.SessionManagementFilter@1fe5307e, org.springframework.security.web.access.ExceptionTranslationFilter@42ac6588, org.springframework.security.web.access.intercept.AuthorizationFilter@55b04261]
2025-06-27 17:19:38.801 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 17:19:38.818 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 17:19:38.824 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 17:19:38.834 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.581 seconds (process running for 6.26)
2025-06-27 17:19:43.657 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 17:19:43.658 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 17:19:43.659 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-27 17:19:43.724 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:19:43.760 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:19:43.776 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:19:43.782 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:19:43.823 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:19:43.823 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:19:43.824 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 레시피 줘
2025-06-27 17:19:43.824 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:19:43.824 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:19:43.878 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:19:43.882 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:19:43.882 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 레시피 줘
2025-06-27 17:19:43.882 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:19:43.882 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:19:43.883 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:19:43.883 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.

2025-06-27 17:19:43.883 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:19:43.883 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:19:43.884 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:19:43.885 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:19:43.885 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.

2025-06-27 17:19:43.885 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:19:43.887 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:19:43.889 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:19:43.889 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.

2025-06-27 17:19:43.889 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:19:43.889 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:19:43.889 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:19:43.889 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.

2025-06-27 17:19:43.890 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:19:43.890 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.

2025-06-27 17:19:43.891 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751012383891
2025-06-27 17:19:43.891 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:19:43.893 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 상세한 조리 방법과 팁:
   **필요한 재료**
   - 재료명과 양
   - 재료명과 양
   ...

   **조리 단계**
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

   **요리 팁**
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 특히 '조리 단계' 섹션에는 구체적인 조리 방법을 단계별로 상세히 설명해주세요.
**중요**: 재료 목록만 제공하지 말고, 반드시 실제 조리 단계(1단계, 2단계, 3단계...)를 포함해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751012383891)}], model=sonar-pro}
2025-06-27 17:19:52.433 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:19:52.434 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=cc2ca2c0-640f-4283-9aed-c2b80918fbeb, model=sonar-pro, created=1751012392, usage={prompt_tokens=2008, completion_tokens=657, total_tokens=2665, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6905743, https://www.10000recipe.com/recipe/6982145, https://blog.naver.com/lljjyy1983/222006125477, https://www.youtube.com/watch?v=Adfk-36DbiY, https://www.youtube.com/watch?v=cmWa3D85Hms], search_results=[{title=절대 실패없는 제육볶음 황금레시피 감칠맛과 매운맛이 ..., url=https://www.10000recipe.com/recipe/6905743, date=null, last_updated=null}, {title=편스토랑 류수영 제육볶음 만드는법/ 꿀팁은 바로 식초 ..., url=https://www.10000recipe.com/recipe/6982145, date=null, last_updated=null}, {title=제육볶음 레시피 실패없는 양념장 끝내줘!, url=https://blog.naver.com/lljjyy1983/222006125477, date=2020-06-19, last_updated=null}, {title=평생 요긴하게 써먹는 제육볶음 레시피! ✔이렇게 볶아야 물이 ..., url=https://www.youtube.com/watch?v=Adfk-36DbiY, date=2022-09-29, last_updated=2025-05-26}, {title=언제 먹어도 대박 간단한 제육볶음 황금레시피 [램블], url=https://www.youtube.com/watch?v=cmWa3D85Hms, date=2018-04-10, last_updated=2025-05-29}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 제육볶음
2. 카테고리: 한식
3. 조리 시간: 30분
4. 난이도: 중
5. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/07/13/1447f2797e1bdf9d95b9ed4aad99a6a11.jpg
6. 상세한 조리 방법과 팁:

**필요한 재료**
- 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 매실액(또는 설탕) 2큰술
- 다진 마늘 1큰술
- 식용유 1큰술
- 통깨 약간
- 대파(선택) 1대

**조리 단계**
1. 돼지고기는 한 입 크기로 썰어 준비하세요.
2. 큰 볼에 썬 돼지고기, 고추장, 고춧가루, 간장, 매실액(또는 설탕), 다진 마늘을 모두 넣고 조물조물 양념이 잘 배도록 무치세요[1][5].
3. 양파, 당근은 채 썰고, 청양고추와 대파는 어슷하게 썰어둡니다.
4. 팬에 식용유를 두르고 양념한 고기를 센 불에서 빠르게 볶으세요. 고기 겉면이 익기 시작하면 중불로 줄여주세요.
5. 고기가 반쯤 익으면 당근, 양파, 청양고추, 대파를 넣고 함께 볶습니다.
6. 야채가 숨이 죽고 고기가 완전히 익으면 불을 끄고 통깨를 뿌려 마무리합니다[1][5].
7. 기호에 따라 참기름을 약간 둘러 마무리하면 더욱 고소합니다.

**요리 팁**
- 고기는 양념에 10분 정도 미리 재워두면 감칠맛이 더욱 살고, 육질이 부드러워집니다.
- 센 불에서 빠르게 볶아야 고기가 질겨지지 않습니다.
- 매운맛을 더 원하면 청양고추를 더 추가하세요.
- 남은 양념은 쌈채소에 곁들여도 좋습니다.
- 새우 등 알레르기 유발 재료는 포함되어 있지 않으니 안심하고 드실 수 있습니다.

최종 확인: 사용자 요청(제육 레시피)에 정확히 맞게, 새우 등 알레르기 재료가 없는 제육볶음 레시피만 제공하였습니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:19:52.434 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:19:52.435 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 제육볶음
2. 카테고리: 한식
3. 조리 시간: 30분
4. 난이도: 중
5. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/07/13/1447f2797e1bdf9d95b9ed4aad99a6a11.jpg
6. 상세한 조리 방법과 팁:

**필요한 재료**
- 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 매실액(또는 설탕) 2큰술
- 다진 마늘 1큰술
- 식용유 1큰술
- 통깨 약간
- 대파(선택) 1대

**조리 단계**
1. 돼지고기는 한 입 크기로 썰어 준비하세요.
2. 큰 볼에 썬 돼지고기, 고추장, 고춧가루, 간장, 매실액(또는 설탕), 다진 마늘을 모두 넣고 조물조물 양념이 잘 배도록 무치세요[1][5].
3. 양파, 당근은 채 썰고, 청양고추와 대파는 어슷하게 썰어둡니다.
4. 팬에 식용유를 두르고 양념한 고기를 센 불에서 빠르게 볶으세요. 고기 겉면이 익기 시작하면 중불로 줄여주세요.
5. 고기가 반쯤 익으면 당근, 양파, 청양고추, 대파를 넣고 함께 볶습니다.
6. 야채가 숨이 죽고 고기가 완전히 익으면 불을 끄고 통깨를 뿌려 마무리합니다[1][5].
7. 기호에 따라 참기름을 약간 둘러 마무리하면 더욱 고소합니다.

**요리 팁**
- 고기는 양념에 10분 정도 미리 재워두면 감칠맛이 더욱 살고, 육질이 부드러워집니다.
- 센 불에서 빠르게 볶아야 고기가 질겨지지 않습니다.
- 매운맛을 더 원하면 청양고추를 더 추가하세요.
- 남은 양념은 쌈채소에 곁들여도 좋습니다.
- 새우 등 알레르기 유발 재료는 포함되어 있지 않으니 안심하고 드실 수 있습니다.

최종 확인: 사용자 요청(제육 레시피)에 정확히 맞게, 새우 등 알레르기 재료가 없는 제육볶음 레시피만 제공하였습니다.
2025-06-27 17:19:52.435 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:19:52.435 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:19:52.435 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육볶음
2. 카테고리: 한식
3. 조리 시간: 30분
4. 난이도: 중
5. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/07/13/1447f2797e1bdf9d95b9ed4aad99a6a11.jpg
6. 상세한 조리 방법과 팁:

**필요한 재료**
- 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 매실액(또는 설탕) 2큰술
- 다진 마늘 1큰술
- 식용유 1큰술
- 통깨 약간
- 대파(선택) 1대

**조리 단계**
1. 돼지고기는 한 입 크기로 썰어 준비하세요.
2. 큰 볼에 썬 돼지고기, 고추장, 고춧가루, 간장, 매실액(또는 설탕), 다진 마늘을 모두 넣고 조물조물 양념이 잘 배도록 무치세요[1][5].
3. 양파, 당근은 채 썰고, 청양고추와 대파는 어슷하게 썰어둡니다.
4. 팬에 식용유를 두르고 양념한 고기를 센 불에서 빠르게 볶으세요. 고기 겉면이 익기 시작하면 중불로 줄여주세요.
5. 고기가 반쯤 익으면 당근, 양파, 청양고추, 대파를 넣고 함께 볶습니다.
6. 야채가 숨이 죽고 고기가 완전히 익으면 불을 끄고 통깨를 뿌려 마무리합니다[1][5].
7. 기호에 따라 참기름을 약간 둘러 마무리하면 더욱 고소합니다.

**요리 팁**
- 고기는 양념에 10분 정도 미리 재워두면 감칠맛이 더욱 살고, 육질이 부드러워집니다.
- 센 불에서 빠르게 볶아야 고기가 질겨지지 않습니다.
- 매운맛을 더 원하면 청양고추를 더 추가하세요.
- 남은 양념은 쌈채소에 곁들여도 좋습니다.
- 새우 등 알레르기 유발 재료는 포함되어 있지 않으니 안심하고 드실 수 있습니다.

최종 확인: 사용자 요청(제육 레시피)에 정확히 맞게, 새우 등 알레르기 재료가 없는 제육볶음 레시피만 제공하였습니다.
2025-06-27 17:19:52.439 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:19:52.443 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 17:19:52.443 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response: https://recipe1.ezmember.co.kr/cache/recipe/2017/07/13/1447f2797e1bdf9d95b9ed4aad99a6a11.jpg
2025-06-27 17:19:52.443 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/07/13/1447f2797e1bdf9d95b9ed4aad99a6a11.jpg
2025-06-27 17:19:52.444 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 매실액(또는 설탕) 2큰술
- 다진 마늘 1큰술
- 식용유 1큰술
- 통깨 약간
- 대파(선택) 1대
2025-06-27 17:19:52.444 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-27 17:19:52.444 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살) 600g
2025-06-27 17:19:52.445 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 돼지고기(앞다리살) 600g
2025-06-27 17:19:52.445 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개 (약 60g)
2025-06-27 17:19:52.445 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-27 17:19:52.445 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-27 17:19:52.451 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:19:52.459 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 17:19:52.459 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 40g
2025-06-27 17:19:52.460 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 당근, Amount: 40g
2025-06-27 17:19:52.460 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 당근, Amount: 40g
2025-06-27 17:19:52.461 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:19:52.463 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '당근' not found in DB. Skipping.
2025-06-27 17:19:52.463 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 2~3개
2025-06-27 17:19:52.464 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 청양고추 2~3개
2025-06-27 17:19:52.464 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 2큰술
2025-06-27 17:19:52.464 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 2큰술
2025-06-27 17:19:52.464 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 2큰술
2025-06-27 17:19:52.465 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:19:52.467 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-27 17:19:52.467 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 2큰술
2025-06-27 17:19:52.467 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 2큰술
2025-06-27 17:19:52.467 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 2큰술
2025-06-27 17:19:52.470 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:19:52.472 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-27 17:19:52.473 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2~4큰술
2025-06-27 17:19:52.473 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 간장 2~4큰술
2025-06-27 17:19:52.473 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 매실액(또는 설탕) 2큰술
2025-06-27 17:19:52.473 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 매실액(또는 설탕) 2큰술
2025-06-27 17:19:52.473 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-27 17:19:52.473 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-27 17:19:52.473 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-27 17:19:52.474 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:19:52.475 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-27 17:19:52.475 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1큰술
2025-06-27 17:19:52.476 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 1큰술
2025-06-27 17:19:52.476 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-27 17:19:52.477 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:19:52.478 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-27 17:19:52.478 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 약간
2025-06-27 17:19:52.478 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 통깨 약간
2025-06-27 17:19:52.478 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파(선택) 1대
2025-06-27 17:19:52.478 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파(선택) 1대
2025-06-27 17:19:52.479 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 6): **필요한 재료**
- 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 
2025-06-27 17:19:52.480 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:19:52.480 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 매실액(또는 설탕) 2큰술
- 다진 마늘 1큰술
- 식용유 1큰술
- 통깨 약간
- 대파(선택) 1대

조리 방법:
**필요한 재료**
- 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 매실액(또는 설탕) 2큰술
- 다진 마늘 1큰술
- 식용유 1큰술
- 통깨 약간
- 대파(선택) 1대

**조리 단계**
2025-06-27 17:19:52.480 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 제육볶음
2025-06-27 17:19:52.507 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:19:52.516 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 59
2025-06-27 17:19:52.517 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:19:52.517 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 제육볶음
2025-06-27 17:19:52.517 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 매실액(또는 설탕) 2큰술
- 다진 마늘 1큰술
- 식용유 1큰술
- 통깨 약간
- 대파(선택) 1대

조리 방법:
**필요한 재료**
- 돼지고기(앞다리살) 600g
- 양파 1개 (약 60g)
- 당근 40g
- 청양고추 2~3개
- 고추장 2큰술
- 고춧가루 2큰술
- 간장 2~4큰술
- 매실액(또는 설탕) 2큰술
- 다진 마늘 1큰술
- 식용유 1큰술
- 통깨 약간
- 대파(선택) 1대

**조리 단계**
2025-06-27 17:19:52.517 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:19:52.518 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:22:40.567 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:22:40.573 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:22:40.581 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 17:22:45.698 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 17:22:45.735 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 95912 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 17:22:45.735 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 17:22:45.736 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 17:22:45.788 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 17:22:45.789 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 17:22:46.631 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:22:46.633 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 17:22:46.672 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:22:46.674 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:22:46.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:22:46.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:22:46.677 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:22:46.678 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:22:46.696 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:22:46.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:22:46.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63 ms. Found 0 JDBC repository interfaces.
2025-06-27 17:22:46.727 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:22:46.728 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 17:22:46.821 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 90 ms. Found 8 JPA repository interfaces.
2025-06-27 17:22:46.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:22:46.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 17:22:46.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:22:46.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:22:46.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:22:46.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:22:46.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:22:46.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:22:46.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:22:46.861 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:22:46.861 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-27 17:22:47.522 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 17:22:47.531 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 17:22:47.534 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 17:22:47.534 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 17:22:47.575 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 17:22:47.576 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1785 ms
2025-06-27 17:22:47.609 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 17:22:47.746 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@309eed7e
2025-06-27 17:22:47.749 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 17:22:47.766 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 17:22:47.887 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 17:22:47.916 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 17:22:47.935 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 17:22:48.054 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 17:22:48.099 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 17:22:48.099 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 17:22:48.942 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 17:22:49.068 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:22:49.446 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 17:22:49.664 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 17:22:49.665 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 17:22:50.538 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 17:22:50.614 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 17:22:50.737 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@55b04261, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3127cf99, org.springframework.security.web.context.SecurityContextHolderFilter@1fe5307e, org.springframework.security.web.header.HeaderWriterFilter@72e57a87, org.springframework.web.filter.CorsFilter@453f5f57, org.springframework.security.web.authentication.logout.LogoutFilter@5babd508, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@7beb6b9d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1d6ff26a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7b6d2433, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@39d1076d, org.springframework.security.web.session.SessionManagementFilter@78849a0a, org.springframework.security.web.access.ExceptionTranslationFilter@14aea603, org.springframework.security.web.access.intercept.AuthorizationFilter@555624ba]
2025-06-27 17:22:51.062 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 17:22:51.079 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 17:22:51.085 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 17:22:51.095 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.709 seconds (process running for 6.355)
2025-06-27 17:25:15.406 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 17:25:15.407 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 17:25:15.423 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 16 ms
2025-06-27 17:25:15.498 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:25:15.542 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:25:15.561 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:25:15.567 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:25:15.607 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:25:15.607 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:25:15.608 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 덮밥 레시피 줘
2025-06-27 17:25:15.608 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:25:15.608 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:25:15.665 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:25:15.668 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:25:15.668 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 덮밥 레시피 줘
2025-06-27 17:25:15.668 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:25:15.668 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:25:15.669 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:25:15.669 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.

2025-06-27 17:25:15.669 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:25:15.669 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:25:15.670 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:25:15.671 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:25:15.671 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.

2025-06-27 17:25:15.671 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:25:15.673 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:25:15.675 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:25:15.675 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.

2025-06-27 17:25:15.675 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:25:15.675 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:25:15.676 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:25:15.676 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.

2025-06-27 17:25:15.676 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:25:15.676 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.

2025-06-27 17:25:15.677 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751012715677
2025-06-27 17:25:15.677 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:25:15.678 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
반드시 다음 형식으로 정확히 제공해주세요:

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 난이도: [상/중/하]
5. 이미지 URL: [실제 요리 이미지 URL]
6. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

7. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 형식으로 제공해주세요. 재료는 6번에서만 나열하고, 7번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 조리 방법 섹션에서는 재료를 다시 나열하지 말고, 오직 조리 단계(1단계, 2단계, 3단계...)만 포함해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751012715677)}], model=sonar-pro}
2025-06-27 17:25:31.612 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:25:31.613 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=007634a1-0192-41c2-9ee8-1d8641da800f, model=sonar-pro, created=1751012731, usage={prompt_tokens=2001, completion_tokens=660, total_tokens=2661, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6882381, https://blog.naver.com/starship89/223451205222, https://blog.naver.com/catseyesung/222509655920, https://www.10000recipe.com/recipe/6836534, https://www.youtube.com/watch?v=njnISC6D-ng], search_results=[{title=제육볶음 만드는 법 :: 제육덮밥 만들기 - 만개의레시피, url=https://www.10000recipe.com/recipe/6882381, date=2018-01-16, last_updated=2025-02-21}, {title=기사식당 제육볶음 레시피 제육덮밥 만드는법 제육볶음 양념장 만들기 ..., url=https://blog.naver.com/starship89/223451205222, date=2024-05-20, last_updated=2025-03-09}, {title=매콤한 제육덮밥 만들기. 맛있게 비벼 먹는 한그릇 요리. : 네이버 블로그, url=https://blog.naver.com/catseyesung/222509655920, date=2021-09-18, last_updated=null}, {title=백종원 제육볶음 응용해, '제육덮밥' 만들기! - 만개의레시피, url=https://www.10000recipe.com/recipe/6836534, date=2015-10-21, last_updated=2025-05-18}, {title=이렇게 만드시면 제육덮밥 고수 소리 듣습니다 ㅣ100 ... - YouTube, url=https://www.youtube.com/watch?v=njnISC6D-ng, date=2025-03-01, last_updated=2025-06-02}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 제육 덮밥  
2. 카테고리: 한식  
3. 조리 시간: 25분  
4. 난이도: 중  
5. 이미지 URL: https://www.10000recipe.com/recipe/6882381 (만개의 레시피 내 제육볶음 이미지 참고)  
6. 필요한 재료와 양:  
   - 돼지고기 앞다리살 또는 뒷다리살 불고기용 300g  
   - 양파 1/2개  
   - 대파 1대  
   - 고추장 2 큰술  
   - 고춧가루 3 큰술  
   - 간장 2 큰술  
   - 설탕 2 큰술  
   - 다진 마늘 1 큰술  
   - 굴소스 1 큰술 (선택)  
   - 미림 1 큰술 (또는 청주)  
   - 후추 약간  
   - 식용유 적당량  
   - 밥 1공기  

7. 조리 방법:  
   1. 돼지고기는 소주와 미림을 섞은 액체에 15분 정도 재워 잡내를 제거한다.  
   2. 양파와 대파는 채 썰어 준비한다.  
   3. 팬에 식용유를 두르고 중불에서 다진 마늘을 볶아 향을 낸다.  
   4. 돼지고기를 넣고 겉면이 익을 때까지 볶는다.  
   5. 고추장, 고춧가루, 간장, 설탕, 굴소스, 미림, 후추를 넣어 양념장을 만들고 고기에 고루 섞어 볶는다.  
   6. 양파와 대파를 넣고 수분을 날리면서 볶아 국물이 거의 없어질 때까지 조리한다.  
   7. 완성된 제육볶음을 밥 위에 올려 덮밥 형태로 낸다.  

8. 요리 팁:  
   - 돼지고기 잡내가 신경 쓰이면 소주를 사용해 재우는 과정을 꼭 해주면 좋다.  
   - 육수를 살짝 넣어 조리하면 더 깊은 맛을 낼 수 있으나, 국물이 많이 생기지 않도록 주의한다.  
   - 고추장과 고춧가루의 양은 기호에 맞게 조절하여 매운맛을 맞춘다.  

*알레르기 안내: 제육 덮밥 레시피에는 새우나 새우 유래 재료가 포함되지 않아 알레르기 섭취에 문제가 없습니다.* 

위 레시피는 요청하신 제육 덮밥 요리에 정확히 맞는 한식 레시피이며 새우 알레르기와도 무관합니다[1][2][4][5].}, delta={role=assistant, content=}}]}
2025-06-27 17:25:31.614 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:25:31.614 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 제육 덮밥  
2. 카테고리: 한식  
3. 조리 시간: 25분  
4. 난이도: 중  
5. 이미지 URL: https://www.10000recipe.com/recipe/6882381 (만개의 레시피 내 제육볶음 이미지 참고)  
6. 필요한 재료와 양:  
   - 돼지고기 앞다리살 또는 뒷다리살 불고기용 300g  
   - 양파 1/2개  
   - 대파 1대  
   - 고추장 2 큰술  
   - 고춧가루 3 큰술  
   - 간장 2 큰술  
   - 설탕 2 큰술  
   - 다진 마늘 1 큰술  
   - 굴소스 1 큰술 (선택)  
   - 미림 1 큰술 (또는 청주)  
   - 후추 약간  
   - 식용유 적당량  
   - 밥 1공기  

7. 조리 방법:  
   1. 돼지고기는 소주와 미림을 섞은 액체에 15분 정도 재워 잡내를 제거한다.  
   2. 양파와 대파는 채 썰어 준비한다.  
   3. 팬에 식용유를 두르고 중불에서 다진 마늘을 볶아 향을 낸다.  
   4. 돼지고기를 넣고 겉면이 익을 때까지 볶는다.  
   5. 고추장, 고춧가루, 간장, 설탕, 굴소스, 미림, 후추를 넣어 양념장을 만들고 고기에 고루 섞어 볶는다.  
   6. 양파와 대파를 넣고 수분을 날리면서 볶아 국물이 거의 없어질 때까지 조리한다.  
   7. 완성된 제육볶음을 밥 위에 올려 덮밥 형태로 낸다.  

8. 요리 팁:  
   - 돼지고기 잡내가 신경 쓰이면 소주를 사용해 재우는 과정을 꼭 해주면 좋다.  
   - 육수를 살짝 넣어 조리하면 더 깊은 맛을 낼 수 있으나, 국물이 많이 생기지 않도록 주의한다.  
   - 고추장과 고춧가루의 양은 기호에 맞게 조절하여 매운맛을 맞춘다.  

*알레르기 안내: 제육 덮밥 레시피에는 새우나 새우 유래 재료가 포함되지 않아 알레르기 섭취에 문제가 없습니다.* 

위 레시피는 요청하신 제육 덮밥 요리에 정확히 맞는 한식 레시피이며 새우 알레르기와도 무관합니다[1][2][4][5].
2025-06-27 17:25:31.614 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:25:31.614 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:25:31.614 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육 덮밥  
2. 카테고리: 한식  
3. 조리 시간: 25분  
4. 난이도: 중  
5. 이미지 URL: https://www.10000recipe.com/recipe/6882381 (만개의 레시피 내 제육볶음 이미지 참고)  
6. 필요한 재료와 양:  
   - 돼지고기 앞다리살 또는 뒷다리살 불고기용 300g  
   - 양파 1/2개  
   - 대파 1대  
   - 고추장 2 큰술  
   - 고춧가루 3 큰술  
   - 간장 2 큰술  
   - 설탕 2 큰술  
   - 다진 마늘 1 큰술  
   - 굴소스 1 큰술 (선택)  
   - 미림 1 큰술 (또는 청주)  
   - 후추 약간  
   - 식용유 적당량  
   - 밥 1공기  

7. 조리 방법:  
   1. 돼지고기는 소주와 미림을 섞은 액체에 15분 정도 재워 잡내를 제거한다.  
   2. 양파와 대파는 채 썰어 준비한다.  
   3. 팬에 식용유를 두르고 중불에서 다진 마늘을 볶아 향을 낸다.  
   4. 돼지고기를 넣고 겉면이 익을 때까지 볶는다.  
   5. 고추장, 고춧가루, 간장, 설탕, 굴소스, 미림, 후추를 넣어 양념장을 만들고 고기에 고루 섞어 볶는다.  
   6. 양파와 대파를 넣고 수분을 날리면서 볶아 국물이 거의 없어질 때까지 조리한다.  
   7. 완성된 제육볶음을 밥 위에 올려 덮밥 형태로 낸다.  

8. 요리 팁:  
   - 돼지고기 잡내가 신경 쓰이면 소주를 사용해 재우는 과정을 꼭 해주면 좋다.  
   - 육수를 살짝 넣어 조리하면 더 깊은 맛을 낼 수 있으나, 국물이 많이 생기지 않도록 주의한다.  
   - 고추장과 고춧가루의 양은 기호에 맞게 조절하여 매운맛을 맞춘다.  

*알레르기 안내: 제육 덮밥 레시피에는 새우나 새우 유래 재료가 포함되지 않아 알레르기 섭취에 문제가 없습니다.* 

위 레시피는 요청하신 제육 덮밥 요리에 정확히 맞는 한식 레시피이며 새우 알레르기와도 무관합니다[1][2][4][5].
2025-06-27 17:25:31.618 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:25:31.622 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 17:25:31.622 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response: https://www.10000recipe.com/recipe/6882381 (만개의 레시피 내 제육볶음 이미지 참고)
2025-06-27 17:25:31.622 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://www.10000recipe.com/recipe/6882381 (만개의 레시피 내 제육볶음 이미지 참고)
2025-06-27 17:25:31.622 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 17:25:31.623 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 7): 1. 돼지고기는 소주와 미림을 섞은 액체에 15분 정도 재워 잡내를 제거한다.  
   2. 양파와 대파는 채 썰어 준비한다.  
   3. 팬에 식용유를 두르고 중불에서 다진 마
2025-06-27 17:25:31.624 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:25:31.624 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
1. 돼지고기는 소주와 미림을 섞은 액체에 15분 정도 재워 잡내를 제거한다.  
   2. 양파와 대파는 채 썰어 준비한다.  
   3. 팬에 식용유를 두르고 중불에서 다진 마늘을 볶아 향을 낸다.  
   4. 돼지고기를 넣고 겉면이 익을 때까지 볶는다.  
   5. 고추장, 고춧가루, 간장, 설탕, 굴소스, 미림, 후추를 넣어 양념장을 만들고 고기에 고루 섞어 볶는다.  
   6. 양파와 대파를 넣고 수분을 날리면서 볶아 국물이 거의 없어질 때까지 조리한다.  
   7. 완성된 제육볶음을 밥 위에 올려 덮밥 형태로 낸다.
2025-06-27 17:25:31.624 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 제육 덮밥
2025-06-27 17:25:31.653 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:25:31.660 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 61
2025-06-27 17:25:31.660 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:25:31.660 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 제육 덮밥
2025-06-27 17:25:31.660 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 조리 방법:
1. 돼지고기는 소주와 미림을 섞은 액체에 15분 정도 재워 잡내를 제거한다.  
   2. 양파와 대파는 채 썰어 준비한다.  
   3. 팬에 식용유를 두르고 중불에서 다진 마늘을 볶아 향을 낸다.  
   4. 돼지고기를 넣고 겉면이 익을 때까지 볶는다.  
   5. 고추장, 고춧가루, 간장, 설탕, 굴소스, 미림, 후추를 넣어 양념장을 만들고 고기에 고루 섞어 볶는다.  
   6. 양파와 대파를 넣고 수분을 날리면서 볶아 국물이 거의 없어질 때까지 조리한다.  
   7. 완성된 제육볶음을 밥 위에 올려 덮밥 형태로 낸다.
2025-06-27 17:25:31.660 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:25:31.662 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:29:23.738 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:29:23.748 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:29:23.757 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 17:29:28.543 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 17:29:28.569 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 96351 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 17:29:28.569 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 17:29:28.570 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 17:29:28.621 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 17:29:28.622 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 17:29:29.467 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:29:29.469 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 17:29:29.509 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:29:29.510 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:29:29.512 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:29:29.513 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:29:29.513 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:29:29.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:29:29.515 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:29:29.516 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:29:29.516 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 0 JDBC repository interfaces.
2025-06-27 17:29:29.530 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:29:29.530 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 17:29:29.633 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 100 ms. Found 8 JPA repository interfaces.
2025-06-27 17:29:29.663 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:29:29.664 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 17:29:29.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:29:29.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:29:29.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:29:29.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:29:29.677 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:29:29.677 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:29:29.677 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:29:29.677 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:29:29.677 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-27 17:29:30.297 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 17:29:30.304 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 17:29:30.306 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 17:29:30.306 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 17:29:30.342 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 17:29:30.343 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1720 ms
2025-06-27 17:29:30.388 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 17:29:30.525 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7b8c2aa5
2025-06-27 17:29:30.528 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 17:29:30.545 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 17:29:30.671 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 17:29:30.700 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 17:29:30.719 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 17:29:30.830 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 17:29:30.874 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 17:29:30.875 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 17:29:31.692 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 17:29:31.800 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:29:32.162 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 17:29:32.382 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 17:29:32.383 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 17:29:33.110 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 17:29:33.184 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 17:29:33.297 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4a8a353b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@674b2548, org.springframework.security.web.context.SecurityContextHolderFilter@228fe32e, org.springframework.security.web.header.HeaderWriterFilter@78849a0a, org.springframework.web.filter.CorsFilter@42344668, org.springframework.security.web.authentication.logout.LogoutFilter@55b04261, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@3eb08623, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@48b14332, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6e041b5d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2aba2fd5, org.springframework.security.web.session.SessionManagementFilter@2b512115, org.springframework.security.web.access.ExceptionTranslationFilter@4b7200a3, org.springframework.security.web.access.intercept.AuthorizationFilter@1f865d47]
2025-06-27 17:29:33.604 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 17:29:33.621 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 17:29:33.633 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 17:29:33.645 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.406 seconds (process running for 6.046)
2025-06-27 17:29:37.019 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 17:29:37.020 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 17:29:37.024 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-27 17:29:37.093 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:29:37.122 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:29:37.138 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:29:37.144 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:29:37.185 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:29:37.185 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:29:37.185 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 덮밥 레시피 주세요!
2025-06-27 17:29:37.186 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:29:37.186 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:29:37.241 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:29:37.244 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:29:37.245 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육 덮밥 레시피 주세요!
2025-06-27 17:29:37.245 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:29:37.245 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:29:37.245 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:29:37.245 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 주세요!
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:29:37.245 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:29:37.246 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 주세요!
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:29:37.246 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:29:37.246 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:29:37.247 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 주세요!
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:29:37.248 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:29:37.250 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:29:37.252 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:29:37.252 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 주세요!
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:29:37.252 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:29:37.252 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:29:37.252 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:29:37.252 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 주세요!
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:29:37.253 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:29:37.254 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 주세요!
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:29:37.256 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751012977255
2025-06-27 17:29:37.256 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:29:37.258 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 주세요!
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자 요청에 정확히 맞는 레시피 추천
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 제육 덮밥 레시피 주세요!
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751012977255)}], model=sonar-pro}
2025-06-27 17:29:47.944 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:29:47.945 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=9a879006-b0a0-49cb-8c8b-9f229d11b408, model=sonar-pro, created=1751012987, usage={prompt_tokens=2079, completion_tokens=723, total_tokens=2802, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6882381, https://blog.naver.com/starship89/223451205222, https://blog.naver.com/catseyesung/222509655920, https://www.10000recipe.com/recipe/6836534, https://www.youtube.com/watch?v=njnISC6D-ng], search_results=[{title=제육볶음 만드는 법 :: 제육덮밥 만들기 - 만개의레시피, url=https://www.10000recipe.com/recipe/6882381, date=2018-01-16, last_updated=2025-02-21}, {title=기사식당 제육볶음 레시피 제육덮밥 만드는법 제육볶음 양념장 만들기 ..., url=https://blog.naver.com/starship89/223451205222, date=2024-05-20, last_updated=2025-03-09}, {title=매콤한 제육덮밥 만들기. 맛있게 비벼 먹는 한그릇 요리. : 네이버 블로그, url=https://blog.naver.com/catseyesung/222509655920, date=2021-09-18, last_updated=null}, {title=백종원 제육볶음 응용해, '제육덮밥' 만들기! - 만개의레시피, url=https://www.10000recipe.com/recipe/6836534, date=2015-10-21, last_updated=2025-05-18}, {title=이렇게 만드시면 제육덮밥 고수 소리 듣습니다 ㅣ100 ... - YouTube, url=https://www.youtube.com/watch?v=njnISC6D-ng, date=2025-03-01, last_updated=2025-06-02}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 제육덮밥

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 돼지고기는 먹기 좋은 크기로 썰어 준비한다.
   2. 볼에 돼지고기, 설탕(2스푼), 간장(2스푼)을 넣고 밑간한 뒤 10~15분간 재운다[2].
   3. 재워둔 고기에 고춧가루(3스푼), 고추장(1~2스푼), 다진마늘(1스푼), 맛술(미림, 1스푼), 굴소스(1스푼, 생략 가능), 후추 약간을 넣고 골고루 섞는다[1][2][4].
   4. 양파, 대파, 당근 등 야채는 채썰어 준비한다.
   5. 팬에 식용유를 두르고 양파, 대파, 당근을 볶아 향을 낸다.
   6. 양념한 돼지고기를 넣고 센 불에서 고기가 익을 때까지 잘 볶는다.
   7. 고기가 익으면 불을 줄여 재료가 골고루 어우러지도록 3~5분 더 볶는다.
   8. 밥 위에 완성된 제육볶음을 얹어 제육덮밥으로 완성한다.

5. 필요한 재료와 양:
   - 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1/3대
   - 당근 약간
   - 고춧가루 3스푼
   - 고추장 1~2스푼
   - 간장 2스푼
   - 설탕 2스푼
   - 다진 마늘 1스푼
   - 맛술(미림) 1스푼
   - 굴소스 1스푼(생략 가능)
   - 후추 약간
   - 식용유 1스푼
   - 밥 1공기

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/01/16/5a5d9c700336b.jpg

8. 요리 팁:
   - 돼지고기는 너무 두껍지 않은 앞다리살 또는 얇은 목살을 사용하면 양념이 잘 배고 식감이 좋아요[2].
   - 굴소스를 넣으면 감칠맛이 더해지고, 잡내가 신경 쓰인다면 소주나 미림에 재워두세요[1].
   - 야채는 취향에 따라 버섯, 애호박 등을 추가해도 좋습니다.
   - 남은 양념은 밥 비벼 먹거나 볶음밥으로 활용할 수 있습니다.

※ 제육덮밥에는 새우가 들어가지 않으므로 안심하고 드실 수 있습니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:29:47.945 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:29:47.946 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 제육덮밥

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 돼지고기는 먹기 좋은 크기로 썰어 준비한다.
   2. 볼에 돼지고기, 설탕(2스푼), 간장(2스푼)을 넣고 밑간한 뒤 10~15분간 재운다[2].
   3. 재워둔 고기에 고춧가루(3스푼), 고추장(1~2스푼), 다진마늘(1스푼), 맛술(미림, 1스푼), 굴소스(1스푼, 생략 가능), 후추 약간을 넣고 골고루 섞는다[1][2][4].
   4. 양파, 대파, 당근 등 야채는 채썰어 준비한다.
   5. 팬에 식용유를 두르고 양파, 대파, 당근을 볶아 향을 낸다.
   6. 양념한 돼지고기를 넣고 센 불에서 고기가 익을 때까지 잘 볶는다.
   7. 고기가 익으면 불을 줄여 재료가 골고루 어우러지도록 3~5분 더 볶는다.
   8. 밥 위에 완성된 제육볶음을 얹어 제육덮밥으로 완성한다.

5. 필요한 재료와 양:
   - 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1/3대
   - 당근 약간
   - 고춧가루 3스푼
   - 고추장 1~2스푼
   - 간장 2스푼
   - 설탕 2스푼
   - 다진 마늘 1스푼
   - 맛술(미림) 1스푼
   - 굴소스 1스푼(생략 가능)
   - 후추 약간
   - 식용유 1스푼
   - 밥 1공기

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/01/16/5a5d9c700336b.jpg

8. 요리 팁:
   - 돼지고기는 너무 두껍지 않은 앞다리살 또는 얇은 목살을 사용하면 양념이 잘 배고 식감이 좋아요[2].
   - 굴소스를 넣으면 감칠맛이 더해지고, 잡내가 신경 쓰인다면 소주나 미림에 재워두세요[1].
   - 야채는 취향에 따라 버섯, 애호박 등을 추가해도 좋습니다.
   - 남은 양념은 밥 비벼 먹거나 볶음밥으로 활용할 수 있습니다.

※ 제육덮밥에는 새우가 들어가지 않으므로 안심하고 드실 수 있습니다.
2025-06-27 17:29:47.946 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:29:47.946 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:29:47.946 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육덮밥

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 돼지고기는 먹기 좋은 크기로 썰어 준비한다.
   2. 볼에 돼지고기, 설탕(2스푼), 간장(2스푼)을 넣고 밑간한 뒤 10~15분간 재운다[2].
   3. 재워둔 고기에 고춧가루(3스푼), 고추장(1~2스푼), 다진마늘(1스푼), 맛술(미림, 1스푼), 굴소스(1스푼, 생략 가능), 후추 약간을 넣고 골고루 섞는다[1][2][4].
   4. 양파, 대파, 당근 등 야채는 채썰어 준비한다.
   5. 팬에 식용유를 두르고 양파, 대파, 당근을 볶아 향을 낸다.
   6. 양념한 돼지고기를 넣고 센 불에서 고기가 익을 때까지 잘 볶는다.
   7. 고기가 익으면 불을 줄여 재료가 골고루 어우러지도록 3~5분 더 볶는다.
   8. 밥 위에 완성된 제육볶음을 얹어 제육덮밥으로 완성한다.

5. 필요한 재료와 양:
   - 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1/3대
   - 당근 약간
   - 고춧가루 3스푼
   - 고추장 1~2스푼
   - 간장 2스푼
   - 설탕 2스푼
   - 다진 마늘 1스푼
   - 맛술(미림) 1스푼
   - 굴소스 1스푼(생략 가능)
   - 후추 약간
   - 식용유 1스푼
   - 밥 1공기

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/01/16/5a5d9c700336b.jpg

8. 요리 팁:
   - 돼지고기는 너무 두껍지 않은 앞다리살 또는 얇은 목살을 사용하면 양념이 잘 배고 식감이 좋아요[2].
   - 굴소스를 넣으면 감칠맛이 더해지고, 잡내가 신경 쓰인다면 소주나 미림에 재워두세요[1].
   - 야채는 취향에 따라 버섯, 애호박 등을 추가해도 좋습니다.
   - 남은 양념은 밥 비벼 먹거나 볶음밥으로 활용할 수 있습니다.

※ 제육덮밥에는 새우가 들어가지 않으므로 안심하고 드실 수 있습니다.
2025-06-27 17:29:47.949 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:29:47.953 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 17:29:47.953 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1/3대
   - 당근 약간
   - 고춧가루 3스푼
   - 고추장 1~2스푼
   - 간장 2스푼
   - 설탕 2스푼
   - 다진 마늘 1스푼
   - 맛술(미림) 1스푼
   - 굴소스 1스푼(생략 가능)
   - 후추 약간
   - 식용유 1스푼
   - 밥 1공기
2025-06-27 17:29:47.953 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살 또는 목살) 300g
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 돼지고기(앞다리살 또는 목살) 300g
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/3대
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/3대
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 약간
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 약간
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 3스푼
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 3스푼
2025-06-27 17:29:47.954 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 3스푼
2025-06-27 17:29:47.959 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:29:47.962 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-27 17:29:47.962 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 1~2스푼
2025-06-27 17:29:47.962 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추장 1~2스푼
2025-06-27 17:29:47.962 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2스푼
2025-06-27 17:29:47.962 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2스푼
2025-06-27 17:29:47.962 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2스푼
2025-06-27 17:29:47.963 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:29:47.965 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-27 17:29:47.965 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 2스푼
2025-06-27 17:29:47.965 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 2스푼
2025-06-27 17:29:47.965 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 2스푼
2025-06-27 17:29:47.966 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:29:47.968 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-27 17:29:47.968 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1스푼
2025-06-27 17:29:47.968 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1스푼
2025-06-27 17:29:47.968 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1스푼
2025-06-27 17:29:47.971 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:29:47.972 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-27 17:29:47.972 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술(미림) 1스푼
2025-06-27 17:29:47.972 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 맛술(미림) 1스푼
2025-06-27 17:29:47.972 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굴소스 1스푼(생략 가능)
2025-06-27 17:29:47.972 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 굴소스, Amount: 1스푼
2025-06-27 17:29:47.972 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 굴소스, Amount: 1스푼
2025-06-27 17:29:47.974 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:29:47.974 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '굴소스' not found in DB. Skipping.
2025-06-27 17:29:47.974 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 17:29:47.975 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 17:29:47.975 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1스푼
2025-06-27 17:29:47.975 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 1스푼
2025-06-27 17:29:47.975 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1스푼
2025-06-27 17:29:47.976 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:29:47.976 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-27 17:29:47.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기
2025-06-27 17:29:47.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-27 17:29:47.977 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-27 17:29:47.978 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:29:47.979 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-27 17:29:47.981 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기는 먹기 좋은 크기로 썰어 준비한다.
   2. 볼에 돼지고기, 설탕(2스푼), 간장(2스푼)을 넣고 밑간한 뒤 10~15분간 재운다[2].
   3. 재워둔 고기에 
2025-06-27 17:29:47.981 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:29:47.982 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1/3대
   - 당근 약간
   - 고춧가루 3스푼
   - 고추장 1~2스푼
   - 간장 2스푼
   - 설탕 2스푼
   - 다진 마늘 1스푼
   - 맛술(미림) 1스푼
   - 굴소스 1스푼(생략 가능)
   - 후추 약간
   - 식용유 1스푼
   - 밥 1공기

조리 방법:
1. 돼지고기는 먹기 좋은 크기로 썰어 준비한다.
   2. 볼에 돼지고기, 설탕(2스푼), 간장(2스푼)을 넣고 밑간한 뒤 10~15분간 재운다[2].
   3. 재워둔 고기에 고춧가루(3스푼), 고추장(1~2스푼), 다진마늘(1스푼), 맛술(미림, 1스푼), 굴소스(1스푼, 생략 가능), 후추 약간을 넣고 골고루 섞는다[1][2][4].
   4. 양파, 대파, 당근 등 야채는 채썰어 준비한다.
   5. 팬에 식용유를 두르고 양파, 대파, 당근을 볶아 향을 낸다.
   6. 양념한 돼지고기를 넣고 센 불에서 고기가 익을 때까지 잘 볶는다.
   7. 고기가 익으면 불을 줄여 재료가 골고루 어우러지도록 3~5분 더 볶는다.
   8. 밥 위에 완성된 제육볶음을 얹어 제육덮밥으로 완성한다.
2025-06-27 17:29:47.982 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 제육덮밥
2025-06-27 17:29:48.003 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:29:48.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 63
2025-06-27 17:29:48.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:29:48.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 제육덮밥
2025-06-27 17:29:48.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1/3대
   - 당근 약간
   - 고춧가루 3스푼
   - 고추장 1~2스푼
   - 간장 2스푼
   - 설탕 2스푼
   - 다진 마늘 1스푼
   - 맛술(미림) 1스푼
   - 굴소스 1스푼(생략 가능)
   - 후추 약간
   - 식용유 1스푼
   - 밥 1공기

조리 방법:
1. 돼지고기는 먹기 좋은 크기로 썰어 준비한다.
   2. 볼에 돼지고기, 설탕(2스푼), 간장(2스푼)을 넣고 밑간한 뒤 10~15분간 재운다[2].
   3. 재워둔 고기에 고춧가루(3스푼), 고추장(1~2스푼), 다진마늘(1스푼), 맛술(미림, 1스푼), 굴소스(1스푼, 생략 가능), 후추 약간을 넣고 골고루 섞는다[1][2][4].
   4. 양파, 대파, 당근 등 야채는 채썰어 준비한다.
   5. 팬에 식용유를 두르고 양파, 대파, 당근을 볶아 향을 낸다.
   6. 양념한 돼지고기를 넣고 센 불에서 고기가 익을 때까지 잘 볶는다.
   7. 고기가 익으면 불을 줄여 재료가 골고루 어우러지도록 3~5분 더 볶는다.
   8. 밥 위에 완성된 제육볶음을 얹어 제육덮밥으로 완성한다.
2025-06-27 17:29:48.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:29:48.022 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:37:42.009 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:37:42.016 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:37:42.023 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 17:37:47.230 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 17:37:47.257 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 96924 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 17:37:47.258 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 17:37:47.259 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 17:37:47.309 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 17:37:47.310 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 17:37:48.171 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:37:48.172 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 17:37:48.209 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:37:48.210 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:37:48.211 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:37:48.212 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:37:48.213 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:37:48.213 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:37:48.214 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:37:48.215 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:37:48.215 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40 ms. Found 0 JDBC repository interfaces.
2025-06-27 17:37:48.228 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:37:48.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 17:37:48.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 8 JPA repository interfaces.
2025-06-27 17:37:48.357 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:37:48.357 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 17:37:48.371 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:37:48.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:37:48.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:37:48.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:37:48.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:37:48.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:37:48.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:37:48.373 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:37:48.373 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-06-27 17:37:49.016 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 17:37:49.025 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 17:37:49.027 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 17:37:49.028 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 17:37:49.067 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 17:37:49.069 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1757 ms
2025-06-27 17:37:49.110 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 17:37:49.256 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5b3e9087
2025-06-27 17:37:49.260 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 17:37:49.276 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 17:37:49.410 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 17:37:49.440 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 17:37:49.458 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 17:37:49.565 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 17:37:49.608 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 17:37:49.609 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 17:37:50.461 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 17:37:50.500 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table recipe 
       add column image_url varchar(500)
2025-06-27 17:37:50.587 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:37:50.974 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 17:37:51.188 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 17:37:51.190 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 17:37:52.059 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 17:37:52.296 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 17:37:52.421 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@44f40829, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@23303427, org.springframework.security.web.context.SecurityContextHolderFilter@14aea603, org.springframework.security.web.header.HeaderWriterFilter@436d33b, org.springframework.web.filter.CorsFilter@65ffa82f, org.springframework.security.web.authentication.logout.LogoutFilter@22bcd047, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@21e98968, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@72e57a87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@42ac6588, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1d49a1c0, org.springframework.security.web.session.SessionManagementFilter@6b4dad51, org.springframework.security.web.access.ExceptionTranslationFilter@594ea9e5, org.springframework.security.web.access.intercept.AuthorizationFilter@1e5f2f87]
2025-06-27 17:37:52.737 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 17:37:52.755 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 17:37:52.761 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 17:37:52.776 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.856 seconds (process running for 6.518)
2025-06-27 17:37:55.511 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 17:37:55.512 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 17:37:55.516 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-06-27 17:37:55.577 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:37:55.617 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:37:55.635 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:37:55.641 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:37:55.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:37:55.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:37:55.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 토스트 레시피 알려줘
2025-06-27 17:37:55.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:37:55.680 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:37:55.738 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:37:55.742 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:37:55.742 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 토스트 레시피 알려줘
2025-06-27 17:37:55.742 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:37:55.742 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:37:55.742 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:37:55.742 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:37:55.743 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:37:55.743 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:37:55.744 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:37:55.745 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:37:55.745 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:37:55.745 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:37:55.748 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:37:55.749 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:37:55.749 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:37:55.750 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:37:55.750 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:37:55.751 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:37:55.752 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:37:55.752 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:37:55.752 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:37:55.753 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751013475753
2025-06-27 17:37:55.754 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:37:55.755 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요. (예: https://example.com/recipe-image.jpg)
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 반드시 실제 존재하는 요리 이미지의 URL을 제공해주세요.
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751013475753)}], model=sonar-pro}
2025-06-27 17:38:03.704 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:38:03.704 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=a3b400e1-78e3-473a-b6d3-50d31721735f, model=sonar-pro, created=1751013483, usage={prompt_tokens=2334, completion_tokens=436, total_tokens=2770, search_context_size=low}, citations=[https://blog.naver.com/sk4597/220763305152, https://www.10000recipe.com/recipe/7045674, https://blog.naver.com/nkh9475/222613552858, https://www.ajunews.com/view/20160504161138243, https://www.youtube.com/watch?v=uz_lfhhbPsk], search_results=[{title=[백종원어묵토스트] 새우가 없는데도 새우맛이!! 백종원새우토스트, url=https://blog.naver.com/sk4597/220763305152, date=2016-07-15, last_updated=null}, {title=양배추 또띠아 토스트/ 양배추 또띠아 샌드위치 간단점심메뉴, url=https://www.10000recipe.com/recipe/7045674, date=2025-02-22, last_updated=2025-05-22}, {title=편스토랑 류수영 토스트 레시피 참깨 설탕 식빵 버터토스트 ..., url=https://blog.naver.com/nkh9475/222613552858, date=2022-01-05, last_updated=2025-05-05}, {title=[비법 전수] 백종원의 '새우 없는 새우버거?' 어묵 토스트 ..., url=https://www.ajunews.com/view/20160504161138243, date=2016-05-04, last_updated=null}, {title=간단하게 새우토스트 만들기 l 저칼로리 간식 l Shrimp toast ..., url=https://www.youtube.com/watch?v=uz_lfhhbPsk, date=2024-06-18, last_updated=2025-03-23}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 류수영 버터 설탕 토스트  
2. 카테고리: 양식  
3. 조리 시간: 10분  
4. 조리 방법:
   1. 식빵 위에 버터를 두툼하게 발라줍니다.
   2. 프라이팬을 중불로 달군 뒤, 버터 바른 식빵을 앞뒤로 노릇하게 구워줍니다.
   3. 구운 식빵 위에 설탕을 고루 뿌려줍니다.
   4. 참깨와 원하는 경우 계피가루(시나몬)를 솔솔 뿌려줍니다.
   5. 마지막으로 한 번 더 프라이팬에 올려 설탕이 살짝 녹을 때까지 약하게 굽고, 먹기 좋게 잘라 완성합니다.

5. 필요한 재료와 양:
   - 식빵 2장
   - 버터 2큰술
   - 설탕 1큰술
   - 참깨 1작은술
   - (선택) 계피가루 약간

6. 난이도: 하  
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/02/06/7a22b8fd4f56c352a2ee1183581b2ebc1.jpg  
8. 요리 팁:
   - 버터는 식빵에 넉넉히 바르면 더 고소합니다.
   - 설탕과 참깨를 충분히 뿌려주면 달콤하고 고소한 풍미가 살아납니다.  
   - 계피가루를 더하면 더욱 향긋하게 즐길 수 있습니다.

※ 새우 등 알레르기 재료가 포함되지 않은 레시피이므로 안심하고 섭취하셔도 됩니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:38:03.705 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:38:03.705 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 류수영 버터 설탕 토스트  
2. 카테고리: 양식  
3. 조리 시간: 10분  
4. 조리 방법:
   1. 식빵 위에 버터를 두툼하게 발라줍니다.
   2. 프라이팬을 중불로 달군 뒤, 버터 바른 식빵을 앞뒤로 노릇하게 구워줍니다.
   3. 구운 식빵 위에 설탕을 고루 뿌려줍니다.
   4. 참깨와 원하는 경우 계피가루(시나몬)를 솔솔 뿌려줍니다.
   5. 마지막으로 한 번 더 프라이팬에 올려 설탕이 살짝 녹을 때까지 약하게 굽고, 먹기 좋게 잘라 완성합니다.

5. 필요한 재료와 양:
   - 식빵 2장
   - 버터 2큰술
   - 설탕 1큰술
   - 참깨 1작은술
   - (선택) 계피가루 약간

6. 난이도: 하  
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/02/06/7a22b8fd4f56c352a2ee1183581b2ebc1.jpg  
8. 요리 팁:
   - 버터는 식빵에 넉넉히 바르면 더 고소합니다.
   - 설탕과 참깨를 충분히 뿌려주면 달콤하고 고소한 풍미가 살아납니다.  
   - 계피가루를 더하면 더욱 향긋하게 즐길 수 있습니다.

※ 새우 등 알레르기 재료가 포함되지 않은 레시피이므로 안심하고 섭취하셔도 됩니다.
2025-06-27 17:38:03.706 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:38:03.706 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:38:03.706 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 류수영 버터 설탕 토스트  
2. 카테고리: 양식  
3. 조리 시간: 10분  
4. 조리 방법:
   1. 식빵 위에 버터를 두툼하게 발라줍니다.
   2. 프라이팬을 중불로 달군 뒤, 버터 바른 식빵을 앞뒤로 노릇하게 구워줍니다.
   3. 구운 식빵 위에 설탕을 고루 뿌려줍니다.
   4. 참깨와 원하는 경우 계피가루(시나몬)를 솔솔 뿌려줍니다.
   5. 마지막으로 한 번 더 프라이팬에 올려 설탕이 살짝 녹을 때까지 약하게 굽고, 먹기 좋게 잘라 완성합니다.

5. 필요한 재료와 양:
   - 식빵 2장
   - 버터 2큰술
   - 설탕 1큰술
   - 참깨 1작은술
   - (선택) 계피가루 약간

6. 난이도: 하  
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/02/06/7a22b8fd4f56c352a2ee1183581b2ebc1.jpg  
8. 요리 팁:
   - 버터는 식빵에 넉넉히 바르면 더 고소합니다.
   - 설탕과 참깨를 충분히 뿌려주면 달콤하고 고소한 풍미가 살아납니다.  
   - 계피가루를 더하면 더욱 향긋하게 즐길 수 있습니다.

※ 새우 등 알레르기 재료가 포함되지 않은 레시피이므로 안심하고 섭취하셔도 됩니다.
2025-06-27 17:38:03.710 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:38:03.714 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 17:38:03.714 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2021/02/06/7a22b8fd4f56c352a2ee1183581b2ebc1.jpg
2025-06-27 17:38:03.714 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/02/06/7a22b8fd4f56c352a2ee1183581b2ebc1.jpg
2025-06-27 17:38:03.714 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 2장
   - 버터 2큰술
   - 설탕 1큰술
   - 참깨 1작은술
   - (선택) 계피가루 약간
2025-06-27 17:38:03.715 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 5
2025-06-27 17:38:03.715 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 2장
2025-06-27 17:38:03.715 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 2장
2025-06-27 17:38:03.715 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 2장
2025-06-27 17:38:03.720 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:38:03.723 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-27 17:38:03.724 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 2큰술
2025-06-27 17:38:03.724 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 버터, Amount: 2큰술
2025-06-27 17:38:03.724 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 버터, Amount: 2큰술
2025-06-27 17:38:03.725 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:38:03.727 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '버터' not found in DB. Skipping.
2025-06-27 17:38:03.728 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-27 17:38:03.728 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-27 17:38:03.728 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-27 17:38:03.730 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:38:03.732 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-27 17:38:03.732 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참깨 1작은술
2025-06-27 17:38:03.732 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참깨, Amount: 1작은술
2025-06-27 17:38:03.733 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참깨, Amount: 1작은술
2025-06-27 17:38:03.735 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:38:03.737 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '참깨' not found in DB. Skipping.
2025-06-27 17:38:03.737 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 계피가루 약간
2025-06-27 17:38:03.737 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (선택) 계피가루 약간
2025-06-27 17:38:03.738 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 식빵 위에 버터를 두툼하게 발라줍니다.
   2. 프라이팬을 중불로 달군 뒤, 버터 바른 식빵을 앞뒤로 노릇하게 구워줍니다.
   3. 구운 식빵 위에 설탕을 고루 뿌려줍니다
2025-06-27 17:38:03.738 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:38:03.739 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 2장
   - 버터 2큰술
   - 설탕 1큰술
   - 참깨 1작은술
   - (선택) 계피가루 약간

조리 방법:
1. 식빵 위에 버터를 두툼하게 발라줍니다.
   2. 프라이팬을 중불로 달군 뒤, 버터 바른 식빵을 앞뒤로 노릇하게 구워줍니다.
   3. 구운 식빵 위에 설탕을 고루 뿌려줍니다.
   4. 참깨와 원하는 경우 계피가루(시나몬)를 솔솔 뿌려줍니다.
   5. 마지막으로 한 번 더 프라이팬에 올려 설탕이 살짝 녹을 때까지 약하게 굽고, 먹기 좋게 잘라 완성합니다.
2025-06-27 17:38:03.739 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 류수영 버터 설탕 토스트
2025-06-27 17:38:03.767 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:38:03.775 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 65
2025-06-27 17:38:03.775 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:38:03.775 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 류수영 버터 설탕 토스트
2025-06-27 17:38:03.776 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 식빵 2장
   - 버터 2큰술
   - 설탕 1큰술
   - 참깨 1작은술
   - (선택) 계피가루 약간

조리 방법:
1. 식빵 위에 버터를 두툼하게 발라줍니다.
   2. 프라이팬을 중불로 달군 뒤, 버터 바른 식빵을 앞뒤로 노릇하게 구워줍니다.
   3. 구운 식빵 위에 설탕을 고루 뿌려줍니다.
   4. 참깨와 원하는 경우 계피가루(시나몬)를 솔솔 뿌려줍니다.
   5. 마지막으로 한 번 더 프라이팬에 올려 설탕이 살짝 녹을 때까지 약하게 굽고, 먹기 좋게 잘라 완성합니다.
2025-06-27 17:38:03.777 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:38:03.778 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:44:43.649 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:44:43.655 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:44:43.663 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 17:44:48.982 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 17:44:49.010 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 97375 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 17:44:49.010 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 17:44:49.011 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 17:44:49.064 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 17:44:49.064 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 17:44:49.918 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:44:49.919 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 17:44:49.958 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:44:49.960 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:44:49.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:44:49.962 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:44:49.963 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:44:49.963 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:44:49.964 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:44:49.965 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:44:49.965 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 JDBC repository interfaces.
2025-06-27 17:44:49.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:44:49.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 17:44:50.106 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 122 ms. Found 8 JPA repository interfaces.
2025-06-27 17:44:50.138 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:44:50.138 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 17:44:50.150 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:44:50.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:44:50.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:44:50.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:44:50.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:44:50.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:44:50.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:44:50.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:44:50.151 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-27 17:44:50.796 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 17:44:50.804 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 17:44:50.806 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 17:44:50.807 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 17:44:50.844 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 17:44:50.846 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1780 ms
2025-06-27 17:44:50.878 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 17:44:51.014 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@74d1e2a0
2025-06-27 17:44:51.017 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 17:44:51.033 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 17:44:51.254 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 17:44:51.283 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 17:44:51.302 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 17:44:51.421 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 17:44:51.468 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 17:44:51.469 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 17:44:52.360 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 17:44:52.475 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:44:52.852 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 17:44:53.103 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 17:44:53.104 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 17:44:54.009 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 17:44:54.092 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 17:44:54.230 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@334f0320, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@12a57195, org.springframework.security.web.context.SecurityContextHolderFilter@de99989, org.springframework.security.web.header.HeaderWriterFilter@5eae049, org.springframework.web.filter.CorsFilter@504f1820, org.springframework.security.web.authentication.logout.LogoutFilter@4d3d8de0, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@1d6c548c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3e4f6b1c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6b4dad51, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1e5f2f87, org.springframework.security.web.session.SessionManagementFilter@1bd9ee13, org.springframework.security.web.access.ExceptionTranslationFilter@13825d14, org.springframework.security.web.access.intercept.AuthorizationFilter@7427e3]
2025-06-27 17:44:54.549 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 17:44:54.567 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 17:44:54.581 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 17:44:54.594 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.916 seconds (process running for 6.532)
2025-06-27 17:46:20.095 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 17:46:20.096 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 17:46:20.101 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
2025-06-27 17:46:20.214 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:46:20.256 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:46:20.281 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:46:20.288 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:46:20.340 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:46:20.340 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:46:20.341 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
2025-06-27 17:46:20.342 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:46:20.342 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:46:20.408 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:46:20.412 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:46:20.412 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
2025-06-27 17:46:20.412 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:46:20.412 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:46:20.413 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:46:20.413 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:46:20.413 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:46:20.413 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:46:20.414 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:46:20.415 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:46:20.416 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:46:20.416 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:46:20.420 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:46:20.423 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:46:20.423 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:46:20.423 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:46:20.423 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:46:20.424 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:46:20.424 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:46:20.425 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:46:20.425 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:46:20.426 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751013980426
2025-06-27 17:46:20.426 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:46:20.428 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에서 만들어 먹기 좋은 레시피 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751013980426)}], model=sonar-pro}
2025-06-27 17:46:28.367 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:46:28.367 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=6d878f1d-e92b-440d-97d8-eff14dc05966, model=sonar-pro, created=1751013988, usage={prompt_tokens=2467, completion_tokens=463, total_tokens=2930, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/r040415/222082579451, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/watch?v=GyJS53u3U-c], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=간단한 아침식사 메뉴 집밥이 최고! 주간밥상 일주일식단 - 네이버 블로그, url=https://blog.naver.com/r040415/222082579451, date=2020-09-07, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요! 일주일 아침밥 7 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=아침밥 9가지. 국과 반찬이 있는 아침식단 - YouTube, url=https://www.youtube.com/watch?v=GyJS53u3U-c, date=2022-10-03, last_updated=2025-05-25}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 대파베이컨볶음밥

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 대파를 송송 썰고, 베이컨을 한 입 크기로 자른다.
   2. 중불로 달군 팬에 기름을 두르고 대파를 먼저 볶아 파기름을 낸다.
   3. 베이컨을 넣고 충분히 볶아 향을 더한다.
   4. 찬밥을 넣고 밥알이 풀어지도록 고루 볶는다.
   5. 굴소스 1스푼을 넣고 전체적으로 잘 섞어 볶아준다.
   6. 밥을 팬 한쪽으로 밀고 계란 두 개를 풀어 스크램블한 뒤 밥과 함께 섞는다.
   7. 마지막에 참기름을 두르고 전체적으로 섞어 마무리한다[4].

5. 필요한 재료와 양:
   - 대파 1대(많이, 기호에 따라)
   - 베이컨 한 줌(약 50g)
   - 찬밥 1공기
   - 계란 2개
   - 굴소스 1스푼
   - 식용유 1~2스푼
   - 참기름 1스푼

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/05/17/2f5e9b2f9003e654cdc9e1d4492cb3131.jpg

8. 요리 팁:
   - 대파를 넉넉히 사용하면 파기름이 나서 풍미가 좋습니다.
   - 베이컨 대신 햄이나 소시지 등 다른 재료로 대체해도 잘 어울립니다.
   - 계란을 따로 반숙으로 익혀 올려도 맛있습니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:46:28.368 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:46:28.368 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 대파베이컨볶음밥

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 대파를 송송 썰고, 베이컨을 한 입 크기로 자른다.
   2. 중불로 달군 팬에 기름을 두르고 대파를 먼저 볶아 파기름을 낸다.
   3. 베이컨을 넣고 충분히 볶아 향을 더한다.
   4. 찬밥을 넣고 밥알이 풀어지도록 고루 볶는다.
   5. 굴소스 1스푼을 넣고 전체적으로 잘 섞어 볶아준다.
   6. 밥을 팬 한쪽으로 밀고 계란 두 개를 풀어 스크램블한 뒤 밥과 함께 섞는다.
   7. 마지막에 참기름을 두르고 전체적으로 섞어 마무리한다[4].

5. 필요한 재료와 양:
   - 대파 1대(많이, 기호에 따라)
   - 베이컨 한 줌(약 50g)
   - 찬밥 1공기
   - 계란 2개
   - 굴소스 1스푼
   - 식용유 1~2스푼
   - 참기름 1스푼

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/05/17/2f5e9b2f9003e654cdc9e1d4492cb3131.jpg

8. 요리 팁:
   - 대파를 넉넉히 사용하면 파기름이 나서 풍미가 좋습니다.
   - 베이컨 대신 햄이나 소시지 등 다른 재료로 대체해도 잘 어울립니다.
   - 계란을 따로 반숙으로 익혀 올려도 맛있습니다.
2025-06-27 17:46:28.369 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:46:28.369 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:46:28.369 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 대파베이컨볶음밥

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 대파를 송송 썰고, 베이컨을 한 입 크기로 자른다.
   2. 중불로 달군 팬에 기름을 두르고 대파를 먼저 볶아 파기름을 낸다.
   3. 베이컨을 넣고 충분히 볶아 향을 더한다.
   4. 찬밥을 넣고 밥알이 풀어지도록 고루 볶는다.
   5. 굴소스 1스푼을 넣고 전체적으로 잘 섞어 볶아준다.
   6. 밥을 팬 한쪽으로 밀고 계란 두 개를 풀어 스크램블한 뒤 밥과 함께 섞는다.
   7. 마지막에 참기름을 두르고 전체적으로 섞어 마무리한다[4].

5. 필요한 재료와 양:
   - 대파 1대(많이, 기호에 따라)
   - 베이컨 한 줌(약 50g)
   - 찬밥 1공기
   - 계란 2개
   - 굴소스 1스푼
   - 식용유 1~2스푼
   - 참기름 1스푼

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/05/17/2f5e9b2f9003e654cdc9e1d4492cb3131.jpg

8. 요리 팁:
   - 대파를 넉넉히 사용하면 파기름이 나서 풍미가 좋습니다.
   - 베이컨 대신 햄이나 소시지 등 다른 재료로 대체해도 잘 어울립니다.
   - 계란을 따로 반숙으로 익혀 올려도 맛있습니다.
2025-06-27 17:46:28.372 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:46:28.375 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 17:46:28.376 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2016/05/17/2f5e9b2f9003e654cdc9e1d4492cb3131.jpg
2025-06-27 17:46:28.376 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/05/17/2f5e9b2f9003e654cdc9e1d4492cb3131.jpg
2025-06-27 17:46:28.376 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 대파 1대(많이, 기호에 따라)
   - 베이컨 한 줌(약 50g)
   - 찬밥 1공기
   - 계란 2개
   - 굴소스 1스푼
   - 식용유 1~2스푼
   - 참기름 1스푼
2025-06-27 17:46:28.376 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 7
2025-06-27 17:46:28.376 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대(많이, 기호에 따라)
2025-06-27 17:46:28.376 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-27 17:46:28.376 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-27 17:46:28.382 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:46:28.385 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-27 17:46:28.386 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 베이컨 한 줌(약 50g)
2025-06-27 17:46:28.386 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 50g
2025-06-27 17:46:28.386 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 50g
2025-06-27 17:46:28.387 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:46:28.388 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-27 17:46:28.389 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 찬밥 1공기
2025-06-27 17:46:28.390 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 찬밥, Amount: 1공기
2025-06-27 17:46:28.390 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 찬밥, Amount: 1공기
2025-06-27 17:46:28.392 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:46:28.393 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '찬밥' not found in DB. Skipping.
2025-06-27 17:46:28.393 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 2개
2025-06-27 17:46:28.393 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 2개
2025-06-27 17:46:28.393 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 2개
2025-06-27 17:46:28.396 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:46:28.398 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-27 17:46:28.400 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굴소스 1스푼
2025-06-27 17:46:28.400 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 굴소스, Amount: 1스푼
2025-06-27 17:46:28.400 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 굴소스, Amount: 1스푼
2025-06-27 17:46:28.402 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:46:28.403 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '굴소스' not found in DB. Skipping.
2025-06-27 17:46:28.403 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1~2스푼
2025-06-27 17:46:28.403 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 1~2스푼
2025-06-27 17:46:28.403 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1스푼
2025-06-27 17:46:28.403 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1스푼
2025-06-27 17:46:28.403 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1스푼
2025-06-27 17:46:28.404 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:46:28.405 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-27 17:46:28.406 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 대파를 송송 썰고, 베이컨을 한 입 크기로 자른다.
   2. 중불로 달군 팬에 기름을 두르고 대파를 먼저 볶아 파기름을 낸다.
   3. 베이컨을 넣고 충분히 볶아 향을 더
2025-06-27 17:46:28.407 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:46:28.407 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 대파 1대(많이, 기호에 따라)
   - 베이컨 한 줌(약 50g)
   - 찬밥 1공기
   - 계란 2개
   - 굴소스 1스푼
   - 식용유 1~2스푼
   - 참기름 1스푼

조리 방법:
1. 대파를 송송 썰고, 베이컨을 한 입 크기로 자른다.
   2. 중불로 달군 팬에 기름을 두르고 대파를 먼저 볶아 파기름을 낸다.
   3. 베이컨을 넣고 충분히 볶아 향을 더한다.
   4. 찬밥을 넣고 밥알이 풀어지도록 고루 볶는다.
   5. 굴소스 1스푼을 넣고 전체적으로 잘 섞어 볶아준다.
   6. 밥을 팬 한쪽으로 밀고 계란 두 개를 풀어 스크램블한 뒤 밥과 함께 섞는다.
   7. 마지막에 참기름을 두르고 전체적으로 섞어 마무리한다[4].
2025-06-27 17:46:28.408 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 대파베이컨볶음밥
2025-06-27 17:46:28.435 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:46:28.454 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 67
2025-06-27 17:46:28.454 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:46:28.454 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 대파베이컨볶음밥
2025-06-27 17:46:28.454 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 대파 1대(많이, 기호에 따라)
   - 베이컨 한 줌(약 50g)
   - 찬밥 1공기
   - 계란 2개
   - 굴소스 1스푼
   - 식용유 1~2스푼
   - 참기름 1스푼

조리 방법:
1. 대파를 송송 썰고, 베이컨을 한 입 크기로 자른다.
   2. 중불로 달군 팬에 기름을 두르고 대파를 먼저 볶아 파기름을 낸다.
   3. 베이컨을 넣고 충분히 볶아 향을 더한다.
   4. 찬밥을 넣고 밥알이 풀어지도록 고루 볶는다.
   5. 굴소스 1스푼을 넣고 전체적으로 잘 섞어 볶아준다.
   6. 밥을 팬 한쪽으로 밀고 계란 두 개를 풀어 스크램블한 뒤 밥과 함께 섞는다.
   7. 마지막에 참기름을 두르고 전체적으로 섞어 마무리한다[4].
2025-06-27 17:46:28.455 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:46:28.456 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:47:30.032 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:47:30.051 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:47:30.058 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:47:30.072 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:47:30.078 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:47:30.078 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:47:30.078 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
2025-06-27 17:47:30.078 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:47:30.078 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:47:30.086 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:47:30.089 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:47:30.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:47:30.096 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:47:30.101 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:47:30.101 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:47:30.101 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:47:30.101 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:47:30.101 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:47:30.102 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:47:30.102 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:47:30.102 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:47:30.102 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751014050102
2025-06-27 17:47:30.102 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:47:30.102 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 집에 닭볶음탕이 좀 남았는데 이걸 활용해서 음식 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751014050102)}], model=sonar-pro}
2025-06-27 17:47:43.829 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:47:43.830 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Response: {id=bab5d3f1-8a11-47cf-8b11-5c7f44637621, model=sonar-pro, created=1751014063, usage={prompt_tokens=2487, completion_tokens=687, total_tokens=3174, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6623046, https://www.10000recipe.com/recipe/6876357, https://blog.naver.com/storypie/223510675375, https://www.youtube.com/watch?v=pNtwZuhYQeg, https://steemit.com/krfood/@okja/7jvf3d], search_results=[{title=백종원 닭볶음탕 만들기 쉽고 맛있기까지 하네요~ - 만개의레시피, url=https://www.10000recipe.com/recipe/6623046, date=null, last_updated=null}, {title=닭볶음탕 진짜진짜 황금레시피 알려 드려요~~^^ - 만개의레시피, url=https://www.10000recipe.com/recipe/6876357, date=null, last_updated=null}, {title=정호영 닭볶음탕 만들기, 양념 레시피 대박난 닭도리탕 황금 ... - 블로그, url=https://blog.naver.com/storypie/223510675375, date=2024-07-12, last_updated=null}, {title=200만 15분 만에 만드는 닭볶음탕 황금 레시피 - YouTube, url=https://www.youtube.com/watch?v=pNtwZuhYQeg, date=2023-08-02, last_updated=null}, {title=옥자 레시피 - 닭볶음탕 국물을 활용한 진짜 닭 볶음면 - Steemit, url=https://steemit.com/krfood/@okja/7jvf3d, date=2018-02-22, last_updated=2025-06-21}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 닭볶음탕 볶음면

2. 카테고리: 한식

3. 조리 시간: 20분

4. 조리 방법:
   1. 남은 닭볶음탕에서 건더기(닭고기, 채소 등)와 국물을 분리합니다.
   2. 양파, 애호박(또는 다른 냉장고 채소), 버섯을 한입 크기로 썰어둡니다.
   3. 팬에 오일을 두르고 양파를 먼저 2~3분간 단맛이 돌게 볶아줍니다.
   4. 양파 한쪽으로 밀고, 남은 닭볶음탕의 닭고기 및 채소, 추가 닭가슴살이나 돼지고기(선택)를 넣고 같이 볶아줍니다.
   5. 면(중화면 또는 우동면 등)을 끓는 물에 삶아 팬에 넣고, 닭볶음탕 국물로 간을 맞추며 볶습니다.
   6. 카레가루, 굴소스, 피쉬소스를 입맛에 따라 소량 추가해 감칠맛을 더합니다(선택).
   7. 마지막에 준비한 야채와 면이 골고루 어우러지도록 볶아 완성합니다.

5. 필요한 재료와 양:
   - 남은 닭볶음탕 건더기 및 국물: 1공기 분량
   - 양파: 1/2개 ~ 1개
   - 애호박 또는 다른 채소: 1/2개
   - 버섯: 한줌
   - 면(중화면 또는 우동면): 1~2인분
   - 식용유: 1큰술
   - (선택) 닭가슴살 또는 삶은 돼지고기: 50~100g
   - 굴소스: 1작은술(선택)
   - 피쉬소스: 1/2작은술(선택)
   - 카레가루: 1작은술(선택)

6. 난이도: 하

7. 이미지 URL: https://images.pexels.com/photos/461382/pexels-photo-461382.jpeg 
(※ 실제 '닭볶음탕 볶음면' 이미지가 많지 않아, 닭고기와 볶음면이 들어간 한식 면요리 예시 이미지 사용)

8. 요리 팁:
   - 남은 닭볶음탕의 국물 양에 따라 소스 간을 조절하세요. 국물이 적으면 굴소스, 피쉬소스, 간장 등으로 간을 추가해도 좋습니다.
   - 남은 닭볶음탕 건더기 중 감자 등 전분류가 너무 많이 들어가면 면이 퍼질 수 있으니 마지막에 넣어 볶으세요.
   - 여러 채소를 추가해 색감과 식감을 살리면 더 맛있게 즐길 수 있습니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:47:43.831 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:47:43.831 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 닭볶음탕 볶음면

2. 카테고리: 한식

3. 조리 시간: 20분

4. 조리 방법:
   1. 남은 닭볶음탕에서 건더기(닭고기, 채소 등)와 국물을 분리합니다.
   2. 양파, 애호박(또는 다른 냉장고 채소), 버섯을 한입 크기로 썰어둡니다.
   3. 팬에 오일을 두르고 양파를 먼저 2~3분간 단맛이 돌게 볶아줍니다.
   4. 양파 한쪽으로 밀고, 남은 닭볶음탕의 닭고기 및 채소, 추가 닭가슴살이나 돼지고기(선택)를 넣고 같이 볶아줍니다.
   5. 면(중화면 또는 우동면 등)을 끓는 물에 삶아 팬에 넣고, 닭볶음탕 국물로 간을 맞추며 볶습니다.
   6. 카레가루, 굴소스, 피쉬소스를 입맛에 따라 소량 추가해 감칠맛을 더합니다(선택).
   7. 마지막에 준비한 야채와 면이 골고루 어우러지도록 볶아 완성합니다.

5. 필요한 재료와 양:
   - 남은 닭볶음탕 건더기 및 국물: 1공기 분량
   - 양파: 1/2개 ~ 1개
   - 애호박 또는 다른 채소: 1/2개
   - 버섯: 한줌
   - 면(중화면 또는 우동면): 1~2인분
   - 식용유: 1큰술
   - (선택) 닭가슴살 또는 삶은 돼지고기: 50~100g
   - 굴소스: 1작은술(선택)
   - 피쉬소스: 1/2작은술(선택)
   - 카레가루: 1작은술(선택)

6. 난이도: 하

7. 이미지 URL: https://images.pexels.com/photos/461382/pexels-photo-461382.jpeg 
(※ 실제 '닭볶음탕 볶음면' 이미지가 많지 않아, 닭고기와 볶음면이 들어간 한식 면요리 예시 이미지 사용)

8. 요리 팁:
   - 남은 닭볶음탕의 국물 양에 따라 소스 간을 조절하세요. 국물이 적으면 굴소스, 피쉬소스, 간장 등으로 간을 추가해도 좋습니다.
   - 남은 닭볶음탕 건더기 중 감자 등 전분류가 너무 많이 들어가면 면이 퍼질 수 있으니 마지막에 넣어 볶으세요.
   - 여러 채소를 추가해 색감과 식감을 살리면 더 맛있게 즐길 수 있습니다.
2025-06-27 17:47:43.831 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:47:43.831 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:47:43.831 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 닭볶음탕 볶음면

2. 카테고리: 한식

3. 조리 시간: 20분

4. 조리 방법:
   1. 남은 닭볶음탕에서 건더기(닭고기, 채소 등)와 국물을 분리합니다.
   2. 양파, 애호박(또는 다른 냉장고 채소), 버섯을 한입 크기로 썰어둡니다.
   3. 팬에 오일을 두르고 양파를 먼저 2~3분간 단맛이 돌게 볶아줍니다.
   4. 양파 한쪽으로 밀고, 남은 닭볶음탕의 닭고기 및 채소, 추가 닭가슴살이나 돼지고기(선택)를 넣고 같이 볶아줍니다.
   5. 면(중화면 또는 우동면 등)을 끓는 물에 삶아 팬에 넣고, 닭볶음탕 국물로 간을 맞추며 볶습니다.
   6. 카레가루, 굴소스, 피쉬소스를 입맛에 따라 소량 추가해 감칠맛을 더합니다(선택).
   7. 마지막에 준비한 야채와 면이 골고루 어우러지도록 볶아 완성합니다.

5. 필요한 재료와 양:
   - 남은 닭볶음탕 건더기 및 국물: 1공기 분량
   - 양파: 1/2개 ~ 1개
   - 애호박 또는 다른 채소: 1/2개
   - 버섯: 한줌
   - 면(중화면 또는 우동면): 1~2인분
   - 식용유: 1큰술
   - (선택) 닭가슴살 또는 삶은 돼지고기: 50~100g
   - 굴소스: 1작은술(선택)
   - 피쉬소스: 1/2작은술(선택)
   - 카레가루: 1작은술(선택)

6. 난이도: 하

7. 이미지 URL: https://images.pexels.com/photos/461382/pexels-photo-461382.jpeg 
(※ 실제 '닭볶음탕 볶음면' 이미지가 많지 않아, 닭고기와 볶음면이 들어간 한식 면요리 예시 이미지 사용)

8. 요리 팁:
   - 남은 닭볶음탕의 국물 양에 따라 소스 간을 조절하세요. 국물이 적으면 굴소스, 피쉬소스, 간장 등으로 간을 추가해도 좋습니다.
   - 남은 닭볶음탕 건더기 중 감자 등 전분류가 너무 많이 들어가면 면이 퍼질 수 있으니 마지막에 넣어 볶으세요.
   - 여러 채소를 추가해 색감과 식감을 살리면 더 맛있게 즐길 수 있습니다.
2025-06-27 17:47:43.835 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:47:43.839 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 17:47:43.840 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://images.pexels.com/photos/461382/pexels-photo-461382.jpeg
2025-06-27 17:47:43.840 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://images.pexels.com/photos/461382/pexels-photo-461382.jpeg
2025-06-27 17:47:43.840 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 남은 닭볶음탕 건더기 및 국물: 1공기 분량
   - 양파: 1/2개 ~ 1개
   - 애호박 또는 다른 채소: 1/2개
   - 버섯: 한줌
   - 면(중화면 또는 우동면): 1~2인분
   - 식용유: 1큰술
   - (선택) 닭가슴살 또는 삶은 돼지고기: 50~100g
   - 굴소스: 1작은술(선택)
   - 피쉬소스: 1/2작은술(선택)
   - 카레가루: 1작은술(선택)
2025-06-27 17:47:43.840 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 10
2025-06-27 17:47:43.840 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 남은 닭볶음탕 건더기 및 국물: 1공기 분량
2025-06-27 17:47:43.840 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 남은 닭볶음탕 건더기 및 국물, Amount: 1공기 분량
2025-06-27 17:47:43.841 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 남은 닭볶음탕 건더기 및 국물, Amount: 1공기 분량
2025-06-27 17:47:43.844 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.846 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '남은 닭볶음탕 건더기 및 국물' not found in DB. Skipping.
2025-06-27 17:47:43.846 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파: 1/2개 ~ 1개
2025-06-27 17:47:43.846 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 양파, Amount: 1/2개 ~ 1개
2025-06-27 17:47:43.846 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1/2개 ~ 1개
2025-06-27 17:47:43.847 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.848 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 17:47:43.848 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 또는 다른 채소: 1/2개
2025-06-27 17:47:43.848 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 애호박 또는 다른 채소, Amount: 1/2개
2025-06-27 17:47:43.848 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 애호박 또는 다른 채소, Amount: 1/2개
2025-06-27 17:47:43.851 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.851 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '애호박 또는 다른 채소' not found in DB. Skipping.
2025-06-27 17:47:43.851 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버섯: 한줌
2025-06-27 17:47:43.851 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 버섯, Amount: 한줌
2025-06-27 17:47:43.851 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 버섯, Amount: 한줌
2025-06-27 17:47:43.853 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.853 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '버섯' not found in DB. Skipping.
2025-06-27 17:47:43.853 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 면(중화면 또는 우동면): 1~2인분
2025-06-27 17:47:43.853 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 면(중화면 또는 우동면), Amount: 1~2인분
2025-06-27 17:47:43.853 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 면(중화면 또는 우동면), Amount: 1~2인분
2025-06-27 17:47:43.856 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.857 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '면(중화면 또는 우동면)' not found in DB. Skipping.
2025-06-27 17:47:43.857 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유: 1큰술
2025-06-27 17:47:43.857 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 식용유, Amount: 1큰술
2025-06-27 17:47:43.857 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-27 17:47:43.860 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.862 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-27 17:47:43.862 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 닭가슴살 또는 삶은 돼지고기: 50~100g
2025-06-27 17:47:43.863 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: (선택) 닭가슴살 또는 삶은 돼지고기, Amount: 50~100g
2025-06-27 17:47:43.863 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: (선택) 닭가슴살 또는 삶은 돼지고기, Amount: 50~100g
2025-06-27 17:47:43.865 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.867 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '(선택) 닭가슴살 또는 삶은 돼지고기' not found in DB. Skipping.
2025-06-27 17:47:43.867 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굴소스: 1작은술(선택)
2025-06-27 17:47:43.867 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 굴소스, Amount: 1작은술(선택)
2025-06-27 17:47:43.867 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 굴소스, Amount: 1작은술(선택)
2025-06-27 17:47:43.869 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.870 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '굴소스' not found in DB. Skipping.
2025-06-27 17:47:43.870 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피쉬소스: 1/2작은술(선택)
2025-06-27 17:47:43.870 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 피쉬소스, Amount: 1/2작은술(선택)
2025-06-27 17:47:43.870 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 피쉬소스, Amount: 1/2작은술(선택)
2025-06-27 17:47:43.871 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.872 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '피쉬소스' not found in DB. Skipping.
2025-06-27 17:47:43.872 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 카레가루: 1작은술(선택)
2025-06-27 17:47:43.872 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 카레가루, Amount: 1작은술(선택)
2025-06-27 17:47:43.872 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 카레가루, Amount: 1작은술(선택)
2025-06-27 17:47:43.873 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:47:43.874 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '카레가루' not found in DB. Skipping.
2025-06-27 17:47:43.874 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 남은 닭볶음탕에서 건더기(닭고기, 채소 등)와 국물을 분리합니다.
   2. 양파, 애호박(또는 다른 냉장고 채소), 버섯을 한입 크기로 썰어둡니다.
   3. 팬에 오일을 
2025-06-27 17:47:43.874 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:47:43.874 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 남은 닭볶음탕 건더기 및 국물: 1공기 분량
   - 양파: 1/2개 ~ 1개
   - 애호박 또는 다른 채소: 1/2개
   - 버섯: 한줌
   - 면(중화면 또는 우동면): 1~2인분
   - 식용유: 1큰술
   - (선택) 닭가슴살 또는 삶은 돼지고기: 50~100g
   - 굴소스: 1작은술(선택)
   - 피쉬소스: 1/2작은술(선택)
   - 카레가루: 1작은술(선택)

조리 방법:
1. 남은 닭볶음탕에서 건더기(닭고기, 채소 등)와 국물을 분리합니다.
   2. 양파, 애호박(또는 다른 냉장고 채소), 버섯을 한입 크기로 썰어둡니다.
   3. 팬에 오일을 두르고 양파를 먼저 2~3분간 단맛이 돌게 볶아줍니다.
   4. 양파 한쪽으로 밀고, 남은 닭볶음탕의 닭고기 및 채소, 추가 닭가슴살이나 돼지고기(선택)를 넣고 같이 볶아줍니다.
   5. 면(중화면 또는 우동면 등)을 끓는 물에 삶아 팬에 넣고, 닭볶음탕 국물로 간을 맞추며 볶습니다.
   6. 카레가루, 굴소스, 피쉬소스를 입맛에 따라 소량 추가해 감칠맛을 더합니다(선택).
   7. 마지막에 준비한 야채와 면이 골고루 어우러지도록 볶아 완성합니다.
2025-06-27 17:47:43.874 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 닭볶음탕 볶음면
2025-06-27 17:47:43.876 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:47:43.878 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 69
2025-06-27 17:47:43.878 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:47:43.878 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - 제목: 닭볶음탕 볶음면
2025-06-27 17:47:43.878 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 남은 닭볶음탕 건더기 및 국물: 1공기 분량
   - 양파: 1/2개 ~ 1개
   - 애호박 또는 다른 채소: 1/2개
   - 버섯: 한줌
   - 면(중화면 또는 우동면): 1~2인분
   - 식용유: 1큰술
   - (선택) 닭가슴살 또는 삶은 돼지고기: 50~100g
   - 굴소스: 1작은술(선택)
   - 피쉬소스: 1/2작은술(선택)
   - 카레가루: 1작은술(선택)

조리 방법:
1. 남은 닭볶음탕에서 건더기(닭고기, 채소 등)와 국물을 분리합니다.
   2. 양파, 애호박(또는 다른 냉장고 채소), 버섯을 한입 크기로 썰어둡니다.
   3. 팬에 오일을 두르고 양파를 먼저 2~3분간 단맛이 돌게 볶아줍니다.
   4. 양파 한쪽으로 밀고, 남은 닭볶음탕의 닭고기 및 채소, 추가 닭가슴살이나 돼지고기(선택)를 넣고 같이 볶아줍니다.
   5. 면(중화면 또는 우동면 등)을 끓는 물에 삶아 팬에 넣고, 닭볶음탕 국물로 간을 맞추며 볶습니다.
   6. 카레가루, 굴소스, 피쉬소스를 입맛에 따라 소량 추가해 감칠맛을 더합니다(선택).
   7. 마지막에 준비한 야채와 면이 골고루 어우러지도록 볶아 완성합니다.
2025-06-27 17:47:43.878 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:47:43.879 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:49:40.332 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:49:40.344 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:49:40.350 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:49:40.354 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:49:40.359 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:49:40.359 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:49:40.359 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 곰탕 레시피 알려줘
2025-06-27 17:49:40.359 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:49:40.360 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:49:40.397 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 곰탕 레시피 알려줘
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 곰탕 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 곰탕 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 곰탕 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:40.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:49:40.403 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:49:40.404 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:49:40.404 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 곰탕 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:40.404 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:49:40.404 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:49:40.405 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:49:40.405 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 곰탕 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:40.405 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:49:40.405 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 곰탕 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:40.405 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751014180405
2025-06-27 17:49:40.405 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:49:40.406 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 곰탕 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 곰탕 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751014180405)}], model=sonar-pro}
2025-06-27 17:49:47.773 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:49:47.773 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Response: {id=bc671611-8eca-428a-b32a-cac0cad103db, model=sonar-pro, created=1751014187, usage={prompt_tokens=2459, completion_tokens=643, total_tokens=3102, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6853697, https://www.youtube.com/watch?v=Y8SXMQjU5AU, https://blog.naver.com/rachel81000/221294401917, https://www.youtube.com/watch?v=XTdKEOzoyco, https://blog.naver.com/forme1009/222404106463], search_results=[{title=미국에서도 꼬리곰탕을 맛있게 끓이기 - 만개의레시피, url=https://www.10000recipe.com/recipe/6853697, date=null, last_updated=null}, {title=한식대가 윤종훈, 꼬리곰탕 하나 끓여 4가지 메뉴로 다양하게 먹을 수 ..., url=https://www.youtube.com/watch?v=Y8SXMQjU5AU, date=2025-03-14, last_updated=2025-05-17}, {title=시판 사골국(사골곰탕)으로 순댓국만들기 : 네이버 블로그, url=https://blog.naver.com/rachel81000/221294401917, date=2018-06-08, last_updated=null}, {title="오리곰탕" 이렇게 끓이면 복날 보양식 됩니다 - YouTube, url=https://www.youtube.com/watch?v=XTdKEOzoyco, date=2024-07-24, last_updated=null}, {title=비비고 한우 사골곰탕으로 버섯만두전골 만드는 법: 손님접대도 OK!, url=https://blog.naver.com/forme1009/222404106463, date=2021-06-20, last_updated=2025-04-14}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 곰탕

2. 카테고리: 한식

3. 조리 시간: 240분

4. 조리 방법:
   1. 소꼬리(또는 사골/우족 등 부위)를 찬물에 4~6시간 동안 충분히 담가 핏물을 뺍니다. 중간에 2~3번 물을 갈아줍니다.
   2. 핏물 뺀 고기를 깨끗이 씻고 큰 냄비에 담아 찬물을 넉넉하게 부은 뒤, 센 불에서 끓입니다.
   3. 거품이 올라오면 한 번 끓는 물을 모두 따라내고 다시 찬물에 고기를 헹궈줍니다.
   4. 깨끗이 씻은 고기와 물, 무, 대파, 마늘, 통후추를 냄비에 넣고 강불에서 20분, 중약불에서 3~4시간 이상 푹 끓입니다. 중간에 떠오르는 기름과 불순물을 걷어냅니다[1].
   5. 고기가 푹 익으면 건져서 적당한 크기로 썰고, 곰탕 국물은 고운 체에 한 번 걸러 맑게 만듭니다.
   6. 그릇에 밥과 고기를 담고, 맑은 곰탕 국물을 붓고 대파를 송송 썰어 올립니다.

5. 필요한 재료와 양:
   - 소꼬리 또는 사골/우족 약 2kg
   - 무 1/2개
   - 대파 2대
   - 마늘 10쪽
   - 통후추 1큰술
   - 소금 약간
   - 후추 약간
   - 밥(1인분 기준) 1공기

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/12/07/88f6a9582fae0b6be5b89c0b8ff0bf921.jpg

8. 요리 팁:
   - 곰탕은 푹 오래 끓일수록 뽀얗고 깊은 맛이 납니다. 최소 3시간 이상 끓여주세요.
   - 취향에 따라 국물을 식힌 뒤 위에 뜬 기름을 걷어내면 더 담백하게 즐길 수 있습니다.

**참고:** 곰탕에는 새우나 새우 관련 재료(새우젓, 새우추출물 등)가 일반적으로 들어가지 않으므로, 본 레시피는 알레르기 문제 없이 드실 수 있습니다. 만약 곁들임 양념에 새우젓을 사용하는 경우 반드시 빼고 드세요.}, delta={role=assistant, content=}}]}
2025-06-27 17:49:47.774 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:49:47.774 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 곰탕

2. 카테고리: 한식

3. 조리 시간: 240분

4. 조리 방법:
   1. 소꼬리(또는 사골/우족 등 부위)를 찬물에 4~6시간 동안 충분히 담가 핏물을 뺍니다. 중간에 2~3번 물을 갈아줍니다.
   2. 핏물 뺀 고기를 깨끗이 씻고 큰 냄비에 담아 찬물을 넉넉하게 부은 뒤, 센 불에서 끓입니다.
   3. 거품이 올라오면 한 번 끓는 물을 모두 따라내고 다시 찬물에 고기를 헹궈줍니다.
   4. 깨끗이 씻은 고기와 물, 무, 대파, 마늘, 통후추를 냄비에 넣고 강불에서 20분, 중약불에서 3~4시간 이상 푹 끓입니다. 중간에 떠오르는 기름과 불순물을 걷어냅니다[1].
   5. 고기가 푹 익으면 건져서 적당한 크기로 썰고, 곰탕 국물은 고운 체에 한 번 걸러 맑게 만듭니다.
   6. 그릇에 밥과 고기를 담고, 맑은 곰탕 국물을 붓고 대파를 송송 썰어 올립니다.

5. 필요한 재료와 양:
   - 소꼬리 또는 사골/우족 약 2kg
   - 무 1/2개
   - 대파 2대
   - 마늘 10쪽
   - 통후추 1큰술
   - 소금 약간
   - 후추 약간
   - 밥(1인분 기준) 1공기

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/12/07/88f6a9582fae0b6be5b89c0b8ff0bf921.jpg

8. 요리 팁:
   - 곰탕은 푹 오래 끓일수록 뽀얗고 깊은 맛이 납니다. 최소 3시간 이상 끓여주세요.
   - 취향에 따라 국물을 식힌 뒤 위에 뜬 기름을 걷어내면 더 담백하게 즐길 수 있습니다.

**참고:** 곰탕에는 새우나 새우 관련 재료(새우젓, 새우추출물 등)가 일반적으로 들어가지 않으므로, 본 레시피는 알레르기 문제 없이 드실 수 있습니다. 만약 곁들임 양념에 새우젓을 사용하는 경우 반드시 빼고 드세요.
2025-06-27 17:49:47.774 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:49:47.774 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:49:47.774 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 곰탕

2. 카테고리: 한식

3. 조리 시간: 240분

4. 조리 방법:
   1. 소꼬리(또는 사골/우족 등 부위)를 찬물에 4~6시간 동안 충분히 담가 핏물을 뺍니다. 중간에 2~3번 물을 갈아줍니다.
   2. 핏물 뺀 고기를 깨끗이 씻고 큰 냄비에 담아 찬물을 넉넉하게 부은 뒤, 센 불에서 끓입니다.
   3. 거품이 올라오면 한 번 끓는 물을 모두 따라내고 다시 찬물에 고기를 헹궈줍니다.
   4. 깨끗이 씻은 고기와 물, 무, 대파, 마늘, 통후추를 냄비에 넣고 강불에서 20분, 중약불에서 3~4시간 이상 푹 끓입니다. 중간에 떠오르는 기름과 불순물을 걷어냅니다[1].
   5. 고기가 푹 익으면 건져서 적당한 크기로 썰고, 곰탕 국물은 고운 체에 한 번 걸러 맑게 만듭니다.
   6. 그릇에 밥과 고기를 담고, 맑은 곰탕 국물을 붓고 대파를 송송 썰어 올립니다.

5. 필요한 재료와 양:
   - 소꼬리 또는 사골/우족 약 2kg
   - 무 1/2개
   - 대파 2대
   - 마늘 10쪽
   - 통후추 1큰술
   - 소금 약간
   - 후추 약간
   - 밥(1인분 기준) 1공기

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/12/07/88f6a9582fae0b6be5b89c0b8ff0bf921.jpg

8. 요리 팁:
   - 곰탕은 푹 오래 끓일수록 뽀얗고 깊은 맛이 납니다. 최소 3시간 이상 끓여주세요.
   - 취향에 따라 국물을 식힌 뒤 위에 뜬 기름을 걷어내면 더 담백하게 즐길 수 있습니다.

**참고:** 곰탕에는 새우나 새우 관련 재료(새우젓, 새우추출물 등)가 일반적으로 들어가지 않으므로, 본 레시피는 알레르기 문제 없이 드실 수 있습니다. 만약 곁들임 양념에 새우젓을 사용하는 경우 반드시 빼고 드세요.
2025-06-27 17:49:47.787 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:49:47.791 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 17:49:47.791 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2018/12/07/88f6a9582fae0b6be5b89c0b8ff0bf921.jpg
2025-06-27 17:49:47.791 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/12/07/88f6a9582fae0b6be5b89c0b8ff0bf921.jpg
2025-06-27 17:49:47.791 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소꼬리 또는 사골/우족 약 2kg
   - 무 1/2개
   - 대파 2대
   - 마늘 10쪽
   - 통후추 1큰술
   - 소금 약간
   - 후추 약간
   - 밥(1인분 기준) 1공기
2025-06-27 17:49:47.791 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 8
2025-06-27 17:49:47.792 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소꼬리 또는 사골/우족 약 2kg
2025-06-27 17:49:47.793 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 2kg
2025-06-27 17:49:47.793 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 2kg
2025-06-27 17:49:47.801 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:49:47.804 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-27 17:49:47.804 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 무 1/2개
2025-06-27 17:49:47.804 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 무 1/2개
2025-06-27 17:49:47.804 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 2대
2025-06-27 17:49:47.804 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 2대
2025-06-27 17:49:47.804 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 2대
2025-06-27 17:49:47.809 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:49:47.812 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-27 17:49:47.812 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마늘 10쪽
2025-06-27 17:49:47.812 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 10쪽
2025-06-27 17:49:47.812 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 10쪽
2025-06-27 17:49:47.814 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:49:47.815 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-27 17:49:47.815 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통후추 1큰술
2025-06-27 17:49:47.815 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통후추, Amount: 1큰술
2025-06-27 17:49:47.815 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통후추, Amount: 1큰술
2025-06-27 17:49:47.817 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:49:47.818 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '통후추' not found in DB. Skipping.
2025-06-27 17:49:47.818 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥(1인분 기준) 1공기
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 밥(1인분 기준) 1공기
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소꼬리(또는 사골/우족 등 부위)를 찬물에 4~6시간 동안 충분히 담가 핏물을 뺍니다. 중간에 2~3번 물을 갈아줍니다.
   2. 핏물 뺀 고기를 깨끗이 씻고 큰 냄비에 담
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소꼬리 또는 사골/우족 약 2kg
   - 무 1/2개
   - 대파 2대
   - 마늘 10쪽
   - 통후추 1큰술
   - 소금 약간
   - 후추 약간
   - 밥(1인분 기준) 1공기

조리 방법:
1. 소꼬리(또는 사골/우족 등 부위)를 찬물에 4~6시간 동안 충분히 담가 핏물을 뺍니다. 중간에 2~3번 물을 갈아줍니다.
   2. 핏물 뺀 고기를 깨끗이 씻고 큰 냄비에 담아 찬물을 넉넉하게 부은 뒤, 센 불에서 끓입니다.
   3. 거품이 올라오면 한 번 끓는 물을 모두 따라내고 다시 찬물에 고기를 헹궈줍니다.
   4. 깨끗이 씻은 고기와 물, 무, 대파, 마늘, 통후추를 냄비에 넣고 강불에서 20분, 중약불에서 3~4시간 이상 푹 끓입니다. 중간에 떠오르는 기름과 불순물을 걷어냅니다[1].
   5. 고기가 푹 익으면 건져서 적당한 크기로 썰고, 곰탕 국물은 고운 체에 한 번 걸러 맑게 만듭니다.
   6. 그릇에 밥과 고기를 담고, 맑은 곰탕 국물을 붓고 대파를 송송 썰어 올립니다.
2025-06-27 17:49:47.819 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 곰탕
2025-06-27 17:49:47.821 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:49:47.823 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 71
2025-06-27 17:49:47.823 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:49:47.823 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - 제목: 곰탕
2025-06-27 17:49:47.823 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 소꼬리 또는 사골/우족 약 2kg
   - 무 1/2개
   - 대파 2대
   - 마늘 10쪽
   - 통후추 1큰술
   - 소금 약간
   - 후추 약간
   - 밥(1인분 기준) 1공기

조리 방법:
1. 소꼬리(또는 사골/우족 등 부위)를 찬물에 4~6시간 동안 충분히 담가 핏물을 뺍니다. 중간에 2~3번 물을 갈아줍니다.
   2. 핏물 뺀 고기를 깨끗이 씻고 큰 냄비에 담아 찬물을 넉넉하게 부은 뒤, 센 불에서 끓입니다.
   3. 거품이 올라오면 한 번 끓는 물을 모두 따라내고 다시 찬물에 고기를 헹궈줍니다.
   4. 깨끗이 씻은 고기와 물, 무, 대파, 마늘, 통후추를 냄비에 넣고 강불에서 20분, 중약불에서 3~4시간 이상 푹 끓입니다. 중간에 떠오르는 기름과 불순물을 걷어냅니다[1].
   5. 고기가 푹 익으면 건져서 적당한 크기로 썰고, 곰탕 국물은 고운 체에 한 번 걸러 맑게 만듭니다.
   6. 그릇에 밥과 고기를 담고, 맑은 곰탕 국물을 붓고 대파를 송송 썰어 올립니다.
2025-06-27 17:49:47.823 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:49:47.824 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:49:59.929 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:49:59.931 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:49:59.933 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:49:59.940 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:49:59.944 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:49:59.944 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:49:59.944 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 알려줘
2025-06-27 17:49:59.944 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:49:59.945 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:49:59.950 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 알려줘
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:59.952 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:49:59.959 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:49:59.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:49:59.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:59.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:49:59.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:49:59.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:49:59.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:59.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:49:59.972 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:49:59.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751014199972
2025-06-27 17:49:59.972 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:49:59.973 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751014199972)}], model=sonar-pro}
2025-06-27 17:50:06.675 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:50:06.676 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Response: {id=0a468051-f0ae-46b0-82c2-ee9228c68c25, model=sonar-pro, created=1751014206, usage={prompt_tokens=2461, completion_tokens=517, total_tokens=2978, search_context_size=low}, citations=[https://blog.naver.com/dhtmdtjr2/222203209384, http://www.menupan.com/cook/cookqna/cookqna_view.asp?id=87460, https://chef-choice.tistory.com/650, https://www.youtube.com/watch?v=lP3NZRBarF8, https://homecuisine.co.kr/hc25/27323?m=0&page=9], search_results=[{title=수제 새우버거 만들기, 새우버거 레시피, 새우패티 만들기, url=https://blog.naver.com/dhtmdtjr2/222203209384, date=2021-01-10, last_updated=2025-06-20}, {title=9 - 개 - A. - re:햄버거만들기, url=http://www.menupan.com/cook/cookqna/cookqna_view.asp?id=87460, date=null, last_updated=null}, {title=또띠아로 햄버거 만드는 방법. 다이어트 슈비버거 레시피, url=https://chef-choice.tistory.com/650, date=2024-12-29, last_updated=2025-01-08}, {title=패티부터 마요네즈까지 직접 만든👩‍🍳 윤화표 두툼 새우 버거 ..., url=https://www.youtube.com/watch?v=lP3NZRBarF8, date=2025-04-28, last_updated=null}, {title=새우버거 만들기, 패티, 레시피, url=https://homecuisine.co.kr/hc25/27323?m=0&page=9, date=2015-09-13, last_updated=2024-10-16}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 클래식 소고기 햄버거

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 다진 소고기에 소금과 후추로 간을 하고 손으로 둥글게 패티 형태로 빚는다.
   2. 예열한 팬에 패티를 올리고 중불에서 한 면당 3~4분씩 노릇하게 굽는다.
   3. 햄버거 번(빵)을 반으로 가르고 팬이나 토스터에 살짝 굽는다.
   4. 번 아래쪽에 양상추, 구운 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 순서대로 올린다.
   5. 케첩과 마요네즈(또는 머스터드)를 기호에 따라 뿌린 뒤, 윗빵을 덮어 마무리한다.

5. 필요한 재료와 양:
   - 다진 소고기 200g
   - 햄버거 번(빵) 2개
   - 체다 치즈 슬라이스 2장
   - 양상추 2장
   - 토마토 1/2개(슬라이스)
   - 양파 1/4개(슬라이스)
   - 오이피클 2~3장
   - 소금, 후추 약간
   - 케첩 1큰술
   - 마요네즈 1큰술(또는 머스터드 1큰술)

6. 난이도: 하

7. 이미지 URL: https://img.hankyung.com/photo/202305/AA.33362925.1.jpg

8. 요리 팁:
   - 패티를 누르지 말고 자연스럽게 구우면 육즙이 잘 지켜집니다.
   - 번(빵)은 살짝 구워야 소스나 패티의 수분에 눅눅해지지 않습니다.

※ 새우 알레르기가 있으셔서 새우버거 등 새우가 들어간 레시피는 섭취할 수 없습니다. 위의 소고기 햄버거 레시피로 안전하게 즐기실 수 있습니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:50:06.677 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:50:06.677 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 클래식 소고기 햄버거

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 다진 소고기에 소금과 후추로 간을 하고 손으로 둥글게 패티 형태로 빚는다.
   2. 예열한 팬에 패티를 올리고 중불에서 한 면당 3~4분씩 노릇하게 굽는다.
   3. 햄버거 번(빵)을 반으로 가르고 팬이나 토스터에 살짝 굽는다.
   4. 번 아래쪽에 양상추, 구운 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 순서대로 올린다.
   5. 케첩과 마요네즈(또는 머스터드)를 기호에 따라 뿌린 뒤, 윗빵을 덮어 마무리한다.

5. 필요한 재료와 양:
   - 다진 소고기 200g
   - 햄버거 번(빵) 2개
   - 체다 치즈 슬라이스 2장
   - 양상추 2장
   - 토마토 1/2개(슬라이스)
   - 양파 1/4개(슬라이스)
   - 오이피클 2~3장
   - 소금, 후추 약간
   - 케첩 1큰술
   - 마요네즈 1큰술(또는 머스터드 1큰술)

6. 난이도: 하

7. 이미지 URL: https://img.hankyung.com/photo/202305/AA.33362925.1.jpg

8. 요리 팁:
   - 패티를 누르지 말고 자연스럽게 구우면 육즙이 잘 지켜집니다.
   - 번(빵)은 살짝 구워야 소스나 패티의 수분에 눅눅해지지 않습니다.

※ 새우 알레르기가 있으셔서 새우버거 등 새우가 들어간 레시피는 섭취할 수 없습니다. 위의 소고기 햄버거 레시피로 안전하게 즐기실 수 있습니다.
2025-06-27 17:50:06.681 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:50:06.681 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:50:06.684 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 클래식 소고기 햄버거

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 다진 소고기에 소금과 후추로 간을 하고 손으로 둥글게 패티 형태로 빚는다.
   2. 예열한 팬에 패티를 올리고 중불에서 한 면당 3~4분씩 노릇하게 굽는다.
   3. 햄버거 번(빵)을 반으로 가르고 팬이나 토스터에 살짝 굽는다.
   4. 번 아래쪽에 양상추, 구운 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 순서대로 올린다.
   5. 케첩과 마요네즈(또는 머스터드)를 기호에 따라 뿌린 뒤, 윗빵을 덮어 마무리한다.

5. 필요한 재료와 양:
   - 다진 소고기 200g
   - 햄버거 번(빵) 2개
   - 체다 치즈 슬라이스 2장
   - 양상추 2장
   - 토마토 1/2개(슬라이스)
   - 양파 1/4개(슬라이스)
   - 오이피클 2~3장
   - 소금, 후추 약간
   - 케첩 1큰술
   - 마요네즈 1큰술(또는 머스터드 1큰술)

6. 난이도: 하

7. 이미지 URL: https://img.hankyung.com/photo/202305/AA.33362925.1.jpg

8. 요리 팁:
   - 패티를 누르지 말고 자연스럽게 구우면 육즙이 잘 지켜집니다.
   - 번(빵)은 살짝 구워야 소스나 패티의 수분에 눅눅해지지 않습니다.

※ 새우 알레르기가 있으셔서 새우버거 등 새우가 들어간 레시피는 섭취할 수 없습니다. 위의 소고기 햄버거 레시피로 안전하게 즐기실 수 있습니다.
2025-06-27 17:50:06.694 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:50:06.697 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 17:50:06.698 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://img.hankyung.com/photo/202305/AA.33362925.1.jpg
2025-06-27 17:50:06.698 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://img.hankyung.com/photo/202305/AA.33362925.1.jpg
2025-06-27 17:50:06.698 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 다진 소고기 200g
   - 햄버거 번(빵) 2개
   - 체다 치즈 슬라이스 2장
   - 양상추 2장
   - 토마토 1/2개(슬라이스)
   - 양파 1/4개(슬라이스)
   - 오이피클 2~3장
   - 소금, 후추 약간
   - 케첩 1큰술
   - 마요네즈 1큰술(또는 머스터드 1큰술)
2025-06-27 17:50:06.698 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 10
2025-06-27 17:50:06.698 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 소고기 200g
2025-06-27 17:50:06.698 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소고기, Amount: 200g
2025-06-27 17:50:06.699 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기, Amount: 200g
2025-06-27 17:50:06.701 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:06.702 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기' not found in DB. Skipping.
2025-06-27 17:50:06.702 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거 번(빵) 2개
2025-06-27 17:50:06.702 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄버거 번(빵) 2개
2025-06-27 17:50:06.702 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다 치즈 슬라이스 2장
2025-06-27 17:50:06.702 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 슬라이스, Amount: 2장
2025-06-27 17:50:06.702 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 슬라이스, Amount: 2장
2025-06-27 17:50:06.703 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:06.704 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '슬라이스' not found in DB. Skipping.
2025-06-27 17:50:06.704 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 2장
2025-06-27 17:50:06.704 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양상추, Amount: 2장
2025-06-27 17:50:06.704 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양상추, Amount: 2장
2025-06-27 17:50:06.706 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '양상추' not found in DB. Skipping.
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1/2개(슬라이스)
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 토마토 1/2개(슬라이스)
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개(슬라이스)
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개(슬라이스)
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이피클 2~3장
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이피클 2~3장
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케첩 1큰술
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 케첩, Amount: 1큰술
2025-06-27 17:50:06.707 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케첩, Amount: 1큰술
2025-06-27 17:50:06.708 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:06.709 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '케첩' not found in DB. Skipping.
2025-06-27 17:50:06.709 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 1큰술(또는 머스터드 1큰술)
2025-06-27 17:50:06.709 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마요네즈, Amount: 1큰술
2025-06-27 17:50:06.709 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마요네즈, Amount: 1큰술
2025-06-27 17:50:06.711 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:06.711 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '마요네즈' not found in DB. Skipping.
2025-06-27 17:50:06.712 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 다진 소고기에 소금과 후추로 간을 하고 손으로 둥글게 패티 형태로 빚는다.
   2. 예열한 팬에 패티를 올리고 중불에서 한 면당 3~4분씩 노릇하게 굽는다.
   3. 햄버
2025-06-27 17:50:06.712 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:50:06.712 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 다진 소고기 200g
   - 햄버거 번(빵) 2개
   - 체다 치즈 슬라이스 2장
   - 양상추 2장
   - 토마토 1/2개(슬라이스)
   - 양파 1/4개(슬라이스)
   - 오이피클 2~3장
   - 소금, 후추 약간
   - 케첩 1큰술
   - 마요네즈 1큰술(또는 머스터드 1큰술)

조리 방법:
1. 다진 소고기에 소금과 후추로 간을 하고 손으로 둥글게 패티 형태로 빚는다.
   2. 예열한 팬에 패티를 올리고 중불에서 한 면당 3~4분씩 노릇하게 굽는다.
   3. 햄버거 번(빵)을 반으로 가르고 팬이나 토스터에 살짝 굽는다.
   4. 번 아래쪽에 양상추, 구운 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 순서대로 올린다.
   5. 케첩과 마요네즈(또는 머스터드)를 기호에 따라 뿌린 뒤, 윗빵을 덮어 마무리한다.
2025-06-27 17:50:06.712 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 클래식 소고기 햄버거
2025-06-27 17:50:06.713 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:50:06.715 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 73
2025-06-27 17:50:06.715 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:50:06.715 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 제목: 클래식 소고기 햄버거
2025-06-27 17:50:06.715 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 다진 소고기 200g
   - 햄버거 번(빵) 2개
   - 체다 치즈 슬라이스 2장
   - 양상추 2장
   - 토마토 1/2개(슬라이스)
   - 양파 1/4개(슬라이스)
   - 오이피클 2~3장
   - 소금, 후추 약간
   - 케첩 1큰술
   - 마요네즈 1큰술(또는 머스터드 1큰술)

조리 방법:
1. 다진 소고기에 소금과 후추로 간을 하고 손으로 둥글게 패티 형태로 빚는다.
   2. 예열한 팬에 패티를 올리고 중불에서 한 면당 3~4분씩 노릇하게 굽는다.
   3. 햄버거 번(빵)을 반으로 가르고 팬이나 토스터에 살짝 굽는다.
   4. 번 아래쪽에 양상추, 구운 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 순서대로 올린다.
   5. 케첩과 마요네즈(또는 머스터드)를 기호에 따라 뿌린 뒤, 윗빵을 덮어 마무리한다.
2025-06-27 17:50:06.715 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:50:06.718 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:50:22.601 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:50:22.608 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:50:22.614 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:50:22.616 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:50:22.620 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:50:22.621 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:50:22.621 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 양식 메뉴 추천해줘
2025-06-27 17:50:22.621 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:50:22.621 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:50:22.637 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 양식 메뉴 추천해줘
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:22.640 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:50:22.641 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:50:22.642 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:50:22.642 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:22.642 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:50:22.642 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:50:22.642 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:50:22.642 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:22.642 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:50:22.642 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:22.642 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751014222642
2025-06-27 17:50:22.642 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:50:22.642 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751014222642)}], model=sonar-pro}
2025-06-27 17:50:28.896 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:50:28.897 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Response: {id=5f8c4a05-1afe-482d-a317-0438d3f09846, model=sonar-pro, created=1751014228, usage={prompt_tokens=2541, completion_tokens=436, total_tokens=2977, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/7048859, https://blog.naver.com/kmsl3200/223008371752, https://blog.naver.com/songyh0624/221067270227, https://www.youtube.com/watch?v=8gBqFUEKyZw, https://www.youtube.com/watch?v=C9ROfgvXhjE], search_results=[{title=최화정 계란 감바스 만들기 새우 없는 달걀감바스 레시피 - 만개의레시피, url=https://www.10000recipe.com/recipe/7048859, date=null, last_updated=null}, {title=비스크소스 레시피 고기에서 느낄 수 없는 진한 감칠맛 : 네이버 블로그, url=https://blog.naver.com/kmsl3200/223008371752, date=2023-02-08, last_updated=null}, {title=[양식레시피] 새우, 달걀 샐러드 shrimp and egg salad : 네이버 블로그, url=https://blog.naver.com/songyh0624/221067270227, date=2017-08-14, last_updated=2025-06-22}, {title=밥도둑이 따로 없는 양념 새우장 이렇게 만들어 보세요 정말 맛있어요!, url=https://www.youtube.com/watch?v=8gBqFUEKyZw, date=2021-01-07, last_updated=null}, {title=[정통이 더 쉬움] 업장소스 레시피 100% 공개 아주 아주 초간단, url=https://www.youtube.com/watch?v=C9ROfgvXhjE, date=2023-10-27, last_updated=2024-08-24}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 달걀 감바스(새우 없는 감바스)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 마늘을 슬라이스로 얇게 썰고 방울토마토는 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고 약불에서 마늘을 볶아 향을 냅니다.
   3. 방울토마토와 페페론치노를 넣고 중불에서 살짝 볶아줍니다.
   4. 달걀을 볼에 풀어 스크램블 에그처럼 팬에 부어 볶아줍니다.
   5. 소금과 후추로 간을 해서 완성합니다.
5. 필요한 재료와 양:
   - 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간[1]
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/06/01/8d97b8b5ebe42e51c185c80a4c687f2c1.jpg
8. 요리 팁:
   - 약불에서 천천히 마늘을 볶으면 쓴맛 없이 풍미가 살아납니다.
   - 스크램블 에그는 촉촉하게 마무리하면 더 맛있게 즐길 수 있습니다.

※ 새우 없이 감바스 스타일로 달걀을 활용한 레시피입니다. 새우 알레르기 때문에 감바스나 새우를 사용하는 양식 메뉴 대신 안전하게 즐길 수 있습니다[1].}, delta={role=assistant, content=}}]}
2025-06-27 17:50:28.898 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:50:28.898 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 달걀 감바스(새우 없는 감바스)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 마늘을 슬라이스로 얇게 썰고 방울토마토는 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고 약불에서 마늘을 볶아 향을 냅니다.
   3. 방울토마토와 페페론치노를 넣고 중불에서 살짝 볶아줍니다.
   4. 달걀을 볼에 풀어 스크램블 에그처럼 팬에 부어 볶아줍니다.
   5. 소금과 후추로 간을 해서 완성합니다.
5. 필요한 재료와 양:
   - 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간[1]
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/06/01/8d97b8b5ebe42e51c185c80a4c687f2c1.jpg
8. 요리 팁:
   - 약불에서 천천히 마늘을 볶으면 쓴맛 없이 풍미가 살아납니다.
   - 스크램블 에그는 촉촉하게 마무리하면 더 맛있게 즐길 수 있습니다.

※ 새우 없이 감바스 스타일로 달걀을 활용한 레시피입니다. 새우 알레르기 때문에 감바스나 새우를 사용하는 양식 메뉴 대신 안전하게 즐길 수 있습니다[1].
2025-06-27 17:50:28.898 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:50:28.898 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:50:28.898 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 달걀 감바스(새우 없는 감바스)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 마늘을 슬라이스로 얇게 썰고 방울토마토는 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고 약불에서 마늘을 볶아 향을 냅니다.
   3. 방울토마토와 페페론치노를 넣고 중불에서 살짝 볶아줍니다.
   4. 달걀을 볼에 풀어 스크램블 에그처럼 팬에 부어 볶아줍니다.
   5. 소금과 후추로 간을 해서 완성합니다.
5. 필요한 재료와 양:
   - 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간[1]
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/06/01/8d97b8b5ebe42e51c185c80a4c687f2c1.jpg
8. 요리 팁:
   - 약불에서 천천히 마늘을 볶으면 쓴맛 없이 풍미가 살아납니다.
   - 스크램블 에그는 촉촉하게 마무리하면 더 맛있게 즐길 수 있습니다.

※ 새우 없이 감바스 스타일로 달걀을 활용한 레시피입니다. 새우 알레르기 때문에 감바스나 새우를 사용하는 양식 메뉴 대신 안전하게 즐길 수 있습니다[1].
2025-06-27 17:50:28.904 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:50:28.906 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 17:50:28.906 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2021/06/01/8d97b8b5ebe42e51c185c80a4c687f2c1.jpg
2025-06-27 17:50:28.906 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/06/01/8d97b8b5ebe42e51c185c80a4c687f2c1.jpg
2025-06-27 17:50:28.907 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간[1]
2025-06-27 17:50:28.907 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 7
2025-06-27 17:50:28.907 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 3개
2025-06-27 17:50:28.908 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 3개
2025-06-27 17:50:28.908 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 3개
2025-06-27 17:50:28.911 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:28.912 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-27 17:50:28.912 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 방울토마토 10개
2025-06-27 17:50:28.912 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 방울토마토, Amount: 10개
2025-06-27 17:50:28.913 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 방울토마토, Amount: 10개
2025-06-27 17:50:28.914 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:28.915 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '방울토마토' not found in DB. Skipping.
2025-06-27 17:50:28.915 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 페페론치노 10알
2025-06-27 17:50:28.915 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 페페론치노, Amount: 10알
2025-06-27 17:50:28.915 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 페페론치노, Amount: 10알
2025-06-27 17:50:28.917 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:28.917 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '페페론치노' not found in DB. Skipping.
2025-06-27 17:50:28.917 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통마늘 10개
2025-06-27 17:50:28.917 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통마늘, Amount: 10개
2025-06-27 17:50:28.917 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통마늘, Amount: 10개
2025-06-27 17:50:28.918 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:50:28.919 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '통마늘' not found in DB. Skipping.
2025-06-27 17:50:28.919 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브유 적당량
2025-06-27 17:50:28.919 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 올리브유 적당량
2025-06-27 17:50:28.919 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 17:50:28.919 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 17:50:28.919 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간[1]
2025-06-27 17:50:28.919 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간[1]
2025-06-27 17:50:28.919 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 마늘을 슬라이스로 얇게 썰고 방울토마토는 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고 약불에서 마늘을 볶아 향을 냅니다.
   3. 방울토마토와 페페론치노를 넣
2025-06-27 17:50:28.920 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:50:28.920 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간[1]

조리 방법:
1. 마늘을 슬라이스로 얇게 썰고 방울토마토는 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고 약불에서 마늘을 볶아 향을 냅니다.
   3. 방울토마토와 페페론치노를 넣고 중불에서 살짝 볶아줍니다.
   4. 달걀을 볼에 풀어 스크램블 에그처럼 팬에 부어 볶아줍니다.
   5. 소금과 후추로 간을 해서 완성합니다.
2025-06-27 17:50:28.920 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 달걀 감바스(새우 없는 감바스)
2025-06-27 17:50:28.922 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:50:28.945 [http-nio-8080-exec-5] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1406, SQLState: 22001
2025-06-27 17:50:28.945 [http-nio-8080-exec-5] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Data truncation: Data too long for column 'title' at row 1
2025-06-27 17:50:28.958 [http-nio-8080-exec-5] ERROR a.s.k.p.service.PerplexityService - Error saving recipe or recipe ingredients
org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:468)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at jdk.internal.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 187 common frames omitted
2025-06-27 17:50:28.962 [http-nio-8080-exec-5] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:474)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:468)
	... 125 common frames omitted
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at jdk.internal.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 187 common frames omitted
2025-06-27 17:50:28.985 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:128)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 17:50:42.853 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:50:42.857 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:50:42.860 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:50:42.863 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:50:42.867 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:50:42.867 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:50:42.867 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 맛있는 밥 레시피 줘
2025-06-27 17:50:42.867 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:50:42.868 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:50:42.872 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 맛있는 밥 레시피 줘
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 맛있는 밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 맛있는 밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 맛있는 밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:42.874 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:50:42.875 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:50:42.876 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:50:42.876 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 맛있는 밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:42.876 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:50:42.876 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:50:42.877 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:50:42.877 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 맛있는 밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:42.877 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:50:42.877 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 맛있는 밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:50:42.877 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751014242877
2025-06-27 17:50:42.878 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:50:42.878 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 맛있는 밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 맛있는 밥 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751014242877)}], model=sonar-pro}
2025-06-27 17:51:01.947 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:51:01.948 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Response: {id=1e17eec7-7279-4618-99c0-22cefe536602, model=sonar-pro, created=1751014261, usage={prompt_tokens=2459, completion_tokens=675, total_tokens=3134, search_context_size=low}, citations=[https://www.youtube.com/watch?v=J3R-_-C81sE, https://blog.naver.com/holic_29/221945743135, https://www.10000recipe.com/recipe/6896028, https://blog.naver.com/0419hanna/222987236762, https://happy.designhouse.co.kr/magazine/magazine_view/00010003/1965], search_results=[{title=밥도둑특집   밥을 누구보다 많이 먹을 수 있는 한식반찬 만들기 10가지, url=https://www.youtube.com/watch?v=J3R-_-C81sE, date=2021-02-18, last_updated=null}, {title=[요리] 자취생 간단요리 메뉴 / 유학생 요리 메뉴 추천 (난이도 최하부터 ..., url=https://blog.naver.com/holic_29/221945743135, date=2020-05-04, last_updated=null}, {title=중국집 볶음밥 부럽지 않은 백종원 새우볶음밥 레시피 - 만개의레시피, url=https://www.10000recipe.com/recipe/6896028, date=null, last_updated=null}, {title=새우버섯솥밥 냄비밥 만들기 반찬없는 날 추천해요 : 네이버 블로그, url=https://blog.naver.com/0419hanna/222987236762, date=2023-01-17, last_updated=null}, {title=궁중 음식으로 차린 초대상 | 쿠킹&다이닝 | 매거진, url=https://happy.designhouse.co.kr/magazine/magazine_view/00010003/1965, date=null, last_updated=2025-06-10}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=맛있는 한식 밥 요리를 추천하신 주제로, 알레르기 재료(새우)가 포함된 경우 섭취 불가 메시지와 대체 레시피를 제공합니다.

많은 인기 한식 밥 요리 중 일부(예: 새우버섯솥밥, 새우볶음밥, 새우장 등)는 모두 새우가 들어가므로 섭취할 수 없습니다[3][4]. 아래는 새우 없이 만들 수 있는 간단하고 맛있는 한식 밥 레시피입니다.

---

1. **요리 이름:** 김치볶음밥  
2. **카테고리:** 한식  
3. **조리 시간:** 15분  
4. **조리 방법:**  
   1. 계란을 프라이팬에 황금갈색이 될 때까지 노릇하게 후라이한다.  
   2. 그릇에 따로 담아둔다.  
   3. 프라이팬에 식용유를 두르고 다진 마늘, 양파를 넣어 볶는다.  
   4. 김치를 먹기 좋게 자른 뒤 함께 볶는다.  
   5. 밥을 넣고 김치국물을 조금 넣어가며 센 불에서 함께 볶는다.  
   5. 간장, 참기름, 통깨로 간을 맞춘다.  
   6. 접시에 담고 계란 후라이를 올린다.  
5. **필요한 재료와 양:**  
   - 밥: 1공기  
   - 김치: 1컵  
   - 양파: 1/4개  
   - 다진 마늘: 1작은술  
   - 계란: 1개  
   - 식용유: 1큰술  
   - 간장: 1작은술  
   - 참기름, 통깨(선택)  
6. **난이도:** 하  
7. **이미지 URL:**  
   https://t1.daumcdn.net/cfile/tistory/99D2C94C5BA5A8991E  
8. **요리 팁:**  
   - 김치가 너무 시면 식용유와 설탕을 조금 넣어주면 감칠맛이 살아납니다.  
   - 밥을 미리 냉장고에 식혀서 쓰면 알맹이가 더 씹히는 맛이 납니다.

---

**새우가 들어간 요리 (예: 새우버섯솥밥, 새우볶음밥 등)는 알레르기 재료가 포함되어 섭취할 수 없습니다. 위 김치볶음밥 레시피를 참고해 주세요.**[4][3]

---

**만약 보유 재료 정보가 있다면, 더 정확한 레시피를 추천할 수 있습니다.**
(※ 현재 보유 재료 정보가 없으니, 대표적으로 만들기 간단하고 새우가 포함되지 않는 한식 밥 요리를 추천합니다.)}, delta={role=assistant, content=}}]}
2025-06-27 17:51:01.949 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:51:01.949 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
맛있는 한식 밥 요리를 추천하신 주제로, 알레르기 재료(새우)가 포함된 경우 섭취 불가 메시지와 대체 레시피를 제공합니다.

많은 인기 한식 밥 요리 중 일부(예: 새우버섯솥밥, 새우볶음밥, 새우장 등)는 모두 새우가 들어가므로 섭취할 수 없습니다[3][4]. 아래는 새우 없이 만들 수 있는 간단하고 맛있는 한식 밥 레시피입니다.

---

1. **요리 이름:** 김치볶음밥  
2. **카테고리:** 한식  
3. **조리 시간:** 15분  
4. **조리 방법:**  
   1. 계란을 프라이팬에 황금갈색이 될 때까지 노릇하게 후라이한다.  
   2. 그릇에 따로 담아둔다.  
   3. 프라이팬에 식용유를 두르고 다진 마늘, 양파를 넣어 볶는다.  
   4. 김치를 먹기 좋게 자른 뒤 함께 볶는다.  
   5. 밥을 넣고 김치국물을 조금 넣어가며 센 불에서 함께 볶는다.  
   5. 간장, 참기름, 통깨로 간을 맞춘다.  
   6. 접시에 담고 계란 후라이를 올린다.  
5. **필요한 재료와 양:**  
   - 밥: 1공기  
   - 김치: 1컵  
   - 양파: 1/4개  
   - 다진 마늘: 1작은술  
   - 계란: 1개  
   - 식용유: 1큰술  
   - 간장: 1작은술  
   - 참기름, 통깨(선택)  
6. **난이도:** 하  
7. **이미지 URL:**  
   https://t1.daumcdn.net/cfile/tistory/99D2C94C5BA5A8991E  
8. **요리 팁:**  
   - 김치가 너무 시면 식용유와 설탕을 조금 넣어주면 감칠맛이 살아납니다.  
   - 밥을 미리 냉장고에 식혀서 쓰면 알맹이가 더 씹히는 맛이 납니다.

---

**새우가 들어간 요리 (예: 새우버섯솥밥, 새우볶음밥 등)는 알레르기 재료가 포함되어 섭취할 수 없습니다. 위 김치볶음밥 레시피를 참고해 주세요.**[4][3]

---

**만약 보유 재료 정보가 있다면, 더 정확한 레시피를 추천할 수 있습니다.**
(※ 현재 보유 재료 정보가 없으니, 대표적으로 만들기 간단하고 새우가 포함되지 않는 한식 밥 요리를 추천합니다.)
2025-06-27 17:51:01.949 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:51:01.949 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:51:01.949 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 맛있는 한식 밥 요리를 추천하신 주제로, 알레르기 재료(새우)가 포함된 경우 섭취 불가 메시지와 대체 레시피를 제공합니다.

많은 인기 한식 밥 요리 중 일부(예: 새우버섯솥밥, 새우볶음밥, 새우장 등)는 모두 새우가 들어가므로 섭취할 수 없습니다[3][4]. 아래는 새우 없이 만들 수 있는 간단하고 맛있는 한식 밥 레시피입니다.

---

1. **요리 이름:** 김치볶음밥  
2. **카테고리:** 한식  
3. **조리 시간:** 15분  
4. **조리 방법:**  
   1. 계란을 프라이팬에 황금갈색이 될 때까지 노릇하게 후라이한다.  
   2. 그릇에 따로 담아둔다.  
   3. 프라이팬에 식용유를 두르고 다진 마늘, 양파를 넣어 볶는다.  
   4. 김치를 먹기 좋게 자른 뒤 함께 볶는다.  
   5. 밥을 넣고 김치국물을 조금 넣어가며 센 불에서 함께 볶는다.  
   5. 간장, 참기름, 통깨로 간을 맞춘다.  
   6. 접시에 담고 계란 후라이를 올린다.  
5. **필요한 재료와 양:**  
   - 밥: 1공기  
   - 김치: 1컵  
   - 양파: 1/4개  
   - 다진 마늘: 1작은술  
   - 계란: 1개  
   - 식용유: 1큰술  
   - 간장: 1작은술  
   - 참기름, 통깨(선택)  
6. **난이도:** 하  
7. **이미지 URL:**  
   https://t1.daumcdn.net/cfile/tistory/99D2C94C5BA5A8991E  
8. **요리 팁:**  
   - 김치가 너무 시면 식용유와 설탕을 조금 넣어주면 감칠맛이 살아납니다.  
   - 밥을 미리 냉장고에 식혀서 쓰면 알맹이가 더 씹히는 맛이 납니다.

---

**새우가 들어간 요리 (예: 새우버섯솥밥, 새우볶음밥 등)는 알레르기 재료가 포함되어 섭취할 수 없습니다. 위 김치볶음밥 레시피를 참고해 주세요.**[4][3]

---

**만약 보유 재료 정보가 있다면, 더 정확한 레시피를 추천할 수 있습니다.**
(※ 현재 보유 재료 정보가 없으니, 대표적으로 만들기 간단하고 새우가 포함되지 않는 한식 밥 요리를 추천합니다.)
2025-06-27 17:51:01.954 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:51:01.957 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - No image URL found in AI response
2025-06-27 17:51:01.957 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 17:51:01.957 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern cooking method): **  
   1. 계란을 프라이팬에 황금갈색이 될 때까지 노릇하게 후라이한다.  
   2. 그릇에 따로 담아둔다.  
   3. 프라이팬에 식용유를 두르고 다진 마늘, 양파를 
2025-06-27 17:51:01.958 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:51:01.958 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
**  
   1. 계란을 프라이팬에 황금갈색이 될 때까지 노릇하게 후라이한다.  
   2. 그릇에 따로 담아둔다.  
   3. 프라이팬에 식용유를 두르고 다진 마늘, 양파를 넣어 볶는다.  
   4. 김치를 먹기 좋게 자른 뒤 함께 볶는다.  
   5. 밥을 넣고 김치국물을 조금 넣어가며 센 불에서 함께 볶는다.  
   5. 간장, 참기름, 통깨로 간을 맞춘다.  
   6. 접시에 담고 계란 후라이를 올린다.
2025-06-27 17:51:01.958 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: ** 김치볶음밥
2025-06-27 17:51:01.960 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:51:01.962 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 75
2025-06-27 17:51:01.962 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:51:01.962 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - 제목: ** 김치볶음밥
2025-06-27 17:51:01.962 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - 설명: 조리 방법:
**  
   1. 계란을 프라이팬에 황금갈색이 될 때까지 노릇하게 후라이한다.  
   2. 그릇에 따로 담아둔다.  
   3. 프라이팬에 식용유를 두르고 다진 마늘, 양파를 넣어 볶는다.  
   4. 김치를 먹기 좋게 자른 뒤 함께 볶는다.  
   5. 밥을 넣고 김치국물을 조금 넣어가며 센 불에서 함께 볶는다.  
   5. 간장, 참기름, 통깨로 간을 맞춘다.  
   6. 접시에 담고 계란 후라이를 올린다.
2025-06-27 17:51:01.963 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:51:01.963 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:51:44.325 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:51:44.339 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:51:44.348 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:51:44.350 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:51:44.359 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:51:44.359 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:51:44.359 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 양식 메뉴 추천해줘
2025-06-27 17:51:44.359 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:51:44.360 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:51:44.369 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 양식 메뉴 추천해줘
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:51:44.373 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:51:44.375 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:51:44.377 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:51:44.377 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:51:44.377 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:51:44.377 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:51:44.378 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:51:44.378 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:51:44.378 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:51:44.378 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:51:44.378 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751014304378
2025-06-27 17:51:44.378 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:51:44.378 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751014304378)}], model=sonar-pro}
2025-06-27 17:51:53.256 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:51:53.257 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Response: {id=06d8198f-a6a1-4b05-a06f-052da7c632d4, model=sonar-pro, created=1751014313, usage={prompt_tokens=2541, completion_tokens=421, total_tokens=2962, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/7048859, https://blog.naver.com/kmsl3200/223008371752, https://blog.naver.com/songyh0624/221067270227, https://www.10000recipe.com/recipe/6955311, https://www.youtube.com/watch?v=C9ROfgvXhjE], search_results=[{title=최화정 계란 감바스 만들기 새우 없는 달걀감바스 레시피 - 만개의레시피, url=https://www.10000recipe.com/recipe/7048859, date=null, last_updated=null}, {title=비스크소스 레시피 고기에서 느낄 수 없는 진한 감칠맛 : 네이버 블로그, url=https://blog.naver.com/kmsl3200/223008371752, date=2023-02-08, last_updated=null}, {title=[양식레시피] 새우, 달걀 샐러드 shrimp and egg salad : 네이버 블로그, url=https://blog.naver.com/songyh0624/221067270227, date=2017-08-14, last_updated=2025-06-22}, {title=(고기없는)새우 카레라이스 - 만개의레시피, url=https://www.10000recipe.com/recipe/6955311, date=null, last_updated=null}, {title=[정통이 더 쉬움] 업장소스 레시피 100% 공개 아주 아주 초간단, url=https://www.youtube.com/watch?v=C9ROfgvXhjE, date=2023-10-27, last_updated=2024-08-24}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 달걀 감바스 (Egg Gambas)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 달걀을 삶아 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고, 슬라이스한 마늘과 페페론치노를 중약불에서 볶아 향을 냅니다.
   3. 방울토마토를 반으로 잘라 팬에 넣고 2~3분간 볶습니다.
   4. 삶아 놓은 달걀을 팬에 넣고 소금, 후추로 간을 한 뒤, 재료를 가볍게 한 번 더 볶아줍니다.
   5. 팬을 불에서 내려 식탁에 바로 올릴 수 있는 용기에 담아 완성합니다.
5. 필요한 재료와 양:
   - 달걀 3개
   - 올리브유 50ml
   - 통마늘 10개
   - 방울토마토 10개
   - 페페론치노 10알
   - 소금 약간
   - 후추 약간
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2022/01/27/6cfc2a04b01a32ff1f118df186c0ad7c1.jpg
8. 요리 팁:
   - 마늘과 올리브유의 향을 충분히 내야 풍미가 살아납니다.
   - 방울토마토 대신 일반 토마토를 사용해도 무방합니다.

※ 새우 대신 달걀을 사용한 감바스 레시피로, 새우 알레르기 걱정 없이 즐기실 수 있습니다[1].}, delta={role=assistant, content=}}]}
2025-06-27 17:51:53.257 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:51:53.257 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 달걀 감바스 (Egg Gambas)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 달걀을 삶아 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고, 슬라이스한 마늘과 페페론치노를 중약불에서 볶아 향을 냅니다.
   3. 방울토마토를 반으로 잘라 팬에 넣고 2~3분간 볶습니다.
   4. 삶아 놓은 달걀을 팬에 넣고 소금, 후추로 간을 한 뒤, 재료를 가볍게 한 번 더 볶아줍니다.
   5. 팬을 불에서 내려 식탁에 바로 올릴 수 있는 용기에 담아 완성합니다.
5. 필요한 재료와 양:
   - 달걀 3개
   - 올리브유 50ml
   - 통마늘 10개
   - 방울토마토 10개
   - 페페론치노 10알
   - 소금 약간
   - 후추 약간
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2022/01/27/6cfc2a04b01a32ff1f118df186c0ad7c1.jpg
8. 요리 팁:
   - 마늘과 올리브유의 향을 충분히 내야 풍미가 살아납니다.
   - 방울토마토 대신 일반 토마토를 사용해도 무방합니다.

※ 새우 대신 달걀을 사용한 감바스 레시피로, 새우 알레르기 걱정 없이 즐기실 수 있습니다[1].
2025-06-27 17:51:53.257 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:51:53.257 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:51:53.257 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 달걀 감바스 (Egg Gambas)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 달걀을 삶아 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고, 슬라이스한 마늘과 페페론치노를 중약불에서 볶아 향을 냅니다.
   3. 방울토마토를 반으로 잘라 팬에 넣고 2~3분간 볶습니다.
   4. 삶아 놓은 달걀을 팬에 넣고 소금, 후추로 간을 한 뒤, 재료를 가볍게 한 번 더 볶아줍니다.
   5. 팬을 불에서 내려 식탁에 바로 올릴 수 있는 용기에 담아 완성합니다.
5. 필요한 재료와 양:
   - 달걀 3개
   - 올리브유 50ml
   - 통마늘 10개
   - 방울토마토 10개
   - 페페론치노 10알
   - 소금 약간
   - 후추 약간
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2022/01/27/6cfc2a04b01a32ff1f118df186c0ad7c1.jpg
8. 요리 팁:
   - 마늘과 올리브유의 향을 충분히 내야 풍미가 살아납니다.
   - 방울토마토 대신 일반 토마토를 사용해도 무방합니다.

※ 새우 대신 달걀을 사용한 감바스 레시피로, 새우 알레르기 걱정 없이 즐기실 수 있습니다[1].
2025-06-27 17:51:53.264 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:51:53.267 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 17:51:53.267 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2022/01/27/6cfc2a04b01a32ff1f118df186c0ad7c1.jpg
2025-06-27 17:51:53.267 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2022/01/27/6cfc2a04b01a32ff1f118df186c0ad7c1.jpg
2025-06-27 17:51:53.267 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 달걀 3개
   - 올리브유 50ml
   - 통마늘 10개
   - 방울토마토 10개
   - 페페론치노 10알
   - 소금 약간
   - 후추 약간
2025-06-27 17:51:53.267 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 7
2025-06-27 17:51:53.267 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 3개
2025-06-27 17:51:53.268 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 3개
2025-06-27 17:51:53.268 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 3개
2025-06-27 17:51:53.270 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:51:53.281 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-27 17:51:53.281 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브유 50ml
2025-06-27 17:51:53.282 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브유, Amount: 50ml
2025-06-27 17:51:53.282 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브유, Amount: 50ml
2025-06-27 17:51:53.283 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:51:53.284 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브유' not found in DB. Skipping.
2025-06-27 17:51:53.284 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통마늘 10개
2025-06-27 17:51:53.284 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통마늘, Amount: 10개
2025-06-27 17:51:53.284 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통마늘, Amount: 10개
2025-06-27 17:51:53.286 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:51:53.287 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '통마늘' not found in DB. Skipping.
2025-06-27 17:51:53.287 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 방울토마토 10개
2025-06-27 17:51:53.288 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 방울토마토, Amount: 10개
2025-06-27 17:51:53.288 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 방울토마토, Amount: 10개
2025-06-27 17:51:53.289 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:51:53.290 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '방울토마토' not found in DB. Skipping.
2025-06-27 17:51:53.290 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 페페론치노 10알
2025-06-27 17:51:53.291 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 페페론치노, Amount: 10알
2025-06-27 17:51:53.291 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 페페론치노, Amount: 10알
2025-06-27 17:51:53.291 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:51:53.294 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '페페론치노' not found in DB. Skipping.
2025-06-27 17:51:53.294 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 17:51:53.294 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 17:51:53.294 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 17:51:53.294 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 17:51:53.294 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 달걀을 삶아 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고, 슬라이스한 마늘과 페페론치노를 중약불에서 볶아 향을 냅니다.
   3. 방울토마토를 반으로 잘라 팬에
2025-06-27 17:51:53.295 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:51:53.295 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 달걀 3개
   - 올리브유 50ml
   - 통마늘 10개
   - 방울토마토 10개
   - 페페론치노 10알
   - 소금 약간
   - 후추 약간

조리 방법:
1. 달걀을 삶아 반으로 자릅니다.
   2. 팬에 올리브유를 넉넉히 두르고, 슬라이스한 마늘과 페페론치노를 중약불에서 볶아 향을 냅니다.
   3. 방울토마토를 반으로 잘라 팬에 넣고 2~3분간 볶습니다.
   4. 삶아 놓은 달걀을 팬에 넣고 소금, 후추로 간을 한 뒤, 재료를 가볍게 한 번 더 볶아줍니다.
   5. 팬을 불에서 내려 식탁에 바로 올릴 수 있는 용기에 담아 완성합니다.
2025-06-27 17:51:53.295 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 달걀 감바스 (Egg Gambas)
2025-06-27 17:51:53.297 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:51:53.299 [http-nio-8080-exec-7] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1406, SQLState: 22001
2025-06-27 17:51:53.299 [http-nio-8080-exec-7] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Data truncation: Data too long for column 'title' at row 1
2025-06-27 17:51:53.300 [http-nio-8080-exec-7] ERROR a.s.k.p.service.PerplexityService - Error saving recipe or recipe ingredients
org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:468)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at jdk.internal.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 187 common frames omitted
2025-06-27 17:51:53.302 [http-nio-8080-exec-7] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:474)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:468)
	... 125 common frames omitted
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at jdk.internal.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 187 common frames omitted
2025-06-27 17:51:53.306 [http-nio-8080-exec-7] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:128)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 17:52:25.414 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:52:25.419 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 17:52:25.422 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 17:52:31.069 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 17:52:31.099 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 98081 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 17:52:31.100 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 17:52:31.101 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 17:52:31.154 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 17:52:31.154 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 17:52:31.999 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:52:32.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 17:52:32.046 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:52:32.048 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:52:32.049 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:52:32.050 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:52:32.051 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:52:32.052 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:52:32.066 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:52:32.068 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 17:52:32.068 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65 ms. Found 0 JDBC repository interfaces.
2025-06-27 17:52:32.092 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:52:32.093 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 17:52:32.191 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 8 JPA repository interfaces.
2025-06-27 17:52:32.217 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 17:52:32.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 17:52:32.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:52:32.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:52:32.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:52:32.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:52:32.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:52:32.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:52:32.230 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:52:32.231 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 17:52:32.231 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-27 17:52:32.855 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 17:52:32.862 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 17:52:32.864 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 17:52:32.865 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 17:52:32.901 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 17:52:32.902 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1746 ms
2025-06-27 17:52:32.935 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 17:52:33.070 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@31006e1
2025-06-27 17:52:33.073 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 17:52:33.089 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 17:52:33.207 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 17:52:33.235 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 17:52:33.253 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 17:52:33.368 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 17:52:33.420 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 17:52:33.421 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 17:52:34.285 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 17:52:34.397 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 17:52:34.796 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 17:52:35.025 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 17:52:35.026 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 17:52:35.953 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 17:52:36.032 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 17:52:36.152 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2d07b82b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3a094a9, org.springframework.security.web.context.SecurityContextHolderFilter@639c61ff, org.springframework.security.web.header.HeaderWriterFilter@645aed3f, org.springframework.web.filter.CorsFilter@428fb411, org.springframework.security.web.authentication.logout.LogoutFilter@48b14332, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@4c43ed7e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4f29d1c6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@25c2d81d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@63f27b6d, org.springframework.security.web.session.SessionManagementFilter@156c3d1b, org.springframework.security.web.access.ExceptionTranslationFilter@65eb4ca5, org.springframework.security.web.access.intercept.AuthorizationFilter@430db082]
2025-06-27 17:52:36.580 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 17:52:36.599 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 17:52:36.606 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 17:52:36.622 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.876 seconds (process running for 6.501)
2025-06-27 17:52:44.819 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 17:52:44.820 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 17:52:44.822 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-27 17:52:44.899 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:52:44.939 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:52:44.956 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:52:44.961 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:52:45.001 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:52:45.001 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:52:45.002 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 양식 메뉴 추천해줘
2025-06-27 17:52:45.002 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:52:45.003 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:52:45.074 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:52:45.077 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:52:45.078 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 양식 메뉴 추천해줘
2025-06-27 17:52:45.078 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:52:45.078 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:52:45.079 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:52:45.079 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:52:45.079 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:52:45.079 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:52:45.080 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:52:45.081 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:52:45.081 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:52:45.082 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:52:45.084 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:52:45.087 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:52:45.087 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:52:45.087 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:52:45.088 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:52:45.089 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:52:45.089 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:52:45.089 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:52:45.089 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:52:45.091 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751014365090
2025-06-27 17:52:45.091 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:52:45.093 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 양식 메뉴 추천해줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**메뉴 추천 요청**: 요청의 맥락(점심, 저녁, 간단한 등)에 맞는 적절한 음식을 추천하고, 추천 이유를 명확히 설명하세요.
**중요**: 메뉴 추천 요청이어도 반드시 구체적인 레시피 형식(요리 이름, 재료, 조리 방법)으로 제공해주세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751014365090)}], model=sonar-pro}
2025-06-27 17:52:52.188 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:52:52.188 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=41c031dd-8399-4d41-9f37-09b9aca0dcb2, model=sonar-pro, created=1751014372, usage={prompt_tokens=2541, completion_tokens=450, total_tokens=2991, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/7048859, https://www.youtube.com/watch?v=4T8Een7OblA, https://blog.naver.com/kmsl3200/223008371752, https://blog.naver.com/songyh0624/221067270227, https://www.youtube.com/watch?v=C9ROfgvXhjE], search_results=[{title=최화정 계란 감바스 만들기 새우 없는 달걀감바스 레시피 - 만개의레시피, url=https://www.10000recipe.com/recipe/7048859, date=null, last_updated=null}, {title=[한지혜 3분 요리]넘 맛있어 ＞_＜ 새우 없이 만드는 [계란감바스 ..., url=https://www.youtube.com/watch?v=4T8Een7OblA, date=2024-03-01, last_updated=null}, {title=비스크소스 레시피 고기에서 느낄 수 없는 진한 감칠맛 : 네이버 블로그, url=https://blog.naver.com/kmsl3200/223008371752, date=2023-02-08, last_updated=null}, {title=[양식레시피] 새우, 달걀 샐러드 shrimp and egg salad : 네이버 블로그, url=https://blog.naver.com/songyh0624/221067270227, date=2017-08-14, last_updated=null}, {title=[정통이 더 쉬움] 업장소스 레시피 100% 공개 아주 아주 초간단, url=https://www.youtube.com/watch?v=C9ROfgvXhjE, date=2023-10-27, last_updated=2024-08-24}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 계란 감바스(새우 없는 감바스)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 방울토마토와 통마늘을 각각 반으로 썹니다.
   2. 작은 냄비나 팬에 올리브유를 넉넉히 두르고, 편으로 썬 마늘과 페페론치노를 먼저 넣어 약불에서 향을 냅니다.
   3. 마늘이 살짝 노릇해지면 방울토마토를 넣어 살짝 볶아줍니다.
   4. 계란을 풀어 약불에서 스크램블하듯 부드럽게 익도록 볶아줍니다.
   5. 소금, 후추로 간을 맞추고, 원한다면 파슬리나 허브를 뿌려 마무리합니다.
5. 필요한 재료와 양:
   - 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2019/07/22/4c9695f4eebcb0f80e8b9f9395ff32151.jpg
8. 요리 팁:
   - 올리브유는 넉넉히 사용해야 감바스의 풍미를 제대로 느낄 수 있습니다.
   - 계란은 너무 세게 익히지 말고, 약불에서 천천히 부드럽게 익히는 것이 식감이 좋습니다.

※ 해당 레시피는 새우를 전혀 사용하지 않아, 새우 알레르기가 있는 분도 안심하고 드실 수 있습니다[1][2].}, delta={role=assistant, content=}}]}
2025-06-27 17:52:52.189 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:52:52.190 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 계란 감바스(새우 없는 감바스)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 방울토마토와 통마늘을 각각 반으로 썹니다.
   2. 작은 냄비나 팬에 올리브유를 넉넉히 두르고, 편으로 썬 마늘과 페페론치노를 먼저 넣어 약불에서 향을 냅니다.
   3. 마늘이 살짝 노릇해지면 방울토마토를 넣어 살짝 볶아줍니다.
   4. 계란을 풀어 약불에서 스크램블하듯 부드럽게 익도록 볶아줍니다.
   5. 소금, 후추로 간을 맞추고, 원한다면 파슬리나 허브를 뿌려 마무리합니다.
5. 필요한 재료와 양:
   - 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2019/07/22/4c9695f4eebcb0f80e8b9f9395ff32151.jpg
8. 요리 팁:
   - 올리브유는 넉넉히 사용해야 감바스의 풍미를 제대로 느낄 수 있습니다.
   - 계란은 너무 세게 익히지 말고, 약불에서 천천히 부드럽게 익히는 것이 식감이 좋습니다.

※ 해당 레시피는 새우를 전혀 사용하지 않아, 새우 알레르기가 있는 분도 안심하고 드실 수 있습니다[1][2].
2025-06-27 17:52:52.190 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:52:52.190 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:52:52.190 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 계란 감바스(새우 없는 감바스)
2. 카테고리: 양식
3. 조리 시간: 20분
4. 조리 방법:
   1. 방울토마토와 통마늘을 각각 반으로 썹니다.
   2. 작은 냄비나 팬에 올리브유를 넉넉히 두르고, 편으로 썬 마늘과 페페론치노를 먼저 넣어 약불에서 향을 냅니다.
   3. 마늘이 살짝 노릇해지면 방울토마토를 넣어 살짝 볶아줍니다.
   4. 계란을 풀어 약불에서 스크램블하듯 부드럽게 익도록 볶아줍니다.
   5. 소금, 후추로 간을 맞추고, 원한다면 파슬리나 허브를 뿌려 마무리합니다.
5. 필요한 재료와 양:
   - 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간
6. 난이도: 하
7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2019/07/22/4c9695f4eebcb0f80e8b9f9395ff32151.jpg
8. 요리 팁:
   - 올리브유는 넉넉히 사용해야 감바스의 풍미를 제대로 느낄 수 있습니다.
   - 계란은 너무 세게 익히지 말고, 약불에서 천천히 부드럽게 익히는 것이 식감이 좋습니다.

※ 해당 레시피는 새우를 전혀 사용하지 않아, 새우 알레르기가 있는 분도 안심하고 드실 수 있습니다[1][2].
2025-06-27 17:52:52.195 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:52:52.199 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 17:52:52.200 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2019/07/22/4c9695f4eebcb0f80e8b9f9395ff32151.jpg
2025-06-27 17:52:52.200 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2019/07/22/4c9695f4eebcb0f80e8b9f9395ff32151.jpg
2025-06-27 17:52:52.200 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간
2025-06-27 17:52:52.201 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 7
2025-06-27 17:52:52.201 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 3개
2025-06-27 17:52:52.202 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 3개
2025-06-27 17:52:52.203 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 3개
2025-06-27 17:52:52.208 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:52:52.211 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-27 17:52:52.211 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 방울토마토 10개
2025-06-27 17:52:52.211 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 방울토마토, Amount: 10개
2025-06-27 17:52:52.211 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 방울토마토, Amount: 10개
2025-06-27 17:52:52.212 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:52:52.213 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '방울토마토' not found in DB. Skipping.
2025-06-27 17:52:52.213 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 페페론치노 10알
2025-06-27 17:52:52.213 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 페페론치노, Amount: 10알
2025-06-27 17:52:52.213 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 페페론치노, Amount: 10알
2025-06-27 17:52:52.215 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:52:52.215 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '페페론치노' not found in DB. Skipping.
2025-06-27 17:52:52.216 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통마늘 10개
2025-06-27 17:52:52.216 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통마늘, Amount: 10개
2025-06-27 17:52:52.216 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통마늘, Amount: 10개
2025-06-27 17:52:52.219 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:52:52.221 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '통마늘' not found in DB. Skipping.
2025-06-27 17:52:52.222 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브유 적당량
2025-06-27 17:52:52.223 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 올리브유 적당량
2025-06-27 17:52:52.223 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 17:52:52.223 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 17:52:52.223 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 17:52:52.223 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 17:52:52.223 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 방울토마토와 통마늘을 각각 반으로 썹니다.
   2. 작은 냄비나 팬에 올리브유를 넉넉히 두르고, 편으로 썬 마늘과 페페론치노를 먼저 넣어 약불에서 향을 냅니다.
   3. 
2025-06-27 17:52:52.224 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:52:52.226 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 계란 3개
   - 방울토마토 10개
   - 페페론치노 10알
   - 통마늘 10개
   - 올리브유 적당량
   - 소금 약간
   - 후추 약간

조리 방법:
1. 방울토마토와 통마늘을 각각 반으로 썹니다.
   2. 작은 냄비나 팬에 올리브유를 넉넉히 두르고, 편으로 썬 마늘과 페페론치노를 먼저 넣어 약불에서 향을 냅니다.
   3. 마늘이 살짝 노릇해지면 방울토마토를 넣어 살짝 볶아줍니다.
   4. 계란을 풀어 약불에서 스크램블하듯 부드럽게 익도록 볶아줍니다.
   5. 소금, 후추로 간을 맞추고, 원한다면 파슬리나 허브를 뿌려 마무리합니다.
2025-06-27 17:52:52.227 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 계란 감바스(새우 없는 감바스)
2025-06-27 17:52:52.252 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:52:52.268 [http-nio-8080-exec-1] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1406, SQLState: 22001
2025-06-27 17:52:52.268 [http-nio-8080-exec-1] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Data truncation: Data too long for column 'title' at row 1
2025-06-27 17:52:52.273 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe or recipe ingredients
org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:468)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 189 common frames omitted
2025-06-27 17:52:52.275 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:474)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:155)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:109)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:468)
	... 125 common frames omitted
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 133 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 189 common frames omitted
2025-06-27 17:52:52.281 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:128)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:49)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:133)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseAsString(PerplexityService.java:137)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:30)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 17:53:01.122 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 17:53:01.124 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:53:01.129 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 17:53:01.132 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 17:53:01.134 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:53:01.135 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:53:01.135 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-27 17:53:01.135 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:53:01.135 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 17:53:01.138 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:53:01.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 17:53:01.147 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:53:01.150 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 체크박스 미체크 - 보유 재료 우선 추천하지 않음
2025-06-27 17:53:01.150 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:53:01.151 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 알레르기 정보: 새우
2025-06-27 17:53:01.151 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 선호도: 한식
2025-06-27 17:53:01.152 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 17:53:01.152 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:53:01.152 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 17:53:01.152 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 17:53:01.152 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751014381152
2025-06-27 17:53:01.152 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 17:53:01.152 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 레시피 추천 전문가입니다. 다음 우선순위를 엄격히 따라주세요:
1순위: 보유 재료 우선 추천 (냉장고 체크 시)
2순위: 사용자가 메뉴를 추천해달라고 하면 특정 메뉴의 레시피를 제공하고 특정 레시피 정보를 달라고 하면 특정 레시피를 제공해주세요.
3순위: 알레르기 재료가 포함된 요리는 섭취 불가 메시지 제공
4순위: 사용자 선호도 고려

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 레시피를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 요청 유형별 처리 가이드
**특정 요리 요청**: 요청한 요리를 정확히 추천하세요. 해당 요리에 알레르기가 있으면 섭취 불가 메시지를 명시하세요.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**최종 확인**: 사용자 요청에 맞는 레시피만 추천했는지 확인하세요. 메뉴 추천과 같은 질문에서도 레시피를 제공해주세요. 
**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751014381152)}], model=sonar-pro}
2025-06-27 17:53:13.961 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 17:53:13.962 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Response: {id=2fe2d18c-47a8-4c7e-83e0-9a90a2bf2d7b, model=sonar-pro, created=1751014393, usage={prompt_tokens=2459, completion_tokens=561, total_tokens=3020, search_context_size=low}, citations=[https://blog.naver.com/dhtmdtjr2/222203209384, http://www.menupan.com/cook/cookqna/cookqna_view.asp?id=87460, https://chef-choice.tistory.com/650, https://www.youtube.com/watch?v=lP3NZRBarF8, https://homecuisine.co.kr/hc25/27323?m=0&page=9], search_results=[{title=수제 새우버거 만들기, 새우버거 레시피, 새우패티 만들기, url=https://blog.naver.com/dhtmdtjr2/222203209384, date=2021-01-10, last_updated=null}, {title=9 - 개 - A. - re:햄버거만들기, url=http://www.menupan.com/cook/cookqna/cookqna_view.asp?id=87460, date=null, last_updated=null}, {title=또띠아로 햄버거 만드는 방법. 다이어트 슈비버거 레시피, url=https://chef-choice.tistory.com/650, date=2024-12-29, last_updated=2025-01-08}, {title=패티부터 마요네즈까지 직접 만든👩‍🍳 윤화표 두툼 새우 버거 ..., url=https://www.youtube.com/watch?v=lP3NZRBarF8, date=2025-04-28, last_updated=null}, {title=새우버거 만들기, 패티, 레시피, url=https://homecuisine.co.kr/hc25/27323?m=0&page=9, date=2015-09-13, last_updated=2024-10-16}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 클래식 치즈버거

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 다진 소고기에 소금, 후추를 넣고 잘 섞은 후, 패티 모양으로 빚어준다.
   2. 팬에 식용유를 두르고 중불에서 소고기 패티를 앞뒤로 4~5분씩 노릇하게 구워준다.
   3. 햄버거 번(빵)을 반으로 자른 뒤, 팬에 살짝 구워준다.
   4. 양상추는 깨끗이 씻어 물기를 제거한다. 토마토와 양파는 얇게 슬라이스한다.
   5. 구운 번 아래쪽에 양상추, 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 차례로 올린다.
   6. 케첩과 마요네즈(또는 원하는 소스)를 뿌리고, 빵 윗부분을 덮어 완성한다.

5. 필요한 재료와 양:
   - 햄버거 번(빵) 2개
   - 다진 소고기 200g
   - 소금 약간
   - 후추 약간
   - 식용유 1큰술
   - 양상추 2장
   - 토마토 1/2개
   - 양파 1/4개
   - 오이피클 2~3조각
   - 슬라이스 치즈 2장
   - 케첩 1큰술
   - 마요네즈 1큰술

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/05/28/21fe9f01c420c341f3e7c191f245752e1.jpg

8. 요리 팁:
   - 소고기 패티는 너무 많이 뒤집지 말고, 한 면이 충분히 익은 후 뒤집어야 육즙이 살아있어요.
   - 채소와 소스는 기호에 맞게 조절하거나 아보카도, 베이컨 등 다른 재료를 추가할 수 있습니다.

※ 새우 알레르기 정보 확인: 본 레시피에는 새우가 포함되어 있지 않아 안전하게 드실 수 있습니다.}, delta={role=assistant, content=}}]}
2025-06-27 17:53:13.962 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 17:53:13.962 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 클래식 치즈버거

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 다진 소고기에 소금, 후추를 넣고 잘 섞은 후, 패티 모양으로 빚어준다.
   2. 팬에 식용유를 두르고 중불에서 소고기 패티를 앞뒤로 4~5분씩 노릇하게 구워준다.
   3. 햄버거 번(빵)을 반으로 자른 뒤, 팬에 살짝 구워준다.
   4. 양상추는 깨끗이 씻어 물기를 제거한다. 토마토와 양파는 얇게 슬라이스한다.
   5. 구운 번 아래쪽에 양상추, 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 차례로 올린다.
   6. 케첩과 마요네즈(또는 원하는 소스)를 뿌리고, 빵 윗부분을 덮어 완성한다.

5. 필요한 재료와 양:
   - 햄버거 번(빵) 2개
   - 다진 소고기 200g
   - 소금 약간
   - 후추 약간
   - 식용유 1큰술
   - 양상추 2장
   - 토마토 1/2개
   - 양파 1/4개
   - 오이피클 2~3조각
   - 슬라이스 치즈 2장
   - 케첩 1큰술
   - 마요네즈 1큰술

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/05/28/21fe9f01c420c341f3e7c191f245752e1.jpg

8. 요리 팁:
   - 소고기 패티는 너무 많이 뒤집지 말고, 한 면이 충분히 익은 후 뒤집어야 육즙이 살아있어요.
   - 채소와 소스는 기호에 맞게 조절하거나 아보카도, 베이컨 등 다른 재료를 추가할 수 있습니다.

※ 새우 알레르기 정보 확인: 본 레시피에는 새우가 포함되어 있지 않아 안전하게 드실 수 있습니다.
2025-06-27 17:53:13.962 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 17:53:13.962 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 17:53:13.962 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 클래식 치즈버거

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 다진 소고기에 소금, 후추를 넣고 잘 섞은 후, 패티 모양으로 빚어준다.
   2. 팬에 식용유를 두르고 중불에서 소고기 패티를 앞뒤로 4~5분씩 노릇하게 구워준다.
   3. 햄버거 번(빵)을 반으로 자른 뒤, 팬에 살짝 구워준다.
   4. 양상추는 깨끗이 씻어 물기를 제거한다. 토마토와 양파는 얇게 슬라이스한다.
   5. 구운 번 아래쪽에 양상추, 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 차례로 올린다.
   6. 케첩과 마요네즈(또는 원하는 소스)를 뿌리고, 빵 윗부분을 덮어 완성한다.

5. 필요한 재료와 양:
   - 햄버거 번(빵) 2개
   - 다진 소고기 200g
   - 소금 약간
   - 후추 약간
   - 식용유 1큰술
   - 양상추 2장
   - 토마토 1/2개
   - 양파 1/4개
   - 오이피클 2~3조각
   - 슬라이스 치즈 2장
   - 케첩 1큰술
   - 마요네즈 1큰술

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/05/28/21fe9f01c420c341f3e7c191f245752e1.jpg

8. 요리 팁:
   - 소고기 패티는 너무 많이 뒤집지 말고, 한 면이 충분히 익은 후 뒤집어야 육즙이 살아있어요.
   - 채소와 소스는 기호에 맞게 조절하거나 아보카도, 베이컨 등 다른 재료를 추가할 수 있습니다.

※ 새우 알레르기 정보 확인: 본 레시피에는 새우가 포함되어 있지 않아 안전하게 드실 수 있습니다.
2025-06-27 17:53:13.969 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 17:53:13.974 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 17:53:13.975 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2020/05/28/21fe9f01c420c341f3e7c191f245752e1.jpg
2025-06-27 17:53:13.975 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/05/28/21fe9f01c420c341f3e7c191f245752e1.jpg
2025-06-27 17:53:13.975 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 햄버거 번(빵) 2개
   - 다진 소고기 200g
   - 소금 약간
   - 후추 약간
   - 식용유 1큰술
   - 양상추 2장
   - 토마토 1/2개
   - 양파 1/4개
   - 오이피클 2~3조각
   - 슬라이스 치즈 2장
   - 케첩 1큰술
   - 마요네즈 1큰술
2025-06-27 17:53:13.975 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-27 17:53:13.976 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거 번(빵) 2개
2025-06-27 17:53:13.976 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄버거 번(빵) 2개
2025-06-27 17:53:13.976 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 소고기 200g
2025-06-27 17:53:13.978 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소고기, Amount: 200g
2025-06-27 17:53:13.978 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기, Amount: 200g
2025-06-27 17:53:13.981 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:53:13.995 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기' not found in DB. Skipping.
2025-06-27 17:53:13.995 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 17:53:13.995 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 17:53:13.996 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 17:53:13.996 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 17:53:13.996 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1큰술
2025-06-27 17:53:13.996 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 1큰술
2025-06-27 17:53:13.996 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-27 17:53:13.998 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:53:13.999 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-27 17:53:13.999 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 2장
2025-06-27 17:53:14.000 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양상추, Amount: 2장
2025-06-27 17:53:14.000 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양상추, Amount: 2장
2025-06-27 17:53:14.002 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '양상추' not found in DB. Skipping.
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1/2개
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 토마토 1/2개
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이피클 2~3조각
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이피클 2~3조각
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 2장
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 2장
2025-06-27 17:53:14.003 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 2장
2025-06-27 17:53:14.006 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:53:14.007 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-27 17:53:14.007 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케첩 1큰술
2025-06-27 17:53:14.007 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 케첩, Amount: 1큰술
2025-06-27 17:53:14.007 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케첩, Amount: 1큰술
2025-06-27 17:53:14.014 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:53:14.015 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '케첩' not found in DB. Skipping.
2025-06-27 17:53:14.015 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 1큰술
2025-06-27 17:53:14.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마요네즈, Amount: 1큰술
2025-06-27 17:53:14.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마요네즈, Amount: 1큰술
2025-06-27 17:53:14.021 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 17:53:14.022 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '마요네즈' not found in DB. Skipping.
2025-06-27 17:53:14.023 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 다진 소고기에 소금, 후추를 넣고 잘 섞은 후, 패티 모양으로 빚어준다.
   2. 팬에 식용유를 두르고 중불에서 소고기 패티를 앞뒤로 4~5분씩 노릇하게 구워준다.
   3
2025-06-27 17:53:14.023 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 17:53:14.023 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 햄버거 번(빵) 2개
   - 다진 소고기 200g
   - 소금 약간
   - 후추 약간
   - 식용유 1큰술
   - 양상추 2장
   - 토마토 1/2개
   - 양파 1/4개
   - 오이피클 2~3조각
   - 슬라이스 치즈 2장
   - 케첩 1큰술
   - 마요네즈 1큰술

조리 방법:
1. 다진 소고기에 소금, 후추를 넣고 잘 섞은 후, 패티 모양으로 빚어준다.
   2. 팬에 식용유를 두르고 중불에서 소고기 패티를 앞뒤로 4~5분씩 노릇하게 구워준다.
   3. 햄버거 번(빵)을 반으로 자른 뒤, 팬에 살짝 구워준다.
   4. 양상추는 깨끗이 씻어 물기를 제거한다. 토마토와 양파는 얇게 슬라이스한다.
   5. 구운 번 아래쪽에 양상추, 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 차례로 올린다.
   6. 케첩과 마요네즈(또는 원하는 소스)를 뿌리고, 빵 윗부분을 덮어 완성한다.
2025-06-27 17:53:14.023 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 클래식 치즈버거
2025-06-27 17:53:14.027 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 17:53:14.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 77
2025-06-27 17:53:14.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 17:53:14.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - 제목: 클래식 치즈버거
2025-06-27 17:53:14.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 햄버거 번(빵) 2개
   - 다진 소고기 200g
   - 소금 약간
   - 후추 약간
   - 식용유 1큰술
   - 양상추 2장
   - 토마토 1/2개
   - 양파 1/4개
   - 오이피클 2~3조각
   - 슬라이스 치즈 2장
   - 케첩 1큰술
   - 마요네즈 1큰술

조리 방법:
1. 다진 소고기에 소금, 후추를 넣고 잘 섞은 후, 패티 모양으로 빚어준다.
   2. 팬에 식용유를 두르고 중불에서 소고기 패티를 앞뒤로 4~5분씩 노릇하게 구워준다.
   3. 햄버거 번(빵)을 반으로 자른 뒤, 팬에 살짝 구워준다.
   4. 양상추는 깨끗이 씻어 물기를 제거한다. 토마토와 양파는 얇게 슬라이스한다.
   5. 구운 번 아래쪽에 양상추, 패티, 슬라이스 치즈, 토마토, 양파, 오이피클을 차례로 올린다.
   6. 케첩과 마요네즈(또는 원하는 소스)를 뿌리고, 빵 윗부분을 덮어 완성한다.
2025-06-27 17:53:14.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 17:53:14.046 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 18:23:41.604 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 18:23:41.610 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 18:23:41.614 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 18:28:00.703 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 18:28:00.728 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 879 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 18:28:00.729 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 18:28:00.729 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 18:28:00.786 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 18:28:00.786 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 18:28:01.616 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 18:28:01.618 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 18:28:01.655 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:28:01.657 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:28:01.659 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:28:01.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:28:01.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:28:01.660 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:28:01.661 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:28:01.662 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:28:01.663 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 JDBC repository interfaces.
2025-06-27 18:28:01.678 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 18:28:01.678 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 18:28:01.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 8 JPA repository interfaces.
2025-06-27 18:28:01.806 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 18:28:01.806 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 18:28:01.817 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:28:01.817 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:28:01.817 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:28:01.817 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:28:01.818 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:28:01.818 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:28:01.818 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:28:01.818 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:28:01.818 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-27 18:28:02.407 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 18:28:02.414 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 18:28:02.416 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 18:28:02.416 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 18:28:02.454 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 18:28:02.455 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1668 ms
2025-06-27 18:28:02.486 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 18:28:02.619 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5b3e9087
2025-06-27 18:28:02.622 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 18:28:02.638 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 18:28:02.749 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 18:28:02.774 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 18:28:02.791 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 18:28:02.899 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 18:28:02.948 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 18:28:02.949 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 18:28:03.755 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 18:28:03.871 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 18:28:04.247 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 18:28:04.460 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 18:28:04.461 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 18:28:05.411 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 18:28:05.486 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 18:28:05.604 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@504f1820, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1e5f2f87, org.springframework.security.web.context.SecurityContextHolderFilter@3e4f6b1c, org.springframework.security.web.header.HeaderWriterFilter@70fbe106, org.springframework.web.filter.CorsFilter@5542796f, org.springframework.security.web.authentication.logout.LogoutFilter@18aec02, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@74b27191, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2aa94460, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@517c30bb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6cd2838b, org.springframework.security.web.session.SessionManagementFilter@69e79602, org.springframework.security.web.access.ExceptionTranslationFilter@5eae049, org.springframework.security.web.access.intercept.AuthorizationFilter@6e041b5d]
2025-06-27 18:28:05.941 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 18:28:05.961 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 18:28:05.968 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 18:28:05.980 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.589 seconds (process running for 6.208)
2025-06-27 18:28:17.438 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 18:28:17.439 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 18:28:17.441 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-27 18:28:17.517 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 18:28:17.546 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:28:17.562 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 18:28:17.567 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 18:28:17.605 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 18:28:17.605 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 18:28:17.606 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 아침 메뉴 추천해줘
2025-06-27 18:28:17.606 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 18:28:17.606 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 18:28:17.606 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:28:17.661 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 18:28:17.664 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 18:28:17.664 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 18:28:17.664 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.

2025-06-27 18:28:17.665 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 18:28:17.665 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
, useRefrigerator: false, retry: 0
2025-06-27 18:28:17.665 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 18:28:17.666 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 18:28:17.666 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.

2025-06-27 18:28:17.666 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 18:28:17.666 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 18:28:17.668 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 18:28:17.670 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 18:28:17.670 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 18:28:17.670 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.

**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.

2025-06-27 18:28:17.670 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 18:28:17.670 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.

**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.

2025-06-27 18:28:17.671 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751016497671
2025-06-27 18:28:17.671 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 18:28:17.672 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.

**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줘
**중요**: 위 요청에 맞는 메뉴를 추천해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]

### 전체 추천 요약
- 상황: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유를 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.


요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751016497671)}], model=sonar-pro}
2025-06-27 18:28:27.769 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 18:28:27.769 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=d8b14248-7208-48b2-b0c6-94b4149d23e9, model=sonar-pro, created=1751016507, usage={prompt_tokens=1736, completion_tokens=678, total_tokens=2414, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/r040415/222082579451, https://www.youtube.com/watch?v=RBCadhgxzhk, https://www.youtube.com/playlist?list=PLo3Tol4ym6Et_vouLL1YB6xvw1yqrj0Cd], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=2025-05-23}, {title=간단한 아침식사 메뉴 집밥이 최고! 주간밥상 일주일식단 - 네이버 블로그, url=https://blog.naver.com/r040415/222082579451, date=2020-09-07, last_updated=null}, {title=아침메뉴 이렇게 해주니 남기는 거 없이 다 먹어요! 일주일 아침밥 7 ..., url=https://www.youtube.com/watch?v=RBCadhgxzhk, date=2023-12-08, last_updated=2025-05-24}, {title=간단한 아침&저녁메뉴 - YouTube, url=https://www.youtube.com/playlist?list=PLo3Tol4ym6Et_vouLL1YB6xvw1yqrj0Cd, date=null, last_updated=null}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 에그치즈토스트**
- 카테고리: 한식(간편식)
- 추천 이유: 아침에 밥을 먹으면 배가 아픈 사용자를 위해, 소화가 편한 식빵과 계란, 치즈로 만든 간단한 토스트입니다. 빠르게 만들 수 있고 포만감도 좋으며, 새우 성분이 포함되어 있지 않아 안전합니다[1].
- 예상 조리 시간: 10분
- 난이도: 하

**2. 대파베이컨볶음밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 소량의 찬밥을 사용하거나, 계란과 대파, 베이컨을 주재료로 하여 부담 없이 즐길 수 있는 메뉴입니다. 바삭한 대파 향과 베이컨이 어우러져 든든한 아침으로 적합합니다. 새우 알레르기에도 안전합니다[4].
- 예상 조리 시간: 15분
- 난이도: 중

**3. 전자레인지 계란찜**
- 카테고리: 한식
- 추천 이유: 자극적이지 않아 아침 속을 편안하게 해주며, 전자레인지로 간단하게 만들 수 있습니다. 단백질 보충도 가능하고, 소화에도 부담이 적습니다. 새우가 전혀 들어가지 않아 알레르기에 안전합니다[5].
- 예상 조리 시간: 7분
- 난이도: 하

**4. 소시지 계란말이밥**
- 카테고리: 한식
- 추천 이유: 한숟가락씩 떠먹을 수 있어 한끼 대용으로 좋고, 밥의 양을 조절해 속 부담을 덜 수 있습니다. 계란과 소시지가 어우러진 메뉴로 영양도 챙길 수 있습니다. 새우 성분이 없어 알레르기 걱정이 없습니다[4].
- 예상 조리 시간: 15분
- 난이도: 중

### 전체 추천 요약
- 상황: 아침에 밥을 먹으면 배가 아프고, 한식을 선호하며, 새우 알레르기가 있는 25세 남성에게 적합한 아침 메뉴 추천 상황
- 추천 기준: 속이 편하고 소화가 잘 되는 메뉴, 간편하고 빠르게 만들 수 있는 메뉴, 새우 등 알레르기 유발 재료가 없는 한식 위주 메뉴로 선정
- 추가 팁: 
  - 메뉴별로 빵, 계란, 야채 등을 활용해 포만감을 유지하되 속 부담을 최소화할 수 있습니다.
  - 음료로는 미지근한 물이나 요구르트, 두유 등을 곁들이면 더욱 부드럽게 아침을 시작하실 수 있습니다.
  - 특정 메뉴의 '레시피'가 궁금하다면 '레시피'라는 단어를 포함해 다시 요청해 주세요.}, delta={role=assistant, content=}}]}
2025-06-27 18:28:27.770 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 18:28:27.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 에그치즈토스트**
- 카테고리: 한식(간편식)
- 추천 이유: 아침에 밥을 먹으면 배가 아픈 사용자를 위해, 소화가 편한 식빵과 계란, 치즈로 만든 간단한 토스트입니다. 빠르게 만들 수 있고 포만감도 좋으며, 새우 성분이 포함되어 있지 않아 안전합니다[1].
- 예상 조리 시간: 10분
- 난이도: 하

**2. 대파베이컨볶음밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 소량의 찬밥을 사용하거나, 계란과 대파, 베이컨을 주재료로 하여 부담 없이 즐길 수 있는 메뉴입니다. 바삭한 대파 향과 베이컨이 어우러져 든든한 아침으로 적합합니다. 새우 알레르기에도 안전합니다[4].
- 예상 조리 시간: 15분
- 난이도: 중

**3. 전자레인지 계란찜**
- 카테고리: 한식
- 추천 이유: 자극적이지 않아 아침 속을 편안하게 해주며, 전자레인지로 간단하게 만들 수 있습니다. 단백질 보충도 가능하고, 소화에도 부담이 적습니다. 새우가 전혀 들어가지 않아 알레르기에 안전합니다[5].
- 예상 조리 시간: 7분
- 난이도: 하

**4. 소시지 계란말이밥**
- 카테고리: 한식
- 추천 이유: 한숟가락씩 떠먹을 수 있어 한끼 대용으로 좋고, 밥의 양을 조절해 속 부담을 덜 수 있습니다. 계란과 소시지가 어우러진 메뉴로 영양도 챙길 수 있습니다. 새우 성분이 없어 알레르기 걱정이 없습니다[4].
- 예상 조리 시간: 15분
- 난이도: 중

### 전체 추천 요약
- 상황: 아침에 밥을 먹으면 배가 아프고, 한식을 선호하며, 새우 알레르기가 있는 25세 남성에게 적합한 아침 메뉴 추천 상황
- 추천 기준: 속이 편하고 소화가 잘 되는 메뉴, 간편하고 빠르게 만들 수 있는 메뉴, 새우 등 알레르기 유발 재료가 없는 한식 위주 메뉴로 선정
- 추가 팁: 
  - 메뉴별로 빵, 계란, 야채 등을 활용해 포만감을 유지하되 속 부담을 최소화할 수 있습니다.
  - 음료로는 미지근한 물이나 요구르트, 두유 등을 곁들이면 더욱 부드럽게 아침을 시작하실 수 있습니다.
  - 특정 메뉴의 '레시피'가 궁금하다면 '레시피'라는 단어를 포함해 다시 요청해 주세요.
2025-06-27 18:28:27.773 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 18:28:27.773 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 18:28:27.773 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 에그치즈토스트**
- 카테고리: 한식(간편식)
- 추천 이유: 아침에 밥을 먹으면 배가 아픈 사용자를 위해, 소화가 편한 식빵과 계란, 치즈로 만든 간단한 토스트입니다. 빠르게 만들 수 있고 포만감도 좋으며, 새우 성분이 포함되어 있지 않아 안전합니다[1].
- 예상 조리 시간: 10분
- 난이도: 하

**2. 대파베이컨볶음밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 소량의 찬밥을 사용하거나, 계란과 대파, 베이컨을 주재료로 하여 부담 없이 즐길 수 있는 메뉴입니다. 바삭한 대파 향과 베이컨이 어우러져 든든한 아침으로 적합합니다. 새우 알레르기에도 안전합니다[4].
- 예상 조리 시간: 15분
- 난이도: 중

**3. 전자레인지 계란찜**
- 카테고리: 한식
- 추천 이유: 자극적이지 않아 아침 속을 편안하게 해주며, 전자레인지로 간단하게 만들 수 있습니다. 단백질 보충도 가능하고, 소화에도 부담이 적습니다. 새우가 전혀 들어가지 않아 알레르기에 안전합니다[5].
- 예상 조리 시간: 7분
- 난이도: 하

**4. 소시지 계란말이밥**
- 카테고리: 한식
- 추천 이유: 한숟가락씩 떠먹을 수 있어 한끼 대용으로 좋고, 밥의 양을 조절해 속 부담을 덜 수 있습니다. 계란과 소시지가 어우러진 메뉴로 영양도 챙길 수 있습니다. 새우 성분이 없어 알레르기 걱정이 없습니다[4].
- 예상 조리 시간: 15분
- 난이도: 중

### 전체 추천 요약
- 상황: 아침에 밥을 먹으면 배가 아프고, 한식을 선호하며, 새우 알레르기가 있는 25세 남성에게 적합한 아침 메뉴 추천 상황
- 추천 기준: 속이 편하고 소화가 잘 되는 메뉴, 간편하고 빠르게 만들 수 있는 메뉴, 새우 등 알레르기 유발 재료가 없는 한식 위주 메뉴로 선정
- 추가 팁: 
  - 메뉴별로 빵, 계란, 야채 등을 활용해 포만감을 유지하되 속 부담을 최소화할 수 있습니다.
  - 음료로는 미지근한 물이나 요구르트, 두유 등을 곁들이면 더욱 부드럽게 아침을 시작하실 수 있습니다.
  - 특정 메뉴의 '레시피'가 궁금하다면 '레시피'라는 단어를 포함해 다시 요청해 주세요.
2025-06-27 18:28:27.777 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 18:28:27.781 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - No image URL found in AI response
2025-06-27 18:28:27.782 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 18:28:27.782 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Flexible pattern): - 난이도: 하
2025-06-27 18:28:27.783 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 18:28:27.783 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
- 난이도: 하
2025-06-27 18:28:27.783 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 추천 메뉴 목록
2025-06-27 18:28:27.812 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 18:28:27.818 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 79
2025-06-27 18:28:27.818 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 18:28:27.818 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 추천 메뉴 목록
2025-06-27 18:28:27.818 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: 조리 방법:
- 난이도: 하
2025-06-27 18:28:27.818 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 18:28:27.820 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 18:39:17.201 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 18:39:17.218 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 18:39:17.225 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 18:39:22.452 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 18:39:22.478 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 1597 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 18:39:22.479 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 18:39:22.479 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 18:39:22.532 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 18:39:22.532 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 18:39:23.325 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 18:39:23.327 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 18:39:23.367 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:39:23.369 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:39:23.371 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:39:23.371 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:39:23.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:39:23.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:39:23.373 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:39:23.374 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 18:39:23.375 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 0 JDBC repository interfaces.
2025-06-27 18:39:23.388 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 18:39:23.388 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 18:39:23.493 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 8 JPA repository interfaces.
2025-06-27 18:39:23.522 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 18:39:23.523 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 18:39:23.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:39:23.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:39:23.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:39:23.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:39:23.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:39:23.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:39:23.534 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:39:23.535 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 18:39:23.535 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-27 18:39:24.117 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 18:39:24.124 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 18:39:24.126 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 18:39:24.127 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 18:39:24.162 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 18:39:24.163 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1630 ms
2025-06-27 18:39:24.193 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 18:39:24.341 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5b3e9087
2025-06-27 18:39:24.345 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 18:39:24.370 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 18:39:24.520 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 18:39:24.552 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 18:39:24.577 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 18:39:24.861 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 18:39:24.915 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 18:39:24.915 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 18:39:25.713 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 18:39:25.832 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 18:39:26.192 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 18:39:26.613 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 18:39:26.614 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 18:39:27.632 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 18:39:27.710 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 18:39:27.823 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@504f1820, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1e5f2f87, org.springframework.security.web.context.SecurityContextHolderFilter@3e4f6b1c, org.springframework.security.web.header.HeaderWriterFilter@70fbe106, org.springframework.web.filter.CorsFilter@5542796f, org.springframework.security.web.authentication.logout.LogoutFilter@18aec02, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@74b27191, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2aa94460, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@517c30bb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6cd2838b, org.springframework.security.web.session.SessionManagementFilter@69e79602, org.springframework.security.web.access.ExceptionTranslationFilter@5eae049, org.springframework.security.web.access.intercept.AuthorizationFilter@6e041b5d]
2025-06-27 18:39:28.162 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 18:39:28.183 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 18:39:28.190 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 18:39:28.200 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.042 seconds (process running for 6.629)
2025-06-27 18:39:33.267 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 18:39:33.268 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 18:39:33.270 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-27 18:39:33.348 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 18:39:33.376 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:39:33.407 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 18:39:33.412 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 18:39:33.454 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 아침 메뉴 추천해줄래?, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 18:39:33.456 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 18:39:33.456 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 18:39:33.457 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 아침 메뉴 추천해줄래?
2025-06-27 18:39:33.457 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 18:39:33.457 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 18:39:33.457 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:39:33.508 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 18:39:33.510 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 18:39:33.511 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 18:39:33.511 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 18:39:33.511 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 18:39:33.511 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 18:39:33.512 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751017173512
2025-06-27 18:39:33.512 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 18:39:33.513 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 내일 아침 메뉴 추천해줄래?

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751017173512)}], model=sonar-pro}
2025-06-27 18:39:55.702 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 18:39:55.703 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=cfb9229c-836d-4d1f-8665-0b70a51c88da, model=sonar-pro, created=1751017195, usage={prompt_tokens=903, completion_tokens=861, total_tokens=1764, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EB%A9%94%EB%89%B4, https://www.youtube.com/watch?v=RlHoDhvKwbw, http://blog.naver.com/yjsart/221391720579, https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EC%8B%9D%EC%82%AC], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=아침메뉴 - 요리를 즐겁게~ 만개의레시피, url=https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EB%A9%94%EB%89%B4, date=null, last_updated=null}, {title=아침메뉴 7가지 ! 이렇게 해주니 식구들이 남김없이 뚝딱 ... - YouTube, url=https://www.youtube.com/watch?v=RlHoDhvKwbw, date=2024-08-25, last_updated=null}, {title=우리집 아침메뉴 베스트 10 - 네이버 블로그, url=http://blog.naver.com/yjsart/221391720579, date=2018-11-05, last_updated=2025-06-22}, {title=아침식사 - 만개의레시피, url=https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EC%8B%9D%EC%82%AC, date=null, last_updated=null}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 두부스크램블에그**
- 카테고리: 한식
- 추천 이유: 아침에 부담 없이 소화할 수 있는 메뉴로, 밥 대신 두부와 계란을 사용해 속에 무리가 적고 든든함을 더합니다. 단백질이 풍부해 포만감도 오래갑니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥 대신 계란·두부로 구성해 아침 식사 후 복통을 예방하며, 새우 등 알레르기 유발 식재료 미포함.

**2. 감자오믈렛**
- 카테고리: 한식/양식
- 추천 이유: 소화 부담이 적은 감자와 계란이 주재료로, 속을 부드럽게 보호해 아침에 먹기 좋습니다. 다양한 야채를 추가해 영양도 챙길 수 있습니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 없이 든든함을 주고, 알레르기 유발 식재료 배제.

**3. 버섯달걀죽**
- 카테고리: 한식
- 추천 이유: 따뜻하고 부드러운 죽 메뉴로 아침에 속을 편하게 해줍니다. 밥 대신 죽 형태로 소화가 잘 되며, 표고·느타리 등 다양한 버섯으로 감칠맛을 더할 수 있습니다[5].
- 예상 조리 시간: 20분
- 난이도: 중
- 개인화 고려사항: 부드럽고 자극적이지 않아 복통 예방에 좋으며, 새우 미포함.

**4. 오이참치주먹밥**
- 카테고리: 한식
- 추천 이유: 밥을 많이 넣지 않고, 소량의 밥과 오이·참치로 만드니 속이 부담스럽지 않고 간편하게 먹기 좋습니다. 아침을 거르기 쉬운 분께 추천합니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 적은 양의 밥, 새우 대신 참치 사용(단, 참치 알레르기만 없을 시).

**5. 도토리묵밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 도토리묵과 국물로 구성되어 소화가 잘 되며, 깔끔하고 가벼워 아침에 속이 편합니다. 다양한 야채로 영양까지 챙길 수 있는 메뉴입니다[4].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 대신 도토리묵 사용, 속 부담 없음, 새우 미포함.

### 전체 추천 요약
- 상황 분석: 사용자는 아침 식사 후 복통을 겪기 쉬우며, 간단하고 속이 편한 메뉴를 원함.
- 추천 기준: 밥이 주가 되지 않으면서 소화에 무리가 없는 메뉴, 조리가 간단하고 영양을 챙길 수 있는 한식 위주로 선정.
- 개인화 고려사항: 새우 등 알레르기 재료 배제, 밥 대신 계란·두부·묵·감자 등 소화가 잘 되는 식재료 활용.
- 추가 팁: 아침에는 뜨겁고 자극 없는 음식이나 소량의 가벼운 메뉴를 선택하면 속이 훨씬 편합니다. 원한다면 각 메뉴의 자세한 레시피가 필요할 때 '레시피' 단어를 포함해 다시 요청해주세요.}, delta={role=assistant, content=}}]}
2025-06-27 18:39:55.705 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 18:39:55.705 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 두부스크램블에그**
- 카테고리: 한식
- 추천 이유: 아침에 부담 없이 소화할 수 있는 메뉴로, 밥 대신 두부와 계란을 사용해 속에 무리가 적고 든든함을 더합니다. 단백질이 풍부해 포만감도 오래갑니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥 대신 계란·두부로 구성해 아침 식사 후 복통을 예방하며, 새우 등 알레르기 유발 식재료 미포함.

**2. 감자오믈렛**
- 카테고리: 한식/양식
- 추천 이유: 소화 부담이 적은 감자와 계란이 주재료로, 속을 부드럽게 보호해 아침에 먹기 좋습니다. 다양한 야채를 추가해 영양도 챙길 수 있습니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 없이 든든함을 주고, 알레르기 유발 식재료 배제.

**3. 버섯달걀죽**
- 카테고리: 한식
- 추천 이유: 따뜻하고 부드러운 죽 메뉴로 아침에 속을 편하게 해줍니다. 밥 대신 죽 형태로 소화가 잘 되며, 표고·느타리 등 다양한 버섯으로 감칠맛을 더할 수 있습니다[5].
- 예상 조리 시간: 20분
- 난이도: 중
- 개인화 고려사항: 부드럽고 자극적이지 않아 복통 예방에 좋으며, 새우 미포함.

**4. 오이참치주먹밥**
- 카테고리: 한식
- 추천 이유: 밥을 많이 넣지 않고, 소량의 밥과 오이·참치로 만드니 속이 부담스럽지 않고 간편하게 먹기 좋습니다. 아침을 거르기 쉬운 분께 추천합니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 적은 양의 밥, 새우 대신 참치 사용(단, 참치 알레르기만 없을 시).

**5. 도토리묵밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 도토리묵과 국물로 구성되어 소화가 잘 되며, 깔끔하고 가벼워 아침에 속이 편합니다. 다양한 야채로 영양까지 챙길 수 있는 메뉴입니다[4].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 대신 도토리묵 사용, 속 부담 없음, 새우 미포함.

### 전체 추천 요약
- 상황 분석: 사용자는 아침 식사 후 복통을 겪기 쉬우며, 간단하고 속이 편한 메뉴를 원함.
- 추천 기준: 밥이 주가 되지 않으면서 소화에 무리가 없는 메뉴, 조리가 간단하고 영양을 챙길 수 있는 한식 위주로 선정.
- 개인화 고려사항: 새우 등 알레르기 재료 배제, 밥 대신 계란·두부·묵·감자 등 소화가 잘 되는 식재료 활용.
- 추가 팁: 아침에는 뜨겁고 자극 없는 음식이나 소량의 가벼운 메뉴를 선택하면 속이 훨씬 편합니다. 원한다면 각 메뉴의 자세한 레시피가 필요할 때 '레시피' 단어를 포함해 다시 요청해주세요.
2025-06-27 18:39:55.705 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 18:39:55.705 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 18:39:55.705 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 두부스크램블에그**
- 카테고리: 한식
- 추천 이유: 아침에 부담 없이 소화할 수 있는 메뉴로, 밥 대신 두부와 계란을 사용해 속에 무리가 적고 든든함을 더합니다. 단백질이 풍부해 포만감도 오래갑니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥 대신 계란·두부로 구성해 아침 식사 후 복통을 예방하며, 새우 등 알레르기 유발 식재료 미포함.

**2. 감자오믈렛**
- 카테고리: 한식/양식
- 추천 이유: 소화 부담이 적은 감자와 계란이 주재료로, 속을 부드럽게 보호해 아침에 먹기 좋습니다. 다양한 야채를 추가해 영양도 챙길 수 있습니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 없이 든든함을 주고, 알레르기 유발 식재료 배제.

**3. 버섯달걀죽**
- 카테고리: 한식
- 추천 이유: 따뜻하고 부드러운 죽 메뉴로 아침에 속을 편하게 해줍니다. 밥 대신 죽 형태로 소화가 잘 되며, 표고·느타리 등 다양한 버섯으로 감칠맛을 더할 수 있습니다[5].
- 예상 조리 시간: 20분
- 난이도: 중
- 개인화 고려사항: 부드럽고 자극적이지 않아 복통 예방에 좋으며, 새우 미포함.

**4. 오이참치주먹밥**
- 카테고리: 한식
- 추천 이유: 밥을 많이 넣지 않고, 소량의 밥과 오이·참치로 만드니 속이 부담스럽지 않고 간편하게 먹기 좋습니다. 아침을 거르기 쉬운 분께 추천합니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 적은 양의 밥, 새우 대신 참치 사용(단, 참치 알레르기만 없을 시).

**5. 도토리묵밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 도토리묵과 국물로 구성되어 소화가 잘 되며, 깔끔하고 가벼워 아침에 속이 편합니다. 다양한 야채로 영양까지 챙길 수 있는 메뉴입니다[4].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 대신 도토리묵 사용, 속 부담 없음, 새우 미포함.

### 전체 추천 요약
- 상황 분석: 사용자는 아침 식사 후 복통을 겪기 쉬우며, 간단하고 속이 편한 메뉴를 원함.
- 추천 기준: 밥이 주가 되지 않으면서 소화에 무리가 없는 메뉴, 조리가 간단하고 영양을 챙길 수 있는 한식 위주로 선정.
- 개인화 고려사항: 새우 등 알레르기 재료 배제, 밥 대신 계란·두부·묵·감자 등 소화가 잘 되는 식재료 활용.
- 추가 팁: 아침에는 뜨겁고 자극 없는 음식이나 소량의 가벼운 메뉴를 선택하면 속이 훨씬 편합니다. 원한다면 각 메뉴의 자세한 레시피가 필요할 때 '레시피' 단어를 포함해 다시 요청해주세요.
2025-06-27 18:39:55.706 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving menu recommendation with title: 메뉴 추천
2025-06-27 18:39:55.740 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving menu recommendation
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 18:39:55.744 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:784)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	... 122 common frames omitted
2025-06-27 18:39:55.750 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:147)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 18:42:09.470 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 18:42:09.478 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:42:09.495 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 18:42:09.499 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 18:42:09.504 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 123, prompt: 내일 아침 메뉴 추천해줄래?, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 18:42:09.504 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 18:42:09.504 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 123
2025-06-27 18:42:09.504 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 아침 메뉴 추천해줄래?
2025-06-27 18:42:09.504 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 18:42:09.504 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 18:42:09.505 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:42:09.507 [http-nio-8080-exec-2] ERROR a.s.k.p.service.PromptService - Error generating prompt for user 123: User not found
2025-06-27 18:42:09.508 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 추천 전문가입니다. 사용자의 요청에 맞는 레시피를 추천해주세요.

## 사용자 요청
내일 아침 메뉴 추천해줄래?

레시피는 다음 형식으로 제공해주세요:
## 요리 이름

**필요한 재료**
- 재료명
- 재료명
...

**조리 시간**
- 시간분

**난이도**
- 난이도 (상/중/하 중 하나)

**상세한 조리 방법**
1. 첫 번째 단계
2. 두 번째 단계
...

**요리 팁과 주의사항**
- 팁 또는 주의사항
- 팁 또는 주의사항

**완성된 요리의 이미지 URL**
- 인터넷에서 해당 요리를 검색하여 실제 이미지 URL을 제공해주세요 (교육/개인 목적)

주의사항:
- 모든 재료의 양과 단위를 정확히 명시해주세요.
- 조리 방법은 반드시 포함해야 하며, 순서대로 상세히 설명해주세요.
- 요리 팁과 주의사항은 실제 조리 시 도움이 될 수 있는 내용을 포함해주세요.
- 요리 이미지 URL은 인터넷 검색을 통해 실제 존재하는 이미지의 URL을 제공해주세요. (교육/개인 목적)
- 난이도는 반드시 '상', '중', '하' 중 하나로만 표기해주세요.
- 각 섹션은 정확히 위의 형식을 따라주세요.
- 조리 방법 섹션을 절대 생략하지 마세요. 반드시 포함해주세요.
- '상세한 조리 방법' 섹션이 누락되면 답변하지 마세요. 반드시 포함하세요.
- 이미지 URL 섹션이 누락되면 답변하지 마세요. 반드시 포함하세요.
- 아래 예시처럼 모든 섹션이 빠짐없이 포함된 답변만 작성하세요.

2025-06-27 18:42:09.508 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751017329508
2025-06-27 18:42:09.508 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 18:42:09.508 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 추천 전문가입니다. 사용자의 요청에 맞는 레시피를 추천해주세요.

## 사용자 요청
내일 아침 메뉴 추천해줄래?

레시피는 다음 형식으로 제공해주세요:
## 요리 이름

**필요한 재료**
- 재료명
- 재료명
...

**조리 시간**
- 시간분

**난이도**
- 난이도 (상/중/하 중 하나)

**상세한 조리 방법**
1. 첫 번째 단계
2. 두 번째 단계
...

**요리 팁과 주의사항**
- 팁 또는 주의사항
- 팁 또는 주의사항

**완성된 요리의 이미지 URL**
- 인터넷에서 해당 요리를 검색하여 실제 이미지 URL을 제공해주세요 (교육/개인 목적)

주의사항:
- 모든 재료의 양과 단위를 정확히 명시해주세요.
- 조리 방법은 반드시 포함해야 하며, 순서대로 상세히 설명해주세요.
- 요리 팁과 주의사항은 실제 조리 시 도움이 될 수 있는 내용을 포함해주세요.
- 요리 이미지 URL은 인터넷 검색을 통해 실제 존재하는 이미지의 URL을 제공해주세요. (교육/개인 목적)
- 난이도는 반드시 '상', '중', '하' 중 하나로만 표기해주세요.
- 각 섹션은 정확히 위의 형식을 따라주세요.
- 조리 방법 섹션을 절대 생략하지 마세요. 반드시 포함해주세요.
- '상세한 조리 방법' 섹션이 누락되면 답변하지 마세요. 반드시 포함하세요.
- 이미지 URL 섹션이 누락되면 답변하지 마세요. 반드시 포함하세요.
- 아래 예시처럼 모든 섹션이 빠짐없이 포함된 답변만 작성하세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 내일 아침 메뉴 추천해줄래?

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751017329508)}], model=sonar-pro}
2025-06-27 18:42:14.652 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 18:42:14.653 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Response: {id=037bf773-99c9-4bc1-9236-641b8bac9b1f, model=sonar-pro, created=1751017334, usage={prompt_tokens=463, completion_tokens=358, total_tokens=821, search_context_size=low}, citations=[https://easylog.co.kr/%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%95%84%EC%B9%A8%EC%8B%9D%EC%82%AC-%EB%A9%94%EB%89%B4/, https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=lS9ysUiPY0o, https://www.instagram.com/p/DKbOi_jzgyH/, https://www.youtube.com/watch?v=hZ2d3M6hnU8], search_results=[{title=간단한 아침식사 메뉴 추천 - 간편하고 맛있는 음식 6가지 - 이지로그, url=https://easylog.co.kr/%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%95%84%EC%B9%A8%EC%8B%9D%EC%82%AC-%EB%A9%94%EB%89%B4/, date=2025-04-28, last_updated=2025-04-29}, {title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=미국 초딩 아이들 일주일 아침 메뉴 공유 | 쉽고 맛있는 인기 ... - YouTube, url=https://www.youtube.com/watch?v=lS9ysUiPY0o, date=2021-06-14, last_updated=null}, {title=JIWOO | 2025. 5. 28. 수 . . #아침밥 #아침식사 #아침밥상 . . #오늘메뉴 ..., url=https://www.instagram.com/p/DKbOi_jzgyH/, date=2025-06-02, last_updated=null}, {title=저희 집 단골메뉴 아침식사 2가지 소개해 드려요 - YouTube, url=https://www.youtube.com/watch?v=hZ2d3M6hnU8, date=2023-03-13, last_updated=2025-05-26}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=## 에그치즈토스트

**필요한 재료**
- 식빵 1장
- 계란 2개
- 슬라이스 치즈 1장
- 소금 약간
- 버터 10g

**조리 시간**
- 10분

**난이도**
- 하

**상세한 조리 방법**
1. 계란 2개를 깨서 그릇에 넣고 소금을 약간 넣어 잘 풀어줍니다.
2. 팬에 버터를 두르고, 약불에서 계란물을 부어 스크램블 하듯 저어가며 익힙니다.
3. 식빵 위에 완성된 스크램블드 에그를 올립니다.
4. 그 위에 슬라이스 치즈 1장을 얹습니다.
5. 팬에 다시 약불로 식빵을 치즈와 함께 올려 치즈가 녹을 때까지 1~2분간 천천히 덮어줍니다.
6. 치즈가 완전히 녹으면 접시에 옮겨 담아 바로 즐기면 됩니다.

**요리 팁과 주의사항**
- 식빵을 미리 토스트해두면 더 바삭한 식감을 즐길 수 있습니다.
- 치즈 대신 햄이나 베이컨을 추가하면 더욱 풍성한 맛을 낼 수 있습니다.
- 계란은 너무 세지 않은 약불에서 천천히 익혀야 부드러운 식감이 납니다.

**완성된 요리의 이미지 URL**
- https://img.siksinhot.com/place/1545452736700681.jpg}, delta={role=assistant, content=}}]}
2025-06-27 18:42:14.653 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 18:42:14.653 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
## 에그치즈토스트

**필요한 재료**
- 식빵 1장
- 계란 2개
- 슬라이스 치즈 1장
- 소금 약간
- 버터 10g

**조리 시간**
- 10분

**난이도**
- 하

**상세한 조리 방법**
1. 계란 2개를 깨서 그릇에 넣고 소금을 약간 넣어 잘 풀어줍니다.
2. 팬에 버터를 두르고, 약불에서 계란물을 부어 스크램블 하듯 저어가며 익힙니다.
3. 식빵 위에 완성된 스크램블드 에그를 올립니다.
4. 그 위에 슬라이스 치즈 1장을 얹습니다.
5. 팬에 다시 약불로 식빵을 치즈와 함께 올려 치즈가 녹을 때까지 1~2분간 천천히 덮어줍니다.
6. 치즈가 완전히 녹으면 접시에 옮겨 담아 바로 즐기면 됩니다.

**요리 팁과 주의사항**
- 식빵을 미리 토스트해두면 더 바삭한 식감을 즐길 수 있습니다.
- 치즈 대신 햄이나 베이컨을 추가하면 더욱 풍성한 맛을 낼 수 있습니다.
- 계란은 너무 세지 않은 약불에서 천천히 익혀야 부드러운 식감이 납니다.

**완성된 요리의 이미지 URL**
- https://img.siksinhot.com/place/1545452736700681.jpg
2025-06-27 18:42:14.654 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 18:42:14.654 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 18:42:14.654 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ## 에그치즈토스트

**필요한 재료**
- 식빵 1장
- 계란 2개
- 슬라이스 치즈 1장
- 소금 약간
- 버터 10g

**조리 시간**
- 10분

**난이도**
- 하

**상세한 조리 방법**
1. 계란 2개를 깨서 그릇에 넣고 소금을 약간 넣어 잘 풀어줍니다.
2. 팬에 버터를 두르고, 약불에서 계란물을 부어 스크램블 하듯 저어가며 익힙니다.
3. 식빵 위에 완성된 스크램블드 에그를 올립니다.
4. 그 위에 슬라이스 치즈 1장을 얹습니다.
5. 팬에 다시 약불로 식빵을 치즈와 함께 올려 치즈가 녹을 때까지 1~2분간 천천히 덮어줍니다.
6. 치즈가 완전히 녹으면 접시에 옮겨 담아 바로 즐기면 됩니다.

**요리 팁과 주의사항**
- 식빵을 미리 토스트해두면 더 바삭한 식감을 즐길 수 있습니다.
- 치즈 대신 햄이나 베이컨을 추가하면 더욱 풍성한 맛을 낼 수 있습니다.
- 계란은 너무 세지 않은 약불에서 천천히 익혀야 부드러운 식감이 납니다.

**완성된 요리의 이미지 URL**
- https://img.siksinhot.com/place/1545452736700681.jpg
2025-06-27 18:42:14.654 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving menu recommendation with title: 메뉴 추천
2025-06-27 18:42:14.658 [http-nio-8080-exec-2] ERROR a.s.k.p.service.PerplexityService - Error saving menu recommendation
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 18:42:14.662 [http-nio-8080-exec-2] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:784)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	... 122 common frames omitted
2025-06-27 18:42:14.665 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:147)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 18:42:42.237 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 18:42:42.239 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:42:42.243 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 18:42:42.246 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 18:42:42.247 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 아침 메뉴 추천해줄래?, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 18:42:42.248 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 18:42:42.248 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 18:42:42.248 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 아침 메뉴 추천해줄래?
2025-06-27 18:42:42.250 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 18:42:42.251 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 18:42:42.252 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:42:42.258 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 18:42:42.259 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 18:42:42.259 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 18:42:42.259 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 18:42:42.260 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 18:42:42.260 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 18:42:42.260 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751017362260
2025-06-27 18:42:42.260 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 18:42:42.260 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아침 메뉴 추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 내일 아침 메뉴 추천해줄래?

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751017362260)}], model=sonar-pro}
2025-06-27 18:42:58.016 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 18:42:58.020 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Response: {id=1a2f487a-f8d4-4947-b368-6cd4b83a5109, model=sonar-pro, created=1751017377, usage={prompt_tokens=903, completion_tokens=996, total_tokens=1899, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EB%A9%94%EB%89%B4, https://www.youtube.com/watch?v=RlHoDhvKwbw, http://blog.naver.com/yjsart/221391720579, https://www.youtube.com/watch?v=YlEfjKRNY78], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=2025-06-18}, {title=아침메뉴 - 요리를 즐겁게~ 만개의레시피, url=https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EB%A9%94%EB%89%B4, date=null, last_updated=null}, {title=아침메뉴 7가지 ! 이렇게 해주니 식구들이 남김없이 뚝딱 ... - YouTube, url=https://www.youtube.com/watch?v=RlHoDhvKwbw, date=2024-08-25, last_updated=null}, {title=우리집 아침메뉴 베스트 10 - 네이버 블로그, url=http://blog.naver.com/yjsart/221391720579, date=2018-11-05, last_updated=2025-06-22}, {title=알아두면 쓸모있는❗️간편한 아침식사 메뉴 7가지 레시피 - YouTube, url=https://www.youtube.com/watch?v=YlEfjKRNY78, date=2023-09-15, last_updated=null}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 두부스크램블에그**
- 카테고리: 한식
- 추천 이유: 위에 자극적이지 않고, 든든하면서도 부드러운 단백질 위주의 아침식사입니다. 밥이 들어가지 않아 아침에 밥 먹으면 배가 아픈 분에게 적합합니다. 스크램블에그에 두부를 추가해 포만감과 영양을 동시에 챙길 수 있습니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥 없이 먹는 메뉴로 복통 우려를 줄였고, 새우 등 알레르기 유발 재료가 들어가지 않습니다.

**2. 감자 오믈렛**
- 카테고리: 한식/분식
- 추천 이유: 감자를 주재료로 한 오믈렛은 아침에 부담 없이 먹기 좋고, 포만감을 오래 유지해줍니다. 계란과 감자만으로도 충분히 식사가 되며 부드러운 식감이 소화에 부담을 덜 줍니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않아 위장 부담이 적고, 새우 등 알레르기 유발 식재료가 없습니다.

**3. 도토리묵밥**
- 카테고리: 한식
- 추천 이유: 도토리묵과 시원한 국물이 만난 메뉴로, 자극적이지 않고 깔끔하게 즐길 수 있습니다. 따뜻한 버전으로 아침에 속을 부드럽게 달랠 수 있어 위 건강을 고려한 메뉴입니다[4].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 도토리묵으로 대체, 새우 미포함. 부드러운 국물 메뉴로 속을 편안하게 해줍니다.

**4. 오이참치 꼬마김밥**
- 카테고리: 한식
- 추천 이유: 밥이 적게 들어가고, 오이와 참치로 상큼하게 즐길 수 있는 한입 사이즈 김밥입니다. 기름진 재료가 적고, 부담 없이 간단하게 즐길 수 있는 아침 메뉴입니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 비중이 낮고, 새우를 넣지 않아 알레르기에도 안전함.

**5. 주머니빵 샌드위치**
- 카테고리: 기타
- 추천 이유: 식빵 또는 모닝빵에 신선한 채소, 달걀, 햄(선택)을 넣어 만드는 간편한 샌드위치 형태로, 속이 든든하면서도 위에 부담이 적은 메뉴입니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 빵 사용, 새우 미포함. 취향에 따라 달걀만 넣어도 OK.

### 전체 추천 요약
- 상황 분석: '아침 메뉴' 요청이므로, 간단하면서도 소화에 부담이 덜 가는 메뉴가 적합함. 사용자가 아침에 밥을 먹으면 배가 아프다는 점을 최우선 반영함.
- 추천 기준: 밥이 주재료가 아니거나, 밥의 양이 적은 메뉴 위주로 선정. 아침에 부담 없는 한식 또는 빵, 계란을 활용한 간단식으로 구성함.
- 개인화 고려사항: 새우 알레르기, 아침에 밥 섭취 시 복통 등 건강 상태를 철저히 반영하여 쌀밥 중심의 메뉴와 새우가 들어간 메뉴는 배제함.
- 추가 팁: 메뉴별 예상 조리 시간이 짧고, 난이도도 낮아 바쁜 아침에도 쉽게 준비할 수 있습니다. 기호에 따라 신선한 샐러드나 두유 등과 곁들여도 좋습니다.

원하는 메뉴의 상세 레시피가 필요하다면 "레시피"라는 단어를 포함해 다시 요청해주세요.}, delta={role=assistant, content=}}]}
2025-06-27 18:42:58.020 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 18:42:58.020 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 두부스크램블에그**
- 카테고리: 한식
- 추천 이유: 위에 자극적이지 않고, 든든하면서도 부드러운 단백질 위주의 아침식사입니다. 밥이 들어가지 않아 아침에 밥 먹으면 배가 아픈 분에게 적합합니다. 스크램블에그에 두부를 추가해 포만감과 영양을 동시에 챙길 수 있습니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥 없이 먹는 메뉴로 복통 우려를 줄였고, 새우 등 알레르기 유발 재료가 들어가지 않습니다.

**2. 감자 오믈렛**
- 카테고리: 한식/분식
- 추천 이유: 감자를 주재료로 한 오믈렛은 아침에 부담 없이 먹기 좋고, 포만감을 오래 유지해줍니다. 계란과 감자만으로도 충분히 식사가 되며 부드러운 식감이 소화에 부담을 덜 줍니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않아 위장 부담이 적고, 새우 등 알레르기 유발 식재료가 없습니다.

**3. 도토리묵밥**
- 카테고리: 한식
- 추천 이유: 도토리묵과 시원한 국물이 만난 메뉴로, 자극적이지 않고 깔끔하게 즐길 수 있습니다. 따뜻한 버전으로 아침에 속을 부드럽게 달랠 수 있어 위 건강을 고려한 메뉴입니다[4].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 도토리묵으로 대체, 새우 미포함. 부드러운 국물 메뉴로 속을 편안하게 해줍니다.

**4. 오이참치 꼬마김밥**
- 카테고리: 한식
- 추천 이유: 밥이 적게 들어가고, 오이와 참치로 상큼하게 즐길 수 있는 한입 사이즈 김밥입니다. 기름진 재료가 적고, 부담 없이 간단하게 즐길 수 있는 아침 메뉴입니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 비중이 낮고, 새우를 넣지 않아 알레르기에도 안전함.

**5. 주머니빵 샌드위치**
- 카테고리: 기타
- 추천 이유: 식빵 또는 모닝빵에 신선한 채소, 달걀, 햄(선택)을 넣어 만드는 간편한 샌드위치 형태로, 속이 든든하면서도 위에 부담이 적은 메뉴입니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 빵 사용, 새우 미포함. 취향에 따라 달걀만 넣어도 OK.

### 전체 추천 요약
- 상황 분석: '아침 메뉴' 요청이므로, 간단하면서도 소화에 부담이 덜 가는 메뉴가 적합함. 사용자가 아침에 밥을 먹으면 배가 아프다는 점을 최우선 반영함.
- 추천 기준: 밥이 주재료가 아니거나, 밥의 양이 적은 메뉴 위주로 선정. 아침에 부담 없는 한식 또는 빵, 계란을 활용한 간단식으로 구성함.
- 개인화 고려사항: 새우 알레르기, 아침에 밥 섭취 시 복통 등 건강 상태를 철저히 반영하여 쌀밥 중심의 메뉴와 새우가 들어간 메뉴는 배제함.
- 추가 팁: 메뉴별 예상 조리 시간이 짧고, 난이도도 낮아 바쁜 아침에도 쉽게 준비할 수 있습니다. 기호에 따라 신선한 샐러드나 두유 등과 곁들여도 좋습니다.

원하는 메뉴의 상세 레시피가 필요하다면 "레시피"라는 단어를 포함해 다시 요청해주세요.
2025-06-27 18:42:58.021 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 18:42:58.021 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 18:42:58.021 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 두부스크램블에그**
- 카테고리: 한식
- 추천 이유: 위에 자극적이지 않고, 든든하면서도 부드러운 단백질 위주의 아침식사입니다. 밥이 들어가지 않아 아침에 밥 먹으면 배가 아픈 분에게 적합합니다. 스크램블에그에 두부를 추가해 포만감과 영양을 동시에 챙길 수 있습니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥 없이 먹는 메뉴로 복통 우려를 줄였고, 새우 등 알레르기 유발 재료가 들어가지 않습니다.

**2. 감자 오믈렛**
- 카테고리: 한식/분식
- 추천 이유: 감자를 주재료로 한 오믈렛은 아침에 부담 없이 먹기 좋고, 포만감을 오래 유지해줍니다. 계란과 감자만으로도 충분히 식사가 되며 부드러운 식감이 소화에 부담을 덜 줍니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않아 위장 부담이 적고, 새우 등 알레르기 유발 식재료가 없습니다.

**3. 도토리묵밥**
- 카테고리: 한식
- 추천 이유: 도토리묵과 시원한 국물이 만난 메뉴로, 자극적이지 않고 깔끔하게 즐길 수 있습니다. 따뜻한 버전으로 아침에 속을 부드럽게 달랠 수 있어 위 건강을 고려한 메뉴입니다[4].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 도토리묵으로 대체, 새우 미포함. 부드러운 국물 메뉴로 속을 편안하게 해줍니다.

**4. 오이참치 꼬마김밥**
- 카테고리: 한식
- 추천 이유: 밥이 적게 들어가고, 오이와 참치로 상큼하게 즐길 수 있는 한입 사이즈 김밥입니다. 기름진 재료가 적고, 부담 없이 간단하게 즐길 수 있는 아침 메뉴입니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 밥 비중이 낮고, 새우를 넣지 않아 알레르기에도 안전함.

**5. 주머니빵 샌드위치**
- 카테고리: 기타
- 추천 이유: 식빵 또는 모닝빵에 신선한 채소, 달걀, 햄(선택)을 넣어 만드는 간편한 샌드위치 형태로, 속이 든든하면서도 위에 부담이 적은 메뉴입니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 빵 사용, 새우 미포함. 취향에 따라 달걀만 넣어도 OK.

### 전체 추천 요약
- 상황 분석: '아침 메뉴' 요청이므로, 간단하면서도 소화에 부담이 덜 가는 메뉴가 적합함. 사용자가 아침에 밥을 먹으면 배가 아프다는 점을 최우선 반영함.
- 추천 기준: 밥이 주재료가 아니거나, 밥의 양이 적은 메뉴 위주로 선정. 아침에 부담 없는 한식 또는 빵, 계란을 활용한 간단식으로 구성함.
- 개인화 고려사항: 새우 알레르기, 아침에 밥 섭취 시 복통 등 건강 상태를 철저히 반영하여 쌀밥 중심의 메뉴와 새우가 들어간 메뉴는 배제함.
- 추가 팁: 메뉴별 예상 조리 시간이 짧고, 난이도도 낮아 바쁜 아침에도 쉽게 준비할 수 있습니다. 기호에 따라 신선한 샐러드나 두유 등과 곁들여도 좋습니다.

원하는 메뉴의 상세 레시피가 필요하다면 "레시피"라는 단어를 포함해 다시 요청해주세요.
2025-06-27 18:42:58.021 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving menu recommendation with title: 메뉴 추천
2025-06-27 18:42:58.023 [http-nio-8080-exec-4] ERROR a.s.k.p.service.PerplexityService - Error saving menu recommendation
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 18:42:58.026 [http-nio-8080-exec-4] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:784)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	... 122 common frames omitted
2025-06-27 18:42:58.030 [http-nio-8080-exec-4] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:147)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 18:46:37.434 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 18:46:37.453 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:46:37.468 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 18:46:37.476 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 18:46:37.481 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 아 침메뉴추천해줄래?, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 18:46:37.481 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 18:46:37.481 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 18:46:37.481 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 아 침메뉴추천해줄래?
2025-06-27 18:46:37.481 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 18:46:37.481 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 18:46:37.482 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 18:46:37.487 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 18:46:37.491 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 18:46:37.491 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 18:46:37.491 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아 침메뉴추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 18:46:37.491 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 18:46:37.491 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아 침메뉴추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 18:46:37.491 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751017597491
2025-06-27 18:46:37.491 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 18:46:37.491 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 아 침메뉴추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 내일 아 침메뉴추천해줄래?

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751017597491)}], model=sonar-pro}
2025-06-27 18:46:53.184 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 18:46:53.185 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Response: {id=63f6b63d-7a87-4089-b4ba-da461d3169fd, model=sonar-pro, created=1751017612, usage={prompt_tokens=905, completion_tokens=976, total_tokens=1881, search_context_size=low}, citations=[https://blog.naver.com/kkalgid1/222118047666, https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EB%A9%94%EB%89%B4, https://blog.naver.com/mineyunjin/223126968859, https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EC%8B%9D%EC%82%AC%EC%B6%94%EC%B2%9C, https://brunch.co.kr/@@2xEY/99], search_results=[{title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=null}, {title=아침메뉴 - 요리를 즐겁게~ 만개의레시피, url=https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EB%A9%94%EB%89%B4, date=null, last_updated=null}, {title=건강하고 간단한, 미국 아침식사 6가지 : 네이버 블로그, url=https://blog.naver.com/mineyunjin/223126968859, date=2023-06-12, last_updated=null}, {title=아침식사추천 - 요리를 즐겁게~ 만개의레시피, url=https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EC%8B%9D%EC%82%AC%EC%B6%94%EC%B2%9C, date=null, last_updated=null}, {title=지방분해 아침메뉴 추천 8가지, url=https://brunch.co.kr/@@2xEY/99, date=2025-04-06, last_updated=2025-06-27}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 에그 치즈 토스트**
- 카테고리: 한식/간편식
- 추천 이유: 아침에 부담 없이 먹을 수 있고, 빵을 활용해 속이 편안하게 소화될 수 있는 메뉴입니다. 계란과 치즈는 단백질 공급원으로 든든하고 건강한 한끼를 제공합니다[1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 빵이 주재료라 위장이 약한 아침에도 무리가 없으며, 새우 등 알레르기 유발 식재료가 들어가지 않습니다.

**2. 그릭 요거트 & 과일볼**
- 카테고리: 기타/건강식
- 추천 이유: 속을 부담스럽지 않게 하면서도 단백질과 비타민을 함께 섭취할 수 있어 아침 식사로 적합합니다. 요거트에 바나나, 딸기 등 다양한 과일을 곁들이면 간편하면서도 포만감이 오래갑니다[5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 소화에 부담이 적고, 우유 알레르기가 없으면 안전한 선택입니다. 새우 등 해산물은 사용하지 않습니다.

**3. 참치 주먹밥**
- 카테고리: 한식
- 추천 이유: 밥을 많이 먹으면 아침에 배가 아프지만, 한 입 크기의 주먹밥은 소량으로도 속을 든든하게 채워줍니다. 새우 대신 참치를 사용해 안전하며, 간단하게 준비할 수 있어 바쁜 아침에 적합합니다[2].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥을 소량만 사용하고, 새우는 제외하여 알레르기 걱정 없이 다양한 변형이 가능합니다.

**4. 바나나와 에다마메(풋콩)**
- 카테고리: 기타/건강식
- 추천 이유: 바나나는 속이 편안하고, 에다마메는 단백질이 풍부해서 아침에 소화 부담 없이 에너지를 공급해줍니다. 준비가 간편해 바쁜 아침에 알맞습니다[5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 쾌변 및 포만감 유지에 도움이 되고, 추가적인 알레르기 유발 재료가 포함되지 않습니다.

**5. 표고버섯 달걀죽**
- 카테고리: 한식
- 추천 이유: 죽은 소화가 잘 되고 위에 부담을 주지 않아 아침에 밥을 먹기 어려운 분들에게 적합한 메뉴입니다. 달걀과 버섯으로 부드러운 식감과 영양을 모두 챙길 수 있습니다[4].
- 예상 조리 시간: 15분
- 난이도: 중
- 개인화 고려사항: 알레르기 재료(새우) 미포함, 위장 건강을 고려한 부드러운 메뉴입니다.

### 전체 추천 요약

- 상황 분석: 사용자가 아침에 밥을 먹으면 배가 아픈 편이어서 소화에 부담이 적고, 조리 및 준비가 간단한 아침 식사 메뉴가 필요합니다. 새우 알레르기가 있으므로 해산물은 제외해야 합니다.
- 추천 기준: 속이 편안하고 소화가 쉬운 메뉴, 빠른 시간 내 준비 가능한 간편식 위주로 선정했습니다. 한식 선호를 반영해 한식 기준 메뉴도 포함했습니다.
- 개인화 고려사항: 새우나 위장에 부담되는 음식은 제외, 아침에 소화가 잘되는 식재료 중심으로 메뉴를 선택했습니다.
- 추가 팁: 메뉴에 우유, 요거트 등이 포함될 경우 유제품 알레르기가 없다면 활용하세요. 각 메뉴는 본인의 상황에 따라 양을 조절해 드시는 것이 좋으며, 원하시는 메뉴의 자세한 레시피를 알고 싶다면 '레시피' 단어를 포함해 다시 요청해 주세요.}, delta={role=assistant, content=}}]}
2025-06-27 18:46:53.185 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 18:46:53.185 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 에그 치즈 토스트**
- 카테고리: 한식/간편식
- 추천 이유: 아침에 부담 없이 먹을 수 있고, 빵을 활용해 속이 편안하게 소화될 수 있는 메뉴입니다. 계란과 치즈는 단백질 공급원으로 든든하고 건강한 한끼를 제공합니다[1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 빵이 주재료라 위장이 약한 아침에도 무리가 없으며, 새우 등 알레르기 유발 식재료가 들어가지 않습니다.

**2. 그릭 요거트 & 과일볼**
- 카테고리: 기타/건강식
- 추천 이유: 속을 부담스럽지 않게 하면서도 단백질과 비타민을 함께 섭취할 수 있어 아침 식사로 적합합니다. 요거트에 바나나, 딸기 등 다양한 과일을 곁들이면 간편하면서도 포만감이 오래갑니다[5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 소화에 부담이 적고, 우유 알레르기가 없으면 안전한 선택입니다. 새우 등 해산물은 사용하지 않습니다.

**3. 참치 주먹밥**
- 카테고리: 한식
- 추천 이유: 밥을 많이 먹으면 아침에 배가 아프지만, 한 입 크기의 주먹밥은 소량으로도 속을 든든하게 채워줍니다. 새우 대신 참치를 사용해 안전하며, 간단하게 준비할 수 있어 바쁜 아침에 적합합니다[2].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥을 소량만 사용하고, 새우는 제외하여 알레르기 걱정 없이 다양한 변형이 가능합니다.

**4. 바나나와 에다마메(풋콩)**
- 카테고리: 기타/건강식
- 추천 이유: 바나나는 속이 편안하고, 에다마메는 단백질이 풍부해서 아침에 소화 부담 없이 에너지를 공급해줍니다. 준비가 간편해 바쁜 아침에 알맞습니다[5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 쾌변 및 포만감 유지에 도움이 되고, 추가적인 알레르기 유발 재료가 포함되지 않습니다.

**5. 표고버섯 달걀죽**
- 카테고리: 한식
- 추천 이유: 죽은 소화가 잘 되고 위에 부담을 주지 않아 아침에 밥을 먹기 어려운 분들에게 적합한 메뉴입니다. 달걀과 버섯으로 부드러운 식감과 영양을 모두 챙길 수 있습니다[4].
- 예상 조리 시간: 15분
- 난이도: 중
- 개인화 고려사항: 알레르기 재료(새우) 미포함, 위장 건강을 고려한 부드러운 메뉴입니다.

### 전체 추천 요약

- 상황 분석: 사용자가 아침에 밥을 먹으면 배가 아픈 편이어서 소화에 부담이 적고, 조리 및 준비가 간단한 아침 식사 메뉴가 필요합니다. 새우 알레르기가 있으므로 해산물은 제외해야 합니다.
- 추천 기준: 속이 편안하고 소화가 쉬운 메뉴, 빠른 시간 내 준비 가능한 간편식 위주로 선정했습니다. 한식 선호를 반영해 한식 기준 메뉴도 포함했습니다.
- 개인화 고려사항: 새우나 위장에 부담되는 음식은 제외, 아침에 소화가 잘되는 식재료 중심으로 메뉴를 선택했습니다.
- 추가 팁: 메뉴에 우유, 요거트 등이 포함될 경우 유제품 알레르기가 없다면 활용하세요. 각 메뉴는 본인의 상황에 따라 양을 조절해 드시는 것이 좋으며, 원하시는 메뉴의 자세한 레시피를 알고 싶다면 '레시피' 단어를 포함해 다시 요청해 주세요.
2025-06-27 18:46:53.186 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 18:46:53.186 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 18:46:53.186 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 에그 치즈 토스트**
- 카테고리: 한식/간편식
- 추천 이유: 아침에 부담 없이 먹을 수 있고, 빵을 활용해 속이 편안하게 소화될 수 있는 메뉴입니다. 계란과 치즈는 단백질 공급원으로 든든하고 건강한 한끼를 제공합니다[1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 대신 빵이 주재료라 위장이 약한 아침에도 무리가 없으며, 새우 등 알레르기 유발 식재료가 들어가지 않습니다.

**2. 그릭 요거트 & 과일볼**
- 카테고리: 기타/건강식
- 추천 이유: 속을 부담스럽지 않게 하면서도 단백질과 비타민을 함께 섭취할 수 있어 아침 식사로 적합합니다. 요거트에 바나나, 딸기 등 다양한 과일을 곁들이면 간편하면서도 포만감이 오래갑니다[5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 소화에 부담이 적고, 우유 알레르기가 없으면 안전한 선택입니다. 새우 등 해산물은 사용하지 않습니다.

**3. 참치 주먹밥**
- 카테고리: 한식
- 추천 이유: 밥을 많이 먹으면 아침에 배가 아프지만, 한 입 크기의 주먹밥은 소량으로도 속을 든든하게 채워줍니다. 새우 대신 참치를 사용해 안전하며, 간단하게 준비할 수 있어 바쁜 아침에 적합합니다[2].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥을 소량만 사용하고, 새우는 제외하여 알레르기 걱정 없이 다양한 변형이 가능합니다.

**4. 바나나와 에다마메(풋콩)**
- 카테고리: 기타/건강식
- 추천 이유: 바나나는 속이 편안하고, 에다마메는 단백질이 풍부해서 아침에 소화 부담 없이 에너지를 공급해줍니다. 준비가 간편해 바쁜 아침에 알맞습니다[5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 쾌변 및 포만감 유지에 도움이 되고, 추가적인 알레르기 유발 재료가 포함되지 않습니다.

**5. 표고버섯 달걀죽**
- 카테고리: 한식
- 추천 이유: 죽은 소화가 잘 되고 위에 부담을 주지 않아 아침에 밥을 먹기 어려운 분들에게 적합한 메뉴입니다. 달걀과 버섯으로 부드러운 식감과 영양을 모두 챙길 수 있습니다[4].
- 예상 조리 시간: 15분
- 난이도: 중
- 개인화 고려사항: 알레르기 재료(새우) 미포함, 위장 건강을 고려한 부드러운 메뉴입니다.

### 전체 추천 요약

- 상황 분석: 사용자가 아침에 밥을 먹으면 배가 아픈 편이어서 소화에 부담이 적고, 조리 및 준비가 간단한 아침 식사 메뉴가 필요합니다. 새우 알레르기가 있으므로 해산물은 제외해야 합니다.
- 추천 기준: 속이 편안하고 소화가 쉬운 메뉴, 빠른 시간 내 준비 가능한 간편식 위주로 선정했습니다. 한식 선호를 반영해 한식 기준 메뉴도 포함했습니다.
- 개인화 고려사항: 새우나 위장에 부담되는 음식은 제외, 아침에 소화가 잘되는 식재료 중심으로 메뉴를 선택했습니다.
- 추가 팁: 메뉴에 우유, 요거트 등이 포함될 경우 유제품 알레르기가 없다면 활용하세요. 각 메뉴는 본인의 상황에 따라 양을 조절해 드시는 것이 좋으며, 원하시는 메뉴의 자세한 레시피를 알고 싶다면 '레시피' 단어를 포함해 다시 요청해 주세요.
2025-06-27 18:46:53.186 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saving menu recommendation with title: 메뉴 추천
2025-06-27 18:46:53.189 [http-nio-8080-exec-6] ERROR a.s.k.p.service.PerplexityService - Error saving menu recommendation
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 18:46:53.192 [http-nio-8080-exec-6] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:784)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	... 122 common frames omitted
2025-06-27 18:46:53.196 [http-nio-8080-exec-6] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:147)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 18:46:57.471 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 18:46:57.475 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 18:46:57.478 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 19:15:42.455 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 19:15:42.480 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 3156 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 19:15:42.481 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 19:15:42.482 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 19:15:42.528 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 19:15:42.529 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 19:15:43.379 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:15:43.380 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 19:15:43.426 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:15:43.427 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:15:43.429 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:15:43.430 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:15:43.431 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:15:43.431 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:15:43.433 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:15:43.434 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:15:43.435 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 50 ms. Found 0 JDBC repository interfaces.
2025-06-27 19:15:43.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:15:43.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 19:15:43.548 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 8 JPA repository interfaces.
2025-06-27 19:15:43.576 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:15:43.576 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 19:15:43.587 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:15:43.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:15:43.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:15:43.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:15:43.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:15:43.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:15:43.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:15:43.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:15:43.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-27 19:15:44.182 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 19:15:44.190 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 19:15:44.192 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 19:15:44.192 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 19:15:44.229 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 19:15:44.230 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1700 ms
2025-06-27 19:15:44.261 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 19:15:44.401 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@74d1e2a0
2025-06-27 19:15:44.405 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 19:15:44.421 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 19:15:44.531 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 19:15:44.556 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 19:15:44.573 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 19:15:44.686 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 19:15:44.733 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 19:15:44.734 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 19:15:45.533 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 19:15:45.638 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 19:15:45.996 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 19:15:46.211 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 19:15:46.212 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 19:15:47.218 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 19:15:47.287 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 19:15:47.400 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@504f1820, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1e5f2f87, org.springframework.security.web.context.SecurityContextHolderFilter@3e4f6b1c, org.springframework.security.web.header.HeaderWriterFilter@70fbe106, org.springframework.web.filter.CorsFilter@5542796f, org.springframework.security.web.authentication.logout.LogoutFilter@18aec02, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@1d6c548c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2aa94460, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@517c30bb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6cd2838b, org.springframework.security.web.session.SessionManagementFilter@69e79602, org.springframework.security.web.access.ExceptionTranslationFilter@5eae049, org.springframework.security.web.access.intercept.AuthorizationFilter@6e041b5d]
2025-06-27 19:15:47.703 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 19:15:47.719 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 19:15:47.724 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 19:15:47.736 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.59 seconds (process running for 6.192)
2025-06-27 19:15:57.101 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 19:15:57.101 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 19:15:57.103 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-27 19:15:57.166 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 19:15:57.194 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:15:57.208 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 19:15:57.212 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 19:15:57.249 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아침 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 19:15:57.250 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 19:15:57.251 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 19:15:57.251 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아침 메뉴 추천
2025-06-27 19:15:57.251 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 19:15:57.251 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 19:15:57.252 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:15:57.303 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 19:15:57.305 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 19:15:57.306 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 19:15:57.306 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 19:15:57.306 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 19:15:57.306 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 19:15:57.307 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751019357306
2025-06-27 19:15:57.307 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 19:15:57.308 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 아침 메뉴 추천

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751019357306)}], model=sonar-pro}
2025-06-27 19:16:07.027 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 19:16:07.028 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=095a7bb4-2ef9-489a-b2ec-58d404ab5491, model=sonar-pro, created=1751019366, usage={prompt_tokens=893, completion_tokens=869, total_tokens=1762, search_context_size=low}, citations=[https://blog.naver.com/mineyunjin/223126968859, https://v.daum.net/v/6aaE2tj4Vo?vfrom_area=recommend, https://blog.naver.com/kkalgid1/222118047666, https://www.youtube.com/watch?v=RUl_meKJkQY, https://www.gqkorea.co.kr/2024/10/07/%ED%94%BC%EA%B3%A4%ED%95%9C-%EC%95%84%EC%B9%A8%EC%9D%84-%EB%8B%A8%EC%88%A8%EC%97%90-%EA%B9%A8%EC%9A%B0%EB%8A%94-%EA%B1%B4%EA%B0%95%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EC%82%AC-7/], search_results=[{title=건강하고 간단한, 미국 아침식사 6가지 : 네이버 블로그, url=https://blog.naver.com/mineyunjin/223126968859, date=2023-06-12, last_updated=null}, {title="의사들이 뽑은" 최고의 아침 식사 6가지 | 건강의 모든것 - Daum, url=https://v.daum.net/v/6aaE2tj4Vo?vfrom_area=recommend, date=2024-12-23, last_updated=2025-06-27}, {title=아침식사메뉴 10가지 추천, 굶지마세요! : 네이버 블로그, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=null}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=null}, {title=피곤한 아침을 단숨에 깨우는 건강한 아침 식사 7, url=https://www.gqkorea.co.kr/2024/10/07/%ED%94%BC%EA%B3%A4%ED%95%9C-%EC%95%84%EC%B9%A8%EC%9D%84-%EB%8B%A8%EC%88%A8%EC%97%90-%EA%B9%A8%EC%9A%B0%EB%8A%94-%EA%B1%B4%EA%B0%95%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EC%82%AC-7/, date=2024-10-07, last_updated=2025-06-21}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 오트밀**
- 카테고리: 한식(간편/퓨전)
- 추천 이유: 오트밀은 의사들이 강력 추천하는 건강한 아침 메뉴로, 소화가 잘 되고 에너지를 오래 지속시켜줍니다. 밥 대신 먹어도 소화 부담이 적어 아침에 밥을 먹으면 배가 아픈 분들에게 적합합니다[2][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 쌀밥이 부담스러운 건강 상태, 새우 알레르기 없음

**2. 계란 스크램블과 시금치**
- 카테고리: 기타(건강식/간편식)
- 추천 이유: 계란은 고단백이면서 소화가 잘 되어 아침 식사로 이상적입니다. 시금치와 함께 먹으면 영양 균형도 맞출 수 있고 포만감도 오래갑니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않고, 새우미포함. 단백질 섭취에 도움

**3. 아보카도 토스트**
- 카테고리: 기타(건강식/퓨전)
- 추천 이유: 통곡물빵과 아보카도, 필요하다면 계란 후라이를 곁들여 영양까지 챙길 수 있습니다. 소화 부담이 적고 간단하게 준비할 수 있어 바쁜 아침에 적합합니다[5][1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 포함 안 됨, 쌀밥 대신 가벼운 빵 사용

**4. 그릭 요거트와 베리**
- 카테고리: 기타(건강식/간단식)
- 추천 이유: 그릭 요거트는 단백질이 풍부하고 소화가 잘되며 베리류와 함께 먹으면 상큼한 아침 메뉴가 됩니다. 별다른 조리 없이 빠르게 준비 가능[5][1].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 쌀밥 부담 없음, 새우 없음

**5. 두부스크램블**
- 카테고리: 한식
- 추천 이유: 두부를 으깨서 계란처럼 볶아낸 메뉴로, 든든하면서도 쉽게 소화됩니다. 한식 선호도를 고려해 제안합니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 쌀밥 없이도 먹을 수 있고, 새우 성분 없음

### 전체 추천 요약
- 상황 분석: 사용자가 ‘아침 메뉴’를 요청했고, 밥을 먹으면 배가 아픈 25세 남성으로 건강하고 부담 없는 식사가 필요합니다.
- 추천 기준: 밥(쌀)을 사용하지 않고 소화에 부담을 주지 않는, 간편하고 영양 균형이 맞는 메뉴 위주로 선정했습니다. 아침 시간에 빠르고 쉽게 준비할 수 있는 메뉴만 제안했습니다.
- 개인화 고려사항: 새우 알레르기를 철저히 배제, 쌀밥 미포함, 건강상태(아침에 밥이 부담스러운 점), 그리고 한식 선호도를 일부 반영해 메뉴를 구성했습니다.
- 추가 팁: 각각의 메뉴는 본인 입맛에 맞게 토핑(예: 과일, 견과류 등)을 추가해 변화를 줄 수 있습니다. 메뉴별 레시피가 궁금하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.}, delta={role=assistant, content=}}]}
2025-06-27 19:16:07.029 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 19:16:07.031 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 오트밀**
- 카테고리: 한식(간편/퓨전)
- 추천 이유: 오트밀은 의사들이 강력 추천하는 건강한 아침 메뉴로, 소화가 잘 되고 에너지를 오래 지속시켜줍니다. 밥 대신 먹어도 소화 부담이 적어 아침에 밥을 먹으면 배가 아픈 분들에게 적합합니다[2][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 쌀밥이 부담스러운 건강 상태, 새우 알레르기 없음

**2. 계란 스크램블과 시금치**
- 카테고리: 기타(건강식/간편식)
- 추천 이유: 계란은 고단백이면서 소화가 잘 되어 아침 식사로 이상적입니다. 시금치와 함께 먹으면 영양 균형도 맞출 수 있고 포만감도 오래갑니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않고, 새우미포함. 단백질 섭취에 도움

**3. 아보카도 토스트**
- 카테고리: 기타(건강식/퓨전)
- 추천 이유: 통곡물빵과 아보카도, 필요하다면 계란 후라이를 곁들여 영양까지 챙길 수 있습니다. 소화 부담이 적고 간단하게 준비할 수 있어 바쁜 아침에 적합합니다[5][1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 포함 안 됨, 쌀밥 대신 가벼운 빵 사용

**4. 그릭 요거트와 베리**
- 카테고리: 기타(건강식/간단식)
- 추천 이유: 그릭 요거트는 단백질이 풍부하고 소화가 잘되며 베리류와 함께 먹으면 상큼한 아침 메뉴가 됩니다. 별다른 조리 없이 빠르게 준비 가능[5][1].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 쌀밥 부담 없음, 새우 없음

**5. 두부스크램블**
- 카테고리: 한식
- 추천 이유: 두부를 으깨서 계란처럼 볶아낸 메뉴로, 든든하면서도 쉽게 소화됩니다. 한식 선호도를 고려해 제안합니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 쌀밥 없이도 먹을 수 있고, 새우 성분 없음

### 전체 추천 요약
- 상황 분석: 사용자가 ‘아침 메뉴’를 요청했고, 밥을 먹으면 배가 아픈 25세 남성으로 건강하고 부담 없는 식사가 필요합니다.
- 추천 기준: 밥(쌀)을 사용하지 않고 소화에 부담을 주지 않는, 간편하고 영양 균형이 맞는 메뉴 위주로 선정했습니다. 아침 시간에 빠르고 쉽게 준비할 수 있는 메뉴만 제안했습니다.
- 개인화 고려사항: 새우 알레르기를 철저히 배제, 쌀밥 미포함, 건강상태(아침에 밥이 부담스러운 점), 그리고 한식 선호도를 일부 반영해 메뉴를 구성했습니다.
- 추가 팁: 각각의 메뉴는 본인 입맛에 맞게 토핑(예: 과일, 견과류 등)을 추가해 변화를 줄 수 있습니다. 메뉴별 레시피가 궁금하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.
2025-06-27 19:16:07.032 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 19:16:07.032 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 19:16:07.032 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 오트밀**
- 카테고리: 한식(간편/퓨전)
- 추천 이유: 오트밀은 의사들이 강력 추천하는 건강한 아침 메뉴로, 소화가 잘 되고 에너지를 오래 지속시켜줍니다. 밥 대신 먹어도 소화 부담이 적어 아침에 밥을 먹으면 배가 아픈 분들에게 적합합니다[2][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 쌀밥이 부담스러운 건강 상태, 새우 알레르기 없음

**2. 계란 스크램블과 시금치**
- 카테고리: 기타(건강식/간편식)
- 추천 이유: 계란은 고단백이면서 소화가 잘 되어 아침 식사로 이상적입니다. 시금치와 함께 먹으면 영양 균형도 맞출 수 있고 포만감도 오래갑니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않고, 새우미포함. 단백질 섭취에 도움

**3. 아보카도 토스트**
- 카테고리: 기타(건강식/퓨전)
- 추천 이유: 통곡물빵과 아보카도, 필요하다면 계란 후라이를 곁들여 영양까지 챙길 수 있습니다. 소화 부담이 적고 간단하게 준비할 수 있어 바쁜 아침에 적합합니다[5][1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 포함 안 됨, 쌀밥 대신 가벼운 빵 사용

**4. 그릭 요거트와 베리**
- 카테고리: 기타(건강식/간단식)
- 추천 이유: 그릭 요거트는 단백질이 풍부하고 소화가 잘되며 베리류와 함께 먹으면 상큼한 아침 메뉴가 됩니다. 별다른 조리 없이 빠르게 준비 가능[5][1].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 쌀밥 부담 없음, 새우 없음

**5. 두부스크램블**
- 카테고리: 한식
- 추천 이유: 두부를 으깨서 계란처럼 볶아낸 메뉴로, 든든하면서도 쉽게 소화됩니다. 한식 선호도를 고려해 제안합니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 쌀밥 없이도 먹을 수 있고, 새우 성분 없음

### 전체 추천 요약
- 상황 분석: 사용자가 ‘아침 메뉴’를 요청했고, 밥을 먹으면 배가 아픈 25세 남성으로 건강하고 부담 없는 식사가 필요합니다.
- 추천 기준: 밥(쌀)을 사용하지 않고 소화에 부담을 주지 않는, 간편하고 영양 균형이 맞는 메뉴 위주로 선정했습니다. 아침 시간에 빠르고 쉽게 준비할 수 있는 메뉴만 제안했습니다.
- 개인화 고려사항: 새우 알레르기를 철저히 배제, 쌀밥 미포함, 건강상태(아침에 밥이 부담스러운 점), 그리고 한식 선호도를 일부 반영해 메뉴를 구성했습니다.
- 추가 팁: 각각의 메뉴는 본인 입맛에 맞게 토핑(예: 과일, 견과류 등)을 추가해 변화를 줄 수 있습니다. 메뉴별 레시피가 궁금하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.
2025-06-27 19:16:07.033 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving menu recommendation with title: 메뉴 추천
2025-06-27 19:16:07.068 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving menu recommendation
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 19:16:07.071 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:784)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	... 122 common frames omitted
2025-06-27 19:16:07.077 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:147)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 19:25:02.918 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 19:25:02.940 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:25:02.947 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 19:25:02.951 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 19:25:02.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아침메뉴추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 19:25:02.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 19:25:02.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 19:25:02.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아침메뉴추천
2025-06-27 19:25:02.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 19:25:02.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 19:25:02.957 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:25:02.962 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 19:25:02.964 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 19:25:02.964 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 19:25:02.965 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침메뉴추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 19:25:02.965 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 19:25:02.965 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침메뉴추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 19:25:02.965 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751019902965
2025-06-27 19:25:02.965 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 19:25:02.965 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침메뉴추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 아침메뉴추천

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751019902965)}], model=sonar-pro}
2025-06-27 19:25:16.706 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 19:25:16.708 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Response: {id=fc25fc0a-5bc7-4675-a9a3-a09e545e2012, model=sonar-pro, created=1751019916, usage={prompt_tokens=893, completion_tokens=1149, total_tokens=2042, search_context_size=low}, citations=[https://v.daum.net/v/6aaE2tj4Vo?vfrom_area=recommend, https://blog.naver.com/mineyunjin/223126968859, https://www.youtube.com/watch?v=RUl_meKJkQY, https://metaphm.com/%EC%95%84%EC%B9%A8-%EB%B9%88%EC%86%8D-%EA%B3%B5%EB%B3%B5%EC%97%90-%EC%A2%8B%EC%9D%80-%EC%9D%8C%EC%8B%9D-%EA%B1%B4%EA%B0%95%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EB%8B%A8-%EC%B6%94%EC%B2%9C-%EC%A1%B0/, https://www.gqkorea.co.kr/2024/10/07/%ED%94%BC%EA%B3%A4%ED%95%9C-%EC%95%84%EC%B9%A8%EC%9D%84-%EB%8B%A8%EC%88%A8%EC%97%90-%EA%B9%A8%EC%9A%B0%EB%8A%94-%EA%B1%B4%EA%B0%95%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EC%82%AC-7/], search_results=[{title="의사들이 뽑은" 최고의 아침 식사 6가지 | 건강의 모든것 - Daum, url=https://v.daum.net/v/6aaE2tj4Vo?vfrom_area=recommend, date=2024-12-23, last_updated=2025-06-27}, {title=건강하고 간단한, 미국 아침식사 6가지 : 네이버 블로그, url=https://blog.naver.com/mineyunjin/223126968859, date=2023-06-12, last_updated=null}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 아침식사 6 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=2024-05-06, last_updated=null}, {title=아침 빈속 공복에 좋은 음식, 건강한 아침 식단 추천 조합 - 메타웰, url=https://metaphm.com/%EC%95%84%EC%B9%A8-%EB%B9%88%EC%86%8D-%EA%B3%B5%EB%B3%B5%EC%97%90-%EC%A2%8B%EC%9D%80-%EC%9D%8C%EC%8B%9D-%EA%B1%B4%EA%B0%95%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EB%8B%A8-%EC%B6%94%EC%B2%9C-%EC%A1%B0/, date=2024-07-18, last_updated=null}, {title=피곤한 아침을 단숨에 깨우는 건강한 아침 식사 7, url=https://www.gqkorea.co.kr/2024/10/07/%ED%94%BC%EA%B3%A4%ED%95%9C-%EC%95%84%EC%B9%A8%EC%9D%84-%EB%8B%A8%EC%88%A8%EC%97%90-%EA%B9%A8%EC%9A%B0%EB%8A%94-%EA%B1%B4%EA%B0%95%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EC%82%AC-7/, date=2024-10-07, last_updated=2025-06-21}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 오트밀과 과일, 견과류 토핑**
- 카테고리: 한식(건강/간편식)
- 추천 이유: 아침에 밥을 먹으면 배가 아픈 사용자를 위해 부드럽고 소화가 쉬운 오트밀을 추천합니다. 섬유질이 풍부해 포만감을 주고, 혈당 조절 및 심혈관 건강에도 도움을 줍니다. 바나나, 블루베리 등 좋아하는 과일과 견과류를 곁들이면 영양 균형까지 챙길 수 있습니다[1][4][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식품 없이 간단하게 준비 가능하며, 자극적이지 않아 속도 부담 없습니다.

**2. 계란 스크램블과 시금치**
- 카테고리: 한식(계란요리/건강식)
- 추천 이유: 소화가 쉬우면서 단백질과 철분을 동시에 공급해주는 계란과 시금치 조합으로, 아침 컨디션 회복에 좋습니다. 간이 심하지 않아 위에 부담이 적고, 빠르게 준비할 수 있습니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 알레르기 유발 재료 없이 준비 가능하며, 계란과 채소는 위에 무리가 적습니다.

**3. 아보카도 토스트(계란 추가 옵션)**
- 카테고리: 기타(건강식/샌드위치류)
- 추천 이유: 빵 위에 아보카도와 계란을 얹어, 고소함과 영양을 동시에 잡았습니다. 단일 불포화지방과 비타민이 풍부한 아보카도는 속을 편안하게 만들어주며, 계란은 포만감을 더해줍니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 알레르기 걱정 없고, 밥 대신 부담 없는 곡물빵 사용으로 속에 부담이 적음.

**4. 그릭 요거트와 베리, 꿀 토핑**
- 카테고리: 기타(건강식/간편식)
- 추천 이유: 유산균이 풍부한 그릭 요거트는 소화를 돕고, 베리류와 꿀을 올리면 상큼함과 단맛으로 입맛을 돋울 수 있습니다. 빠르고 가볍게 먹기 좋아 바쁜 아침에 적합합니다[4][5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없음, 위에 자극이 적음, 소화가 쉽습니다.

**5. 삶은 달걀 + 따뜻한 채소(양배추, 당근 등)**
- 카테고리: 한식/기타(계란·채소)
- 추천 이유: 삶은 달걀은 부드럽고 속에 부담이 적은 단백질 공급원입니다. 찐 양배추, 당근 등 채소와 함께하면 균형 잡힌 아침 한 끼가 됩니다. 식이섬유와 단백질을 동시에 섭취할 수 있어 건강 관리에 좋습니다[1][4][5].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 자극적이지 않아 아침에 편하게 먹을 수 있고, 알레르기 위험이 없습니다.

### 전체 추천 요약

- 상황 분석: 사용자는 아침 메뉴를 요청했으며, 아침에 밥을 먹으면 속이 불편한 건강상 상태가 있습니다. 또한 새우 알레르기가 있어 해산물이 들어간 메뉴는 피해야 합니다.
- 추천 기준: 속에 부담이 적고 소화가 쉬운 메뉴, 빠르고 간편하게 준비 가능한 아침 식사, 간단하면서도 균형 잡힌 영양을 제공하는 건강한 메뉴를 중심으로 선정했습니다.
- 개인화 고려사항: 속에 부담이 적은 오트밀, 계란, 요거트, 채소 등으로 구성하되, 새우 등 알레르기 유발 재료는 완전히 배제했습니다. 한식 선호도를 반영해 계란과 채소 위주 식단을 포함했습니다.
- 추가 팁: 곡물빵, 오트밀, 요거트 등은 바쁜 아침에 미리 준비해 놓으면 언제든 빠르게 만들어 먹을 수 있습니다. 단일 식단보다는 과일·채소 등 토핑을 다양하게 활용해 포만감과 영양 밸런스를 챙겨보세요.

※ 만약 위 추천 메뉴 중 레시피가 궁금하시면 "레시피"라는 단어를 포함해서 다시 요청해 주세요!}, delta={role=assistant, content=}}]}
2025-06-27 19:25:16.709 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 19:25:16.709 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 오트밀과 과일, 견과류 토핑**
- 카테고리: 한식(건강/간편식)
- 추천 이유: 아침에 밥을 먹으면 배가 아픈 사용자를 위해 부드럽고 소화가 쉬운 오트밀을 추천합니다. 섬유질이 풍부해 포만감을 주고, 혈당 조절 및 심혈관 건강에도 도움을 줍니다. 바나나, 블루베리 등 좋아하는 과일과 견과류를 곁들이면 영양 균형까지 챙길 수 있습니다[1][4][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식품 없이 간단하게 준비 가능하며, 자극적이지 않아 속도 부담 없습니다.

**2. 계란 스크램블과 시금치**
- 카테고리: 한식(계란요리/건강식)
- 추천 이유: 소화가 쉬우면서 단백질과 철분을 동시에 공급해주는 계란과 시금치 조합으로, 아침 컨디션 회복에 좋습니다. 간이 심하지 않아 위에 부담이 적고, 빠르게 준비할 수 있습니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 알레르기 유발 재료 없이 준비 가능하며, 계란과 채소는 위에 무리가 적습니다.

**3. 아보카도 토스트(계란 추가 옵션)**
- 카테고리: 기타(건강식/샌드위치류)
- 추천 이유: 빵 위에 아보카도와 계란을 얹어, 고소함과 영양을 동시에 잡았습니다. 단일 불포화지방과 비타민이 풍부한 아보카도는 속을 편안하게 만들어주며, 계란은 포만감을 더해줍니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 알레르기 걱정 없고, 밥 대신 부담 없는 곡물빵 사용으로 속에 부담이 적음.

**4. 그릭 요거트와 베리, 꿀 토핑**
- 카테고리: 기타(건강식/간편식)
- 추천 이유: 유산균이 풍부한 그릭 요거트는 소화를 돕고, 베리류와 꿀을 올리면 상큼함과 단맛으로 입맛을 돋울 수 있습니다. 빠르고 가볍게 먹기 좋아 바쁜 아침에 적합합니다[4][5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없음, 위에 자극이 적음, 소화가 쉽습니다.

**5. 삶은 달걀 + 따뜻한 채소(양배추, 당근 등)**
- 카테고리: 한식/기타(계란·채소)
- 추천 이유: 삶은 달걀은 부드럽고 속에 부담이 적은 단백질 공급원입니다. 찐 양배추, 당근 등 채소와 함께하면 균형 잡힌 아침 한 끼가 됩니다. 식이섬유와 단백질을 동시에 섭취할 수 있어 건강 관리에 좋습니다[1][4][5].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 자극적이지 않아 아침에 편하게 먹을 수 있고, 알레르기 위험이 없습니다.

### 전체 추천 요약

- 상황 분석: 사용자는 아침 메뉴를 요청했으며, 아침에 밥을 먹으면 속이 불편한 건강상 상태가 있습니다. 또한 새우 알레르기가 있어 해산물이 들어간 메뉴는 피해야 합니다.
- 추천 기준: 속에 부담이 적고 소화가 쉬운 메뉴, 빠르고 간편하게 준비 가능한 아침 식사, 간단하면서도 균형 잡힌 영양을 제공하는 건강한 메뉴를 중심으로 선정했습니다.
- 개인화 고려사항: 속에 부담이 적은 오트밀, 계란, 요거트, 채소 등으로 구성하되, 새우 등 알레르기 유발 재료는 완전히 배제했습니다. 한식 선호도를 반영해 계란과 채소 위주 식단을 포함했습니다.
- 추가 팁: 곡물빵, 오트밀, 요거트 등은 바쁜 아침에 미리 준비해 놓으면 언제든 빠르게 만들어 먹을 수 있습니다. 단일 식단보다는 과일·채소 등 토핑을 다양하게 활용해 포만감과 영양 밸런스를 챙겨보세요.

※ 만약 위 추천 메뉴 중 레시피가 궁금하시면 "레시피"라는 단어를 포함해서 다시 요청해 주세요!
2025-06-27 19:25:16.709 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 19:25:16.710 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 19:25:16.710 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 오트밀과 과일, 견과류 토핑**
- 카테고리: 한식(건강/간편식)
- 추천 이유: 아침에 밥을 먹으면 배가 아픈 사용자를 위해 부드럽고 소화가 쉬운 오트밀을 추천합니다. 섬유질이 풍부해 포만감을 주고, 혈당 조절 및 심혈관 건강에도 도움을 줍니다. 바나나, 블루베리 등 좋아하는 과일과 견과류를 곁들이면 영양 균형까지 챙길 수 있습니다[1][4][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식품 없이 간단하게 준비 가능하며, 자극적이지 않아 속도 부담 없습니다.

**2. 계란 스크램블과 시금치**
- 카테고리: 한식(계란요리/건강식)
- 추천 이유: 소화가 쉬우면서 단백질과 철분을 동시에 공급해주는 계란과 시금치 조합으로, 아침 컨디션 회복에 좋습니다. 간이 심하지 않아 위에 부담이 적고, 빠르게 준비할 수 있습니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 알레르기 유발 재료 없이 준비 가능하며, 계란과 채소는 위에 무리가 적습니다.

**3. 아보카도 토스트(계란 추가 옵션)**
- 카테고리: 기타(건강식/샌드위치류)
- 추천 이유: 빵 위에 아보카도와 계란을 얹어, 고소함과 영양을 동시에 잡았습니다. 단일 불포화지방과 비타민이 풍부한 아보카도는 속을 편안하게 만들어주며, 계란은 포만감을 더해줍니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 알레르기 걱정 없고, 밥 대신 부담 없는 곡물빵 사용으로 속에 부담이 적음.

**4. 그릭 요거트와 베리, 꿀 토핑**
- 카테고리: 기타(건강식/간편식)
- 추천 이유: 유산균이 풍부한 그릭 요거트는 소화를 돕고, 베리류와 꿀을 올리면 상큼함과 단맛으로 입맛을 돋울 수 있습니다. 빠르고 가볍게 먹기 좋아 바쁜 아침에 적합합니다[4][5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없음, 위에 자극이 적음, 소화가 쉽습니다.

**5. 삶은 달걀 + 따뜻한 채소(양배추, 당근 등)**
- 카테고리: 한식/기타(계란·채소)
- 추천 이유: 삶은 달걀은 부드럽고 속에 부담이 적은 단백질 공급원입니다. 찐 양배추, 당근 등 채소와 함께하면 균형 잡힌 아침 한 끼가 됩니다. 식이섬유와 단백질을 동시에 섭취할 수 있어 건강 관리에 좋습니다[1][4][5].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 자극적이지 않아 아침에 편하게 먹을 수 있고, 알레르기 위험이 없습니다.

### 전체 추천 요약

- 상황 분석: 사용자는 아침 메뉴를 요청했으며, 아침에 밥을 먹으면 속이 불편한 건강상 상태가 있습니다. 또한 새우 알레르기가 있어 해산물이 들어간 메뉴는 피해야 합니다.
- 추천 기준: 속에 부담이 적고 소화가 쉬운 메뉴, 빠르고 간편하게 준비 가능한 아침 식사, 간단하면서도 균형 잡힌 영양을 제공하는 건강한 메뉴를 중심으로 선정했습니다.
- 개인화 고려사항: 속에 부담이 적은 오트밀, 계란, 요거트, 채소 등으로 구성하되, 새우 등 알레르기 유발 재료는 완전히 배제했습니다. 한식 선호도를 반영해 계란과 채소 위주 식단을 포함했습니다.
- 추가 팁: 곡물빵, 오트밀, 요거트 등은 바쁜 아침에 미리 준비해 놓으면 언제든 빠르게 만들어 먹을 수 있습니다. 단일 식단보다는 과일·채소 등 토핑을 다양하게 활용해 포만감과 영양 밸런스를 챙겨보세요.

※ 만약 위 추천 메뉴 중 레시피가 궁금하시면 "레시피"라는 단어를 포함해서 다시 요청해 주세요!
2025-06-27 19:25:16.710 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving menu recommendation with title: 메뉴 추천
2025-06-27 19:25:16.715 [http-nio-8080-exec-2] ERROR a.s.k.p.service.PerplexityService - Error saving menu recommendation
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 19:25:16.718 [http-nio-8080-exec-2] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:784)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	... 122 common frames omitted
2025-06-27 19:25:16.722 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:147)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 19:39:41.025 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 19:39:41.031 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 19:39:41.037 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 19:39:46.362 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 19:39:46.389 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 4573 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 19:39:46.389 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 19:39:46.390 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 19:39:46.440 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 19:39:46.441 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 19:39:47.327 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:39:47.329 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 19:39:47.370 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:39:47.372 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:39:47.373 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:39:47.374 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:39:47.374 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:39:47.375 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:39:47.376 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:39:47.377 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:39:47.377 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 0 JDBC repository interfaces.
2025-06-27 19:39:47.391 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:39:47.391 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 19:39:47.492 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 98 ms. Found 8 JPA repository interfaces.
2025-06-27 19:39:47.521 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:39:47.521 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 19:39:47.532 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:39:47.532 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:39:47.532 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:39:47.532 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:39:47.533 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:39:47.533 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:39:47.533 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:39:47.533 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:39:47.533 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-27 19:39:48.108 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 19:39:48.116 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 19:39:48.118 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 19:39:48.118 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 19:39:48.153 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 19:39:48.154 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1712 ms
2025-06-27 19:39:48.186 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 19:39:48.323 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@59940358
2025-06-27 19:39:48.327 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 19:39:48.343 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 19:39:48.458 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 19:39:48.485 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 19:39:48.502 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 19:39:48.608 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 19:39:48.649 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 19:39:48.649 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 19:39:49.453 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 19:39:49.563 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 19:39:49.927 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 19:39:50.139 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 19:39:50.140 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 19:39:51.070 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 19:39:51.142 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 19:39:51.252 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2d07b82b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3a094a9, org.springframework.security.web.context.SecurityContextHolderFilter@639c61ff, org.springframework.security.web.header.HeaderWriterFilter@645aed3f, org.springframework.web.filter.CorsFilter@428fb411, org.springframework.security.web.authentication.logout.LogoutFilter@48b14332, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@4e947cfb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4f29d1c6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@25c2d81d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@63f27b6d, org.springframework.security.web.session.SessionManagementFilter@156c3d1b, org.springframework.security.web.access.ExceptionTranslationFilter@65eb4ca5, org.springframework.security.web.access.intercept.AuthorizationFilter@430db082]
2025-06-27 19:39:51.564 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 19:39:51.581 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 19:39:51.588 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 19:39:51.597 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.546 seconds (process running for 6.183)
2025-06-27 19:39:53.312 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 19:39:53.313 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 19:39:53.316 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-27 19:39:53.400 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 19:39:53.431 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:39:53.446 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 19:39:53.452 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 19:39:53.493 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아침메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 19:39:53.494 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 19:39:53.494 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 19:39:53.494 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아침메뉴 추천
2025-06-27 19:39:53.494 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 19:39:53.494 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 19:39:53.495 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:39:53.545 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 19:39:53.547 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 19:39:53.548 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 19:39:53.548 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 19:39:53.548 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 19:39:53.548 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 19:39:53.549 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751020793549
2025-06-27 19:39:53.549 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 19:39:53.550 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 아침메뉴 추천

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751020793549)}], model=sonar-pro}
2025-06-27 19:40:04.012 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 19:40:04.013 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=b033b285-3ab1-4675-81aa-980007073e5d, model=sonar-pro, created=1751020803, usage={prompt_tokens=893, completion_tokens=912, total_tokens=1805, search_context_size=low}, citations=[https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EB%A9%94%EB%89%B4, https://www.youtube.com/watch?v=RlHoDhvKwbw, http://blog.naver.com/yjsart/221391720579, https://www.youtube.com/watch?v=YlEfjKRNY78, https://abettertoday.tistory.com/entry/%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EC%82%AC-%EB%A9%94%EB%89%B4-14%EA%B0%80%EC%A7%80], search_results=[{title=아침메뉴 - 요리를 즐겁게~ 만개의레시피, url=https://m.10000recipe.com/recipe/list.html?q=%EC%95%84%EC%B9%A8%EB%A9%94%EB%89%B4, date=null, last_updated=null}, {title=아침메뉴 7가지 ! 이렇게 해주니 식구들이 남김없이 뚝딱 ... - YouTube, url=https://www.youtube.com/watch?v=RlHoDhvKwbw, date=2024-08-25, last_updated=null}, {title=우리집 아침메뉴 베스트 10 - 네이버 블로그, url=http://blog.naver.com/yjsart/221391720579, date=2018-11-05, last_updated=2025-06-22}, {title=알아두면 쓸모있는❗️간편한 아침식사 메뉴 7가지 레시피 - YouTube, url=https://www.youtube.com/watch?v=YlEfjKRNY78, date=2023-09-15, last_updated=null}, {title=간단한 아침 식사 메뉴 14가지 - 살림 길라잡이, url=https://abettertoday.tistory.com/entry/%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EC%82%AC-%EB%A9%94%EB%89%B4-14%EA%B0%80%EC%A7%80, date=2022-11-14, last_updated=2025-06-16}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 스크램블 에그와 구운 야채**
- 카테고리: 한식(계란 반찬) / 양식(조식 스타일)
- 추천 이유: 아침에 부담 없이 먹기 좋은 메뉴로, 소화가 잘되고 에너지를 줄 수 있습니다. 별도의 밥이 필요 없어 속이 편하고, 간편하게 준비할 수 있습니다[5].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 아침에 밥을 먹으면 배가 아픈 점을 고려하여 밥 대신 계란과 야채 위주로 구성하고, 새우가 들어가지 않습니다.

**2. 두부 샐러드**
- 카테고리: 한식/기타
- 추천 이유: 아침에 속이 불편하지 않으며, 부드러운 두부와 신선한 채소로 단백질과 비타민을 동시에 섭취할 수 있습니다.
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 없이 가볍고 소화에 부담이 없도록 했으며, 알레르기 유발 식재를 사용하지 않습니다.

**3. 바나나 요거트볼**
- 카테고리: 기타(간편식)
- 추천 이유: 남성 25세의 바쁜 아침에도 빠르고 간단하게 준비할 수 있으며, 소화에 부담이 없고 든든하게 포만감을 줍니다.
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 곡물, 견과류, 바나나, 플레인 요거트를 활용해 건강하게 준비할 수 있습니다. 새우 성분이나 소화 부담이 되는 재료를 사용하지 않습니다.

**4. 오이참치 미니김밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 양을 줄여 소화 부담을 낮췄고, 오이와 참치로 상쾌한 맛을 내 가볍게 즐길 수 있는 메뉴입니다[2]. 한식을 선호한다는 점도 반영하였습니다.
- 예상 조리 시간: 15~20분
- 난이도: 중
- 개인화 고려사항: 밥의 양을 최소화해서 위 부담을 줄였고, 새우 없이 참치와 오이로 만들 수 있습니다.

**5. 감자오믈렛**
- 카테고리: 한식/양식
- 추천 이유: 감자와 계란으로 든든하면서 자극적이지 않습니다. 부드럽고 소화가 잘되는 메뉴라 아침에 추천합니다[2].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 식품이 없고, 밥 없이 든든하게 먹을 수 있습니다.

### 전체 추천 요약

- 상황 분석: 아침에 소화가 잘되고 간단하면서도 든든한 메뉴를 원함. 밥을 먹으면 배가 아프다는 점과, 새우 알레르기가 있으므로 해당 재료를 배제한 아침 메뉴가 필요함.
- 추천 기준: 속이 부담스럽지 않은 단백질·채소 위주의 가벼운 메뉴 중심으로 선정했고, 빠르고 간단하게 준비 가능하도록 조리 시간과 난이도를 낮게 설정함. 한식 선호도를 참고해 한식 메뉴를 우선 고려함.
- 개인화 고려사항: 밥의 양이 많지 않거나 밥이 없는 메뉴, 새우 알레르기 예방, 소화 부담이 적은 식재 선택.
- 추가 팁: 각 메뉴는 아침에 빠르게 섭취 가능하도록 전날 재료 준비를 해두면 더욱 수월합니다. 레시피가 필요하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.}, delta={role=assistant, content=}}]}
2025-06-27 19:40:04.014 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 19:40:04.014 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 스크램블 에그와 구운 야채**
- 카테고리: 한식(계란 반찬) / 양식(조식 스타일)
- 추천 이유: 아침에 부담 없이 먹기 좋은 메뉴로, 소화가 잘되고 에너지를 줄 수 있습니다. 별도의 밥이 필요 없어 속이 편하고, 간편하게 준비할 수 있습니다[5].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 아침에 밥을 먹으면 배가 아픈 점을 고려하여 밥 대신 계란과 야채 위주로 구성하고, 새우가 들어가지 않습니다.

**2. 두부 샐러드**
- 카테고리: 한식/기타
- 추천 이유: 아침에 속이 불편하지 않으며, 부드러운 두부와 신선한 채소로 단백질과 비타민을 동시에 섭취할 수 있습니다.
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 없이 가볍고 소화에 부담이 없도록 했으며, 알레르기 유발 식재를 사용하지 않습니다.

**3. 바나나 요거트볼**
- 카테고리: 기타(간편식)
- 추천 이유: 남성 25세의 바쁜 아침에도 빠르고 간단하게 준비할 수 있으며, 소화에 부담이 없고 든든하게 포만감을 줍니다.
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 곡물, 견과류, 바나나, 플레인 요거트를 활용해 건강하게 준비할 수 있습니다. 새우 성분이나 소화 부담이 되는 재료를 사용하지 않습니다.

**4. 오이참치 미니김밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 양을 줄여 소화 부담을 낮췄고, 오이와 참치로 상쾌한 맛을 내 가볍게 즐길 수 있는 메뉴입니다[2]. 한식을 선호한다는 점도 반영하였습니다.
- 예상 조리 시간: 15~20분
- 난이도: 중
- 개인화 고려사항: 밥의 양을 최소화해서 위 부담을 줄였고, 새우 없이 참치와 오이로 만들 수 있습니다.

**5. 감자오믈렛**
- 카테고리: 한식/양식
- 추천 이유: 감자와 계란으로 든든하면서 자극적이지 않습니다. 부드럽고 소화가 잘되는 메뉴라 아침에 추천합니다[2].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 식품이 없고, 밥 없이 든든하게 먹을 수 있습니다.

### 전체 추천 요약

- 상황 분석: 아침에 소화가 잘되고 간단하면서도 든든한 메뉴를 원함. 밥을 먹으면 배가 아프다는 점과, 새우 알레르기가 있으므로 해당 재료를 배제한 아침 메뉴가 필요함.
- 추천 기준: 속이 부담스럽지 않은 단백질·채소 위주의 가벼운 메뉴 중심으로 선정했고, 빠르고 간단하게 준비 가능하도록 조리 시간과 난이도를 낮게 설정함. 한식 선호도를 참고해 한식 메뉴를 우선 고려함.
- 개인화 고려사항: 밥의 양이 많지 않거나 밥이 없는 메뉴, 새우 알레르기 예방, 소화 부담이 적은 식재 선택.
- 추가 팁: 각 메뉴는 아침에 빠르게 섭취 가능하도록 전날 재료 준비를 해두면 더욱 수월합니다. 레시피가 필요하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.
2025-06-27 19:40:04.014 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 19:40:04.014 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 19:40:04.014 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 스크램블 에그와 구운 야채**
- 카테고리: 한식(계란 반찬) / 양식(조식 스타일)
- 추천 이유: 아침에 부담 없이 먹기 좋은 메뉴로, 소화가 잘되고 에너지를 줄 수 있습니다. 별도의 밥이 필요 없어 속이 편하고, 간편하게 준비할 수 있습니다[5].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 아침에 밥을 먹으면 배가 아픈 점을 고려하여 밥 대신 계란과 야채 위주로 구성하고, 새우가 들어가지 않습니다.

**2. 두부 샐러드**
- 카테고리: 한식/기타
- 추천 이유: 아침에 속이 불편하지 않으며, 부드러운 두부와 신선한 채소로 단백질과 비타민을 동시에 섭취할 수 있습니다.
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 없이 가볍고 소화에 부담이 없도록 했으며, 알레르기 유발 식재를 사용하지 않습니다.

**3. 바나나 요거트볼**
- 카테고리: 기타(간편식)
- 추천 이유: 남성 25세의 바쁜 아침에도 빠르고 간단하게 준비할 수 있으며, 소화에 부담이 없고 든든하게 포만감을 줍니다.
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 곡물, 견과류, 바나나, 플레인 요거트를 활용해 건강하게 준비할 수 있습니다. 새우 성분이나 소화 부담이 되는 재료를 사용하지 않습니다.

**4. 오이참치 미니김밥**
- 카테고리: 한식
- 추천 이유: 밥 대신 양을 줄여 소화 부담을 낮췄고, 오이와 참치로 상쾌한 맛을 내 가볍게 즐길 수 있는 메뉴입니다[2]. 한식을 선호한다는 점도 반영하였습니다.
- 예상 조리 시간: 15~20분
- 난이도: 중
- 개인화 고려사항: 밥의 양을 최소화해서 위 부담을 줄였고, 새우 없이 참치와 오이로 만들 수 있습니다.

**5. 감자오믈렛**
- 카테고리: 한식/양식
- 추천 이유: 감자와 계란으로 든든하면서 자극적이지 않습니다. 부드럽고 소화가 잘되는 메뉴라 아침에 추천합니다[2].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 식품이 없고, 밥 없이 든든하게 먹을 수 있습니다.

### 전체 추천 요약

- 상황 분석: 아침에 소화가 잘되고 간단하면서도 든든한 메뉴를 원함. 밥을 먹으면 배가 아프다는 점과, 새우 알레르기가 있으므로 해당 재료를 배제한 아침 메뉴가 필요함.
- 추천 기준: 속이 부담스럽지 않은 단백질·채소 위주의 가벼운 메뉴 중심으로 선정했고, 빠르고 간단하게 준비 가능하도록 조리 시간과 난이도를 낮게 설정함. 한식 선호도를 참고해 한식 메뉴를 우선 고려함.
- 개인화 고려사항: 밥의 양이 많지 않거나 밥이 없는 메뉴, 새우 알레르기 예방, 소화 부담이 적은 식재 선택.
- 추가 팁: 각 메뉴는 아침에 빠르게 섭취 가능하도록 전날 재료 준비를 해두면 더욱 수월합니다. 레시피가 필요하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.
2025-06-27 19:40:04.015 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving menu recommendation with title: 메뉴 추천
2025-06-27 19:40:04.057 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving menu recommendation
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 19:40:04.062 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:784)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:127)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:778)
	... 122 common frames omitted
2025-06-27 19:40:04.070 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save menu recommendation: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:147)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 19:41:41.602 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 19:41:41.610 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:41:41.629 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 19:41:41.633 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 19:41:41.638 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 19:41:41.638 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 19:41:41.638 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 19:41:41.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거
2025-06-27 19:41:41.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 19:41:41.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 19:41:41.640 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:41:41.646 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 19:41:41.648 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 19:41:41.648 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 19:41:41.648 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 19:41:41.648 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 19:41:41.648 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 19:41:41.649 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751020901648
2025-06-27 19:41:41.649 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 19:41:41.649 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 햄버거

요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751020901648)}], model=sonar-pro}
2025-06-27 19:41:49.219 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 19:41:49.220 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Response: {id=a2ead4c0-c765-45bb-acf4-0fb0a068740f, model=sonar-pro, created=1751020909, usage={prompt_tokens=680, completion_tokens=743, total_tokens=1423, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6906829, https://blog.naver.com/pingu528/221670357669, https://www.10000recipe.com/recipe/6870988, https://blog.naver.com/pingu528/222849599839, https://www.youtube.com/watch?v=op58ywXpRXo], search_results=[{title=홈메이드 수제 햄버거 만드는법 - 만개의레시피, url=https://www.10000recipe.com/recipe/6906829, date=null, last_updated=null}, {title=수제버거 만들기, 홈메이드 햄버거 만드는 법 : 네이버 블로그, url=https://blog.naver.com/pingu528/221670357669, date=2019-10-07, last_updated=2025-03-09}, {title=홈메이드 햄버거 패티 만들어요 - 만개의레시피, url=https://www.10000recipe.com/recipe/6870988, date=null, last_updated=null}, {title=햄버거 만드는법 수제버거 햄버거 소스 만들기 홈브런치 메뉴, url=https://blog.naver.com/pingu528/222849599839, date=2022-08-16, last_updated=2025-03-09}, {title=[준쿡] 헤매지말고 이거 보세요. 홈메이드 햄버거 만들기 - YouTube, url=https://www.youtube.com/watch?v=op58ywXpRXo, date=2021-01-09, last_updated=2025-01-26}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 햄버거

2. 카테고리: 양식

3. 조리 시간: 30분

4. 조리 방법:
   1. 소고기와 돼지고기를 1:1 비율로 섞어 간 고기에 소금과 후추로 간을 하고, 다진 양파와 빵가루를 넣어 고루 반죽한 뒤 동그랗게 패티 모양을 만든다[3][5].
   2. 달군 팬에 기름을 두르고 패티를 앞뒤로 노릇하게 구운 후, 패티 위에 슬라이스치즈를 올려 치즈가 살짝 녹을 때까지 익힌다[2][5].
   3. 햄버거 번(빵)을 반으로 갈라 토스터나 팬에 살짝 굽는다[1][4].
   4. 구운 번 아래쪽에 마요네즈, 케첩, 머스터드 등 원하는 소스를 바른다.
   5. 양상추, 양파, 토마토, 피클 등 신선한 채소를 올린다[1][4][5].
   6. 구운 패티와 치즈를 채소 위에 올리고, 베이컨이나 볶은 버섯 등 취향에 따라 추가 재료를 올린다[5].
   7. 번 위쪽을 덮고, 햄버거를 손에 들기 쉽도록 종이 포일로 감싸 완성한다.

5. 필요한 재료와 양:
   - 소고기 간 것 200g[3][5]
   - 돼지고기 간 것 200g[3]
   - 양파 1개 (중간 크기)[3][5]
   - 빵가루 3/4컵[3]
   - 소금, 후추 약간[3][5]
   - 햄버거 번(빵) 2개[1][4]
   - 양상추 4장[1][4]
   - 토마토 1개[4][5]
   - 슬라이스치즈 2장[2][4]
   - 피클 약간[5]
   - 베이컨 2줄 (선택)[5]
   - 마요네즈, 케첩, 머스터드 등 햄버거 소스[1][4][5]

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/11/10/53b7195afde544f0e4f7b8abbce9d2a01.jpg

8. 요리 팁:
   - 패티를 만들 때 너무 세게 누르지 말고 살살 다져야 육즙이 살아 있습니다[3][5].
   - 패티가 두꺼울수록 중불에서 천천히 익혀야 속까지 잘 익습니다.
   - 번(빵)은 살짝 구워야 소스나 육즙이 스며드는 것을 방지할 수 있습니다.
   - 치즈는 패티 위에 올리고 잠시 뚜껑을 덮어주면 부드럽게 녹습니다[2][4].

※ 새우 성분은 포함되어 있지 않습니다. (새우 알레르기 안전)}, delta={role=assistant, content=}}]}
2025-06-27 19:41:49.222 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 19:41:49.222 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 햄버거

2. 카테고리: 양식

3. 조리 시간: 30분

4. 조리 방법:
   1. 소고기와 돼지고기를 1:1 비율로 섞어 간 고기에 소금과 후추로 간을 하고, 다진 양파와 빵가루를 넣어 고루 반죽한 뒤 동그랗게 패티 모양을 만든다[3][5].
   2. 달군 팬에 기름을 두르고 패티를 앞뒤로 노릇하게 구운 후, 패티 위에 슬라이스치즈를 올려 치즈가 살짝 녹을 때까지 익힌다[2][5].
   3. 햄버거 번(빵)을 반으로 갈라 토스터나 팬에 살짝 굽는다[1][4].
   4. 구운 번 아래쪽에 마요네즈, 케첩, 머스터드 등 원하는 소스를 바른다.
   5. 양상추, 양파, 토마토, 피클 등 신선한 채소를 올린다[1][4][5].
   6. 구운 패티와 치즈를 채소 위에 올리고, 베이컨이나 볶은 버섯 등 취향에 따라 추가 재료를 올린다[5].
   7. 번 위쪽을 덮고, 햄버거를 손에 들기 쉽도록 종이 포일로 감싸 완성한다.

5. 필요한 재료와 양:
   - 소고기 간 것 200g[3][5]
   - 돼지고기 간 것 200g[3]
   - 양파 1개 (중간 크기)[3][5]
   - 빵가루 3/4컵[3]
   - 소금, 후추 약간[3][5]
   - 햄버거 번(빵) 2개[1][4]
   - 양상추 4장[1][4]
   - 토마토 1개[4][5]
   - 슬라이스치즈 2장[2][4]
   - 피클 약간[5]
   - 베이컨 2줄 (선택)[5]
   - 마요네즈, 케첩, 머스터드 등 햄버거 소스[1][4][5]

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/11/10/53b7195afde544f0e4f7b8abbce9d2a01.jpg

8. 요리 팁:
   - 패티를 만들 때 너무 세게 누르지 말고 살살 다져야 육즙이 살아 있습니다[3][5].
   - 패티가 두꺼울수록 중불에서 천천히 익혀야 속까지 잘 익습니다.
   - 번(빵)은 살짝 구워야 소스나 육즙이 스며드는 것을 방지할 수 있습니다.
   - 치즈는 패티 위에 올리고 잠시 뚜껑을 덮어주면 부드럽게 녹습니다[2][4].

※ 새우 성분은 포함되어 있지 않습니다. (새우 알레르기 안전)
2025-06-27 19:41:49.222 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 19:41:49.222 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 19:41:49.223 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 햄버거

2. 카테고리: 양식

3. 조리 시간: 30분

4. 조리 방법:
   1. 소고기와 돼지고기를 1:1 비율로 섞어 간 고기에 소금과 후추로 간을 하고, 다진 양파와 빵가루를 넣어 고루 반죽한 뒤 동그랗게 패티 모양을 만든다[3][5].
   2. 달군 팬에 기름을 두르고 패티를 앞뒤로 노릇하게 구운 후, 패티 위에 슬라이스치즈를 올려 치즈가 살짝 녹을 때까지 익힌다[2][5].
   3. 햄버거 번(빵)을 반으로 갈라 토스터나 팬에 살짝 굽는다[1][4].
   4. 구운 번 아래쪽에 마요네즈, 케첩, 머스터드 등 원하는 소스를 바른다.
   5. 양상추, 양파, 토마토, 피클 등 신선한 채소를 올린다[1][4][5].
   6. 구운 패티와 치즈를 채소 위에 올리고, 베이컨이나 볶은 버섯 등 취향에 따라 추가 재료를 올린다[5].
   7. 번 위쪽을 덮고, 햄버거를 손에 들기 쉽도록 종이 포일로 감싸 완성한다.

5. 필요한 재료와 양:
   - 소고기 간 것 200g[3][5]
   - 돼지고기 간 것 200g[3]
   - 양파 1개 (중간 크기)[3][5]
   - 빵가루 3/4컵[3]
   - 소금, 후추 약간[3][5]
   - 햄버거 번(빵) 2개[1][4]
   - 양상추 4장[1][4]
   - 토마토 1개[4][5]
   - 슬라이스치즈 2장[2][4]
   - 피클 약간[5]
   - 베이컨 2줄 (선택)[5]
   - 마요네즈, 케첩, 머스터드 등 햄버거 소스[1][4][5]

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/11/10/53b7195afde544f0e4f7b8abbce9d2a01.jpg

8. 요리 팁:
   - 패티를 만들 때 너무 세게 누르지 말고 살살 다져야 육즙이 살아 있습니다[3][5].
   - 패티가 두꺼울수록 중불에서 천천히 익혀야 속까지 잘 익습니다.
   - 번(빵)은 살짝 구워야 소스나 육즙이 스며드는 것을 방지할 수 있습니다.
   - 치즈는 패티 위에 올리고 잠시 뚜껑을 덮어주면 부드럽게 녹습니다[2][4].

※ 새우 성분은 포함되어 있지 않습니다. (새우 알레르기 안전)
2025-06-27 19:41:49.232 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 19:41:49.235 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 19:41:49.235 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2018/11/10/53b7195afde544f0e4f7b8abbce9d2a01.jpg
2025-06-27 19:41:49.236 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/11/10/53b7195afde544f0e4f7b8abbce9d2a01.jpg
2025-06-27 19:41:49.236 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 간 것 200g[3][5]
   - 돼지고기 간 것 200g[3]
   - 양파 1개 (중간 크기)[3][5]
   - 빵가루 3/4컵[3]
   - 소금, 후추 약간[3][5]
   - 햄버거 번(빵) 2개[1][4]
   - 양상추 4장[1][4]
   - 토마토 1개[4][5]
   - 슬라이스치즈 2장[2][4]
   - 피클 약간[5]
   - 베이컨 2줄 (선택)[5]
   - 마요네즈, 케첩, 머스터드 등 햄버거 소스[1][4][5]
2025-06-27 19:41:49.236 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-27 19:41:49.236 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 간 것 200g[3][5]
2025-06-27 19:41:49.237 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 것, Amount: 200g
2025-06-27 19:41:49.237 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 것, Amount: 200g
2025-06-27 19:41:49.243 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:41:49.249 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '것' not found in DB. Skipping.
2025-06-27 19:41:49.250 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기 간 것 200g[3]
2025-06-27 19:41:49.250 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 것, Amount: 200g
2025-06-27 19:41:49.250 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 것, Amount: 200g
2025-06-27 19:41:49.252 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:41:49.253 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '것' not found in DB. Skipping.
2025-06-27 19:41:49.253 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개 (중간 크기)[3][5]
2025-06-27 19:41:49.253 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-27 19:41:49.253 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-27 19:41:49.254 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:41:49.255 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 19:41:49.256 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 빵가루 3/4컵[3]
2025-06-27 19:41:49.256 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 빵가루 3/4컵[3]
2025-06-27 19:41:49.256 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간[3][5]
2025-06-27 19:41:49.257 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간[3][5]
2025-06-27 19:41:49.257 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거 번(빵) 2개[1][4]
2025-06-27 19:41:49.257 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄버거 번(빵) 2개[1][4]
2025-06-27 19:41:49.257 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 4장[1][4]
2025-06-27 19:41:49.257 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양상추, Amount: 4장
2025-06-27 19:41:49.257 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양상추, Amount: 4장
2025-06-27 19:41:49.258 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:41:49.261 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '양상추' not found in DB. Skipping.
2025-06-27 19:41:49.261 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개[4][5]
2025-06-27 19:41:49.261 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-27 19:41:49.261 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-27 19:41:49.263 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:41:49.265 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-27 19:41:49.265 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스치즈 2장[2][4]
2025-06-27 19:41:49.265 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 슬라이스치즈, Amount: 2장
2025-06-27 19:41:49.265 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 슬라이스치즈, Amount: 2장
2025-06-27 19:41:49.267 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:41:49.268 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '슬라이스치즈' not found in DB. Skipping.
2025-06-27 19:41:49.268 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피클 약간[5]
2025-06-27 19:41:49.268 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 피클 약간[5]
2025-06-27 19:41:49.268 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 베이컨 2줄 (선택)[5]
2025-06-27 19:41:49.268 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 베이컨, Amount: 2줄
2025-06-27 19:41:49.268 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 베이컨, Amount: 2줄
2025-06-27 19:41:49.270 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:41:49.271 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '베이컨' not found in DB. Skipping.
2025-06-27 19:41:49.271 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈, 케첩, 머스터드 등 햄버거 소스[1][4][5]
2025-06-27 19:41:49.271 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마요네즈, 케첩, 머스터드 등 햄버거 소스[1][4][5]
2025-06-27 19:41:49.272 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소고기와 돼지고기를 1:1 비율로 섞어 간 고기에 소금과 후추로 간을 하고, 다진 양파와 빵가루를 넣어 고루 반죽한 뒤 동그랗게 패티 모양을 만든다[3][5].
   2. 달
2025-06-27 19:41:49.273 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 19:41:49.273 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 간 것 200g[3][5]
   - 돼지고기 간 것 200g[3]
   - 양파 1개 (중간 크기)[3][5]
   - 빵가루 3/4컵[3]
   - 소금, 후추 약간[3][5]
   - 햄버거 번(빵) 2개[1][4]
   - 양상추 4장[1][4]
   - 토마토 1개[4][5]
   - 슬라이스치즈 2장[2][4]
   - 피클 약간[5]
   - 베이컨 2줄 (선택)[5]
   - 마요네즈, 케첩, 머스터드 등 햄버거 소스[1][4][5]

조리 방법:
1. 소고기와 돼지고기를 1:1 비율로 섞어 간 고기에 소금과 후추로 간을 하고, 다진 양파와 빵가루를 넣어 고루 반죽한 뒤 동그랗게 패티 모양을 만든다[3][5].
   2. 달군 팬에 기름을 두르고 패티를 앞뒤로 노릇하게 구운 후, 패티 위에 슬라이스치즈를 올려 치즈가 살짝 녹을 때까지 익힌다[2][5].
   3. 햄버거 번(빵)을 반으로 갈라 토스터나 팬에 살짝 굽는다[1][4].
   4. 구운 번 아래쪽에 마요네즈, 케첩, 머스터드 등 원하는 소스를 바른다.
   5. 양상추, 양파, 토마토, 피클 등 신선한 채소를 올린다[1][4][5].
   6. 구운 패티와 치즈를 채소 위에 올리고, 베이컨이나 볶은 버섯 등 취향에 따라 추가 재료를 올린다[5].
   7. 번 위쪽을 덮고, 햄버거를 손에 들기 쉽도록 종이 포일로 감싸 완성한다.
2025-06-27 19:41:49.273 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 햄버거
2025-06-27 19:41:49.289 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 19:41:49.304 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 81
2025-06-27 19:41:49.308 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 19:41:49.308 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - 제목: 햄버거
2025-06-27 19:41:49.308 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 소고기 간 것 200g[3][5]
   - 돼지고기 간 것 200g[3]
   - 양파 1개 (중간 크기)[3][5]
   - 빵가루 3/4컵[3]
   - 소금, 후추 약간[3][5]
   - 햄버거 번(빵) 2개[1][4]
   - 양상추 4장[1][4]
   - 토마토 1개[4][5]
   - 슬라이스치즈 2장[2][4]
   - 피클 약간[5]
   - 베이컨 2줄 (선택)[5]
   - 마요네즈, 케첩, 머스터드 등 햄버거 소스[1][4][5]

조리 방법:
1. 소고기와 돼지고기를 1:1 비율로 섞어 간 고기에 소금과 후추로 간을 하고, 다진 양파와 빵가루를 넣어 고루 반죽한 뒤 동그랗게 패티 모양을 만든다[3][5].
   2. 달군 팬에 기름을 두르고 패티를 앞뒤로 노릇하게 구운 후, 패티 위에 슬라이스치즈를 올려 치즈가 살짝 녹을 때까지 익힌다[2][5].
   3. 햄버거 번(빵)을 반으로 갈라 토스터나 팬에 살짝 굽는다[1][4].
   4. 구운 번 아래쪽에 마요네즈, 케첩, 머스터드 등 원하는 소스를 바른다.
   5. 양상추, 양파, 토마토, 피클 등 신선한 채소를 올린다[1][4][5].
   6. 구운 패티와 치즈를 채소 위에 올리고, 베이컨이나 볶은 버섯 등 취향에 따라 추가 재료를 올린다[5].
   7. 번 위쪽을 덮고, 햄버거를 손에 들기 쉽도록 종이 포일로 감싸 완성한다.
2025-06-27 19:41:49.308 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 19:44:43.151 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 19:44:43.157 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 19:44:43.165 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 19:44:47.857 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 19:44:47.882 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 4942 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 19:44:47.882 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 19:44:47.883 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 19:44:47.933 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 19:44:47.933 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 19:44:48.738 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:44:48.740 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 19:44:48.785 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:44:48.789 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:44:48.791 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:44:48.791 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:44:48.792 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:44:48.792 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:44:48.793 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:44:48.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 19:44:48.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 JDBC repository interfaces.
2025-06-27 19:44:48.813 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:44:48.814 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 19:44:48.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 8 JPA repository interfaces.
2025-06-27 19:44:48.938 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 19:44:48.938 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 19:44:48.949 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-27 19:44:49.535 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 19:44:49.541 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 19:44:49.543 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 19:44:49.543 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 19:44:49.579 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 19:44:49.580 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1646 ms
2025-06-27 19:44:49.610 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 19:44:49.748 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4d30458
2025-06-27 19:44:49.751 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 19:44:49.766 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 19:44:49.876 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 19:44:49.902 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 19:44:49.919 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 19:44:50.025 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 19:44:50.076 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 19:44:50.076 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 19:44:50.871 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 19:44:50.979 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 19:44:51.347 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 19:44:51.572 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 19:44:51.573 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 19:44:52.540 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 19:44:52.611 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 19:44:52.723 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@23303427, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@65ffa82f, org.springframework.security.web.context.SecurityContextHolderFilter@120fb6e2, org.springframework.security.web.header.HeaderWriterFilter@282d5cff, org.springframework.web.filter.CorsFilter@1d49a1c0, org.springframework.security.web.authentication.logout.LogoutFilter@113e8940, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@20b09bc0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@42ac6588, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@23d35d60, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@79184700, org.springframework.security.web.session.SessionManagementFilter@2aa94460, org.springframework.security.web.access.ExceptionTranslationFilter@2beaf491, org.springframework.security.web.access.intercept.AuthorizationFilter@5542796f]
2025-06-27 19:44:53.031 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 19:44:53.047 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 19:44:53.053 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 19:44:53.063 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.501 seconds (process running for 6.086)
2025-06-27 19:45:06.208 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 19:45:06.209 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 19:45:06.211 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-27 19:45:06.275 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 19:45:06.313 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:45:06.335 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 19:45:06.340 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 19:45:06.382 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아침 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 19:45:06.383 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 19:45:06.383 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 19:45:06.384 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아침 메뉴 추천
2025-06-27 19:45:06.384 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 19:45:06.384 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 19:45:06.385 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:45:06.445 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 19:45:06.448 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 19:45:06.448 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 19:45:06.448 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 19:45:06.449 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 19:45:06.449 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 19:45:06.450 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751021106449
2025-06-27 19:45:06.450 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 19:45:06.452 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 아침 메뉴 추천

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751021106449)}], model=sonar-pro}
2025-06-27 19:45:34.494 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 19:45:34.497 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Response: {id=c3e9cf17-330b-42f4-9982-e201b841e1cc, model=sonar-pro, created=1751021134, usage={prompt_tokens=893, completion_tokens=912, total_tokens=1805, search_context_size=low}, citations=[https://blog.naver.com/mineyunjin/223126968859, https://v.daum.net/v/6aaE2tj4Vo?vfrom_area=recommend, https://www.youtube.com/watch?v=RUl_meKJkQY, https://blog.naver.com/kkalgid1/222118047666, https://www.gqkorea.co.kr/2024/10/07/%ED%94%BC%EA%B3%A4%ED%95%9C-%EC%95%84%EC%B9%A8%EC%9D%84-%EB%8B%A8%EC%88%A8%EC%97%90-%EA%B9%A8%EC%9A%B0%EB%8A%94-%EA%B1%B4%EA%B0%95%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EC%82%AC-7/], search_results=[{title=건강하고 간단한, 미국 아침식사 6가지, url=https://blog.naver.com/mineyunjin/223126968859, date=2023-06-12, last_updated=null}, {title="의사들이 뽑은" 최고의 아침 식사 6가지 | 건강의 모든것, url=https://v.daum.net/v/6aaE2tj4Vo?vfrom_area=recommend, date=2024-12-23, last_updated=2025-06-27}, {title=[recipe] 혈당을 안정시켜 하루종일 식욕을 잡아주는 건강한 ..., url=https://www.youtube.com/watch?v=RUl_meKJkQY, date=null, last_updated=null}, {title=아침식사메뉴 10가지 추천, 굶지마세요!, url=https://blog.naver.com/kkalgid1/222118047666, date=2020-10-17, last_updated=null}, {title=피곤한 아침을 단숨에 깨우는 건강한 아침 식사 7, url=https://www.gqkorea.co.kr/2024/10/07/%ED%94%BC%EA%B3%A4%ED%95%9C-%EC%95%84%EC%B9%A8%EC%9D%84-%EB%8B%A8%EC%88%A8%EC%97%90-%EA%B9%A8%EC%9A%B0%EB%8A%94-%EA%B1%B4%EA%B0%95%ED%95%9C-%EC%95%84%EC%B9%A8-%EC%8B%9D%EC%82%AC-7/, date=2024-10-07, last_updated=2025-06-21}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 오트밀(귀리죽)**
- 카테고리: 한식/기타
- 추천 이유: 아침에 소화가 잘 되고 포만감이 오래가며, 의사들이 추천하는 대표적인 건강 아침 메뉴입니다. 밥 대신 속 편하게 즐길 수 있어 아침식사 후 복통이 있는 분에게 적합합니다[2][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식품 포함 없이 가볍고 소화에 부담이 없습니다.

**2. 계란 스크램블과 시금치**
- 카테고리: 한식/양식
- 추천 이유: 계란은 소화에 부담이 적고 단백질이 풍부하며, 시금치는 철분 등 영양소가 풍부해 건강하게 하루를 시작하기 좋습니다. 간단하면서도 균형 잡힌 아침 메뉴입니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정 없고, 밥 없이 즐길 수 있어 아침 복통을 예방할 수 있습니다.

**3. 그릭 요거트와 베리**
- 카테고리: 기타
- 추천 이유: 부담 없이 속이 편안하고, 단백질과 프로바이오틱스, 항산화 성분이 풍부합니다. 빠른 준비와 동시에 건강까지 챙길 수 있는 메뉴입니다[5].
- 예상 조리 시간: 3~5분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 성분이 전혀 없고, 밥이 없어 속이 편안합니다.

**4. 아보카도 토스트**
- 카테고리: 기타/양식
- 추천 이유: 아보카도는 불포화지방산과 비타민이 풍부하고, 토스트는 간편하게 만들 수 있습니다. 포만감과 에너지를 동시에 얻을 수 있는 메뉴입니다[5].
- 예상 조리 시간: 5~7분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 성분이 들어가지 않으며, 밥 대신 빵을 사용해 소화 부담을 낮췄습니다.

**5. 두부스크램블**
- 카테고리: 한식/기타
- 추천 이유: 식물성 단백질이 풍부한 두부를 활용한 간단한 메뉴로, 아침에 소화가 잘 되고 담백합니다. 바쁜 출근길에도 빠르게 준비할 수 있습니다[4].
- 예상 조리 시간: 7~10분
- 난이도: 하
- 개인화 고려사항: 알레르기 걱정 없이, 밥 대신 두부를 메인으로 사용해 속이 편안합니다.

---

### 전체 추천 요약

- 상황 분석: 사용자는 아침 식사 후 복통을 느낄 수 있으므로 소화가 잘 되고 가벼운 메뉴가 필요합니다. 또한 새우 알레르기가 있어 해산물은 피해야 합니다.
- 추천 기준: 아침에 소화 부담이 없고, 간단하게 준비할 수 있으며 영양까지 챙길 수 있는 메뉴 위주로 선정했습니다.
- 개인화 고려사항: 새우와 해산물 재료를 완전히 제외해 안전을 확보했고, 밥 대신 오트밀, 빵, 두부 등 소화에 부담이 적은 식재료로 구성했습니다.
- 추가 팁: 위 메뉴들은 시리얼, 토스트류, 요거트, 오트밀 등 변형이 쉬우며, 위가 약한 분들은 자극적이거나 기름진 재료는 피하고 기본 재료로만 조리해 드세요.

---
레시피가 필요하시면 '레시피'라는 단어를 포함해서 다시 요청해 주세요!}, delta={role=assistant, content=}}]}
2025-06-27 19:45:34.498 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 19:45:34.498 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 오트밀(귀리죽)**
- 카테고리: 한식/기타
- 추천 이유: 아침에 소화가 잘 되고 포만감이 오래가며, 의사들이 추천하는 대표적인 건강 아침 메뉴입니다. 밥 대신 속 편하게 즐길 수 있어 아침식사 후 복통이 있는 분에게 적합합니다[2][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식품 포함 없이 가볍고 소화에 부담이 없습니다.

**2. 계란 스크램블과 시금치**
- 카테고리: 한식/양식
- 추천 이유: 계란은 소화에 부담이 적고 단백질이 풍부하며, 시금치는 철분 등 영양소가 풍부해 건강하게 하루를 시작하기 좋습니다. 간단하면서도 균형 잡힌 아침 메뉴입니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정 없고, 밥 없이 즐길 수 있어 아침 복통을 예방할 수 있습니다.

**3. 그릭 요거트와 베리**
- 카테고리: 기타
- 추천 이유: 부담 없이 속이 편안하고, 단백질과 프로바이오틱스, 항산화 성분이 풍부합니다. 빠른 준비와 동시에 건강까지 챙길 수 있는 메뉴입니다[5].
- 예상 조리 시간: 3~5분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 성분이 전혀 없고, 밥이 없어 속이 편안합니다.

**4. 아보카도 토스트**
- 카테고리: 기타/양식
- 추천 이유: 아보카도는 불포화지방산과 비타민이 풍부하고, 토스트는 간편하게 만들 수 있습니다. 포만감과 에너지를 동시에 얻을 수 있는 메뉴입니다[5].
- 예상 조리 시간: 5~7분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 성분이 들어가지 않으며, 밥 대신 빵을 사용해 소화 부담을 낮췄습니다.

**5. 두부스크램블**
- 카테고리: 한식/기타
- 추천 이유: 식물성 단백질이 풍부한 두부를 활용한 간단한 메뉴로, 아침에 소화가 잘 되고 담백합니다. 바쁜 출근길에도 빠르게 준비할 수 있습니다[4].
- 예상 조리 시간: 7~10분
- 난이도: 하
- 개인화 고려사항: 알레르기 걱정 없이, 밥 대신 두부를 메인으로 사용해 속이 편안합니다.

---

### 전체 추천 요약

- 상황 분석: 사용자는 아침 식사 후 복통을 느낄 수 있으므로 소화가 잘 되고 가벼운 메뉴가 필요합니다. 또한 새우 알레르기가 있어 해산물은 피해야 합니다.
- 추천 기준: 아침에 소화 부담이 없고, 간단하게 준비할 수 있으며 영양까지 챙길 수 있는 메뉴 위주로 선정했습니다.
- 개인화 고려사항: 새우와 해산물 재료를 완전히 제외해 안전을 확보했고, 밥 대신 오트밀, 빵, 두부 등 소화에 부담이 적은 식재료로 구성했습니다.
- 추가 팁: 위 메뉴들은 시리얼, 토스트류, 요거트, 오트밀 등 변형이 쉬우며, 위가 약한 분들은 자극적이거나 기름진 재료는 피하고 기본 재료로만 조리해 드세요.

---
레시피가 필요하시면 '레시피'라는 단어를 포함해서 다시 요청해 주세요!
2025-06-27 19:45:34.498 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 19:45:34.498 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 19:45:34.498 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 오트밀(귀리죽)**
- 카테고리: 한식/기타
- 추천 이유: 아침에 소화가 잘 되고 포만감이 오래가며, 의사들이 추천하는 대표적인 건강 아침 메뉴입니다. 밥 대신 속 편하게 즐길 수 있어 아침식사 후 복통이 있는 분에게 적합합니다[2][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식품 포함 없이 가볍고 소화에 부담이 없습니다.

**2. 계란 스크램블과 시금치**
- 카테고리: 한식/양식
- 추천 이유: 계란은 소화에 부담이 적고 단백질이 풍부하며, 시금치는 철분 등 영양소가 풍부해 건강하게 하루를 시작하기 좋습니다. 간단하면서도 균형 잡힌 아침 메뉴입니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정 없고, 밥 없이 즐길 수 있어 아침 복통을 예방할 수 있습니다.

**3. 그릭 요거트와 베리**
- 카테고리: 기타
- 추천 이유: 부담 없이 속이 편안하고, 단백질과 프로바이오틱스, 항산화 성분이 풍부합니다. 빠른 준비와 동시에 건강까지 챙길 수 있는 메뉴입니다[5].
- 예상 조리 시간: 3~5분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 성분이 전혀 없고, 밥이 없어 속이 편안합니다.

**4. 아보카도 토스트**
- 카테고리: 기타/양식
- 추천 이유: 아보카도는 불포화지방산과 비타민이 풍부하고, 토스트는 간편하게 만들 수 있습니다. 포만감과 에너지를 동시에 얻을 수 있는 메뉴입니다[5].
- 예상 조리 시간: 5~7분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 성분이 들어가지 않으며, 밥 대신 빵을 사용해 소화 부담을 낮췄습니다.

**5. 두부스크램블**
- 카테고리: 한식/기타
- 추천 이유: 식물성 단백질이 풍부한 두부를 활용한 간단한 메뉴로, 아침에 소화가 잘 되고 담백합니다. 바쁜 출근길에도 빠르게 준비할 수 있습니다[4].
- 예상 조리 시간: 7~10분
- 난이도: 하
- 개인화 고려사항: 알레르기 걱정 없이, 밥 대신 두부를 메인으로 사용해 속이 편안합니다.

---

### 전체 추천 요약

- 상황 분석: 사용자는 아침 식사 후 복통을 느낄 수 있으므로 소화가 잘 되고 가벼운 메뉴가 필요합니다. 또한 새우 알레르기가 있어 해산물은 피해야 합니다.
- 추천 기준: 아침에 소화 부담이 없고, 간단하게 준비할 수 있으며 영양까지 챙길 수 있는 메뉴 위주로 선정했습니다.
- 개인화 고려사항: 새우와 해산물 재료를 완전히 제외해 안전을 확보했고, 밥 대신 오트밀, 빵, 두부 등 소화에 부담이 적은 식재료로 구성했습니다.
- 추가 팁: 위 메뉴들은 시리얼, 토스트류, 요거트, 오트밀 등 변형이 쉬우며, 위가 약한 분들은 자극적이거나 기름진 재료는 피하고 기본 재료로만 조리해 드세요.

---
레시피가 필요하시면 '레시피'라는 단어를 포함해서 다시 요청해 주세요!
2025-06-27 19:45:34.498 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Menu recommendation parsed successfully
2025-06-27 19:45:34.498 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 19:45:34.498 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 제목: 메뉴 추천
2025-06-27 19:45:34.499 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - 설명: ### 추천 메뉴 목록

**1. 오트밀(귀리죽)**
- 카테고리: 한식/기타
- 추천 이유: 아침에 소화가 잘 되고 포만감이 오래가며, 의사들이 추천하는 대표적인 건강 아침 메뉴입니다. 밥 대신 속 편하게 즐길 수 있어 아침식사 후 복통이 있는 분에게 적합합니다[2][5].
- 예상 조리 시간: 5~10분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식품 포함 없이 가볍고 소화에 부담이 없습니다.

**2. 계란 스크램블과 시금치**
- 카테고리: 한식/양식
- 추천 이유: 계란은 소화에 부담이 적고 단백질이 풍부하며, 시금치는 철분 등 영양소가 풍부해 건강하게 하루를 시작하기 좋습니다. 간단하면서도 균형 잡힌 아침 메뉴입니다[5].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정 없고, 밥 없이 즐길 수 있어 아침 복통을 예방할 수 있습니다.

**3. 그릭 요거트와 베리**
- 카테고리: 기타
- 추천 이유: 부담 없이 속이 편안하고, 단백질과 프로바이오틱스, 항산화 성분이 풍부합니다. 빠른 준비와 동시에 건강까지 챙길 수 있는 메뉴입니다[5].
- 예상 조리 시간: 3~5분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 성분이 전혀 없고, 밥이 없어 속이 편안합니다.

**4. 아보카도 토스트**
- 카테고리: 기타/양식
- 추천 이유: 아보카도는 불포화지방산과 비타민이 풍부하고, 토스트는 간편하게 만들 수 있습니다. 포만감과 에너지를 동시에 얻을 수 있는 메뉴입니다[5].
- 예상 조리 시간: 5~7분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 성분이 들어가지 않으며, 밥 대신 빵을 사용해 소화 부담을 낮췄습니다.

**5. 두부스크램블**
- 카테고리: 한식/기타
- 추천 이유: 식물성 단백질이 풍부한 두부를 활용한 간단한 메뉴로, 아침에 소화가 잘 되고 담백합니다. 바쁜 출근길에도 빠르게 준비할 수 있습니다[4].
- 예상 조리 시간: 7~10분
- 난이도: 하
- 개인화 고려사항: 알레르기 걱정 없이, 밥 대신 두부를 메인으로 사용해 속이 편안합니다.

---

### 전체 추천 요약

- 상황 분석: 사용자는 아침 식사 후 복통을 느낄 수 있으므로 소화가 잘 되고 가벼운 메뉴가 필요합니다. 또한 새우 알레르기가 있어 해산물은 피해야 합니다.
- 추천 기준: 아침에 소화 부담이 없고, 간단하게 준비할 수 있으며 영양까지 챙길 수 있는 메뉴 위주로 선정했습니다.
- 개인화 고려사항: 새우와 해산물 재료를 완전히 제외해 안전을 확보했고, 밥 대신 오트밀, 빵, 두부 등 소화에 부담이 적은 식재료로 구성했습니다.
- 추가 팁: 위 메뉴들은 시리얼, 토스트류, 요거트, 오트밀 등 변형이 쉬우며, 위가 약한 분들은 자극적이거나 기름진 재료는 피하고 기본 재료로만 조리해 드세요.

---
레시피가 필요하시면 '레시피'라는 단어를 포함해서 다시 요청해 주세요!
2025-06-27 19:45:34.499 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 19:48:47.319 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 19:48:47.340 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:48:47.347 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 19:48:47.350 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 19:48:47.355 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 오트밀(귀리죽) 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 19:48:47.356 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 19:48:47.356 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 19:48:47.356 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 오트밀(귀리죽) 레시피
2025-06-27 19:48:47.356 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 19:48:47.356 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 19:48:47.357 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 19:48:47.375 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 19:48:47.377 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 19:48:47.378 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 19:48:47.378 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 오트밀(귀리죽) 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 19:48:47.378 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 19:48:47.378 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 오트밀(귀리죽) 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 19:48:47.379 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751021327378
2025-06-27 19:48:47.379 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 19:48:47.380 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 오트밀(귀리죽) 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 오트밀(귀리죽) 레시피

요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751021327378)}], model=sonar-pro}
2025-06-27 19:48:53.864 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 19:48:53.864 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Response: {id=622f8bef-ab0b-4df5-8be6-cebb5e53fa26, model=sonar-pro, created=1751021333, usage={prompt_tokens=694, completion_tokens=553, total_tokens=1247, search_context_size=low}, citations=[https://blog.naver.com/ml0616/220665037492, https://www.youtube.com/watch?v=olTCwYpToj8, https://www.10000recipe.com/recipe/7007848, https://blog.naver.com/yhjnanna/221996168204, https://www.youtube.com/watch?v=Szgn5Q61pzI], search_results=[{title=집에서 간단하게 고소한 귀리죽 만들기(오트밀죽) - 네이버블로그, url=https://blog.naver.com/ml0616/220665037492, date=2016-03-25, last_updated=null}, {title=하루가 든든한 오트밀죽, 쉽게 만드는 법 | 뇌를 깨우는 말차 ... - YouTube, url=https://www.youtube.com/watch?v=olTCwYpToj8, date=2024-02-13, last_updated=null}, {title=계란 오트밀 죽과 우유 오트밀 죽 만드는 방법 - 만개의레시피, url=https://www.10000recipe.com/recipe/7007848, date=2023-08-11, last_updated=2025-03-22}, {title=아침메뉴 추천 건강한 음식 Oatmeal porridge 오트밀죽 3가지 레시피, url=https://blog.naver.com/yhjnanna/221996168204, date=2020-06-10, last_updated=2025-06-21}, {title=밥대신 좋아요! 속도 편하고 맛도 좋은 영양만점 오트밀 계란죽 레시피, url=https://www.youtube.com/watch?v=Szgn5Q61pzI, date=2024-10-14, last_updated=2025-05-06}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 오트밀(귀리죽)

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 냄비에 올리브유 2큰술과 다진 마늘 1큰술을 넣고 중약불에서 30초간 볶아 향을 냅니다.
   2. 채썬 양파, 표고버섯, 애호박, 당근 등 준비한 채소와 소금을 소량 넣고 2~3분간 볶아줍니다.
   3. 물 800ml를 붓고 강불에서 끓입니다.
   4. 물이 끓으면 간장 0.5큰술, 오트밀 100g을 넣고 중불로 줄여 5분 정도 저어가며 끓입니다.
   5. 계란 2개를 곱게 풀어 넣고, 저어가며 2~3분간 더 끓입니다.
   6. 마지막에 불을 끈 후 김가루, 부추, 통깨가루 등을 올려 완성합니다[5].

5. 필요한 재료와 양:
   - 오트밀(귀리) 100g
   - 계란 2개
   - 양파 40g
   - 표고버섯 30g
   - 애호박 70g
   - 당근 50g
   - 물 800ml
   - 올리브유 2큰술
   - 다진 마늘 1큰술
   - 간장 0.5큰술
   - 소금 약간
   - 김가루, 부추, 통깨가루 (선택)

6. 난이도: 하

7. 이미지 URL: https://i.ytimg.com/vi/Szgn5Q61pzI/maxresdefault.jpg

8. 요리 팁:
   - 채소는 냉장고에 있는 재료를 자유롭게 추가해도 좋으며, 가볍고 부드러운 식감을 원한다면 양을 줄여주세요.
   - 계란을 넣을 때는 불을 약하게 줄이고 천천히 휘저어주면 덩어리 없이 부드럽게 퍼집니다.
   - 오트밀은 오래 끓일수록 걸쭉해지니, 농도는 기호에 맞게 물의 양으로 조절하세요[5].}, delta={role=assistant, content=}}]}
2025-06-27 19:48:53.865 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 19:48:53.866 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 오트밀(귀리죽)

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 냄비에 올리브유 2큰술과 다진 마늘 1큰술을 넣고 중약불에서 30초간 볶아 향을 냅니다.
   2. 채썬 양파, 표고버섯, 애호박, 당근 등 준비한 채소와 소금을 소량 넣고 2~3분간 볶아줍니다.
   3. 물 800ml를 붓고 강불에서 끓입니다.
   4. 물이 끓으면 간장 0.5큰술, 오트밀 100g을 넣고 중불로 줄여 5분 정도 저어가며 끓입니다.
   5. 계란 2개를 곱게 풀어 넣고, 저어가며 2~3분간 더 끓입니다.
   6. 마지막에 불을 끈 후 김가루, 부추, 통깨가루 등을 올려 완성합니다[5].

5. 필요한 재료와 양:
   - 오트밀(귀리) 100g
   - 계란 2개
   - 양파 40g
   - 표고버섯 30g
   - 애호박 70g
   - 당근 50g
   - 물 800ml
   - 올리브유 2큰술
   - 다진 마늘 1큰술
   - 간장 0.5큰술
   - 소금 약간
   - 김가루, 부추, 통깨가루 (선택)

6. 난이도: 하

7. 이미지 URL: https://i.ytimg.com/vi/Szgn5Q61pzI/maxresdefault.jpg

8. 요리 팁:
   - 채소는 냉장고에 있는 재료를 자유롭게 추가해도 좋으며, 가볍고 부드러운 식감을 원한다면 양을 줄여주세요.
   - 계란을 넣을 때는 불을 약하게 줄이고 천천히 휘저어주면 덩어리 없이 부드럽게 퍼집니다.
   - 오트밀은 오래 끓일수록 걸쭉해지니, 농도는 기호에 맞게 물의 양으로 조절하세요[5].
2025-06-27 19:48:53.866 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 19:48:53.866 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 19:48:53.866 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 오트밀(귀리죽)

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 냄비에 올리브유 2큰술과 다진 마늘 1큰술을 넣고 중약불에서 30초간 볶아 향을 냅니다.
   2. 채썬 양파, 표고버섯, 애호박, 당근 등 준비한 채소와 소금을 소량 넣고 2~3분간 볶아줍니다.
   3. 물 800ml를 붓고 강불에서 끓입니다.
   4. 물이 끓으면 간장 0.5큰술, 오트밀 100g을 넣고 중불로 줄여 5분 정도 저어가며 끓입니다.
   5. 계란 2개를 곱게 풀어 넣고, 저어가며 2~3분간 더 끓입니다.
   6. 마지막에 불을 끈 후 김가루, 부추, 통깨가루 등을 올려 완성합니다[5].

5. 필요한 재료와 양:
   - 오트밀(귀리) 100g
   - 계란 2개
   - 양파 40g
   - 표고버섯 30g
   - 애호박 70g
   - 당근 50g
   - 물 800ml
   - 올리브유 2큰술
   - 다진 마늘 1큰술
   - 간장 0.5큰술
   - 소금 약간
   - 김가루, 부추, 통깨가루 (선택)

6. 난이도: 하

7. 이미지 URL: https://i.ytimg.com/vi/Szgn5Q61pzI/maxresdefault.jpg

8. 요리 팁:
   - 채소는 냉장고에 있는 재료를 자유롭게 추가해도 좋으며, 가볍고 부드러운 식감을 원한다면 양을 줄여주세요.
   - 계란을 넣을 때는 불을 약하게 줄이고 천천히 휘저어주면 덩어리 없이 부드럽게 퍼집니다.
   - 오트밀은 오래 끓일수록 걸쭉해지니, 농도는 기호에 맞게 물의 양으로 조절하세요[5].
2025-06-27 19:48:53.874 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 19:48:53.882 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 19:48:53.882 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.ytimg.com/vi/Szgn5Q61pzI/maxresdefault.jpg
2025-06-27 19:48:53.882 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.ytimg.com/vi/Szgn5Q61pzI/maxresdefault.jpg
2025-06-27 19:48:53.882 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 오트밀(귀리) 100g
   - 계란 2개
   - 양파 40g
   - 표고버섯 30g
   - 애호박 70g
   - 당근 50g
   - 물 800ml
   - 올리브유 2큰술
   - 다진 마늘 1큰술
   - 간장 0.5큰술
   - 소금 약간
   - 김가루, 부추, 통깨가루 (선택)
2025-06-27 19:48:53.883 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-27 19:48:53.885 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오트밀(귀리) 100g
2025-06-27 19:48:53.885 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오트밀(귀리) 100g
2025-06-27 19:48:53.885 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 2개
2025-06-27 19:48:53.886 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 2개
2025-06-27 19:48:53.886 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 2개
2025-06-27 19:48:53.893 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:48:53.899 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-27 19:48:53.899 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 40g
2025-06-27 19:48:53.899 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 40g
2025-06-27 19:48:53.899 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 40g
2025-06-27 19:48:53.901 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:48:53.902 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 19:48:53.903 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 30g
2025-06-27 19:48:53.903 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 표고버섯, Amount: 30g
2025-06-27 19:48:53.903 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 표고버섯, Amount: 30g
2025-06-27 19:48:53.904 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:48:53.905 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '표고버섯' not found in DB. Skipping.
2025-06-27 19:48:53.905 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 70g
2025-06-27 19:48:53.905 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 애호박, Amount: 70g
2025-06-27 19:48:53.905 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 애호박, Amount: 70g
2025-06-27 19:48:53.907 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:48:53.908 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '애호박' not found in DB. Skipping.
2025-06-27 19:48:53.909 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 50g
2025-06-27 19:48:53.910 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 당근, Amount: 50g
2025-06-27 19:48:53.910 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 당근, Amount: 50g
2025-06-27 19:48:53.911 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:48:53.913 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '당근' not found in DB. Skipping.
2025-06-27 19:48:53.913 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 800ml
2025-06-27 19:48:53.913 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 800ml
2025-06-27 19:48:53.913 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 800ml
2025-06-27 19:48:53.915 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:48:53.916 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-27 19:48:53.916 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브유 2큰술
2025-06-27 19:48:53.916 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브유, Amount: 2큰술
2025-06-27 19:48:53.916 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브유, Amount: 2큰술
2025-06-27 19:48:53.918 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:48:53.919 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브유' not found in DB. Skipping.
2025-06-27 19:48:53.919 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-27 19:48:53.919 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-27 19:48:53.919 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-27 19:48:53.921 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 19:48:53.922 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-27 19:48:53.922 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 0.5큰술
2025-06-27 19:48:53.922 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 간장 0.5큰술
2025-06-27 19:48:53.922 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 19:48:53.922 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 19:48:53.922 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 김가루, 부추, 통깨가루 (선택)
2025-06-27 19:48:53.922 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 김가루, 부추, 통깨가루 (선택)
2025-06-27 19:48:53.923 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 냄비에 올리브유 2큰술과 다진 마늘 1큰술을 넣고 중약불에서 30초간 볶아 향을 냅니다.
   2. 채썬 양파, 표고버섯, 애호박, 당근 등 준비한 채소와 소금을 소량 넣고 
2025-06-27 19:48:53.924 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 19:48:53.924 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 오트밀(귀리) 100g
   - 계란 2개
   - 양파 40g
   - 표고버섯 30g
   - 애호박 70g
   - 당근 50g
   - 물 800ml
   - 올리브유 2큰술
   - 다진 마늘 1큰술
   - 간장 0.5큰술
   - 소금 약간
   - 김가루, 부추, 통깨가루 (선택)

조리 방법:
1. 냄비에 올리브유 2큰술과 다진 마늘 1큰술을 넣고 중약불에서 30초간 볶아 향을 냅니다.
   2. 채썬 양파, 표고버섯, 애호박, 당근 등 준비한 채소와 소금을 소량 넣고 2~3분간 볶아줍니다.
   3. 물 800ml를 붓고 강불에서 끓입니다.
   4. 물이 끓으면 간장 0.5큰술, 오트밀 100g을 넣고 중불로 줄여 5분 정도 저어가며 끓입니다.
   5. 계란 2개를 곱게 풀어 넣고, 저어가며 2~3분간 더 끓입니다.
   6. 마지막에 불을 끈 후 김가루, 부추, 통깨가루 등을 올려 완성합니다[5].
2025-06-27 19:48:53.924 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 오트밀(귀리죽)
2025-06-27 19:48:53.952 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 19:48:53.976 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 82
2025-06-27 19:48:53.976 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 19:48:53.976 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - 제목: 오트밀(귀리죽)
2025-06-27 19:48:53.976 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 오트밀(귀리) 100g
   - 계란 2개
   - 양파 40g
   - 표고버섯 30g
   - 애호박 70g
   - 당근 50g
   - 물 800ml
   - 올리브유 2큰술
   - 다진 마늘 1큰술
   - 간장 0.5큰술
   - 소금 약간
   - 김가루, 부추, 통깨가루 (선택)

조리 방법:
1. 냄비에 올리브유 2큰술과 다진 마늘 1큰술을 넣고 중약불에서 30초간 볶아 향을 냅니다.
   2. 채썬 양파, 표고버섯, 애호박, 당근 등 준비한 채소와 소금을 소량 넣고 2~3분간 볶아줍니다.
   3. 물 800ml를 붓고 강불에서 끓입니다.
   4. 물이 끓으면 간장 0.5큰술, 오트밀 100g을 넣고 중불로 줄여 5분 정도 저어가며 끓입니다.
   5. 계란 2개를 곱게 풀어 넣고, 저어가며 2~3분간 더 끓입니다.
   6. 마지막에 불을 끈 후 김가루, 부추, 통깨가루 등을 올려 완성합니다[5].
2025-06-27 19:48:53.976 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 20:02:26.430 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:02:26.438 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:02:26.445 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:02:26.449 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:02:26.455 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 여자 따먹는 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:02:26.455 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:02:26.455 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:02:26.455 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 여자 따먹는 레시피 줘
2025-06-27 20:02:26.455 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:02:26.455 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:02:26.455 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:02:26.475 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:02:26.479 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:02:26.479 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:02:26.479 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 여자 따먹는 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:02:26.479 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:02:26.479 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 여자 따먹는 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:02:26.479 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751022146479
2025-06-27 20:02:26.479 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 20:02:26.479 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 여자 따먹는 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 여자 따먹는 레시피 줘

요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751022146479)}], model=sonar-pro}
2025-06-27 20:02:28.726 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 20:02:28.727 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Response: {id=2d51f9f7-2ae2-49a4-92bb-aef4e4d38a6f, model=sonar-pro, created=1751022148, usage={prompt_tokens=690, completion_tokens=70, total_tokens=760, search_context_size=low}, citations=[https://m.cafe.daum.net/hhjg/Dnu/2538, https://ygosu.com/board/love/256192, https://blog.naver.com/aeonblast88/220956526500], search_results=[{title=한국여자 따먹는법 txt - ( ͡° ͜ʖ ͡°) 유머감동 - 족구100인클럽, url=https://m.cafe.daum.net/hhjg/Dnu/2538, date=2010-10-19, last_updated=2024-12-07}, {title=주변 여자 꼬셔서 따먹는법알려줌2 : 연애/상담 - 와이고수, url=https://ygosu.com/board/love/256192, date=2014-12-21, last_updated=2025-06-24}, {title=한국여자 2시간만에 따먹는법 : 네이버 블로그, url=https://blog.naver.com/aeonblast88/220956526500, date=2017-03-13, last_updated=2025-05-09}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=요청하신 내용은 요리 레시피가 아니라 부적절한 비속어와 성적인 의미를 담고 있어, 관련된 요리 레시피를 제공할 수 없습니다.  
만약 특정한 요리 이름으로 다시 요청해주시면, 정확하고 상세한 레시피를 안내해드리겠습니다.}, delta={role=assistant, content=}}]}
2025-06-27 20:02:28.727 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 20:02:28.727 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
요청하신 내용은 요리 레시피가 아니라 부적절한 비속어와 성적인 의미를 담고 있어, 관련된 요리 레시피를 제공할 수 없습니다.  
만약 특정한 요리 이름으로 다시 요청해주시면, 정확하고 상세한 레시피를 안내해드리겠습니다.
2025-06-27 20:02:28.727 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:02:28.727 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:02:28.727 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 요청하신 내용은 요리 레시피가 아니라 부적절한 비속어와 성적인 의미를 담고 있어, 관련된 요리 레시피를 제공할 수 없습니다.  
만약 특정한 요리 이름으로 다시 요청해주시면, 정확하고 상세한 레시피를 안내해드리겠습니다.
2025-06-27 20:02:28.736 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:02:28.741 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - No image URL found in AI response
2025-06-27 20:02:28.742 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 20:02:28.743 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Flexible pattern): 만약 특정한 요리 이름으로 다시 요청해주시면, 정확하고 상세한 레시피를 안내해드리겠습니다.
2025-06-27 20:02:28.744 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:02:28.744 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
만약 특정한 요리 이름으로 다시 요청해주시면, 정확하고 상세한 레시피를 안내해드리겠습니다.
2025-06-27 20:02:28.744 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 요청하신 내용은 요리 레시피가 아니라 부적절한 비속어와 성적인 의미를 담고 있어, 관련된 요리 레시피를 제공할 수 없습니다.
2025-06-27 20:02:28.747 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:02:28.770 [http-nio-8080-exec-3] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1406, SQLState: 22001
2025-06-27 20:02:28.771 [http-nio-8080-exec-3] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Data truncation: Data too long for column 'title' at row 1
2025-06-27 20:02:28.785 [http-nio-8080-exec-3] ERROR a.s.k.p.service.PerplexityService - Error saving recipe or recipe ingredients
org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:487)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:174)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:125)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 131 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 187 common frames omitted
2025-06-27 20:02:28.788 [http-nio-8080-exec-3] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
java.lang.RuntimeException: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:493)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:174)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:125)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:487)
	... 123 common frames omitted
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 131 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 187 common frames omitted
2025-06-27 20:02:28.796 [http-nio-8080-exec-3] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: Failed to save recipe: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:147)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:53)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:27)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:22)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 20:03:09.737 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:03:09.755 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:03:09.762 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:03:09.773 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:03:09.778 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 여자 맛있게 먹는 꿀팁, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 20:03:09.778 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:03:09.779 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:03:09.779 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 여자 맛있게 먹는 꿀팁
2025-06-27 20:03:09.779 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:03:09.779 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 20:03:09.780 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:03:09.786 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:03:09.802 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 20:03:09.803 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:03:09.803 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 여자 맛있게 먹는 꿀팁
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 20:03:09.803 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:03:09.803 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 여자 맛있게 먹는 꿀팁
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 20:03:09.803 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751022189803
2025-06-27 20:03:09.803 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 20:03:09.804 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 여자 맛있게 먹는 꿀팁
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 메뉴를 추천해주세요: 여자 맛있게 먹는 꿀팁

요청과 관련 없는 메뉴는 추천하지 마세요. (요청시간: 1751022189803)}], model=sonar-pro}
2025-06-27 20:03:31.686 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 20:03:31.687 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Response: {id=2ecce521-9e56-4c00-abb1-d64efa33801b, model=sonar-pro, created=1751022211, usage={prompt_tokens=905, completion_tokens=796, total_tokens=1701, search_context_size=low}, citations=[https://brunch.co.kr/@hortensia/11, https://www.youtube.com/shorts/hDofM6Lp_W0, https://blog.naver.com/oxo_oxox/223834394725, https://www.teamblind.com/kr/post/%EC%97%AC%EC%9E%90-%EB%A7%8C%EB%82%98%EC%84%9C-%EB%B0%98%EC%9D%80-%EC%84%B1%EA%B3%B5%ED%96%88%EB%8D%98-%EB%B0%A9%EB%B2%95-73uFd1bw, https://www.youtube.com/watch?v=GHLbtDCkMTM], search_results=[{title=맛있게, 적당히 먹는 16가지 방법, url=https://brunch.co.kr/@hortensia/11, date=2025-05-19, last_updated=2025-06-18}, {title=독일여자가 알려주는 소주 맛있게 먹는 방법, url=https://www.youtube.com/shorts/hDofM6Lp_W0, date=null, last_updated=null}, {title=소주 싫어하는 여자의소주 맛있게 먹는법, url=https://blog.naver.com/oxo_oxox/223834394725, date=2015-02-20, last_updated=2025-05-21}, {title=블라인드 | 썸·연애: 여자 만나서 반은 성공했던 방법, url=https://www.teamblind.com/kr/post/%EC%97%AC%EC%9E%90-%EB%A7%8C%EB%82%98%EC%84%9C-%EB%B0%98%EC%9D%80-%EC%84%B1%EA%B3%B5%ED%96%88%EB%8D%98-%EB%B0%A9%EB%B2%95-73uFd1bw, date=2020-11-06, last_updated=2025-05-01}, {title=가지 순식간에 맛있게 먹는 방법! 이거 진심 맛있습니다👍 ..., url=https://www.youtube.com/watch?v=GHLbtDCkMTM, date=2023-06-15, last_updated=2025-04-18}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=### 추천 메뉴 목록

**1. 떡볶이**
- 카테고리: 분식
- 추천 이유: 쫄깃한 떡과 달콤매콤한 양념은 많은 여성들이 즐겨 찾는 인기 메뉴입니다. 같이 먹을 때 분위기도 밝아지고 대화도 잘 이어질 수 있어 "맛있게 먹는 꿀팁" 상황에 잘 어울립니다[4].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없이 만들 수 있어 안전합니다.

**2. 치즈 곱창**
- 카테고리: 한식/분식
- 추천 이유: 쫄깃한 식감과 고소한 치즈 토핑, 매콤한 양념이 어우러져 여성이 특히 선호하는 메뉴로 손꼽힙니다. 소셜 무드에도 잘 어울려 맛있게 먹는 분위기를 연출하기 좋습니다[4].
- 예상 조리 시간: 30~40분
- 난이도: 중
- 개인화 고려사항: 새우가 들어가지 않으므로 안심하고 선택할 수 있습니다.

**3. 나물 비빔밥**
- 카테고리: 한식
- 추천 이유: 건강을 챙기면서도 맛있게 먹을 수 있는 대표적인 한식입니다. 다양한 익힌 채소와 함께 먹으면 만족감도 크고, 가벼우면서 영양이 풍부해 여자분들 식사 팁으로 자주 언급됩니다[1].
- 예상 조리 시간: 20~25분
- 난이도: 하
- 개인화 고려사항: 아침에 밥을 피해야 하는 점을 감안해 점심이나 저녁 메뉴로 추천합니다. 새우 제외 가능.

**4. 볶음 가지**
- 카테고리: 한식
- 추천 이유: 부드럽고 감칠맛 나는 가지를 간단히 볶아 먹으면 여성들이 선호하는 건강 채소 요리를 맛있게 즐길 수 있습니다. 가지 특유의 식감과 은은한 단맛이 호불호 없이 좋은 반찬입니다[5][1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정 없고, 부드럽고 소화도 잘 됩니다.

### 전체 추천 요약
- 상황 분석: "여자 맛있게 먹는 꿀팁" 요청에 맞춰, 여성들이 즐겨 먹는 쫀득하고 촉촉하며 달콤하거나 건강한 메뉴를 위주로 선정했습니다. 함께 먹는 상황, 대화의 분위기도 고려했습니다.
- 추천 기준: 소셜 분위기에서 여자분들이 선호하는 식감과 맛, 건강을 동시에 만족시킬 수 있는 메뉴를 중점적으로 추천했습니다.
- 개인화 고려사항: 새우와 같은 알레르기는 제외하고, 아침에 밥을 피하는 건강상태를 반영해 점심/저녁 메뉴 위주로 구성했습니다.
- 추가 팁: 메뉴를 더 맛있게 먹으려면, 다양한 토핑(치즈, 김가루 등)을 추가하거나 여러 사람이 함께 즐기는 분위기를 연출하면 식사 만족도가 크게 올라갑니다.

혹시 위 메뉴 중 레시피가 궁금하다면 "레시피"라는 단어를 포함해서 다시 요청해주세요!}, delta={role=assistant, content=}}]}
2025-06-27 20:03:31.687 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 20:03:31.687 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
### 추천 메뉴 목록

**1. 떡볶이**
- 카테고리: 분식
- 추천 이유: 쫄깃한 떡과 달콤매콤한 양념은 많은 여성들이 즐겨 찾는 인기 메뉴입니다. 같이 먹을 때 분위기도 밝아지고 대화도 잘 이어질 수 있어 "맛있게 먹는 꿀팁" 상황에 잘 어울립니다[4].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없이 만들 수 있어 안전합니다.

**2. 치즈 곱창**
- 카테고리: 한식/분식
- 추천 이유: 쫄깃한 식감과 고소한 치즈 토핑, 매콤한 양념이 어우러져 여성이 특히 선호하는 메뉴로 손꼽힙니다. 소셜 무드에도 잘 어울려 맛있게 먹는 분위기를 연출하기 좋습니다[4].
- 예상 조리 시간: 30~40분
- 난이도: 중
- 개인화 고려사항: 새우가 들어가지 않으므로 안심하고 선택할 수 있습니다.

**3. 나물 비빔밥**
- 카테고리: 한식
- 추천 이유: 건강을 챙기면서도 맛있게 먹을 수 있는 대표적인 한식입니다. 다양한 익힌 채소와 함께 먹으면 만족감도 크고, 가벼우면서 영양이 풍부해 여자분들 식사 팁으로 자주 언급됩니다[1].
- 예상 조리 시간: 20~25분
- 난이도: 하
- 개인화 고려사항: 아침에 밥을 피해야 하는 점을 감안해 점심이나 저녁 메뉴로 추천합니다. 새우 제외 가능.

**4. 볶음 가지**
- 카테고리: 한식
- 추천 이유: 부드럽고 감칠맛 나는 가지를 간단히 볶아 먹으면 여성들이 선호하는 건강 채소 요리를 맛있게 즐길 수 있습니다. 가지 특유의 식감과 은은한 단맛이 호불호 없이 좋은 반찬입니다[5][1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정 없고, 부드럽고 소화도 잘 됩니다.

### 전체 추천 요약
- 상황 분석: "여자 맛있게 먹는 꿀팁" 요청에 맞춰, 여성들이 즐겨 먹는 쫀득하고 촉촉하며 달콤하거나 건강한 메뉴를 위주로 선정했습니다. 함께 먹는 상황, 대화의 분위기도 고려했습니다.
- 추천 기준: 소셜 분위기에서 여자분들이 선호하는 식감과 맛, 건강을 동시에 만족시킬 수 있는 메뉴를 중점적으로 추천했습니다.
- 개인화 고려사항: 새우와 같은 알레르기는 제외하고, 아침에 밥을 피하는 건강상태를 반영해 점심/저녁 메뉴 위주로 구성했습니다.
- 추가 팁: 메뉴를 더 맛있게 먹으려면, 다양한 토핑(치즈, 김가루 등)을 추가하거나 여러 사람이 함께 즐기는 분위기를 연출하면 식사 만족도가 크게 올라갑니다.

혹시 위 메뉴 중 레시피가 궁금하다면 "레시피"라는 단어를 포함해서 다시 요청해주세요!
2025-06-27 20:03:31.687 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:03:31.687 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 20:03:31.687 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 떡볶이**
- 카테고리: 분식
- 추천 이유: 쫄깃한 떡과 달콤매콤한 양념은 많은 여성들이 즐겨 찾는 인기 메뉴입니다. 같이 먹을 때 분위기도 밝아지고 대화도 잘 이어질 수 있어 "맛있게 먹는 꿀팁" 상황에 잘 어울립니다[4].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없이 만들 수 있어 안전합니다.

**2. 치즈 곱창**
- 카테고리: 한식/분식
- 추천 이유: 쫄깃한 식감과 고소한 치즈 토핑, 매콤한 양념이 어우러져 여성이 특히 선호하는 메뉴로 손꼽힙니다. 소셜 무드에도 잘 어울려 맛있게 먹는 분위기를 연출하기 좋습니다[4].
- 예상 조리 시간: 30~40분
- 난이도: 중
- 개인화 고려사항: 새우가 들어가지 않으므로 안심하고 선택할 수 있습니다.

**3. 나물 비빔밥**
- 카테고리: 한식
- 추천 이유: 건강을 챙기면서도 맛있게 먹을 수 있는 대표적인 한식입니다. 다양한 익힌 채소와 함께 먹으면 만족감도 크고, 가벼우면서 영양이 풍부해 여자분들 식사 팁으로 자주 언급됩니다[1].
- 예상 조리 시간: 20~25분
- 난이도: 하
- 개인화 고려사항: 아침에 밥을 피해야 하는 점을 감안해 점심이나 저녁 메뉴로 추천합니다. 새우 제외 가능.

**4. 볶음 가지**
- 카테고리: 한식
- 추천 이유: 부드럽고 감칠맛 나는 가지를 간단히 볶아 먹으면 여성들이 선호하는 건강 채소 요리를 맛있게 즐길 수 있습니다. 가지 특유의 식감과 은은한 단맛이 호불호 없이 좋은 반찬입니다[5][1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정 없고, 부드럽고 소화도 잘 됩니다.

### 전체 추천 요약
- 상황 분석: "여자 맛있게 먹는 꿀팁" 요청에 맞춰, 여성들이 즐겨 먹는 쫀득하고 촉촉하며 달콤하거나 건강한 메뉴를 위주로 선정했습니다. 함께 먹는 상황, 대화의 분위기도 고려했습니다.
- 추천 기준: 소셜 분위기에서 여자분들이 선호하는 식감과 맛, 건강을 동시에 만족시킬 수 있는 메뉴를 중점적으로 추천했습니다.
- 개인화 고려사항: 새우와 같은 알레르기는 제외하고, 아침에 밥을 피하는 건강상태를 반영해 점심/저녁 메뉴 위주로 구성했습니다.
- 추가 팁: 메뉴를 더 맛있게 먹으려면, 다양한 토핑(치즈, 김가루 등)을 추가하거나 여러 사람이 함께 즐기는 분위기를 연출하면 식사 만족도가 크게 올라갑니다.

혹시 위 메뉴 중 레시피가 궁금하다면 "레시피"라는 단어를 포함해서 다시 요청해주세요!
2025-06-27 20:03:31.688 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Menu recommendation parsed successfully
2025-06-27 20:03:31.688 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 20:03:31.688 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 제목: 메뉴 추천
2025-06-27 20:03:31.688 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 설명: ### 추천 메뉴 목록

**1. 떡볶이**
- 카테고리: 분식
- 추천 이유: 쫄깃한 떡과 달콤매콤한 양념은 많은 여성들이 즐겨 찾는 인기 메뉴입니다. 같이 먹을 때 분위기도 밝아지고 대화도 잘 이어질 수 있어 "맛있게 먹는 꿀팁" 상황에 잘 어울립니다[4].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없이 만들 수 있어 안전합니다.

**2. 치즈 곱창**
- 카테고리: 한식/분식
- 추천 이유: 쫄깃한 식감과 고소한 치즈 토핑, 매콤한 양념이 어우러져 여성이 특히 선호하는 메뉴로 손꼽힙니다. 소셜 무드에도 잘 어울려 맛있게 먹는 분위기를 연출하기 좋습니다[4].
- 예상 조리 시간: 30~40분
- 난이도: 중
- 개인화 고려사항: 새우가 들어가지 않으므로 안심하고 선택할 수 있습니다.

**3. 나물 비빔밥**
- 카테고리: 한식
- 추천 이유: 건강을 챙기면서도 맛있게 먹을 수 있는 대표적인 한식입니다. 다양한 익힌 채소와 함께 먹으면 만족감도 크고, 가벼우면서 영양이 풍부해 여자분들 식사 팁으로 자주 언급됩니다[1].
- 예상 조리 시간: 20~25분
- 난이도: 하
- 개인화 고려사항: 아침에 밥을 피해야 하는 점을 감안해 점심이나 저녁 메뉴로 추천합니다. 새우 제외 가능.

**4. 볶음 가지**
- 카테고리: 한식
- 추천 이유: 부드럽고 감칠맛 나는 가지를 간단히 볶아 먹으면 여성들이 선호하는 건강 채소 요리를 맛있게 즐길 수 있습니다. 가지 특유의 식감과 은은한 단맛이 호불호 없이 좋은 반찬입니다[5][1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정 없고, 부드럽고 소화도 잘 됩니다.

### 전체 추천 요약
- 상황 분석: "여자 맛있게 먹는 꿀팁" 요청에 맞춰, 여성들이 즐겨 먹는 쫀득하고 촉촉하며 달콤하거나 건강한 메뉴를 위주로 선정했습니다. 함께 먹는 상황, 대화의 분위기도 고려했습니다.
- 추천 기준: 소셜 분위기에서 여자분들이 선호하는 식감과 맛, 건강을 동시에 만족시킬 수 있는 메뉴를 중점적으로 추천했습니다.
- 개인화 고려사항: 새우와 같은 알레르기는 제외하고, 아침에 밥을 피하는 건강상태를 반영해 점심/저녁 메뉴 위주로 구성했습니다.
- 추가 팁: 메뉴를 더 맛있게 먹으려면, 다양한 토핑(치즈, 김가루 등)을 추가하거나 여러 사람이 함께 즐기는 분위기를 연출하면 식사 만족도가 크게 올라갑니다.

혹시 위 메뉴 중 레시피가 궁금하다면 "레시피"라는 단어를 포함해서 다시 요청해주세요!
2025-06-27 20:03:31.688 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 20:06:14.231 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-27 20:06:14.241 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-27 20:06:15.137 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:06:15.139 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:15.142 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:15.143 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:15.149 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:15.153 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:06:15.205 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:06:15.205 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:06:15.208 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:15.208 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:15.210 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:15.210 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:15.213 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:15.213 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:15.226 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:15.231 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:15.236 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:06:15.236 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:06:17.524 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:06:17.524 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:06:17.533 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:17.533 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:17.539 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.539 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.542 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.542 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.543 [http-nio-8080-exec-9] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-27 20:06:17.543 [http-nio-8080-exec-10] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-27 20:06:17.543 [http-nio-8080-exec-9] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-27 20:06:17.544 [http-nio-8080-exec-10] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-27 20:06:17.544 [http-nio-8080-exec-9] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.544 [http-nio-8080-exec-10] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.544 [http-nio-8080-exec-9] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-27 20:06:17.544 [http-nio-8080-exec-10] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-27 20:06:17.566 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:06:17.566 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:06:17.570 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:17.570 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:17.573 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.573 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.578 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.578 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:17.581 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:17.581 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:17.590 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:06:17.590 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:06:34.875 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:06:34.878 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:34.884 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:34.889 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:06:34.894 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:06:34.894 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:06:34.894 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:06:34.894 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-27 20:06:34.894 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:06:34.894 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:06:34.894 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:06:34.915 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:06:34.918 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:06:34.918 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:06:34.918 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:06:34.918 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:06:34.918 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:06:34.919 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751022394919
2025-06-27 20:06:34.919 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 20:06:34.919 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 햄버거 레시피 줘

요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751022394919)}], model=sonar-pro}
2025-06-27 20:06:48.351 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 20:06:48.352 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Response: {id=978d45e6-1ebf-4ded-8cc8-5d27ec76b5eb, model=sonar-pro, created=1751022408, usage={prompt_tokens=690, completion_tokens=707, total_tokens=1397, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6906829, https://blog.naver.com/pingu528/221670357669, https://www.10000recipe.com/recipe/6870988, https://blog.naver.com/pingu528/222849599839, https://www.youtube.com/watch?v=op58ywXpRXo], search_results=[{title=홈메이드 수제 햄버거 만드는법 - 만개의레시피, url=https://www.10000recipe.com/recipe/6906829, date=null, last_updated=null}, {title=수제버거 만들기, 홈메이드 햄버거 만드는 법 : 네이버 블로그, url=https://blog.naver.com/pingu528/221670357669, date=2019-10-07, last_updated=2025-03-09}, {title=홈메이드 햄버거 패티 만들어요 - 만개의레시피, url=https://www.10000recipe.com/recipe/6870988, date=null, last_updated=null}, {title=햄버거 만드는법 수제버거 햄버거 소스 만들기 홈브런치 메뉴, url=https://blog.naver.com/pingu528/222849599839, date=2022-08-16, last_updated=null}, {title=[준쿡] 헤매지말고 이거 보세요. 홈메이드 햄버거 만들기 - YouTube, url=https://www.youtube.com/watch?v=op58ywXpRXo, date=2021-01-09, last_updated=2025-01-26}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 홈메이드 수제 햄버거

2. 카테고리: 양식

3. 조리 시간: 약 30~40분

4. 조리 방법:
   1. 햄버거 패티용 소고기와 돼지고기를 섞어 다진 양파, 빵가루, 소금, 후추를 넣고 잘 반죽한 뒤 동그랗고 납작한 패티 모양으로 빚는다.
   2. 중불로 달군 팬에 패티를 올려 앞뒤로 노릇노릇하게 구워 익힌다.
   3. 양상추, 토마토, 양파 등 원하는 신선한 채소를 깨끗이 씻고 슬라이스 한다.
   4. 햄버거 빵을 반으로 가르고, 팬에 살짝 구워 겉면을 바삭하게 만든다.
   5. 구운 빵 위에 양상추, 구운 패티, 토마토, 양파, 슬라이스 치즈를 순서대로 올린다.
   6. 마요네즈, 케첩, 머스타드 등의 소스를 취향에 맞게 듬뿍 바른 뒤 빵 윗부분으로 덮는다.
   7. 완성된 햄버거를 접시에 담고, 감자튀김이나 피클과 함께 낸다.

5. 필요한 재료와 양:
   - 소고기 다진 것 200g
   - 돼지고기 다진 것 200g
   - 양파 1개 (중간 크기)
   - 빵가루 3/4컵
   - 소금 약간
   - 후추 약간
   - 햄버거용 빵 2개
   - 양상추 4장
   - 토마토 1개
   - 슬라이스 치즈 2장
   - 마요네즈 10g
   - 케찹 10g
   - 머스타드 적당량 (선택 사항)

6. 난이도: 중

7. 이미지 URL: https://covenant.10000recipe.com/upload/recipe/6906829_FD6A2F4B6A7F4F5B9D73B00D124CEEC2.jpg

8. 요리 팁:
   - 패티를 만들 때 고기의 결을 너무 세게 누르지 말고 부드럽게 반죽하듯 섞어야 식감이 좋습니다.
   - 패티를 구울 때 한 번만 뒤집고 너무 자주 뒤집지 않도록 해 육즙이 잘 남게 하세요.
   - 빵은 구워서 바삭하게 하면 햄버거 전체의 식감이 훨씬 좋아집니다.
   - 신선한 채소를 넣어 식감을 살리고, 소스는 취향껏 조절해 개성 있는 맛을 낼 수 있습니다.

이 레시피는 새우 등 알레르기 재료가 포함되어 있지 않으므로 안심하고 드실 수 있습니다[1][3][4][5].}, delta={role=assistant, content=}}]}
2025-06-27 20:06:48.352 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 20:06:48.352 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 홈메이드 수제 햄버거

2. 카테고리: 양식

3. 조리 시간: 약 30~40분

4. 조리 방법:
   1. 햄버거 패티용 소고기와 돼지고기를 섞어 다진 양파, 빵가루, 소금, 후추를 넣고 잘 반죽한 뒤 동그랗고 납작한 패티 모양으로 빚는다.
   2. 중불로 달군 팬에 패티를 올려 앞뒤로 노릇노릇하게 구워 익힌다.
   3. 양상추, 토마토, 양파 등 원하는 신선한 채소를 깨끗이 씻고 슬라이스 한다.
   4. 햄버거 빵을 반으로 가르고, 팬에 살짝 구워 겉면을 바삭하게 만든다.
   5. 구운 빵 위에 양상추, 구운 패티, 토마토, 양파, 슬라이스 치즈를 순서대로 올린다.
   6. 마요네즈, 케첩, 머스타드 등의 소스를 취향에 맞게 듬뿍 바른 뒤 빵 윗부분으로 덮는다.
   7. 완성된 햄버거를 접시에 담고, 감자튀김이나 피클과 함께 낸다.

5. 필요한 재료와 양:
   - 소고기 다진 것 200g
   - 돼지고기 다진 것 200g
   - 양파 1개 (중간 크기)
   - 빵가루 3/4컵
   - 소금 약간
   - 후추 약간
   - 햄버거용 빵 2개
   - 양상추 4장
   - 토마토 1개
   - 슬라이스 치즈 2장
   - 마요네즈 10g
   - 케찹 10g
   - 머스타드 적당량 (선택 사항)

6. 난이도: 중

7. 이미지 URL: https://covenant.10000recipe.com/upload/recipe/6906829_FD6A2F4B6A7F4F5B9D73B00D124CEEC2.jpg

8. 요리 팁:
   - 패티를 만들 때 고기의 결을 너무 세게 누르지 말고 부드럽게 반죽하듯 섞어야 식감이 좋습니다.
   - 패티를 구울 때 한 번만 뒤집고 너무 자주 뒤집지 않도록 해 육즙이 잘 남게 하세요.
   - 빵은 구워서 바삭하게 하면 햄버거 전체의 식감이 훨씬 좋아집니다.
   - 신선한 채소를 넣어 식감을 살리고, 소스는 취향껏 조절해 개성 있는 맛을 낼 수 있습니다.

이 레시피는 새우 등 알레르기 재료가 포함되어 있지 않으므로 안심하고 드실 수 있습니다[1][3][4][5].
2025-06-27 20:06:48.352 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:06:48.352 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:06:48.352 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 홈메이드 수제 햄버거

2. 카테고리: 양식

3. 조리 시간: 약 30~40분

4. 조리 방법:
   1. 햄버거 패티용 소고기와 돼지고기를 섞어 다진 양파, 빵가루, 소금, 후추를 넣고 잘 반죽한 뒤 동그랗고 납작한 패티 모양으로 빚는다.
   2. 중불로 달군 팬에 패티를 올려 앞뒤로 노릇노릇하게 구워 익힌다.
   3. 양상추, 토마토, 양파 등 원하는 신선한 채소를 깨끗이 씻고 슬라이스 한다.
   4. 햄버거 빵을 반으로 가르고, 팬에 살짝 구워 겉면을 바삭하게 만든다.
   5. 구운 빵 위에 양상추, 구운 패티, 토마토, 양파, 슬라이스 치즈를 순서대로 올린다.
   6. 마요네즈, 케첩, 머스타드 등의 소스를 취향에 맞게 듬뿍 바른 뒤 빵 윗부분으로 덮는다.
   7. 완성된 햄버거를 접시에 담고, 감자튀김이나 피클과 함께 낸다.

5. 필요한 재료와 양:
   - 소고기 다진 것 200g
   - 돼지고기 다진 것 200g
   - 양파 1개 (중간 크기)
   - 빵가루 3/4컵
   - 소금 약간
   - 후추 약간
   - 햄버거용 빵 2개
   - 양상추 4장
   - 토마토 1개
   - 슬라이스 치즈 2장
   - 마요네즈 10g
   - 케찹 10g
   - 머스타드 적당량 (선택 사항)

6. 난이도: 중

7. 이미지 URL: https://covenant.10000recipe.com/upload/recipe/6906829_FD6A2F4B6A7F4F5B9D73B00D124CEEC2.jpg

8. 요리 팁:
   - 패티를 만들 때 고기의 결을 너무 세게 누르지 말고 부드럽게 반죽하듯 섞어야 식감이 좋습니다.
   - 패티를 구울 때 한 번만 뒤집고 너무 자주 뒤집지 않도록 해 육즙이 잘 남게 하세요.
   - 빵은 구워서 바삭하게 하면 햄버거 전체의 식감이 훨씬 좋아집니다.
   - 신선한 채소를 넣어 식감을 살리고, 소스는 취향껏 조절해 개성 있는 맛을 낼 수 있습니다.

이 레시피는 새우 등 알레르기 재료가 포함되어 있지 않으므로 안심하고 드실 수 있습니다[1][3][4][5].
2025-06-27 20:06:48.357 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:06:48.360 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 20:06:48.360 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://covenant.10000recipe.com/upload/recipe/6906829_FD6A2F4B6A7F4F5B9D73B00D124CEEC2.jpg
2025-06-27 20:06:48.360 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://covenant.10000recipe.com/upload/recipe/6906829_FD6A2F4B6A7F4F5B9D73B00D124CEEC2.jpg
2025-06-27 20:06:48.360 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 다진 것 200g
   - 돼지고기 다진 것 200g
   - 양파 1개 (중간 크기)
   - 빵가루 3/4컵
   - 소금 약간
   - 후추 약간
   - 햄버거용 빵 2개
   - 양상추 4장
   - 토마토 1개
   - 슬라이스 치즈 2장
   - 마요네즈 10g
   - 케찹 10g
   - 머스타드 적당량 (선택 사항)
2025-06-27 20:06:48.360 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-27 20:06:48.360 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 다진 것 200g
2025-06-27 20:06:48.360 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 것, Amount: 200g
2025-06-27 20:06:48.360 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 것, Amount: 200g
2025-06-27 20:06:48.366 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.368 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '것' not found in DB. Skipping.
2025-06-27 20:06:48.368 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기 다진 것 200g
2025-06-27 20:06:48.368 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 것, Amount: 200g
2025-06-27 20:06:48.368 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 것, Amount: 200g
2025-06-27 20:06:48.370 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.371 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '것' not found in DB. Skipping.
2025-06-27 20:06:48.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개 (중간 크기)
2025-06-27 20:06:48.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-27 20:06:48.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-27 20:06:48.372 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.373 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 20:06:48.373 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 빵가루 3/4컵
2025-06-27 20:06:48.373 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 빵가루 3/4컵
2025-06-27 20:06:48.373 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 20:06:48.374 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 20:06:48.374 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 20:06:48.374 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 20:06:48.374 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거용 빵 2개
2025-06-27 20:06:48.374 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 빵, Amount: 2개
2025-06-27 20:06:48.374 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 빵, Amount: 2개
2025-06-27 20:06:48.375 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.377 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '빵' not found in DB. Skipping.
2025-06-27 20:06:48.377 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 4장
2025-06-27 20:06:48.377 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양상추, Amount: 4장
2025-06-27 20:06:48.377 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양상추, Amount: 4장
2025-06-27 20:06:48.380 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.381 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '양상추' not found in DB. Skipping.
2025-06-27 20:06:48.381 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개
2025-06-27 20:06:48.381 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-27 20:06:48.381 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-27 20:06:48.382 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.383 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-27 20:06:48.383 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 2장
2025-06-27 20:06:48.383 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 2장
2025-06-27 20:06:48.383 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 2장
2025-06-27 20:06:48.390 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.391 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-27 20:06:48.391 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 10g
2025-06-27 20:06:48.391 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마요네즈, Amount: 10g
2025-06-27 20:06:48.391 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마요네즈, Amount: 10g
2025-06-27 20:06:48.392 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.393 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '마요네즈' not found in DB. Skipping.
2025-06-27 20:06:48.393 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케찹 10g
2025-06-27 20:06:48.393 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 케찹, Amount: 10g
2025-06-27 20:06:48.393 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케찹, Amount: 10g
2025-06-27 20:06:48.394 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:06:48.395 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '케찹' not found in DB. Skipping.
2025-06-27 20:06:48.398 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 머스타드 적당량 (선택 사항)
2025-06-27 20:06:48.398 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 머스타드 적당량 (선택 사항)
2025-06-27 20:06:48.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 햄버거 패티용 소고기와 돼지고기를 섞어 다진 양파, 빵가루, 소금, 후추를 넣고 잘 반죽한 뒤 동그랗고 납작한 패티 모양으로 빚는다.
   2. 중불로 달군 팬에 패티를 올려
2025-06-27 20:06:48.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:06:48.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 다진 것 200g
   - 돼지고기 다진 것 200g
   - 양파 1개 (중간 크기)
   - 빵가루 3/4컵
   - 소금 약간
   - 후추 약간
   - 햄버거용 빵 2개
   - 양상추 4장
   - 토마토 1개
   - 슬라이스 치즈 2장
   - 마요네즈 10g
   - 케찹 10g
   - 머스타드 적당량 (선택 사항)

조리 방법:
1. 햄버거 패티용 소고기와 돼지고기를 섞어 다진 양파, 빵가루, 소금, 후추를 넣고 잘 반죽한 뒤 동그랗고 납작한 패티 모양으로 빚는다.
   2. 중불로 달군 팬에 패티를 올려 앞뒤로 노릇노릇하게 구워 익힌다.
   3. 양상추, 토마토, 양파 등 원하는 신선한 채소를 깨끗이 씻고 슬라이스 한다.
   4. 햄버거 빵을 반으로 가르고, 팬에 살짝 구워 겉면을 바삭하게 만든다.
   5. 구운 빵 위에 양상추, 구운 패티, 토마토, 양파, 슬라이스 치즈를 순서대로 올린다.
   6. 마요네즈, 케첩, 머스타드 등의 소스를 취향에 맞게 듬뿍 바른 뒤 빵 윗부분으로 덮는다.
   7. 완성된 햄버거를 접시에 담고, 감자튀김이나 피클과 함께 낸다.
2025-06-27 20:06:48.399 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 홈메이드 수제 햄버거
2025-06-27 20:06:48.401 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:06:48.406 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 83
2025-06-27 20:06:48.406 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 20:06:48.406 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - 제목: 홈메이드 수제 햄버거
2025-06-27 20:06:48.406 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 소고기 다진 것 200g
   - 돼지고기 다진 것 200g
   - 양파 1개 (중간 크기)
   - 빵가루 3/4컵
   - 소금 약간
   - 후추 약간
   - 햄버거용 빵 2개
   - 양상추 4장
   - 토마토 1개
   - 슬라이스 치즈 2장
   - 마요네즈 10g
   - 케찹 10g
   - 머스타드 적당량 (선택 사항)

조리 방법:
1. 햄버거 패티용 소고기와 돼지고기를 섞어 다진 양파, 빵가루, 소금, 후추를 넣고 잘 반죽한 뒤 동그랗고 납작한 패티 모양으로 빚는다.
   2. 중불로 달군 팬에 패티를 올려 앞뒤로 노릇노릇하게 구워 익힌다.
   3. 양상추, 토마토, 양파 등 원하는 신선한 채소를 깨끗이 씻고 슬라이스 한다.
   4. 햄버거 빵을 반으로 가르고, 팬에 살짝 구워 겉면을 바삭하게 만든다.
   5. 구운 빵 위에 양상추, 구운 패티, 토마토, 양파, 슬라이스 치즈를 순서대로 올린다.
   6. 마요네즈, 케첩, 머스타드 등의 소스를 취향에 맞게 듬뿍 바른 뒤 빵 윗부분으로 덮는다.
   7. 완성된 햄버거를 접시에 담고, 감자튀김이나 피클과 함께 낸다.
2025-06-27 20:06:48.406 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 20:08:36.054 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:08:36.078 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:08:36.086 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:08:36.090 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:08:36.097 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:08:36.100 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:08:36.100 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:08:36.100 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피
2025-06-27 20:08:36.100 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:08:36.100 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:08:36.101 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:08:36.108 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:08:36.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:08:36.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:08:36.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:08:36.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:08:36.122 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - System prompt: 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:08:36.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Sending request to Perplexity API with timestamp: 1751022516122
2025-06-27 20:08:36.122 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request headers: [Content-Type:"application/json", Authorization:"Bearer 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", Cache-Control:"no-cache", Pragma:"no-cache"]
2025-06-27 20:08:36.122 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Request body: {messages=[{role=system, content=당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.
}, {role=user, content=다음 요청에 정확히 맞는 레시피만 추천해주세요: 햄버거 레시피

요청과 관련 없는 레시피는 추천하지 마세요. (요청시간: 1751022516122)}], model=sonar-pro}
2025-06-27 20:08:44.095 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Received response from Perplexity API
2025-06-27 20:08:44.095 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Response: {id=3a72791e-be2a-479f-8e00-a89ac75d8672, model=sonar-pro, created=1751022524, usage={prompt_tokens=686, completion_tokens=697, total_tokens=1383, search_context_size=low}, citations=[https://www.10000recipe.com/recipe/6906829, https://blog.naver.com/pingu528/221670357669, https://www.10000recipe.com/recipe/6870988, https://blog.naver.com/pingu528/222849599839, https://www.youtube.com/watch?v=op58ywXpRXo], search_results=[{title=홈메이드 수제 햄버거 만드는법 - 만개의레시피, url=https://www.10000recipe.com/recipe/6906829, date=null, last_updated=null}, {title=수제버거 만들기, 홈메이드 햄버거 만드는 법 : 네이버 블로그, url=https://blog.naver.com/pingu528/221670357669, date=2019-10-07, last_updated=2025-03-09}, {title=홈메이드 햄버거 패티 만들어요 - 만개의레시피, url=https://www.10000recipe.com/recipe/6870988, date=null, last_updated=null}, {title=햄버거 만드는법 수제버거 햄버거 소스 만들기 홈브런치 메뉴, url=https://blog.naver.com/pingu528/222849599839, date=2022-08-16, last_updated=null}, {title=[준쿡] 헤매지말고 이거 보세요. 홈메이드 햄버거 만들기 - YouTube, url=https://www.youtube.com/watch?v=op58ywXpRXo, date=2021-01-09, last_updated=2025-01-26}], object=chat.completion, choices=[{index=0, finish_reason=stop, message={role=assistant, content=1. 요리 이름: 홈메이드 햄버거

2. 카테고리: 양식

3. 조리 시간: 30~40분

4. 조리 방법:
   1. 양파는 얇게 슬라이스하고, 양송이버섯과 토마토도 먹기 좋은 크기로 자릅니다.
   2. 베이컨을 오븐이나 팬에 바삭하게 구워줍니다.
   3. 팬이나 오븐에서 양파와 버섯을 약간의 소금, 후추로 볶아 풍미를 더해줍니다.
   4. 간 쇠고기에 소금과 후추를 뿌려 둥근 패티 모양으로 빚고, 센 불에서 앞뒤로 노릇하게 굽습니다.
   5. 햄버거 번(빵)은 반으로 갈라 팬에 살짝 구워 바삭하게 준비합니다.
   6. 빵의 아래쪽에 마요네즈와 머스터드, 케찹을 바릅니다.
   7. 그 위에 상추, 피클, 패티, 슬라이스 치즈, 볶음 양파, 볶음 버섯, 구운 베이컨, 토마토를 올립니다.
   8. 마지막으로 빵의 윗부분을 덮어 완성합니다[1][5].

5. 필요한 재료와 양:
   - 고급 간 쇠고기 600g (1인분 약 150g)
   - 소금 30g (패티 간 맞춤)
   - 후추 약간
   - 양파 1개 (슬라이스)
   - 양송이버섯 10개
   - 토마토 1개
   - 상추 4장
   - 햄버거용 빵(번) 4개
   - 베이컨 4줄
   - 피클 적당량
   - 마요네즈 약간
   - 옐로 머스터드 약간
   - 케찹 약간
   - 슬라이스 치즈 4장

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/01/14/6d8ae8b5e113c0b098b3890370a034f91.jpg

8. 요리 팁:
   - 패티는 너무 많이 누르지 않고 두툼하게 빚으면 육즙이 더 살아 있습니다.
   - 번(빵)을 살짝 구우면 더 바삭하고 맛있는 식감을 느낄 수 있습니다.
   - 치즈는 패티가 뜨거울 때 올려야 자연스럽게 녹습니다[2].
   - 기호에 따라 다양한 소스를 추가하거나, 양상추‧로메인‧치커리 등 다양한 채소를 활용할 수 있습니다.

알레르기 정보: 새우 알레르기 사용자의 경우, 해당 레시피는 새우를 포함하지 않습니다. 안심하고 드실 수 있습니다.}, delta={role=assistant, content=}}]}
2025-06-27 20:08:44.095 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 시작 ===
2025-06-27 20:08:44.095 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - AI 응답 원본:
1. 요리 이름: 홈메이드 햄버거

2. 카테고리: 양식

3. 조리 시간: 30~40분

4. 조리 방법:
   1. 양파는 얇게 슬라이스하고, 양송이버섯과 토마토도 먹기 좋은 크기로 자릅니다.
   2. 베이컨을 오븐이나 팬에 바삭하게 구워줍니다.
   3. 팬이나 오븐에서 양파와 버섯을 약간의 소금, 후추로 볶아 풍미를 더해줍니다.
   4. 간 쇠고기에 소금과 후추를 뿌려 둥근 패티 모양으로 빚고, 센 불에서 앞뒤로 노릇하게 굽습니다.
   5. 햄버거 번(빵)은 반으로 갈라 팬에 살짝 구워 바삭하게 준비합니다.
   6. 빵의 아래쪽에 마요네즈와 머스터드, 케찹을 바릅니다.
   7. 그 위에 상추, 피클, 패티, 슬라이스 치즈, 볶음 양파, 볶음 버섯, 구운 베이컨, 토마토를 올립니다.
   8. 마지막으로 빵의 윗부분을 덮어 완성합니다[1][5].

5. 필요한 재료와 양:
   - 고급 간 쇠고기 600g (1인분 약 150g)
   - 소금 30g (패티 간 맞춤)
   - 후추 약간
   - 양파 1개 (슬라이스)
   - 양송이버섯 10개
   - 토마토 1개
   - 상추 4장
   - 햄버거용 빵(번) 4개
   - 베이컨 4줄
   - 피클 적당량
   - 마요네즈 약간
   - 옐로 머스터드 약간
   - 케찹 약간
   - 슬라이스 치즈 4장

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/01/14/6d8ae8b5e113c0b098b3890370a034f91.jpg

8. 요리 팁:
   - 패티는 너무 많이 누르지 않고 두툼하게 빚으면 육즙이 더 살아 있습니다.
   - 번(빵)을 살짝 구우면 더 바삭하고 맛있는 식감을 느낄 수 있습니다.
   - 치즈는 패티가 뜨거울 때 올려야 자연스럽게 녹습니다[2].
   - 기호에 따라 다양한 소스를 추가하거나, 양상추‧로메인‧치커리 등 다양한 채소를 활용할 수 있습니다.

알레르기 정보: 새우 알레르기 사용자의 경우, 해당 레시피는 새우를 포함하지 않습니다. 안심하고 드실 수 있습니다.
2025-06-27 20:08:44.095 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:08:44.095 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:08:44.095 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 홈메이드 햄버거

2. 카테고리: 양식

3. 조리 시간: 30~40분

4. 조리 방법:
   1. 양파는 얇게 슬라이스하고, 양송이버섯과 토마토도 먹기 좋은 크기로 자릅니다.
   2. 베이컨을 오븐이나 팬에 바삭하게 구워줍니다.
   3. 팬이나 오븐에서 양파와 버섯을 약간의 소금, 후추로 볶아 풍미를 더해줍니다.
   4. 간 쇠고기에 소금과 후추를 뿌려 둥근 패티 모양으로 빚고, 센 불에서 앞뒤로 노릇하게 굽습니다.
   5. 햄버거 번(빵)은 반으로 갈라 팬에 살짝 구워 바삭하게 준비합니다.
   6. 빵의 아래쪽에 마요네즈와 머스터드, 케찹을 바릅니다.
   7. 그 위에 상추, 피클, 패티, 슬라이스 치즈, 볶음 양파, 볶음 버섯, 구운 베이컨, 토마토를 올립니다.
   8. 마지막으로 빵의 윗부분을 덮어 완성합니다[1][5].

5. 필요한 재료와 양:
   - 고급 간 쇠고기 600g (1인분 약 150g)
   - 소금 30g (패티 간 맞춤)
   - 후추 약간
   - 양파 1개 (슬라이스)
   - 양송이버섯 10개
   - 토마토 1개
   - 상추 4장
   - 햄버거용 빵(번) 4개
   - 베이컨 4줄
   - 피클 적당량
   - 마요네즈 약간
   - 옐로 머스터드 약간
   - 케찹 약간
   - 슬라이스 치즈 4장

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/01/14/6d8ae8b5e113c0b098b3890370a034f91.jpg

8. 요리 팁:
   - 패티는 너무 많이 누르지 않고 두툼하게 빚으면 육즙이 더 살아 있습니다.
   - 번(빵)을 살짝 구우면 더 바삭하고 맛있는 식감을 느낄 수 있습니다.
   - 치즈는 패티가 뜨거울 때 올려야 자연스럽게 녹습니다[2].
   - 기호에 따라 다양한 소스를 추가하거나, 양상추‧로메인‧치커리 등 다양한 채소를 활용할 수 있습니다.

알레르기 정보: 새우 알레르기 사용자의 경우, 해당 레시피는 새우를 포함하지 않습니다. 안심하고 드실 수 있습니다.
2025-06-27 20:08:44.099 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:08:44.102 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 20:08:44.102 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2017/01/14/6d8ae8b5e113c0b098b3890370a034f91.jpg
2025-06-27 20:08:44.102 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/01/14/6d8ae8b5e113c0b098b3890370a034f91.jpg
2025-06-27 20:08:44.102 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 고급 간 쇠고기 600g (1인분 약 150g)
   - 소금 30g (패티 간 맞춤)
   - 후추 약간
   - 양파 1개 (슬라이스)
   - 양송이버섯 10개
   - 토마토 1개
   - 상추 4장
   - 햄버거용 빵(번) 4개
   - 베이컨 4줄
   - 피클 적당량
   - 마요네즈 약간
   - 옐로 머스터드 약간
   - 케찹 약간
   - 슬라이스 치즈 4장
2025-06-27 20:08:44.102 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-27 20:08:44.102 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고급 간 쇠고기 600g (1인분 약 150g)
2025-06-27 20:08:44.103 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 쇠고기, Amount: 600g
2025-06-27 20:08:44.103 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 쇠고기, Amount: 600g
2025-06-27 20:08:44.105 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:08:44.107 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '쇠고기' not found in DB. Skipping.
2025-06-27 20:08:44.107 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 30g (패티 간 맞춤)
2025-06-27 20:08:44.107 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소금, Amount: 30g
2025-06-27 20:08:44.107 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 30g
2025-06-27 20:08:44.109 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:08:44.111 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-27 20:08:44.111 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 20:08:44.111 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 20:08:44.111 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개 (슬라이스)
2025-06-27 20:08:44.111 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-27 20:08:44.111 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-27 20:08:44.112 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:08:44.113 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 20:08:44.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양송이버섯 10개
2025-06-27 20:08:44.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양송이버섯, Amount: 10개
2025-06-27 20:08:44.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양송이버섯, Amount: 10개
2025-06-27 20:08:44.114 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:08:44.115 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '양송이버섯' not found in DB. Skipping.
2025-06-27 20:08:44.115 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개
2025-06-27 20:08:44.115 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-27 20:08:44.115 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-27 20:08:44.115 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:08:44.116 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-27 20:08:44.116 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 상추 4장
2025-06-27 20:08:44.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 상추, Amount: 4장
2025-06-27 20:08:44.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 상추, Amount: 4장
2025-06-27 20:08:44.118 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:08:44.119 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '상추' not found in DB. Skipping.
2025-06-27 20:08:44.119 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거용 빵(번) 4개
2025-06-27 20:08:44.121 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄버거용 빵(번) 4개
2025-06-27 20:08:44.121 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 베이컨 4줄
2025-06-27 20:08:44.121 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 베이컨, Amount: 4줄
2025-06-27 20:08:44.121 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 베이컨, Amount: 4줄
2025-06-27 20:08:44.122 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '베이컨' not found in DB. Skipping.
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피클 적당량
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 피클 적당량
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 약간
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마요네즈 약간
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 옐로 머스터드 약간
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 옐로 머스터드 약간
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케찹 약간
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 케찹 약간
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 4장
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 4장
2025-06-27 20:08:44.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 4장
2025-06-27 20:08:44.125 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:08:44.126 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-27 20:08:44.126 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파는 얇게 슬라이스하고, 양송이버섯과 토마토도 먹기 좋은 크기로 자릅니다.
   2. 베이컨을 오븐이나 팬에 바삭하게 구워줍니다.
   3. 팬이나 오븐에서 양파와 버섯을 
2025-06-27 20:08:44.127 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:08:44.127 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 고급 간 쇠고기 600g (1인분 약 150g)
   - 소금 30g (패티 간 맞춤)
   - 후추 약간
   - 양파 1개 (슬라이스)
   - 양송이버섯 10개
   - 토마토 1개
   - 상추 4장
   - 햄버거용 빵(번) 4개
   - 베이컨 4줄
   - 피클 적당량
   - 마요네즈 약간
   - 옐로 머스터드 약간
   - 케찹 약간
   - 슬라이스 치즈 4장

조리 방법:
1. 양파는 얇게 슬라이스하고, 양송이버섯과 토마토도 먹기 좋은 크기로 자릅니다.
   2. 베이컨을 오븐이나 팬에 바삭하게 구워줍니다.
   3. 팬이나 오븐에서 양파와 버섯을 약간의 소금, 후추로 볶아 풍미를 더해줍니다.
   4. 간 쇠고기에 소금과 후추를 뿌려 둥근 패티 모양으로 빚고, 센 불에서 앞뒤로 노릇하게 굽습니다.
   5. 햄버거 번(빵)은 반으로 갈라 팬에 살짝 구워 바삭하게 준비합니다.
   6. 빵의 아래쪽에 마요네즈와 머스터드, 케찹을 바릅니다.
   7. 그 위에 상추, 피클, 패티, 슬라이스 치즈, 볶음 양파, 볶음 버섯, 구운 베이컨, 토마토를 올립니다.
   8. 마지막으로 빵의 윗부분을 덮어 완성합니다[1][5].
2025-06-27 20:08:44.127 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving recipe with title: 홈메이드 햄버거
2025-06-27 20:08:44.128 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:08:44.157 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 84
2025-06-27 20:08:44.157 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 파싱된 레시피 정보 ===
2025-06-27 20:08:44.157 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 제목: 홈메이드 햄버거
2025-06-27 20:08:44.157 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 설명: 필요한 재료와 양:
- 고급 간 쇠고기 600g (1인분 약 150g)
   - 소금 30g (패티 간 맞춤)
   - 후추 약간
   - 양파 1개 (슬라이스)
   - 양송이버섯 10개
   - 토마토 1개
   - 상추 4장
   - 햄버거용 빵(번) 4개
   - 베이컨 4줄
   - 피클 적당량
   - 마요네즈 약간
   - 옐로 머스터드 약간
   - 케찹 약간
   - 슬라이스 치즈 4장

조리 방법:
1. 양파는 얇게 슬라이스하고, 양송이버섯과 토마토도 먹기 좋은 크기로 자릅니다.
   2. 베이컨을 오븐이나 팬에 바삭하게 구워줍니다.
   3. 팬이나 오븐에서 양파와 버섯을 약간의 소금, 후추로 볶아 풍미를 더해줍니다.
   4. 간 쇠고기에 소금과 후추를 뿌려 둥근 패티 모양으로 빚고, 센 불에서 앞뒤로 노릇하게 굽습니다.
   5. 햄버거 번(빵)은 반으로 갈라 팬에 살짝 구워 바삭하게 준비합니다.
   6. 빵의 아래쪽에 마요네즈와 머스터드, 케찹을 바릅니다.
   7. 그 위에 상추, 피클, 패티, 슬라이스 치즈, 볶음 양파, 볶음 버섯, 구운 베이컨, 토마토를 올립니다.
   8. 마지막으로 빵의 윗부분을 덮어 완성합니다[1][5].
2025-06-27 20:08:44.158 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 파싱 완료 ===
2025-06-27 20:15:34.603 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 20:15:34.611 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 20:15:34.617 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 20:19:39.333 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 20:19:39.365 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 7336 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 20:19:39.366 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 20:19:39.367 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 20:19:39.421 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 20:19:39.421 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 20:19:40.297 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:19:40.300 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 20:19:40.339 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:19:40.340 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:19:40.341 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:19:40.342 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:19:40.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:19:40.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:19:40.344 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:19:40.345 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:19:40.346 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 JDBC repository interfaces.
2025-06-27 20:19:40.359 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:19:40.360 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 20:19:40.462 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 100 ms. Found 8 JPA repository interfaces.
2025-06-27 20:19:40.492 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:19:40.493 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 20:19:40.505 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:19:40.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:19:40.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:19:40.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:19:40.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:19:40.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:19:40.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:19:40.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:19:40.506 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-27 20:19:41.124 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 20:19:41.133 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 20:19:41.135 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 20:19:41.135 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 20:19:41.173 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 20:19:41.175 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1753 ms
2025-06-27 20:19:41.221 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 20:19:41.370 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2b5deadf
2025-06-27 20:19:41.374 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 20:19:41.390 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 20:19:41.508 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 20:19:41.540 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 20:19:41.560 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 20:19:41.680 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 20:19:41.735 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 20:19:41.736 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 20:19:42.573 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 20:19:42.685 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 20:19:43.053 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 20:19:43.287 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 20:19:43.288 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 20:19:44.322 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 20:19:44.400 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 20:19:44.516 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6e041b5d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@334f0320, org.springframework.security.web.context.SecurityContextHolderFilter@69e79602, org.springframework.security.web.header.HeaderWriterFilter@3ce8e380, org.springframework.web.filter.CorsFilter@12a57195, org.springframework.security.web.authentication.logout.LogoutFilter@7b6d2433, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@198bcbe4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@59145751, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3e4f6b1c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@504f1820, org.springframework.security.web.session.SessionManagementFilter@2468105f, org.springframework.security.web.access.ExceptionTranslationFilter@f7f7e2f, org.springframework.security.web.access.intercept.AuthorizationFilter@228fe32e]
2025-06-27 20:19:44.842 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 20:19:44.858 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 20:19:44.865 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 20:19:44.876 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.863 seconds (process running for 6.508)
2025-06-27 20:19:53.798 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 20:19:53.799 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 20:19:53.802 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-27 20:19:53.864 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:19:53.892 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:19:53.907 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:19:53.912 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:19:53.953 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:19:53.954 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:19:53.957 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:19:53.957 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:19:53.957 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-27 20:19:53.957 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:19:53.957 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:19:54.021 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:19:54.024 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:19:54.024 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:19:54.025 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:19:54.025 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:20:00.961 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:20:00.962 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:20:00.962 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ## 요리 이름: 수제 햄버거
## 카테고리: 양식
## 조리 시간: 40분
## 조리 방법:
1. **패티 준비**: 소고기 다짐육 200g과 돼지고기 다짐육 300g을 섞어 핸드믹서로 잘 섞습니다. 소금과 후추로 간을 합니다. 혼합된 고기를 4등분하여 반듯하게 만듭니다.
2. **양파 카라멜라이즈**: 양파를 얇게 썬 후, 프라이팬에 버터 10g과 식용유를 두르고 약불에서 20분간 볶습니다. 양파가 갈색이 되면 발사믹 식초 ¼컵과 설탕 1T를 넣고 약간 더 볶습니다.
3. **빵 준비**: 햄버거 빵을 반으로 자르고, 프라이팬에 버터를 녹여 앞뒤로 노릇하게 구워줍니다.
4. **패티 구워내기**: 패티를 구운 프라이팬에 올려 중불에서 4분간 익힙니다. 중간에 눌러줘서 타지 않게 합니다. 어느 정도 익으면 뒤집어 2분 더 익힙니다.
5. **소스 만들기**: 스테이크 소스 3큰술, 케첩 ½큰술, 설탕 2큰술, 물 1큰술을 섞어 소스를 만듭니다. 필요에 따라 케첩이나 마요네즈를 추가할 수 있습니다.
6. **조립**: 굽고난 패티 위에 체다치즈를 올리고, 뚜껑을 덮어 치즈가 녹습니다. 빵에 소스를 바르고, 패티를 올려 양파와 피클, 상추를 얹어 완성합니다.

## 필요한 재료와 양:
- 소고기 다짐육 200g
- 돼지고기 다짐육 300g
- 햄버거빵 4개
- 양파 2개
- 체다치즈 4장
- 발사믹 식초 ¼컵
- 설탕 1T
- 버터 20g
- 소금 약간
- 후추 약간
- 스테이크 소스 3큰술
- 케첩 ½큰술
- 물 1큰술
- 오이 피클 약간
- 상추 약간

## 난이도: 중
## 이미지 URL: https://www.google.com/search?q=%EC%88%98%EC%A0%9C+%ED%95%B4%EB%B2%84%EA%B1%B0+%EC%95%84%EC%9D%B4%EB%8F%99
## 요리 팁:
- 패티를 구울 때는 중불로 설정하여 타지 않게 주의하세요.
- 양파 카라멜라이즈는 시간이 걸리지만, 햄버거의 맛을 더해줍니다.
- 소스를 만드는 데는 개인의 취향에 따라 케첩이나 마요네즈를 추가할 수 있습니다.
2025-06-27 20:20:00.966 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:20:00.972 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - No image URL found in AI response
2025-06-27 20:20:00.972 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-27 20:20:00.973 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern cooking method): 1. **패티 준비**: 소고기 다짐육 200g과 돼지고기 다짐육 300g을 섞어 핸드믹서로 잘 섞습니다. 소금과 후추로 간을 합니다. 혼합된 고기를 4등분하여 반듯하게 만듭니다.
2025-06-27 20:20:00.974 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:20:00.975 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
1. **패티 준비**: 소고기 다짐육 200g과 돼지고기 다짐육 300g을 섞어 핸드믹서로 잘 섞습니다. 소금과 후추로 간을 합니다. 혼합된 고기를 4등분하여 반듯하게 만듭니다.
2025-06-27 20:20:00.981 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:20:00.985 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 수제 햄버거
2025-06-27 20:20:01.013 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:20:01.018 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 85
2025-06-27 20:21:43.630 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 20:21:43.637 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 20:21:43.644 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 20:28:13.278 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 20:28:13.311 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 8302 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 20:28:13.312 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 20:28:13.312 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 20:28:13.368 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 20:28:13.368 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 20:28:14.229 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:28:14.231 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 20:28:14.279 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:28:14.282 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:28:14.285 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:28:14.285 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:28:14.286 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:28:14.286 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:28:14.288 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:28:14.288 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:28:14.289 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55 ms. Found 0 JDBC repository interfaces.
2025-06-27 20:28:14.311 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:28:14.311 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 20:28:14.411 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97 ms. Found 8 JPA repository interfaces.
2025-06-27 20:28:14.438 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:28:14.438 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 20:28:14.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:28:14.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:28:14.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:28:14.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:28:14.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:28:14.449 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:28:14.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:28:14.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:28:14.450 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-27 20:28:15.423 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 20:28:15.431 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 20:28:15.433 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 20:28:15.433 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 20:28:15.473 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 20:28:15.475 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2104 ms
2025-06-27 20:28:15.521 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 20:28:15.677 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6215e28b
2025-06-27 20:28:15.681 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 20:28:15.699 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 20:28:15.824 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 20:28:15.856 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 20:28:15.876 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 20:28:16.045 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 20:28:16.091 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 20:28:16.092 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 20:28:18.757 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 20:28:18.894 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 20:28:19.316 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 20:28:19.564 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 20:28:19.565 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 20:28:20.646 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 20:28:20.739 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 20:28:20.872 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@28012bb6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2d07b82b, org.springframework.security.web.context.SecurityContextHolderFilter@dcce9af, org.springframework.security.web.header.HeaderWriterFilter@557291a5, org.springframework.web.filter.CorsFilter@3a094a9, org.springframework.security.web.authentication.logout.LogoutFilter@7427e3, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@6c692fde, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@176c0c72, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4f29d1c6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@428fb411, org.springframework.security.web.session.SessionManagementFilter@4c04475e, org.springframework.security.web.access.ExceptionTranslationFilter@ae95378, org.springframework.security.web.access.intercept.AuthorizationFilter@5babd508]
2025-06-27 20:28:21.226 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 20:28:21.248 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 20:28:21.255 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 20:28:21.267 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 8.305 seconds (process running for 8.928)
2025-06-27 20:28:23.353 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 20:28:23.353 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 20:28:23.354 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-27 20:28:23.433 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:28:23.461 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:28:23.478 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:28:23.483 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:28:23.522 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 수제 버거 레시피 줄래?, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 20:28:23.523 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:28:23.526 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:28:23.526 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:28:23.527 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 수제 버거 레시피 줄래?
2025-06-27 20:28:23.527 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:28:23.527 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 20:28:23.581 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:28:23.585 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 20:28:23.586 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:28:23.586 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 수제 버거 레시피 줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 20:28:23.586 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:28:32.856 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:28:32.857 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 20:28:32.857 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 클래식 수제 치즈버거**
- 카테고리: 양식
- 추천 이유: 사용자가 요청한 '수제 버거'를 가장 기본적이고 인기 있는 클래식 치즈버거 스타일로 제안합니다. 직접 만든 패티와 간단한 소스, 신선한 재료로 집에서도 전문점 못지않은 맛을 낼 수 있습니다[1][2].
- 예상 조리 시간: 30~40분
- 난이도: 중
- 개인화 고려사항: 새우 등 알레르기 유발 재료 미포함, 아침에 먹기 부담스럽지 않게 소화에 좋은 신선한 채소 활용

**2. 키토(저탄수) 수제버거**
- 카테고리: 기타(저탄고지/키토식)
- 추천 이유: 빵 대신 두툼한 패티로 만든 번(빵 없는 버거)으로, 탄수화물 섭취를 줄이고 싶거나 건강을 챙기고자 할 때 적합합니다. 고기와 채소 위주로 구성되어 가볍게 즐길 수 있습니다[5].
- 예상 조리 시간: 25~30분
- 난이도: 하
- 개인화 고려사항: 밀가루 빵 없이 조리, 알레르기 걱정 없는 구성

**3. 미니 홈메이드 버거**
- 카테고리: 양식
- 추천 이유: 한입 크기의 미니버거로, 소화에 부담이 적고 간식이나 간단한 한 끼로 적합합니다. 다양한 재료를 사용해도 기본 버전에서는 알레르기 걱정이 없습니다[2].
- 예상 조리 시간: 20~25분
- 난이도: 하
- 개인화 고려사항: 새우 배제, 야채와 치즈로 영양 균형 강화

**4. 백종원 스타일 수제버거**
- 카테고리: 양식
- 추천 이유: 인기 있는 백종원 레시피를 참고해 누구나 쉽게 따라 만들 수 있도록 구성된 버거입니다. 한국인의 입맛에 맞춰 다양한 토핑과 소스를 활용할 수 있다는 점도 장점입니다[3].
- 예상 조리 시간: 30분
- 난이도: 중
- 개인화 고려사항: 알레르기 재료 배제, 건강한 재료 사용

### 전체 추천 요약
- **상황 분석:** 사용자는 ‘수제 버거 레시피’를 요청하셨으므로, 간식이나 한 끼 식사로 먹기 좋은 수제 버거 메뉴 위주로 추천했습니다. 아침에 밥을 먹으면 배가 아픈 점을 고려해 소화가 부담스럽지 않은 메뉴(미니버거나 저탄수 버거 등)도 포함했습니다.
- **추천 기준:** 요청한 ‘수제 버거’의 다양한 스타일(클래식, 미니, 키토 등)을 중심으로 조리 난이도와 소화 부담, 간단함까지 모두 고려하였습니다.
- **개인화 고려사항:** 새우 알레르기를 꼭 피하고, 아침 소화 부담이 있는 점을 반영해 기름지지 않거나 채소가 충분히 들어간 메뉴를 추천하였습니다.
- **추가 팁:** 위 메뉴 중 하나가 마음에 드신다면 ‘OO 버거 레시피 알려줘’처럼 메뉴명을 포함해 레시피를 요청해주세요. 더 상세한 조리법을 안내해드릴 수 있습니다. 직접 만들 때는 패티에 꼭 고기를 충분히 익히고, 여러 가지 신선한 채소를 넣으면 건강에도 더욱 좋습니다.
2025-06-27 20:28:32.858 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-27 20:30:10.775 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:30:10.792 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:30:10.799 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:30:10.805 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:30:10.812 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 오전 메뉴 뭐먹지, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 20:30:10.813 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:30:10.815 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:30:10.815 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:30:10.815 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 오전 메뉴 뭐먹지
2025-06-27 20:30:10.815 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:30:10.815 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 20:30:10.819 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:30:10.821 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 20:30:10.822 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:30:10.822 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 오전 메뉴 뭐먹지
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 20:30:10.822 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:30:30.604 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:30:30.606 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 20:30:30.606 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 에그치즈토스트**
- 카테고리: 한식/분식
- 추천 이유: 아침에 간단하면서도 든든하게 먹을 수 있고, 밥 대신 빵&계란 조합은 가볍고 속에 부담이 적어 아침에 밥을 먹으면 배가 아픈 사용자에게 적합합니다[1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 없이 만들 수 있고, 계란과 치즈, 식빵만 있으면 됩니다. 속 부담 최소화.

**2. 요거트 과일볼**
- 카테고리: 기타
- 추천 이유: 우유 또는 플레인 요거트에 신선한 과일과 견과류를 더하면 영양도 높고, 아침에 소화 부담 없이 건강하게 먹을 수 있습니다[5].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 밥 없이 만들며, 알레르기 재료 배제, 소화가 잘 되고 포만감이 있습니다.

**3. 모닝샌드위치**
- 카테고리: 분식/양식
- 추천 이유: 식빵, 달걀, 치즈, 채소(양상추, 토마토 등)로 간단하게 만들 수 있어 아침에 부담 없이 먹기 좋고, 휴대하면서 먹기도 편리합니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료 무첨가, 소화 부담 적은 재료 위주 구성.

**4. 단호박 우유**
- 카테고리: 기타/건강식
- 추천 이유: 쪄낸 단호박과 우유(또는 두유)를 함께 갈아 마시는 메뉴로, 간단하고 달콤하며 소화가 잘 돼서 아침에 부담이 없습니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 밥 없이 부드럽게 즐길 수 있어 속이 약한 사람에게 적합합니다.

**5. 에그크레페**
- 카테고리: 기타/건강식
- 추천 이유: 밀가루 없이 달걀로 만드는 크레페로 속이 편하고 단백질을 보충할 수 있는 간단 아침 메뉴입니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 속에 부담 없고, 새우 등 알레르기 유발 식재료 미포함.

---

### 전체 추천 요약

- 상황 분석: 사용자는 "내일 오전 메뉴"를 고민 중이며, 아침에 밥을 먹으면 배가 아픈 건강 상태를 가지고 있습니다. 한식을 선호하지만, 건강과 소화 부담을 우선 고려해야 하는 상황입니다.
- 추천 기준: 아침 식사로 부담이 적고 소화가 잘 되는 메뉴 위주, 밥이 아닌 빵·달걀·유제품 등 가벼운 식사 메뉴를 선정했습니다. 조리 시간과 난이도도 낮춰 아침에 손쉽게 준비할 수 있도록 했습니다.
- 개인화 고려사항: 밥과 해산물(특히 새우)을 배제하고, 소화가 잘 되며 속에 자극이 적은 재료를 중심으로 구성했습니다.
- 추가 팁: 위 메뉴 중 변화를 주고 싶다면 견과류 또는 다양한 과일을 추가하여 포만감과 영양을 높일 수 있습니다. 각 메뉴가 입맛에 맞지 않거나 상세 레시피가 필요하다면 "레시피"라는 단어를 포함해 요청해 주세요.
2025-06-27 20:30:30.608 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-27 20:30:37.346 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:30:37.348 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:30:37.350 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:30:37.353 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:30:37.355 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그치즈토스트 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:30:37.355 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:30:37.357 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:30:37.357 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:30:37.357 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그치즈토스트 레시피
2025-06-27 20:30:37.357 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:30:37.357 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:30:37.360 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:30:37.361 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:30:37.362 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:30:37.362 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그치즈토스트 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:30:37.362 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:30:43.488 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:30:43.490 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:30:43.490 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그치즈토스트

2. 카테고리: 양식

3. 조리 시간: 15분

4. 조리 방법:
   1. 식빵 한쪽 면에 버터를 바르고, 오븐 팬이나 프라이팬에 올립니다.
   2. 숟가락으로 식빵 가장자리 1cm를 남기고 가운데 부분을 살짝 눌러 홈을 만들어줍니다.
   3. 홈을 만든 부분에 달걀을 하나씩 깨서 넣습니다.
   4. 소금과 후춧가루를 약간씩 뿌려 간을 해줍니다.
   5. 그 위에 피자치즈(모짜렐라 치즈)와 파마산 치즈를 골고루 뿌려줍니다.
   6. 오븐(180℃)에서 약 10분간, 또는 프라이팬 뚜껑을 덮고 약불로 치즈가 녹고 달걀이 익을 때까지 굽습니다.
   7. 완성된 토스트 위에 파슬리 가루를 뿌려 마무리합니다.[1][5]

5. 필요한 재료와 양:
   - 식빵 2개
   - 달걀 2개
   - 피자치즈(모짜렐라 치즈) 3큰술
   - 파마산 치즈 2큰술
   - 버터 1/2~1큰술
   - 소금 약간
   - 후춧가루 약간
   - 파슬리 가루(생략 가능) 약간[1][5]

6. 난이도: 하

7. 이미지 URL: https://i.wtable.co.kr/images/recipe/230/2022/10/04/69cba347-5c34-4fef-ad0b-e7aef0a541e1.jpg

8. 요리 팁:
   - 오븐이 없으면 프라이팬에 뚜껑을 덮고 약불에서 천천히 익혀도 좋습니다.
   - 치즈 종류(피자치즈, 체다, 고다 등)를 다양하게 사용하면 색다른 풍미를 느낄 수 있습니다.
   - 파슬리 가루나 허브를 곁들이면 향이 한층 더 살아납니다.
2025-06-27 20:30:43.493 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:30:43.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-27 20:30:43.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.wtable.co.kr/images/recipe/230/2022/10/04/69cba347-5c34-4fef-ad0b-e7aef0a541e1.jpg
2025-06-27 20:30:43.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.wtable.co.kr/images/recipe/230/2022/10/04/69cba347-5c34-4fef-ad0b-e7aef0a541e1.jpg
2025-06-27 20:30:43.501 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 2개
   - 달걀 2개
   - 피자치즈(모짜렐라 치즈) 3큰술
   - 파마산 치즈 2큰술
   - 버터 1/2~1큰술
   - 소금 약간
   - 후춧가루 약간
   - 파슬리 가루(생략 가능) 약간[1][5]
2025-06-27 20:30:43.501 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 8
2025-06-27 20:30:43.503 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 2개
2025-06-27 20:30:43.503 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 2개
2025-06-27 20:30:43.503 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 2개
2025-06-27 20:30:43.512 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:30:43.518 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-27 20:30:43.519 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 2개
2025-06-27 20:30:43.519 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 2개
2025-06-27 20:30:43.519 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 2개
2025-06-27 20:30:43.520 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:30:43.522 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-27 20:30:43.522 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피자치즈(모짜렐라 치즈) 3큰술
2025-06-27 20:30:43.522 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 피자치즈(모짜렐라 치즈) 3큰술
2025-06-27 20:30:43.522 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파마산 치즈 2큰술
2025-06-27 20:30:43.522 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 2큰술
2025-06-27 20:30:43.522 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 2큰술
2025-06-27 20:30:43.524 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:30:43.526 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-27 20:30:43.529 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1/2~1큰술
2025-06-27 20:30:43.530 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1/2~1큰술
2025-06-27 20:30:43.531 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 20:30:43.531 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 20:30:43.531 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후춧가루 약간
2025-06-27 20:30:43.531 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후춧가루 약간
2025-06-27 20:30:43.531 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파슬리 가루(생략 가능) 약간[1][5]
2025-06-27 20:30:43.531 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 파슬리 가루(생략 가능) 약간[1][5]
2025-06-27 20:30:43.532 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 식빵 한쪽 면에 버터를 바르고, 오븐 팬이나 프라이팬에 올립니다.
   2. 숟가락으로 식빵 가장자리 1cm를 남기고 가운데 부분을 살짝 눌러 홈을 만들어줍니다.
   3. 
2025-06-27 20:30:43.533 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:30:43.533 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 2개
   - 달걀 2개
   - 피자치즈(모짜렐라 치즈) 3큰술
   - 파마산 치즈 2큰술
   - 버터 1/2~1큰술
   - 소금 약간
   - 후춧가루 약간
   - 파슬리 가루(생략 가능) 약간[1][5]

조리 방법:
1. 식빵 한쪽 면에 버터를 바르고, 오븐 팬이나 프라이팬에 올립니다.
   2. 숟가락으로 식빵 가장자리 1cm를 남기고 가운데 부분을 살짝 눌러 홈을 만들어줍니다.
   3. 홈을 만든 부분에 달걀을 하나씩 깨서 넣습니다.
   4. 소금과 후춧가루를 약간씩 뿌려 간을 해줍니다.
   5. 그 위에 피자치즈(모짜렐라 치즈)와 파마산 치즈를 골고루 뿌려줍니다.
   6. 오븐(180℃)에서 약 10분간, 또는 프라이팬 뚜껑을 덮고 약불로 치즈가 녹고 달걀이 익을 때까지 굽습니다.
   7. 완성된 토스트 위에 파슬리 가루를 뿌려 마무리합니다.[1][5]
2025-06-27 20:30:43.535 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:30:43.562 [http-nio-8080-exec-3] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 2 results were returned
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:301)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:244)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:479)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:166)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.NonUniqueResultException: Query did not return a unique result: 2 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 131 common frames omitted
2025-06-27 20:31:00.789 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:31:00.795 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:31:00.798 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:31:00.805 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:31:00.808 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그치즈토스트 레시피 주라, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:31:00.808 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:31:00.810 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:31:00.814 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:31:00.814 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그치즈토스트 레시피 주라
2025-06-27 20:31:00.814 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:31:00.815 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:31:00.819 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:31:00.820 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:31:00.820 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:31:00.820 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그치즈토스트 레시피 주라
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:31:00.820 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:31:12.030 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:31:12.031 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:31:12.031 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그치즈토스트

2. 카테고리: 분식

3. 조리 시간: 15분

4. 조리 방법:
   1. 계란 3개를 볼에 깨서 소금을 조금 넣고 곱게 풀어줍니다.
   2. 팬을 달군 뒤 버터(혹은 식용유)를 두르고, 풀어둔 계란을 팬 전체에 얇게 펼쳐 부칩니다.
   3. 계란이 반쯤 익으면 식빵 한쪽 면을 계란 위에 올립니다. (식빵 2장 사용)
   4. 계란이 완전히 익기 전에 뒤집어 식빵이 바닥에 닿게 해줍니다.
   5. 식빵 위에 체다슬라이스치즈(또는 모차렐라치즈)를 올려줍니다. 취향에 따라 과일잼(딸기잼 등)도 한쪽 빵에 바릅니다.
   6. 빵을 반으로 접거나 두 개를 맞붙여 샌드위치처럼 만든 후, 약불에서 치즈가 녹을 때까지 1~2분 더 익힙니다.
   7. 노릇하게 익으면 팬에서 꺼내 반으로 잘라 접시에 담아 완성합니다.

5. 필요한 재료와 양:
   - 식빵 2장
   - 계란 3개
   - 체다슬라이스치즈 2~4장 (취향껏)
   - 과일잼(딸기잼 등) 1큰술 (선택사항)
   - 버터 1조각 (또는 식용유 1큰술)
   - 소금 약간

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2019/10/08/600x450_2ff0f2f012fcf48f9e7c53fb3fc7d4fd.jpg

8. 요리 팁:
   - 치즈는 한 장씩만 넣어도 충분히 고소하며, 여러 장 사용 시 치즈가 흘러나올 수 있으니 주의합니다[1][2].
   - 계란을 얇게 부치면 식빵을 접거나 샌드위치 형태로 만들 때 훨씬 쉽습니다[2].
   - 빵이 탈 수 있으니 반드시 약불에서 익히는 것이 좋습니다[1][4].
   - 취향에 따라 모차렐라치즈를 추가하면 치즈가 더욱 쭉쭉 늘어나 더 맛있습니다[3].
2025-06-27 20:31:12.040 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:31:12.043 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 분식
2025-06-27 20:31:12.044 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2019/10/08/600x450_2ff0f2f012fcf48f9e7c53fb3fc7d4fd.jpg
2025-06-27 20:31:12.044 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2019/10/08/600x450_2ff0f2f012fcf48f9e7c53fb3fc7d4fd.jpg
2025-06-27 20:31:12.044 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 2장
   - 계란 3개
   - 체다슬라이스치즈 2~4장 (취향껏)
   - 과일잼(딸기잼 등) 1큰술 (선택사항)
   - 버터 1조각 (또는 식용유 1큰술)
   - 소금 약간
2025-06-27 20:31:12.044 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 6
2025-06-27 20:31:12.044 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 2장
2025-06-27 20:31:12.044 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 2장
2025-06-27 20:31:12.044 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 2장
2025-06-27 20:31:12.047 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:31:12.049 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-27 20:31:12.049 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 3개
2025-06-27 20:31:12.050 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 3개
2025-06-27 20:31:12.050 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 3개
2025-06-27 20:31:12.054 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:31:12.055 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-27 20:31:12.055 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다슬라이스치즈 2~4장 (취향껏)
2025-06-27 20:31:12.055 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 체다슬라이스치즈 2~4장 (취향껏)
2025-06-27 20:31:12.055 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 과일잼(딸기잼 등) 1큰술 (선택사항)
2025-06-27 20:31:12.055 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 과일잼(딸기잼 등) 1큰술 (선택사항)
2025-06-27 20:31:12.055 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1조각 (또는 식용유 1큰술)
2025-06-27 20:31:12.055 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 버터, Amount: 1조각
2025-06-27 20:31:12.056 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 버터, Amount: 1조각
2025-06-27 20:31:12.058 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:31:12.060 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '버터' not found in DB. Skipping.
2025-06-27 20:31:12.060 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 20:31:12.060 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 20:31:12.060 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란 3개를 볼에 깨서 소금을 조금 넣고 곱게 풀어줍니다.
   2. 팬을 달군 뒤 버터(혹은 식용유)를 두르고, 풀어둔 계란을 팬 전체에 얇게 펼쳐 부칩니다.
   3. 계
2025-06-27 20:31:12.060 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:31:12.060 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 2장
   - 계란 3개
   - 체다슬라이스치즈 2~4장 (취향껏)
   - 과일잼(딸기잼 등) 1큰술 (선택사항)
   - 버터 1조각 (또는 식용유 1큰술)
   - 소금 약간

조리 방법:
1. 계란 3개를 볼에 깨서 소금을 조금 넣고 곱게 풀어줍니다.
   2. 팬을 달군 뒤 버터(혹은 식용유)를 두르고, 풀어둔 계란을 팬 전체에 얇게 펼쳐 부칩니다.
   3. 계란이 반쯤 익으면 식빵 한쪽 면을 계란 위에 올립니다. (식빵 2장 사용)
   4. 계란이 완전히 익기 전에 뒤집어 식빵이 바닥에 닿게 해줍니다.
   5. 식빵 위에 체다슬라이스치즈(또는 모차렐라치즈)를 올려줍니다. 취향에 따라 과일잼(딸기잼 등)도 한쪽 빵에 바릅니다.
   6. 빵을 반으로 접거나 두 개를 맞붙여 샌드위치처럼 만든 후, 약불에서 치즈가 녹을 때까지 1~2분 더 익힙니다.
   7. 노릇하게 익으면 팬에서 꺼내 반으로 잘라 접시에 담아 완성합니다.
2025-06-27 20:31:12.062 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:31:12.063 [http-nio-8080-exec-4] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 2 results were returned
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:301)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:244)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:479)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:166)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.NonUniqueResultException: Query did not return a unique result: 2 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 131 common frames omitted
2025-06-27 20:32:50.516 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:32:50.545 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:32:50.553 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:32:50.556 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:32:50.562 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 모닝샌드위치 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:32:50.565 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:32:50.568 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:32:50.568 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:32:50.568 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 모닝샌드위치 레시피
2025-06-27 20:32:50.568 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:32:50.568 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:32:50.573 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:32:50.575 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:32:50.575 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:32:50.575 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 모닝샌드위치 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:32:50.575 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:33:00.312 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:33:00.312 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:33:00.313 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 모닝샌드위치 (모닝빵 에그샐러드 샌드위치)

2. 카테고리: 한식

3. 조리 시간: 약 20분

4. 조리 방법:
   1. 달걀 4개를 실온에 꺼내어 12분간 완숙으로 삶아줍니다. (삶을 때 소금을 약간 넣어주세요.)
   2. 삶은 달걀의 흰자는 굵게 다지고, 노른자는 체에 곱게 내려줍니다. 노른자는 1큰술 정도 남겨두세요.
   3. 볼에 다진 흰자, 체에 내린 노른자, 마요네즈 4큰술, 허니머스터드 1/2큰술, 올리고당 1/2큰술, 소금·후추 약간, 다진 파슬리를 넣고 고루 섞어줍니다.
   4. 모닝빵 2개를 반으로 갈라 속을 살짝 비워준 뒤, 준비한 에그샐러드를 가득 채워 넣습니다.
   5. 남은 노른자를 샌드위치 위에 솔솔 뿌려 마무리합니다.

5. 필요한 재료와 양:
   - 모닝빵 2개
   - 달걀 4개
   - 마요네즈 4큰술
   - 허니머스터드 1/2큰술
   - 올리고당 1/2큰술
   - 파슬리 약간 (생략 가능)
   - 소금 약간
   - 후춧가루 약간

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/06/07/1cc36a2e904d4cf8af7e9c55354883a11.jpg

8. 요리 팁:
   - 달걀은 삶기 전 냉장고에서 미리 꺼내 실온에 두면 껍질이 잘 까지고, 삶을 때 깨지지 않습니다.
   - 에그샐러드에 기호에 따라 다진 오이나 양파를 소량 넣으면 식감이 더욱 좋아집니다.
   - 모닝빵 대신 곡물빵이나 통밀빵을 사용해도 맛있게 즐길 수 있습니다.
2025-06-27 20:33:00.316 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:33:00.319 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 20:33:00.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2017/06/07/1cc36a2e904d4cf8af7e9c55354883a11.jpg
2025-06-27 20:33:00.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/06/07/1cc36a2e904d4cf8af7e9c55354883a11.jpg
2025-06-27 20:33:00.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 모닝빵 2개
   - 달걀 4개
   - 마요네즈 4큰술
   - 허니머스터드 1/2큰술
   - 올리고당 1/2큰술
   - 파슬리 약간 (생략 가능)
   - 소금 약간
   - 후춧가루 약간
2025-06-27 20:33:00.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 8
2025-06-27 20:33:00.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 모닝빵 2개
2025-06-27 20:33:00.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 모닝빵, Amount: 2개
2025-06-27 20:33:00.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 모닝빵, Amount: 2개
2025-06-27 20:33:00.323 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:33:00.324 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '모닝빵' not found in DB. Skipping.
2025-06-27 20:33:00.324 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 4개
2025-06-27 20:33:00.325 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 4개
2025-06-27 20:33:00.325 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 4개
2025-06-27 20:33:00.325 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:33:00.327 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-27 20:33:00.327 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 4큰술
2025-06-27 20:33:00.327 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마요네즈, Amount: 4큰술
2025-06-27 20:33:00.327 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마요네즈, Amount: 4큰술
2025-06-27 20:33:00.328 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '마요네즈' not found in DB. Skipping.
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 허니머스터드 1/2큰술
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 허니머스터드 1/2큰술
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당 1/2큰술
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 올리고당 1/2큰술
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파슬리 약간 (생략 가능)
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 파슬리 약간 (생략 가능)
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-27 20:33:00.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후춧가루 약간
2025-06-27 20:33:00.330 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후춧가루 약간
2025-06-27 20:33:00.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 달걀 4개를 실온에 꺼내어 12분간 완숙으로 삶아줍니다. (삶을 때 소금을 약간 넣어주세요.)
   2. 삶은 달걀의 흰자는 굵게 다지고, 노른자는 체에 곱게 내려줍니다. 노
2025-06-27 20:33:00.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:33:00.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 모닝빵 2개
   - 달걀 4개
   - 마요네즈 4큰술
   - 허니머스터드 1/2큰술
   - 올리고당 1/2큰술
   - 파슬리 약간 (생략 가능)
   - 소금 약간
   - 후춧가루 약간

조리 방법:
1. 달걀 4개를 실온에 꺼내어 12분간 완숙으로 삶아줍니다. (삶을 때 소금을 약간 넣어주세요.)
   2. 삶은 달걀의 흰자는 굵게 다지고, 노른자는 체에 곱게 내려줍니다. 노른자는 1큰술 정도 남겨두세요.
   3. 볼에 다진 흰자, 체에 내린 노른자, 마요네즈 4큰술, 허니머스터드 1/2큰술, 올리고당 1/2큰술, 소금·후추 약간, 다진 파슬리를 넣고 고루 섞어줍니다.
   4. 모닝빵 2개를 반으로 갈라 속을 살짝 비워준 뒤, 준비한 에그샐러드를 가득 채워 넣습니다.
   5. 남은 노른자를 샌드위치 위에 솔솔 뿌려 마무리합니다.
2025-06-27 20:33:00.331 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:33:00.333 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 모닝샌드위치 (모닝빵 에그샐러드 샌드위치)
2025-06-27 20:33:00.374 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:33:00.403 [http-nio-8080-exec-5] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1406, SQLState: 22001
2025-06-27 20:33:00.403 [http-nio-8080-exec-5] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Data truncation: Data too long for column 'title' at row 1
2025-06-27 20:33:00.405 [http-nio-8080-exec-5] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.springframework.dao.DataIntegrityViolationException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]; SQL [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:293)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:487)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:166)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.DataException: could not execute statement [Data truncation: Data too long for column 'title' at row 1] [/* insert for ac.su.kdt.prompttest.entity.Recipe */insert into recipe (category,cooking_time,description,difficulty,image_url,title) values (?,?,?,?,?,?)]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:55)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107)
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175)
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 131 common frames omitted
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'title' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1054)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1003)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeLargeUpdate(ClientPreparedStatement.java:1312)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:988)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194)
	... 187 common frames omitted
2025-06-27 20:33:00.415 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only] with root cause
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:803)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 20:37:36.569 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 20:37:36.575 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 20:37:36.578 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-27 20:37:41.524 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-27 20:37:41.553 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 9038 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-27 20:37:41.554 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-27 20:37:41.555 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-27 20:37:41.623 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-27 20:37:41.624 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-27 20:37:42.471 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:37:42.473 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-27 20:37:42.523 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:37:42.527 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:37:42.529 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:37:42.529 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:37:42.530 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:37:42.530 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:37:42.531 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:37:42.532 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-27 20:37:42.533 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57 ms. Found 0 JDBC repository interfaces.
2025-06-27 20:37:42.552 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:37:42.553 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-27 20:37:42.650 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 94 ms. Found 8 JPA repository interfaces.
2025-06-27 20:37:42.678 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-27 20:37:42.679 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-27 20:37:42.689 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:37:42.689 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:37:42.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:37:42.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:37:42.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:37:42.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:37:42.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:37:42.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-27 20:37:42.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-27 20:37:43.448 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-27 20:37:43.455 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-27 20:37:43.457 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-27 20:37:43.457 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-27 20:37:43.496 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-27 20:37:43.498 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1872 ms
2025-06-27 20:37:43.532 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-27 20:37:43.676 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1c8c6383
2025-06-27 20:37:43.680 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-27 20:37:43.697 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-27 20:37:43.817 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-27 20:37:43.843 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-27 20:37:43.861 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-27 20:37:43.971 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-27 20:37:44.019 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-27 20:37:44.020 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-27 20:37:44.868 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-27 20:37:44.976 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 20:37:45.353 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-27 20:37:45.605 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-27 20:37:45.606 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-27 20:37:46.676 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-27 20:37:46.751 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-27 20:37:46.873 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@44f40829, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@23303427, org.springframework.security.web.context.SecurityContextHolderFilter@14aea603, org.springframework.security.web.header.HeaderWriterFilter@436d33b, org.springframework.web.filter.CorsFilter@65ffa82f, org.springframework.security.web.authentication.logout.LogoutFilter@22bcd047, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@55ea864b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@72e57a87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@42ac6588, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1d49a1c0, org.springframework.security.web.session.SessionManagementFilter@6b4dad51, org.springframework.security.web.access.ExceptionTranslationFilter@594ea9e5, org.springframework.security.web.access.intercept.AuthorizationFilter@1e5f2f87]
2025-06-27 20:37:47.219 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-27 20:37:47.240 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-27 20:37:47.246 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-27 20:37:47.260 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.065 seconds (process running for 6.685)
2025-06-27 20:37:48.718 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-27 20:37:48.718 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-27 20:37:48.722 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-06-27 20:37:48.786 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:37:48.812 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:37:48.840 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:37:48.844 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:37:48.882 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 저녁 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 20:37:48.883 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:37:48.886 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:37:48.886 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:37:48.887 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 저녁 메뉴 추천
2025-06-27 20:37:48.887 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:37:48.887 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 20:37:48.938 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:37:48.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 20:37:48.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:37:48.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 저녁 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 20:37:48.942 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:38:05.004 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:38:05.005 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 20:38:05.005 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 소불고기**
- 카테고리: 한식
- 추천 이유: 저녁 식사로 부담 없이 든든하게 즐길 수 있으며, 단짠단짠한 맛과 부드러운 식감으로 남녀노소 모두에게 인기가 많습니다. 밥반찬이나 쌈 요리로도 활용할 수 있어 다양하게 즐기기 좋습니다[2][3].
- 예상 조리 시간: 30분
- 난이도: 중
- 개인화 고려사항: 새우 알레르기 걱정 없이 섭취 가능하며, 소고기를 사용해 속이 부담스럽지 않습니다.

**2. 두부조림**
- 카테고리: 한식
- 추천 이유: 바쁜 저녁에도 빠르게 준비할 수 있고, 담백하고 건강한 한 끼를 원하시는 분께 추천합니다. 영양도 풍부하고 속을 편안하게 해줘 소화가 잘 되지 않는 분에게도 적합합니다[1].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 두부와 야채가 주재료라서 속이 편하고, 새우 등 해산물 알레르기 걱정이 없습니다.

**3. 제육볶음**
- 카테고리: 한식
- 추천 이유: 매콤한 맛으로 저녁 입맛을 돋우고, 남성분들이 특히 선호하는 인기 메뉴입니다. 쌈채소와 함께 먹으면 건강하게 한 끼를 해결할 수 있습니다[4].
- 예상 조리 시간: 20~25분
- 난이도: 중
- 개인화 고려사항: 돼지고기와 채소로 이루어진 메뉴로 새우가 포함되지 않으며, 기름기도 너무 많지 않게 조절할 수 있습니다.

**4. 어묵탕**
- 카테고리: 한식
- 추천 이유: 하루의 피로를 풀어줄 따뜻한 국물 요리로, 저녁에 간단히 준비하면서도 든든하게 즐길 수 있습니다. 남녀노소 누구나 좋아하는 맛과 재료 구성입니다[1].
- 예상 조리 시간: 20~25분
- 난이도: 하
- 개인화 고려사항: 어묵, 무, 대파 등 재료가 속을 편하게 해주고, 해산물 중 새우가 들어가지 않아 알레르기 걱정이 없습니다.

**5. 돈가스덮밥(가츠동)**
- 카테고리: 일식
- 추천 이유: 바삭한 돈가스를 달콤짭쪼름한 양념과 함께 밥 위에 얹어내 푸짐하게 한 끼 해결할 수 있는 메뉴입니다. 간단하게 한 그릇으로 즐길 수 있습니다[3].
- 예상 조리 시간: 20~25분
- 난이도: 중
- 개인화 고려사항: 주재료가 돼지고기와 달걀, 양파 등으로 알레르기 걱정이 없으며, 튀김 때문에 기름진 음식을 원할 때도 적합합니다.

---

### 전체 추천 요약
- 상황 분석: 저녁 식사로 든든하고, 건강하면서도 메뉴별로 취향에 따라 입맛을 돋우거나 속이 편한 메뉴를 선정했습니다.
- 추천 기준: 빠른 조리, 든든함, 기름기나 자극적임 조절 가능, 혼자 또는 가족과도 잘 어울리는 메뉴, 새우 알레르기 완벽 배제
- 개인화 고려사항: 새우 등 알레르기 유발 재료를 제외하고, 아침에 속이 불편한 점을 감안해 소화가 잘 되는 메뉴를 중심으로 선정했습니다.
- 추가 팁: 밥이 부담스러우면 토마토, 오이 등 신선한 샐러드나 시원한 나박김치와 곁들여 드시면 더 깔끔하고 소화도 잘 됩니다.

레시피가 궁금하신 메뉴가 있다면 ‘레시피’라는 단어를 포함해서 다시 요청해 주세요!
2025-06-27 20:38:05.006 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-27 20:38:09.406 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:38:09.423 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:38:09.427 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:38:09.430 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:38:09.435 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 소불고기 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:38:09.436 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:38:09.437 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:38:09.438 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:38:09.438 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 소불고기 레시피
2025-06-27 20:38:09.438 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:38:09.438 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:38:09.444 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:38:09.450 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:38:09.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:38:09.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 소불고기 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:38:09.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:38:15.749 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:38:15.750 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:38:15.750 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 소불고기

2. 카테고리: 한식

3. 조리 시간: 35분

4. 조리 방법:
   1. 소고기는 키친타월로 핏물을 살짝 제거한 후 한입 크기로 썬다.
   2. 볼에 간장(5.5~6숟가락), 설탕(1.5숟가락), 다진 마늘(1숟가락), 맛술(1숟가락), 참기름(1숟가락), 후춧가루를 넣고 양념장을 만들어 잘 섞는다[5][3].
   3. 소고기에 양념장을 넣고 잘 버무려 15~20분간 재운다.
   4. 양파, 당근, 대파는 먹기 좋은 크기로 썬다.
   5. 예열하지 않은 팬에 양념한 소고기, 양파, 당근, 대파(흰 부분)를 넣고 중약불에서 볶는다[5].
   6. 고기와 야채가 반쯤 익으면 남은 대파와 버섯(선택)을 넣고 볶는다.
   7. 국물이 자박하게 남을 때까지 고기와 야채가 모두 익도록 볶은 후 불을 끄고 그릇에 담아낸다.

5. 필요한 재료와 양:
   - 소불고기용 소고기 600g
   - 양파 1개
   - 당근 1/3개
   - 대파 1대
   - 진간장 5.5~6숟가락
   - 설탕 1.5숟가락
   - 다진 마늘 1숟가락
   - 맛술 1숟가락
   - 참기름 1숟가락
   - 후춧가루 약간
   - 버섯(표고/느타리/팽이 등 기호에 따라) 한 줌[1][2][5]

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/09/23/4797bb355a089b6d13bdb8993e9a07eb1.jpg

8. 요리 팁:
   - 고기를 재울 때 사과즙이나 배즙을 1~2숟가락 추가하면 고기가 더 부드럽고 감칠맛이 올라갑니다[3][4].
   - 센불에서 한 번에 볶지 말고, 중약불로 천천히 볶아야 고기가 질겨지지 않습니다[5].
   - 남은 소불고기는 냉장 보관 후 데워먹어도 맛이 좋습니다.
   - 야채(버섯, 파 등)는 기호에 따라 다양하게 추가 가능합니다.

※ 새우 알레르기 정보: 본 레시피에는 새우가 포함되지 않습니다. 안심하고 드실 수 있습니다.
2025-06-27 20:38:15.754 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:38:15.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 20:38:15.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2020/09/23/4797bb355a089b6d13bdb8993e9a07eb1.jpg
2025-06-27 20:38:15.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/09/23/4797bb355a089b6d13bdb8993e9a07eb1.jpg
2025-06-27 20:38:15.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소불고기용 소고기 600g
   - 양파 1개
   - 당근 1/3개
   - 대파 1대
   - 진간장 5.5~6숟가락
   - 설탕 1.5숟가락
   - 다진 마늘 1숟가락
   - 맛술 1숟가락
   - 참기름 1숟가락
   - 후춧가루 약간
   - 버섯(표고/느타리/팽이 등 기호에 따라) 한 줌[1][2][5]
2025-06-27 20:38:15.764 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 11
2025-06-27 20:38:15.764 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소불고기용 소고기 600g
2025-06-27 20:38:15.764 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소고기, Amount: 600g
2025-06-27 20:38:15.764 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기, Amount: 600g
2025-06-27 20:38:15.772 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:38:15.777 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기' not found in DB. Skipping.
2025-06-27 20:38:15.777 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-27 20:38:15.777 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-27 20:38:15.777 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-27 20:38:15.780 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:38:15.781 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 20:38:15.781 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/3개
2025-06-27 20:38:15.781 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/3개
2025-06-27 20:38:15.781 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대
2025-06-27 20:38:15.781 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-27 20:38:15.781 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-27 20:38:15.782 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:38:15.783 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-27 20:38:15.784 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 5.5~6숟가락
2025-06-27 20:38:15.784 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 진간장 5.5~6숟가락
2025-06-27 20:38:15.784 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1.5숟가락
2025-06-27 20:38:15.784 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 설탕 1.5숟가락
2025-06-27 20:38:15.784 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1숟가락
2025-06-27 20:38:15.785 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1숟가락
2025-06-27 20:38:15.785 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1숟가락
2025-06-27 20:38:15.787 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:38:15.788 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-27 20:38:15.789 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 1숟가락
2025-06-27 20:38:15.789 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 1숟가락
2025-06-27 20:38:15.789 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 1숟가락
2025-06-27 20:38:15.791 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:38:15.794 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-27 20:38:15.796 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1숟가락
2025-06-27 20:38:15.796 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1숟가락
2025-06-27 20:38:15.796 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1숟가락
2025-06-27 20:38:15.797 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:38:15.798 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-27 20:38:15.798 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후춧가루 약간
2025-06-27 20:38:15.799 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후춧가루 약간
2025-06-27 20:38:15.799 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버섯(표고/느타리/팽이 등 기호에 따라) 한 줌[1][2][5]
2025-06-27 20:38:15.799 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버섯(표고/느타리/팽이 등 기호에 따라) 한 줌[1][2][5]
2025-06-27 20:38:15.800 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소고기는 키친타월로 핏물을 살짝 제거한 후 한입 크기로 썬다.
   2. 볼에 간장(5.5~6숟가락), 설탕(1.5숟가락), 다진 마늘(1숟가락), 맛술(1숟가락), 참기름(
2025-06-27 20:38:15.801 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:38:15.801 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소불고기용 소고기 600g
   - 양파 1개
   - 당근 1/3개
   - 대파 1대
   - 진간장 5.5~6숟가락
   - 설탕 1.5숟가락
   - 다진 마늘 1숟가락
   - 맛술 1숟가락
   - 참기름 1숟가락
   - 후춧가루 약간
   - 버섯(표고/느타리/팽이 등 기호에 따라) 한 줌[1][2][5]

조리 방법:
1. 소고기는 키친타월로 핏물을 살짝 제거한 후 한입 크기로 썬다.
   2. 볼에 간장(5.5~6숟가락), 설탕(1.5숟가락), 다진 마늘(1숟가락), 맛술(1숟가락), 참기름(1숟가락), 후춧가루를 넣고 양념장을 만들어 잘 섞는다[5][3].
   3. 소고기에 양념장을 넣고 잘 버무려 15~20분간 재운다.
   4. 양파, 당근, 대파는 먹기 좋은 크기로 썬다.
   5. 예열하지 않은 팬에 양념한 소고기, 양파, 당근, 대파(흰 부분)를 넣고 중약불에서 볶는다[5].
   6. 고기와 야채가 반쯤 익으면 남은 대파와 버섯(선택)을 넣고 볶는다.
   7. 국물이 자박하게 남을 때까지 고기와 야채가 모두 익도록 볶은 후 불을 끄고 그릇에 담아낸다.
2025-06-27 20:38:15.805 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:38:15.808 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 소불고기
2025-06-27 20:38:15.838 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:38:15.858 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 86
2025-06-27 20:39:16.063 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:39:16.069 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:39:16.075 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:39:16.080 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:39:16.086 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 소불고기 레시피알려줄래?, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:39:16.086 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:39:16.088 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:39:16.088 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:39:16.088 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 소불고기 레시피알려줄래?
2025-06-27 20:39:16.088 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:39:16.088 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:39:16.093 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:39:16.095 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:39:16.095 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:39:16.095 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 소불고기 레시피알려줄래?
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:39:16.095 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:39:44.274 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:39:44.275 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:39:44.275 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 소불고기

2. 카테고리: 한식

3. 조리 시간: 약 40분

4. 조리 방법:
   1. 소고기는 먹기 좋은 크기로 얇게 썰어줍니다.
   2. 볼에 간장 6큰술, 설탕 2큰술, 맛술 2큰술, 다진 마늘 1.5큰술, 참기름 1큰술, 후춧가루 약간, 사과즙 또는 배즙 5큰술(없으면 생략 가능)을 넣고 고루 섞어 양념장을 만듭니다[3][5].
   3. 썰어둔 소고기에 양념장을 부어 조물조물 재워줍니다. 20~30분 정도 숙성시켜 주세요[5].
   4. 양파, 당근, 대파, 버섯(팽이·느타리·표고 중 택)을 채 썹니다.
   5. 숙성된 소고기에 손질한 야채를 모두 넣고, 참기름 1큰술을 추가로 넣어 고루 섞습니다.
   6. 예열하지 않은 팬에 재료를 모두 넣고 중불에서 국물이 자작하게 남도록 볶아줍니다. 너무 센 불은 피합니다[5].
   7. 고기와 야채가 부드럽게 익으면 불을 끄고 바로 완성합니다.

5. 필요한 재료와 양:
   - 소고기(불고기용): 600g
   - 양파: 1개
   - 당근: 1/3개
   - 대파: 1대
   - 버섯(팽이, 느타리, 표고 중 선택): 1팩(약 100g)
   - 진간장: 6큰술
   - 설탕: 2큰술
   - 맛술: 2큰술
   - 다진 마늘: 1.5큰술
   - 참기름: 2큰술
   - 후춧가루: 약간
   - 사과즙 또는 배즙(선택): 5큰술

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2023/01/03/972ae7b2a78c2ccc0defbea0a30316e91.jpg

8. 요리 팁:
   - 과일즙(배즙, 사과즙)은 고기를 더욱 부드럽게 해주니 가능하면 넣어주세요.
   - 너무 센 불에서 조리하면 고기가 질겨질 수 있으니 중불에서 천천히 익히세요.
   - 한 번에 먹을 양만 볶아내고, 남은 양념고기는 냉장 보관 후 바로 꺼내어 볶아도 됩니다.
   - 기호에 따라 청양고추를 썰어 넣으면 매콤한 맛을 더할 수 있습니다.

※ 새우 등 알레르기 걱정 재료는 본 레시피에 포함되어 있지 않습니다.
2025-06-27 20:39:44.289 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:39:44.296 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 20:39:44.296 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2023/01/03/972ae7b2a78c2ccc0defbea0a30316e91.jpg
2025-06-27 20:39:44.296 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2023/01/03/972ae7b2a78c2ccc0defbea0a30316e91.jpg
2025-06-27 20:39:44.296 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기(불고기용): 600g
   - 양파: 1개
   - 당근: 1/3개
   - 대파: 1대
   - 버섯(팽이, 느타리, 표고 중 선택): 1팩(약 100g)
   - 진간장: 6큰술
   - 설탕: 2큰술
   - 맛술: 2큰술
   - 다진 마늘: 1.5큰술
   - 참기름: 2큰술
   - 후춧가루: 약간
   - 사과즙 또는 배즙(선택): 5큰술
2025-06-27 20:39:44.297 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-27 20:39:44.297 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기(불고기용): 600g
2025-06-27 20:39:44.297 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 소고기(불고기용), Amount: 600g
2025-06-27 20:39:44.297 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기(불고기용), Amount: 600g
2025-06-27 20:39:44.301 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.315 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기(불고기용)' not found in DB. Skipping.
2025-06-27 20:39:44.315 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파: 1개
2025-06-27 20:39:44.315 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 양파, Amount: 1개
2025-06-27 20:39:44.315 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-27 20:39:44.317 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.318 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 20:39:44.319 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근: 1/3개
2025-06-27 20:39:44.319 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 당근, Amount: 1/3개
2025-06-27 20:39:44.319 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 당근, Amount: 1/3개
2025-06-27 20:39:44.321 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.325 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '당근' not found in DB. Skipping.
2025-06-27 20:39:44.325 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파: 1대
2025-06-27 20:39:44.326 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 대파, Amount: 1대
2025-06-27 20:39:44.326 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-27 20:39:44.327 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.345 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-27 20:39:44.346 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버섯(팽이, 느타리, 표고 중 선택): 1팩(약 100g)
2025-06-27 20:39:44.346 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 버섯(팽이, 느타리, 표고 중 선택), Amount: 1팩(약 100g)
2025-06-27 20:39:44.346 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 버섯(팽이, 느타리, 표고 중 선택), Amount: 1팩(약 100g)
2025-06-27 20:39:44.348 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.348 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '버섯(팽이, 느타리, 표고 중 선택)' not found in DB. Skipping.
2025-06-27 20:39:44.348 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장: 6큰술
2025-06-27 20:39:44.349 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 진간장, Amount: 6큰술
2025-06-27 20:39:44.349 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 6큰술
2025-06-27 20:39:44.352 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.353 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-27 20:39:44.353 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕: 2큰술
2025-06-27 20:39:44.353 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 설탕, Amount: 2큰술
2025-06-27 20:39:44.353 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 2큰술
2025-06-27 20:39:44.355 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.356 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-27 20:39:44.356 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술: 2큰술
2025-06-27 20:39:44.356 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 맛술, Amount: 2큰술
2025-06-27 20:39:44.356 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 2큰술
2025-06-27 20:39:44.357 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.358 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-27 20:39:44.358 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘: 1.5큰술
2025-06-27 20:39:44.358 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 마늘, Amount: 1.5큰술
2025-06-27 20:39:44.358 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 마늘, Amount: 1.5큰술
2025-06-27 20:39:44.360 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.362 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 마늘' not found in DB. Skipping.
2025-06-27 20:39:44.362 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름: 2큰술
2025-06-27 20:39:44.362 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 참기름, Amount: 2큰술
2025-06-27 20:39:44.362 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 2큰술
2025-06-27 20:39:44.364 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.364 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-27 20:39:44.364 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후춧가루: 약간
2025-06-27 20:39:44.364 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 후춧가루, Amount: 약간
2025-06-27 20:39:44.364 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 후춧가루, Amount: 약간
2025-06-27 20:39:44.366 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.367 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '후춧가루' not found in DB. Skipping.
2025-06-27 20:39:44.367 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 사과즙 또는 배즙(선택): 5큰술
2025-06-27 20:39:44.367 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 사과즙 또는 배즙(선택), Amount: 5큰술
2025-06-27 20:39:44.367 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 사과즙 또는 배즙(선택), Amount: 5큰술
2025-06-27 20:39:44.370 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:39:44.370 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '사과즙 또는 배즙(선택)' not found in DB. Skipping.
2025-06-27 20:39:44.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소고기는 먹기 좋은 크기로 얇게 썰어줍니다.
   2. 볼에 간장 6큰술, 설탕 2큰술, 맛술 2큰술, 다진 마늘 1.5큰술, 참기름 1큰술, 후춧가루 약간, 사과즙 또는 배
2025-06-27 20:39:44.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:39:44.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기(불고기용): 600g
   - 양파: 1개
   - 당근: 1/3개
   - 대파: 1대
   - 버섯(팽이, 느타리, 표고 중 선택): 1팩(약 100g)
   - 진간장: 6큰술
   - 설탕: 2큰술
   - 맛술: 2큰술
   - 다진 마늘: 1.5큰술
   - 참기름: 2큰술
   - 후춧가루: 약간
   - 사과즙 또는 배즙(선택): 5큰술

조리 방법:
1. 소고기는 먹기 좋은 크기로 얇게 썰어줍니다.
   2. 볼에 간장 6큰술, 설탕 2큰술, 맛술 2큰술, 다진 마늘 1.5큰술, 참기름 1큰술, 후춧가루 약간, 사과즙 또는 배즙 5큰술(없으면 생략 가능)을 넣고 고루 섞어 양념장을 만듭니다[3][5].
   3. 썰어둔 소고기에 양념장을 부어 조물조물 재워줍니다. 20~30분 정도 숙성시켜 주세요[5].
   4. 양파, 당근, 대파, 버섯(팽이·느타리·표고 중 택)을 채 썹니다.
   5. 숙성된 소고기에 손질한 야채를 모두 넣고, 참기름 1큰술을 추가로 넣어 고루 섞습니다.
   6. 예열하지 않은 팬에 재료를 모두 넣고 중불에서 국물이 자작하게 남도록 볶아줍니다. 너무 센 불은 피합니다[5].
   7. 고기와 야채가 부드럽게 익으면 불을 끄고 바로 완성합니다.
2025-06-27 20:39:44.372 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:39:44.374 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 소불고기
2025-06-27 20:44:18.723 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:44:18.737 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:44:18.756 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:44:18.762 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:44:18.769 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 어묵탕 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:44:18.769 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:44:18.772 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:44:18.772 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:44:18.772 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 어묵탕 레시피
2025-06-27 20:44:18.772 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:44:18.772 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:44:18.780 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:44:18.782 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:44:18.782 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:44:18.783 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 어묵탕 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:44:18.783 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:44:41.854 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:44:41.855 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:44:41.855 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 어묵탕

2. 카테고리: 한식

3. 조리 시간: 약 30분

4. 조리 방법:
   1. 멸치와 다시마로 육수를 만듭니다. 냄비에 물 1.5L를 붓고, 멸치(20마리)와 다시마(1장)를 넣어 10~15분간 팔팔 끓인 후 다시마는 10분 뒤 건지고, 멸치는 15분 후 모두 건져냅니다[5][1].
   2. 무(100g)는 도톰하게 썰고, 대파(2줄)는 큼직하게 어슷 썹니다. 청양고추(4개)와 홍고추(1개)는 송송 썰어 준비합니다[5][4].
   3. 육수에 무를 넣고 부드럽게 익을 때까지 5분 정도 끓입니다[5][1].
   4. 준비한 어묵(모듬어묵, 약 400g)을 먹기 좋게 썰어 육수에 넣고 한소끔 끓입니다[5][4].
   5. 국간장(1숟갈), 다진마늘(1숟갈), 참치액(3숟갈), 미림(1잔), 소금 한 꼬집, 후추 약간을 넣어 간을 맞춥니다[5].
   6. 대파, 청양고추, 홍고추를 넣고 중약불에서 5~10분간 끓인 뒤, 간을 보고 필요하면 소금으로 추가 간을 합니다[5][4].
   7. 모든 재료가 어우러지면 약한 불로 데워가며 식탁에 올려냅니다.

5. 필요한 재료와 양:
   - 모듬어묵: 약 400g
   - 무: 100g
   - 대파: 2줄
   - 청양고추: 4개
   - 홍고추: 1개
   - 다시멸치: 20마리
   - 다시마: 1장 (5x5cm 내외)
   - 물: 1.5L
   - 국간장: 1숟갈
   - 다진마늘: 1숟갈
   - 참치액: 3숟갈
   - 미림: 1잔
   - 소금: 한 꼬집
   - 후추: 약간

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2019/03/02/75a7556c7e181d5aa1d1e5eefdfd55371.jpg

8. 요리 팁:
   - 어묵을 미리 뜨거운 물에 살짝 데치면 기름맛이 빠져 국물이 더 깔끔합니다.
   - 무를 충분히 끓여 우려내면 국물이 더욱 시원해집니다.
   - 마무리로 후추를 약간 뿌려주면 풍미가 살아납니다.

※ 새우 알레르기가 있다면, 새우가 들어간 어묵을 피하고 "어묵 성분표"를 꼭 확인하세요. 시중 모듬어묵 중 일부는 새우 성분이 함유될 수 있으므로, 새우가 포함되지 않은 어묵을 사용하거나, 어묵집에서 직접 구매시 새우 미함유 여부를 반드시 확인하세요.
2025-06-27 20:44:41.867 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:44:41.870 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 20:44:41.870 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2019/03/02/75a7556c7e181d5aa1d1e5eefdfd55371.jpg
2025-06-27 20:44:41.870 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2019/03/02/75a7556c7e181d5aa1d1e5eefdfd55371.jpg
2025-06-27 20:44:41.870 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 모듬어묵: 약 400g
   - 무: 100g
   - 대파: 2줄
   - 청양고추: 4개
   - 홍고추: 1개
   - 다시멸치: 20마리
   - 다시마: 1장 (5x5cm 내외)
   - 물: 1.5L
   - 국간장: 1숟갈
   - 다진마늘: 1숟갈
   - 참치액: 3숟갈
   - 미림: 1잔
   - 소금: 한 꼬집
   - 후추: 약간
2025-06-27 20:44:41.870 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-27 20:44:41.870 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 모듬어묵: 약 400g
2025-06-27 20:44:41.870 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 모듬어묵, Amount: 약 400g
2025-06-27 20:44:41.870 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 모듬어묵, Amount: 약 400g
2025-06-27 20:44:41.875 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.878 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '모듬어묵' not found in DB. Skipping.
2025-06-27 20:44:41.878 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 무: 100g
2025-06-27 20:44:41.878 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 무, Amount: 100g
2025-06-27 20:44:41.878 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 무, Amount: 100g
2025-06-27 20:44:41.880 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.881 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '무' not found in DB. Skipping.
2025-06-27 20:44:41.881 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파: 2줄
2025-06-27 20:44:41.881 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 대파, Amount: 2줄
2025-06-27 20:44:41.881 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 2줄
2025-06-27 20:44:41.882 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.883 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-27 20:44:41.883 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추: 4개
2025-06-27 20:44:41.883 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 청양고추, Amount: 4개
2025-06-27 20:44:41.883 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 4개
2025-06-27 20:44:41.884 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.885 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-27 20:44:41.885 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 홍고추: 1개
2025-06-27 20:44:41.885 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 홍고추, Amount: 1개
2025-06-27 20:44:41.885 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 홍고추, Amount: 1개
2025-06-27 20:44:41.887 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.888 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '홍고추' not found in DB. Skipping.
2025-06-27 20:44:41.888 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다시멸치: 20마리
2025-06-27 20:44:41.888 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다시멸치, Amount: 20마리
2025-06-27 20:44:41.888 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다시멸치, Amount: 20마리
2025-06-27 20:44:41.890 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.890 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '다시멸치' not found in DB. Skipping.
2025-06-27 20:44:41.890 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다시마: 1장 (5x5cm 내외)
2025-06-27 20:44:41.891 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다시마, Amount: 1장 (5x5cm 내외)
2025-06-27 20:44:41.891 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다시마, Amount: 1장 (5x5cm 내외)
2025-06-27 20:44:41.897 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.899 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '다시마' not found in DB. Skipping.
2025-06-27 20:44:41.900 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물: 1.5L
2025-06-27 20:44:41.900 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 물, Amount: 1.5L
2025-06-27 20:44:41.900 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 1.5L
2025-06-27 20:44:41.901 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.902 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-27 20:44:41.902 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 국간장: 1숟갈
2025-06-27 20:44:41.902 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 국간장, Amount: 1숟갈
2025-06-27 20:44:41.902 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 국간장, Amount: 1숟갈
2025-06-27 20:44:41.905 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.907 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '국간장' not found in DB. Skipping.
2025-06-27 20:44:41.907 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진마늘: 1숟갈
2025-06-27 20:44:41.907 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진마늘, Amount: 1숟갈
2025-06-27 20:44:41.907 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진마늘, Amount: 1숟갈
2025-06-27 20:44:41.908 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.908 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진마늘' not found in DB. Skipping.
2025-06-27 20:44:41.909 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참치액: 3숟갈
2025-06-27 20:44:41.909 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 참치액, Amount: 3숟갈
2025-06-27 20:44:41.909 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참치액, Amount: 3숟갈
2025-06-27 20:44:41.909 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.910 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '참치액' not found in DB. Skipping.
2025-06-27 20:44:41.911 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미림: 1잔
2025-06-27 20:44:41.911 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 미림, Amount: 1잔
2025-06-27 20:44:41.911 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 미림, Amount: 1잔
2025-06-27 20:44:41.913 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.915 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '미림' not found in DB. Skipping.
2025-06-27 20:44:41.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금: 한 꼬집
2025-06-27 20:44:41.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 소금, Amount: 한 꼬집
2025-06-27 20:44:41.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 한 꼬집
2025-06-27 20:44:41.916 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.917 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-27 20:44:41.917 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추: 약간
2025-06-27 20:44:41.917 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 후추, Amount: 약간
2025-06-27 20:44:41.917 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 후추, Amount: 약간
2025-06-27 20:44:41.917 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:44:41.918 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '후추' not found in DB. Skipping.
2025-06-27 20:44:41.918 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 멸치와 다시마로 육수를 만듭니다. 냄비에 물 1.5L를 붓고, 멸치(20마리)와 다시마(1장)를 넣어 10~15분간 팔팔 끓인 후 다시마는 10분 뒤 건지고, 멸치는 15분 
2025-06-27 20:44:41.918 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:44:41.918 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 모듬어묵: 약 400g
   - 무: 100g
   - 대파: 2줄
   - 청양고추: 4개
   - 홍고추: 1개
   - 다시멸치: 20마리
   - 다시마: 1장 (5x5cm 내외)
   - 물: 1.5L
   - 국간장: 1숟갈
   - 다진마늘: 1숟갈
   - 참치액: 3숟갈
   - 미림: 1잔
   - 소금: 한 꼬집
   - 후추: 약간

조리 방법:
1. 멸치와 다시마로 육수를 만듭니다. 냄비에 물 1.5L를 붓고, 멸치(20마리)와 다시마(1장)를 넣어 10~15분간 팔팔 끓인 후 다시마는 10분 뒤 건지고, 멸치는 15분 후 모두 건져냅니다[5][1].
   2. 무(100g)는 도톰하게 썰고, 대파(2줄)는 큼직하게 어슷 썹니다. 청양고추(4개)와 홍고추(1개)는 송송 썰어 준비합니다[5][4].
   3. 육수에 무를 넣고 부드럽게 익을 때까지 5분 정도 끓입니다[5][1].
   4. 준비한 어묵(모듬어묵, 약 400g)을 먹기 좋게 썰어 육수에 넣고 한소끔 끓입니다[5][4].
   5. 국간장(1숟갈), 다진마늘(1숟갈), 참치액(3숟갈), 미림(1잔), 소금 한 꼬집, 후추 약간을 넣어 간을 맞춥니다[5].
   6. 대파, 청양고추, 홍고추를 넣고 중약불에서 5~10분간 끓인 뒤, 간을 보고 필요하면 소금으로 추가 간을 합니다[5][4].
   7. 모든 재료가 어우러지면 약한 불로 데워가며 식탁에 올려냅니다.
2025-06-27 20:44:41.919 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:44:41.920 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 어묵탕
2025-06-27 20:44:41.922 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:44:41.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 87
2025-06-27 20:46:16.401 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:46:16.423 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:46:16.431 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:46:16.433 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:46:16.438 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 제육볶음 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:46:16.439 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:46:16.440 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:46:16.440 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:46:16.441 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육볶음 레시피
2025-06-27 20:46:16.441 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:46:16.441 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:46:16.447 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:46:16.449 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:46:16.449 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:46:16.449 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 제육볶음 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:46:16.449 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:46:24.277 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:46:24.279 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:46:24.279 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육볶음

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 돼지고기(앞다리살 또는 목살) 600g을 한 입 크기로 썰고, 양파(1개), 대파(1뿌리), 당근(1/2개), 청양고추(2~3개)를 먹기 좋은 크기로 손질합니다[2][5].
   2. 팬에 식용유를 두르고 돼지고기를 중불에서 볶다가 고기의 겉면이 익기 시작하면 다진 마늘 1.5큰술, 미원 1/2스푼(선택)를 넣고 볶습니다[5][4].
   3. 설탕 2큰술, 고춧가루 2큰술, 고추장 2큰술, 진간장 2~3큰술, 후추 약간, 물엿 또는 조청 1큰술, 참기름 1큰술을 미리 섞어 양념장을 만듭니다[1][4][5].
   4. 고기가 반쯤 익으면 만들어둔 양념장을 모두 넣고 고기와 잘 섞으며 볶아줍니다[4][5].
   5. 2~3분 뒤 손질한 채소들(양파, 대파, 당근, 청양고추)을 넣고 중불에서 채소가 익을 때까지 볶아줍니다[5].
   6. 마지막에 통깨를 솔솔 뿌려 마무리합니다.

5. 필요한 재료와 양:
   - 돼지고기(앞다리살/목살) 600g
   - 양파 1개
   - 당근 1/2개
   - 대파 1뿌리
   - 청양고추 2~3개
   - 식용유 1큰술
   - 다진 마늘 1.5큰술
   - 고춧가루 2큰술
   - 고추장 2큰술
   - 진간장 2~3큰술
   - 설탕 2큰술
   - 물엿(또는 조청) 1큰술
   - 참기름 1큰술
   - 통깨 약간
   - 미원 1/2스푼(선택)
   - 후추 약간

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2015/05/28/28b7f484cdade9a353b4b6f56e0544b81.jpg

8. 요리 팁:
   - 돼지고기 부위는 앞다리살, 목살 등 비계가 적당히 섞인 부위를 사용해야 풍미가 좋고 식감이 부드럽습니다.
   - 양념장은 미리 만들어 두면 고기와 더 잘 어우러집니다.
   - 설탕을 먼저 넣고 볶아야 단맛이 잘 배어들어 감칠맛이 올라갑니다.
   - 채소는 마지막에 넣어야 아삭한 식감을 살릴 수 있습니다.
   - 매운맛이 강한 게 싫을 경우 청양고추 대신 풋고추를 사용하거나 고추가루 양을 줄이세요.

※ 새우 등 알레르기 유발 재료는 포함되어 있지 않으므로 안심하고 드셔도 됩니다.
2025-06-27 20:46:24.285 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:46:24.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 20:46:24.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2015/05/28/28b7f484cdade9a353b4b6f56e0544b81.jpg
2025-06-27 20:46:24.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2015/05/28/28b7f484cdade9a353b4b6f56e0544b81.jpg
2025-06-27 20:46:24.290 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살/목살) 600g
   - 양파 1개
   - 당근 1/2개
   - 대파 1뿌리
   - 청양고추 2~3개
   - 식용유 1큰술
   - 다진 마늘 1.5큰술
   - 고춧가루 2큰술
   - 고추장 2큰술
   - 진간장 2~3큰술
   - 설탕 2큰술
   - 물엿(또는 조청) 1큰술
   - 참기름 1큰술
   - 통깨 약간
   - 미원 1/2스푼(선택)
   - 후추 약간
2025-06-27 20:46:24.290 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 16
2025-06-27 20:46:24.290 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살/목살) 600g
2025-06-27 20:46:24.290 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 돼지고기(앞다리살/목살) 600g
2025-06-27 20:46:24.290 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-27 20:46:24.290 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-27 20:46:24.290 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-27 20:46:24.294 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:46:24.296 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-27 20:46:24.296 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/2개
2025-06-27 20:46:24.296 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/2개
2025-06-27 20:46:24.296 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1뿌리
2025-06-27 20:46:24.296 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1뿌리
2025-06-27 20:46:24.296 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1뿌리
2025-06-27 20:46:24.297 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:46:24.298 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-27 20:46:24.299 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 2~3개
2025-06-27 20:46:24.300 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 청양고추 2~3개
2025-06-27 20:46:24.301 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1큰술
2025-06-27 20:46:24.302 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 1큰술
2025-06-27 20:46:24.302 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-27 20:46:24.304 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:46:24.320 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-27 20:46:24.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1.5큰술
2025-06-27 20:46:24.320 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 1.5큰술
2025-06-27 20:46:24.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 2큰술
2025-06-27 20:46:24.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 2큰술
2025-06-27 20:46:24.320 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 2큰술
2025-06-27 20:46:24.321 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:46:24.323 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-27 20:46:24.323 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 2큰술
2025-06-27 20:46:24.323 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 2큰술
2025-06-27 20:46:24.323 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 2큰술
2025-06-27 20:46:24.324 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:46:24.325 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-27 20:46:24.325 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 2~3큰술
2025-06-27 20:46:24.325 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 진간장 2~3큰술
2025-06-27 20:46:24.325 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 2큰술
2025-06-27 20:46:24.325 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 2큰술
2025-06-27 20:46:24.325 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 2큰술
2025-06-27 20:46:24.326 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:46:24.327 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-27 20:46:24.327 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물엿(또는 조청) 1큰술
2025-06-27 20:46:24.327 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 물엿(또는 조청) 1큰술
2025-06-27 20:46:24.327 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-27 20:46:24.327 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-27 20:46:24.327 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-27 20:46:24.328 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 약간
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 통깨 약간
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미원 1/2스푼(선택)
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 미원 1/2스푼(선택)
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기(앞다리살 또는 목살) 600g을 한 입 크기로 썰고, 양파(1개), 대파(1뿌리), 당근(1/2개), 청양고추(2~3개)를 먹기 좋은 크기로 손질합니다[2][5].

2025-06-27 20:46:24.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:46:24.329 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살/목살) 600g
   - 양파 1개
   - 당근 1/2개
   - 대파 1뿌리
   - 청양고추 2~3개
   - 식용유 1큰술
   - 다진 마늘 1.5큰술
   - 고춧가루 2큰술
   - 고추장 2큰술
   - 진간장 2~3큰술
   - 설탕 2큰술
   - 물엿(또는 조청) 1큰술
   - 참기름 1큰술
   - 통깨 약간
   - 미원 1/2스푼(선택)
   - 후추 약간

조리 방법:
1. 돼지고기(앞다리살 또는 목살) 600g을 한 입 크기로 썰고, 양파(1개), 대파(1뿌리), 당근(1/2개), 청양고추(2~3개)를 먹기 좋은 크기로 손질합니다[2][5].
   2. 팬에 식용유를 두르고 돼지고기를 중불에서 볶다가 고기의 겉면이 익기 시작하면 다진 마늘 1.5큰술, 미원 1/2스푼(선택)를 넣고 볶습니다[5][4].
   3. 설탕 2큰술, 고춧가루 2큰술, 고추장 2큰술, 진간장 2~3큰술, 후추 약간, 물엿 또는 조청 1큰술, 참기름 1큰술을 미리 섞어 양념장을 만듭니다[1][4][5].
   4. 고기가 반쯤 익으면 만들어둔 양념장을 모두 넣고 고기와 잘 섞으며 볶아줍니다[4][5].
   5. 2~3분 뒤 손질한 채소들(양파, 대파, 당근, 청양고추)을 넣고 중불에서 채소가 익을 때까지 볶아줍니다[5].
   6. 마지막에 통깨를 솔솔 뿌려 마무리합니다.
2025-06-27 20:46:24.330 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:46:24.357 [http-nio-8080-exec-5] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 16 results were returned
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:301)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:244)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:479)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:166)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.NonUniqueResultException: Query did not return a unique result: 16 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 131 common frames omitted
2025-06-27 20:47:33.513 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:47:33.520 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:47:33.543 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:47:33.546 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:47:33.552 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 돈가스덮밥(가츠동) 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:47:33.552 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:47:33.554 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:47:33.554 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:47:33.554 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 돈가스덮밥(가츠동) 레시피
2025-06-27 20:47:33.554 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:47:33.554 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:47:33.559 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:47:33.561 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:47:33.561 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:47:33.561 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 돈가스덮밥(가츠동) 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:47:33.561 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:47:45.114 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:47:45.115 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:47:45.115 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 돈가스덮밥(가츠동)

2. 카테고리: 일식

3. 조리 시간: 30분

4. 조리 방법:
   1. 냉동 또는 생 돈가스를 준비하여 180℃로 예열된 에어프라이어에서 12분간 조리하거나, 프라이팬에 식용유를 넉넉히 두르고 앞뒤로 노릇하게 튀깁니다[3][5].
   2. 돈가스가 익는 동안 양파는 채 썰고, 파는 송송 썰어둡니다[5].
   3. 볼에 계란 2개를 풀어줍니다[1][2][5].
   4. 작은 냄비나 프라이팬에 물 90ml(또는 6큰술), 간장 3큰술, 맛술 1큰술(또는 3큰술), 설탕 1큰술(또는 2큰술)을 넣고 설탕이 녹도록 잘 섞어 끓입니다[4][5].
   5. 양파를 소스에 넣고 1분 정도 끓여 양파의 단맛이 배도록 합니다[4].
   6. 튀겨낸 돈가스를 먹기 좋게 길게 썰어 양파 위에 얹고, 풀어둔 계란을 골고루 부어줍니다[4][5].
   7. 뚜껑을 덮고 약불에서 계란이 반숙 정도로 익을 때까지 1~2분 더 조리합니다.
   8. 밥 위에 완성된 돈가스, 양파, 소스, 계란을 한 번에 얹어줍니다. 송송 썬 파, 통깨 등은 고명으로 올립니다[1][4][5].

5. 필요한 재료와 양:
   - 돈가스 1장
   - 밥 1공기
   - 양파 1/2개
   - 계란 2개
   - 파 1/5개(또는 쪽파, 대파)
   - 간장 3큰술
   - 설탕 1~2큰술(취향에 따라 조절)
   - 맛술 1~3큰술(없을 경우 생략 가능)
   - 물 90ml(또는 6큰술)
   - 식용유(튀김 시 사용)
   - 통깨, 후춧가루 약간(선택)

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/09/27/0cdcc6a6e6f9e12d1e6de384eae005e91.jpg

8. 요리 팁:
   - 돈가스는 미리 준비된 냉동제품을 쓰면 간편하며, 직접 만들 경우 돼지고기를 두드려 연하게 한 뒤, 소금·후추 간을 하고 밀가루→계란물→빵가루 순으로 튀김옷을 입혀 튀겨줍니다[3].
   - 계란은 너무 익히지 않고 반숙 정도로 하면 부드러운 식감이 살아납니다[4][5].
   - 소스의 단맛과 짠맛은 입맛에 맞게 설탕과 간장 비율을 조절하세요[4].
   - 밥 위에 곧바로 돈가스와 소스를 올릴 때, 밥이 눅눅해지지 않도록 소스의 양을 조절하면 더욱 맛있습니다.

**알레르기 정보**: 본 레시피에는 새우가 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.
2025-06-27 20:47:45.121 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:47:45.125 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 일식
2025-06-27 20:47:45.125 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2016/09/27/0cdcc6a6e6f9e12d1e6de384eae005e91.jpg
2025-06-27 20:47:45.125 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/09/27/0cdcc6a6e6f9e12d1e6de384eae005e91.jpg
2025-06-27 20:47:45.126 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돈가스 1장
   - 밥 1공기
   - 양파 1/2개
   - 계란 2개
   - 파 1/5개(또는 쪽파, 대파)
   - 간장 3큰술
   - 설탕 1~2큰술(취향에 따라 조절)
   - 맛술 1~3큰술(없을 경우 생략 가능)
   - 물 90ml(또는 6큰술)
   - 식용유(튀김 시 사용)
   - 통깨, 후춧가루 약간(선택)
2025-06-27 20:47:45.126 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 11
2025-06-27 20:47:45.126 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돈가스 1장
2025-06-27 20:47:45.129 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 돈가스, Amount: 1장
2025-06-27 20:47:45.129 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 돈가스, Amount: 1장
2025-06-27 20:47:45.132 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:45.135 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '돈가스' not found in DB. Skipping.
2025-06-27 20:47:45.135 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기
2025-06-27 20:47:45.135 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-27 20:47:45.135 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-27 20:47:45.138 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:45.139 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-27 20:47:45.139 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-27 20:47:45.139 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-27 20:47:45.139 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 2개
2025-06-27 20:47:45.139 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 2개
2025-06-27 20:47:45.139 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 2개
2025-06-27 20:47:45.140 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:45.141 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-27 20:47:45.141 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파 1/5개(또는 쪽파, 대파)
2025-06-27 20:47:45.141 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 파 1/5개(또는 쪽파, 대파)
2025-06-27 20:47:45.141 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 3큰술
2025-06-27 20:47:45.141 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 3큰술
2025-06-27 20:47:45.141 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 3큰술
2025-06-27 20:47:45.142 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:45.143 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-27 20:47:45.143 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1~2큰술(취향에 따라 조절)
2025-06-27 20:47:45.143 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 설탕 1~2큰술(취향에 따라 조절)
2025-06-27 20:47:45.143 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 1~3큰술(없을 경우 생략 가능)
2025-06-27 20:47:45.143 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 맛술 1~3큰술(없을 경우 생략 가능)
2025-06-27 20:47:45.143 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 90ml(또는 6큰술)
2025-06-27 20:47:45.143 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 90ml
2025-06-27 20:47:45.143 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 90ml
2025-06-27 20:47:45.144 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:45.145 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-27 20:47:45.145 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유(튀김 시 사용)
2025-06-27 20:47:45.145 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유(튀김 시 사용)
2025-06-27 20:47:45.145 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨, 후춧가루 약간(선택)
2025-06-27 20:47:45.145 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 통깨, 후춧가루 약간(선택)
2025-06-27 20:47:45.145 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 냉동 또는 생 돈가스를 준비하여 180℃로 예열된 에어프라이어에서 12분간 조리하거나, 프라이팬에 식용유를 넉넉히 두르고 앞뒤로 노릇하게 튀깁니다[3][5].
   2. 돈가
2025-06-27 20:47:45.145 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:47:45.145 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돈가스 1장
   - 밥 1공기
   - 양파 1/2개
   - 계란 2개
   - 파 1/5개(또는 쪽파, 대파)
   - 간장 3큰술
   - 설탕 1~2큰술(취향에 따라 조절)
   - 맛술 1~3큰술(없을 경우 생략 가능)
   - 물 90ml(또는 6큰술)
   - 식용유(튀김 시 사용)
   - 통깨, 후춧가루 약간(선택)

조리 방법:
1. 냉동 또는 생 돈가스를 준비하여 180℃로 예열된 에어프라이어에서 12분간 조리하거나, 프라이팬에 식용유를 넉넉히 두르고 앞뒤로 노릇하게 튀깁니다[3][5].
   2. 돈가스가 익는 동안 양파는 채 썰고, 파는 송송 썰어둡니다[5].
   3. 볼에 계란 2개를 풀어줍니다[1][2][5].
   4. 작은 냄비나 프라이팬에 물 90ml(또는 6큰술), 간장 3큰술, 맛술 1큰술(또는 3큰술), 설탕 1큰술(또는 2큰술)을 넣고 설탕이 녹도록 잘 섞어 끓입니다[4][5].
   5. 양파를 소스에 넣고 1분 정도 끓여 양파의 단맛이 배도록 합니다[4].
   6. 튀겨낸 돈가스를 먹기 좋게 길게 썰어 양파 위에 얹고, 풀어둔 계란을 골고루 부어줍니다[4][5].
   7. 뚜껑을 덮고 약불에서 계란이 반숙 정도로 익을 때까지 1~2분 더 조리합니다.
   8. 밥 위에 완성된 돈가스, 양파, 소스, 계란을 한 번에 얹어줍니다. 송송 썬 파, 통깨 등은 고명으로 올립니다[1][4][5].
2025-06-27 20:47:45.147 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:47:45.150 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 돈가스덮밥(가츠동)
2025-06-27 20:47:45.151 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:47:45.154 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 88
2025-06-27 20:47:49.905 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:47:49.907 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:47:49.910 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:47:49.911 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:47:49.916 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 어묵탕 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:47:49.916 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:47:49.917 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:47:49.917 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:47:49.917 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 어묵탕 레시피
2025-06-27 20:47:49.917 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:47:49.917 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:47:49.920 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:47:49.922 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:47:49.922 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:47:49.922 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 어묵탕 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:47:49.922 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:47:57.912 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:47:57.913 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:47:57.913 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 어묵탕

2. 카테고리: 한식

3. 조리 시간: 약 30분

4. 조리 방법:
   1. 무(약 300g)는 도톰하게 썰고, 양파(1/2개)도 큼직하게 썬다.
   2. 깊은 냄비에 물(2리터), 무, 양파, 멸치 한 줌, 건다시마(1장), 마늘(3알), 청양고추(2개)를 넣고 강불에서 10~15분 끓여 육수를 만든다. (거품은 걷어내기)
   3. 육수가 우러나면 건더기는 모두 건져내고, 국물만 남긴다.
   4. 어묵(1봉, 약 340g)은 먹기 좋은 크기로 썰거나 꼬치에 꽂는다.
   5. 육수에 떡볶이 떡(6개), 어묵을 넣고 5분 정도 끓인다.
   6. 진간장(1스푼), 국간장(1스푼), 소금(1/2스푼), 후추 약간, 쇠고기 다시다(1/2스푼)로 간을 맞춘다.
   7. 대파(1뿌리)는 어슷 썰어 넣고, 1~2분 정도 더 끓인다.
   8. 마지막에 쑥갓과 홍고추(1개)를 넣어 상차림 직전에 살짝 익힌다.

5. 필요한 재료와 양:
   - 어묵 1봉(약 340g)
   - 무 300g
   - 양파 1/2개
   - 멸치 한줌
   - 건다시마 1장
   - 마늘 3알
   - 청양고추 2개
   - 떡볶이 떡 6개
   - 진간장 1스푼
   - 국간장 1스푼
   - 소금 1/2스푼
   - 후추 약간
   - 쇠고기 다시다 1/2스푼 (생략 가능)
   - 대파 1뿌리
   - 쑥갓 약간
   - 홍고추 1개
   - 물 2리터

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/12/01/6877f3d683a58676a45cbbd4a1a4d9e31.jpg

8. 요리 팁:
   - 다시마는 끓는 물에 오래 두면 쓴맛이 나니 10분 이내로 건져내세요.
   - 간장과 소금은 간을 보며 조금씩 추가하세요.
   - 어묵에 새우가 들어간 제품도 있으니, 알레르기 주의 시 '야채/생선 어묵'을 꼭 확인하여 사용하세요. (새우 알레르기 주의)
   - 기호에 따라 고추나 쑥갓, 떡 등은 생략하거나 추가할 수 있습니다.

**알레르기 정보:**  
어묵 제품에 새우(크릴, 새우엑기스 등)가 포함된 경우가 있으니, 반드시 성분을 확인하고 야채 또는 생선 어묵(새우 미포함)으로 대체해 사용하세요.  
새우 성분이 포함된 어묵은 알레르기 재료가 포함되어 섭취할 수 없습니다.  
가능하면 시중에 '야채 어묵' 또는 '생선 어묵(새우 미포함)'을 선택해 동일한 조리 방법으로 사용하세요.

**새우 미사용 대체 레시피로 제안드렸습니다.**
2025-06-27 20:47:57.917 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:47:57.919 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 20:47:57.919 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2018/12/01/6877f3d683a58676a45cbbd4a1a4d9e31.jpg
2025-06-27 20:47:57.919 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/12/01/6877f3d683a58676a45cbbd4a1a4d9e31.jpg
2025-06-27 20:47:57.919 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 어묵 1봉(약 340g)
   - 무 300g
   - 양파 1/2개
   - 멸치 한줌
   - 건다시마 1장
   - 마늘 3알
   - 청양고추 2개
   - 떡볶이 떡 6개
   - 진간장 1스푼
   - 국간장 1스푼
   - 소금 1/2스푼
   - 후추 약간
   - 쇠고기 다시다 1/2스푼 (생략 가능)
   - 대파 1뿌리
   - 쑥갓 약간
   - 홍고추 1개
   - 물 2리터
2025-06-27 20:47:57.919 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 17
2025-06-27 20:47:57.919 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 어묵 1봉(약 340g)
2025-06-27 20:47:57.919 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 어묵, Amount: 1봉
2025-06-27 20:47:57.919 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 어묵, Amount: 1봉
2025-06-27 20:47:57.921 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.922 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '어묵' not found in DB. Skipping.
2025-06-27 20:47:57.922 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 무 300g
2025-06-27 20:47:57.922 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 무, Amount: 300g
2025-06-27 20:47:57.922 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 무, Amount: 300g
2025-06-27 20:47:57.923 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.924 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '무' not found in DB. Skipping.
2025-06-27 20:47:57.924 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-27 20:47:57.924 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-27 20:47:57.924 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 멸치 한줌
2025-06-27 20:47:57.924 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 멸치 한줌
2025-06-27 20:47:57.924 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 건다시마 1장
2025-06-27 20:47:57.924 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 건다시마, Amount: 1장
2025-06-27 20:47:57.924 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 건다시마, Amount: 1장
2025-06-27 20:47:57.925 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.926 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '건다시마' not found in DB. Skipping.
2025-06-27 20:47:57.926 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마늘 3알
2025-06-27 20:47:57.926 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 3알
2025-06-27 20:47:57.926 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 3알
2025-06-27 20:47:57.927 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.927 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-27 20:47:57.927 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 2개
2025-06-27 20:47:57.927 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 청양고추, Amount: 2개
2025-06-27 20:47:57.927 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 2개
2025-06-27 20:47:57.928 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.929 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-27 20:47:57.929 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 떡볶이 떡 6개
2025-06-27 20:47:57.929 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 떡, Amount: 6개
2025-06-27 20:47:57.929 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 떡, Amount: 6개
2025-06-27 20:47:57.929 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.930 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '떡' not found in DB. Skipping.
2025-06-27 20:47:57.930 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 1스푼
2025-06-27 20:47:57.930 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 진간장, Amount: 1스푼
2025-06-27 20:47:57.930 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 1스푼
2025-06-27 20:47:57.930 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.931 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-27 20:47:57.931 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 국간장 1스푼
2025-06-27 20:47:57.931 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 국간장, Amount: 1스푼
2025-06-27 20:47:57.931 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 국간장, Amount: 1스푼
2025-06-27 20:47:57.931 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '국간장' not found in DB. Skipping.
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/2스푼
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 1/2스푼
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 쇠고기 다시다 1/2스푼 (생략 가능)
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 쇠고기 다시다 1/2스푼 (생략 가능)
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1뿌리
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1뿌리
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1뿌리
2025-06-27 20:47:57.932 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.933 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-27 20:47:57.933 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 쑥갓 약간
2025-06-27 20:47:57.933 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 쑥갓 약간
2025-06-27 20:47:57.933 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 홍고추 1개
2025-06-27 20:47:57.933 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 홍고추, Amount: 1개
2025-06-27 20:47:57.933 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 홍고추, Amount: 1개
2025-06-27 20:47:57.933 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.934 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '홍고추' not found in DB. Skipping.
2025-06-27 20:47:57.934 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 2리터
2025-06-27 20:47:57.934 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 2리터
2025-06-27 20:47:57.934 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 2리터
2025-06-27 20:47:57.934 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:47:57.935 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-27 20:47:57.935 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 무(약 300g)는 도톰하게 썰고, 양파(1/2개)도 큼직하게 썬다.
   2. 깊은 냄비에 물(2리터), 무, 양파, 멸치 한 줌, 건다시마(1장), 마늘(3알), 청양고추
2025-06-27 20:47:57.935 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:47:57.935 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 어묵 1봉(약 340g)
   - 무 300g
   - 양파 1/2개
   - 멸치 한줌
   - 건다시마 1장
   - 마늘 3알
   - 청양고추 2개
   - 떡볶이 떡 6개
   - 진간장 1스푼
   - 국간장 1스푼
   - 소금 1/2스푼
   - 후추 약간
   - 쇠고기 다시다 1/2스푼 (생략 가능)
   - 대파 1뿌리
   - 쑥갓 약간
   - 홍고추 1개
   - 물 2리터

조리 방법:
1. 무(약 300g)는 도톰하게 썰고, 양파(1/2개)도 큼직하게 썬다.
   2. 깊은 냄비에 물(2리터), 무, 양파, 멸치 한 줌, 건다시마(1장), 마늘(3알), 청양고추(2개)를 넣고 강불에서 10~15분 끓여 육수를 만든다. (거품은 걷어내기)
   3. 육수가 우러나면 건더기는 모두 건져내고, 국물만 남긴다.
   4. 어묵(1봉, 약 340g)은 먹기 좋은 크기로 썰거나 꼬치에 꽂는다.
   5. 육수에 떡볶이 떡(6개), 어묵을 넣고 5분 정도 끓인다.
   6. 진간장(1스푼), 국간장(1스푼), 소금(1/2스푼), 후추 약간, 쇠고기 다시다(1/2스푼)로 간을 맞춘다.
   7. 대파(1뿌리)는 어슷 썰어 넣고, 1~2분 정도 더 끓인다.
   8. 마지막에 쑥갓과 홍고추(1개)를 넣어 상차림 직전에 살짝 익힌다.
2025-06-27 20:47:57.935 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:47:57.938 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 어묵탕
2025-06-27 20:48:35.894 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:48:35.909 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:48:35.917 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:48:35.920 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:48:35.924 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심 메뉴 추천해줄래?, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-27 20:48:35.924 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:48:35.926 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:48:35.926 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:48:35.926 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심 메뉴 추천해줄래?
2025-06-27 20:48:35.926 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:48:35.926 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-27 20:48:35.928 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:48:35.930 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-27 20:48:35.930 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:48:35.930 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심 메뉴 추천해줄래?
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-27 20:48:35.930 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:48:48.970 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:48:48.971 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-27 20:48:48.971 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 제육볶음**
- 카테고리: 한식
- 추천 이유: 점심에 든든하게 먹을 수 있고 남성분들이 선호하는 한식 메뉴입니다. 매콤하고 밥반찬으로 좋아 직장인 인기 점심 메뉴로 많이 선택됩니다[3].
- 예상 조리 시간: 20~25분
- 난이도: 중
- 개인화 고려사항: 새우 알레르기 재료가 없어 안전하며, 아침에 비해 점심에는 부담 없이 정식 한끼로 추천합니다.

**2. 김치찌개**
- 카테고리: 한식
- 추천 이유: 밥과 함께 먹기 좋은 국민 점심 메뉴로, 따뜻하고 개운하게 속을 풀어줍니다. 편하게 한그릇 식사로 즐기기에도 좋습니다[1][2][3].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우가 들어가지 않는 기본 레시피로 안전합니다.

**3. 소불고기덮밥**
- 카테고리: 한식
- 추천 이유: 간편하면서도 푸짐하게 한 그릇 식사가 가능해 직장인 점심 메뉴로 인기가 높습니다. 단백질, 채소를 골고루 섭취할 수 있어 건강도 챙길 수 있습니다[3][4].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 알레르기 성분이 없으며, 빠르게 만들 수 있어 점심시간에 적합합니다.

**4. 차돌된장찌개**
- 카테고리: 한식
- 추천 이유: 소화에 부담이 적고, 국물이 있어 깔끔하게 먹기 좋습니다. 고기와 채소가 함께 들어가 영양 면에서도 추천할 만합니다[3].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 없이 만들 수 있고, 아침 식사 후 위가 예민한 분들에게도 무난한 점심 메뉴입니다.

**5. 돼지고기볶음 덮밥**
- 카테고리: 한식
- 추천 이유: 볶아낸 돼지고기와 채소를 밥 위에 얹어 한 그릇으로 간편하게 먹을 수 있어 바쁜 점심에 제격입니다[5]. 덜 기름지고, 신선한 채소와 곁들이면 건강까지 챙길 수 있습니다.
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 미포함, 빠르고 간단하게 만들기 좋음.

### 전체 추천 요약
- 상황 분석: 내일 점심 식사로 적합한 메뉴를 추천했습니다. 점심은 아침에 비해 위가 덜 예민하므로 따뜻하고 든든한 한식 메뉴 위주로 구성했습니다.
- 추천 기준: 메뉴의 간편함, 영양성, 든든함, 빠른 조리, 한식 선호도를 우선적으로 고려했습니다.
- 개인화 고려사항: 새우 알레르기를 고려해 새우 성분이 전혀 없는 메뉴만 엄선했습니다. 아침과 달리 점심은 조금 더 든든하게 드셔도 부담이 적은 식단들로 제안드렸습니다.
- 추가 팁: 추천 메뉴들은 식당은 물론 집에서도 쉽게 조리할 수 있습니다. 만약 레시피가 궁금하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요!
2025-06-27 20:48:48.972 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-27 20:48:51.589 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:48:51.592 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:48:51.595 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:48:51.596 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:48:51.598 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 돼지고기볶음 덮밥 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:48:51.598 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:48:51.600 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:48:51.600 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:48:51.600 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 돼지고기볶음 덮밥 레시피
2025-06-27 20:48:51.600 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:48:51.600 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:48:51.603 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:48:51.604 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:48:51.604 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:48:51.604 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 돼지고기볶음 덮밥 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:48:51.604 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:49:01.104 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-27 20:49:01.104 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-27 20:49:01.104 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 돼지고기볶음 덮밥

2. 카테고리: 한식

3. 조리 시간: 25분

4. 조리 방법:
   1. 돼지고기(앞다리살 등)는 먹기 좋은 크기로 썬 뒤, 후춧가루를 약간 뿌려 밑간합니다.
   2. 양파는 채 썰고 대파는 송송 썹니다.
   3. 양념장을 준비합니다: 고춧가루 3스푼, 고추장 듬뿍 1스푼, 간장 2스푼, 설탕 1스푼, 다진 마늘 1스푼, 참기름 1스푼, 후춧가루 약간을 한데 섞어둡니다[1].
   4. 팬에 식용유를 두르고 대파를 먼저 볶다가, 양파와 돼지고기를 넣고 중불에서 익을 때까지 볶습니다.
   5. 돼지고기가 거의 익으면 양념장을 넣고 고루 섞으며 볶아줍니다.
   6. 양념이 고기에 잘 배고, 양파가 투명해질 때까지 볶아줍니다.
   7. 밥 위에 볶은 돼지고기와 채소를 넉넉히 올려 덮밥으로 완성합니다.

5. 필요한 재료와 양:
   - 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1대
   - 식용유 적당량
   - 고춧가루 3스푼
   - 고추장 1스푼(듬뿍)
   - 간장 2스푼
   - 설탕 1스푼
   - 다진 마늘 1스푼
   - 참기름 1스푼
   - 후춧가루 약간
   - 밥 1~2공기

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/03/26/fad674c9e86d98a44a31afdfa3e3b3de1.jpg

8. 요리 팁:
   - 돼지고기는 잡내 제거를 위해 후추와 다진 마늘을 충분히 사용하면 더 맛이 깔끔합니다.
   - 양파를 충분히 볶아주면 단맛이 우러나와 더 맛있고, 매운 맛이 덜해집니다.
   - 취향에 따라 고추나 청양고추를 추가하면 매콤하게 즐길 수 있습니다.
   - 고기가 질길 경우, 설탕 또는 배즙을 살짝 넣어 부드럽게 할 수 있습니다.

※ 본 레시피에는 새우 및 해산물이 들어가지 않으므로, 새우 알레르기가 있는 분도 안심하고 드실 수 있습니다.
2025-06-27 20:49:01.113 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:49:01.116 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-27 20:49:01.116 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2018/03/26/fad674c9e86d98a44a31afdfa3e3b3de1.jpg
2025-06-27 20:49:01.116 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/03/26/fad674c9e86d98a44a31afdfa3e3b3de1.jpg
2025-06-27 20:49:01.116 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1대
   - 식용유 적당량
   - 고춧가루 3스푼
   - 고추장 1스푼(듬뿍)
   - 간장 2스푼
   - 설탕 1스푼
   - 다진 마늘 1스푼
   - 참기름 1스푼
   - 후춧가루 약간
   - 밥 1~2공기
2025-06-27 20:49:01.117 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-27 20:49:01.117 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살 또는 목살) 300g
2025-06-27 20:49:01.117 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 돼지고기(앞다리살 또는 목살) 300g
2025-06-27 20:49:01.117 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-27 20:49:01.117 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-27 20:49:01.117 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대
2025-06-27 20:49:01.117 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-27 20:49:01.117 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-27 20:49:01.120 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:49:01.122 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-27 20:49:01.122 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 적당량
2025-06-27 20:49:01.124 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 적당량
2025-06-27 20:49:01.124 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 3스푼
2025-06-27 20:49:01.124 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 3스푼
2025-06-27 20:49:01.124 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 3스푼
2025-06-27 20:49:01.125 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:49:01.126 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-27 20:49:01.126 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 1스푼(듬뿍)
2025-06-27 20:49:01.126 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 1스푼
2025-06-27 20:49:01.126 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 1스푼
2025-06-27 20:49:01.128 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:49:01.129 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-27 20:49:01.129 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2스푼
2025-06-27 20:49:01.129 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2스푼
2025-06-27 20:49:01.129 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2스푼
2025-06-27 20:49:01.130 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:49:01.131 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-27 20:49:01.131 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1스푼
2025-06-27 20:49:01.131 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1스푼
2025-06-27 20:49:01.131 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1스푼
2025-06-27 20:49:01.133 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:49:01.133 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-27 20:49:01.133 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1스푼
2025-06-27 20:49:01.134 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1스푼
2025-06-27 20:49:01.134 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1스푼
2025-06-27 20:49:01.135 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:49:01.135 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-27 20:49:01.135 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1스푼
2025-06-27 20:49:01.136 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1스푼
2025-06-27 20:49:01.136 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1스푼
2025-06-27 20:49:01.137 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-27 20:49:01.137 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-27 20:49:01.137 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후춧가루 약간
2025-06-27 20:49:01.138 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후춧가루 약간
2025-06-27 20:49:01.138 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1~2공기
2025-06-27 20:49:01.138 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 밥 1~2공기
2025-06-27 20:49:01.138 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기(앞다리살 등)는 먹기 좋은 크기로 썬 뒤, 후춧가루를 약간 뿌려 밑간합니다.
   2. 양파는 채 썰고 대파는 송송 썹니다.
   3. 양념장을 준비합니다: 고춧가루
2025-06-27 20:49:01.138 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-27 20:49:01.138 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살 또는 목살) 300g
   - 양파 1/2개
   - 대파 1대
   - 식용유 적당량
   - 고춧가루 3스푼
   - 고추장 1스푼(듬뿍)
   - 간장 2스푼
   - 설탕 1스푼
   - 다진 마늘 1스푼
   - 참기름 1스푼
   - 후춧가루 약간
   - 밥 1~2공기

조리 방법:
1. 돼지고기(앞다리살 등)는 먹기 좋은 크기로 썬 뒤, 후춧가루를 약간 뿌려 밑간합니다.
   2. 양파는 채 썰고 대파는 송송 썹니다.
   3. 양념장을 준비합니다: 고춧가루 3스푼, 고추장 듬뿍 1스푼, 간장 2스푼, 설탕 1스푼, 다진 마늘 1스푼, 참기름 1스푼, 후춧가루 약간을 한데 섞어둡니다[1].
   4. 팬에 식용유를 두르고 대파를 먼저 볶다가, 양파와 돼지고기를 넣고 중불에서 익을 때까지 볶습니다.
   5. 돼지고기가 거의 익으면 양념장을 넣고 고루 섞으며 볶아줍니다.
   6. 양념이 고기에 잘 배고, 양파가 투명해질 때까지 볶아줍니다.
   7. 밥 위에 볶은 돼지고기와 채소를 넉넉히 올려 덮밥으로 완성합니다.
2025-06-27 20:49:01.139 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-27 20:49:01.140 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 돼지고기볶음 덮밥
2025-06-27 20:49:01.143 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-27 20:49:01.148 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 89
2025-06-27 20:51:00.072 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:51:00.082 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:51:00.105 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:51:00.108 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:51:00.115 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 제육볶음 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:51:00.115 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:51:00.118 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:51:00.118 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:51:00.118 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육볶음 레시피
2025-06-27 20:51:00.118 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:51:00.118 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:51:00.123 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:51:00.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:51:00.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:51:00.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 제육볶음 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:51:00.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:51:00.420 [http-nio-8080-exec-10] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 20:51:00.431 [http-nio-8080-exec-10] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 20:51:01.535 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:51:01.538 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:51:01.543 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:51:01.547 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:51:01.550 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 제육볶음 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:51:01.550 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:51:01.551 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:51:01.551 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:51:01.552 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육볶음 레시피
2025-06-27 20:51:01.552 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:51:01.552 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:51:01.554 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:51:01.555 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:51:01.555 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:51:01.555 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 제육볶음 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:51:01.555 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:51:01.960 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 20:51:01.962 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 20:51:46.814 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-27 20:51:46.830 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:51:46.834 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-27 20:51:46.837 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-27 20:51:46.842 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 김치찌개 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-27 20:51:46.843 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-27 20:51:46.844 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-27 20:51:46.844 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-27 20:51:46.844 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 김치찌개 레시피
2025-06-27 20:51:46.844 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-27 20:51:46.844 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-27 20:51:46.855 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-27 20:51:46.857 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-27 20:51:46.857 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-27 20:51:46.857 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 김치찌개 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-27 20:51:46.857 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-27 20:51:47.104 [http-nio-8080-exec-2] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 20:51:47.122 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-27 20:56:07.017 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-27 20:56:07.025 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-27 20:56:07.040 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
