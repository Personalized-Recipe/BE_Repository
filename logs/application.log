2025-06-30 00:00:01.293 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:00:01.307 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:00:01.311 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:00:01.314 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:00:01.317 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 00:00:27.241 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:00:27.246 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:00:27.250 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:00:27.253 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:00:27.255 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 00:03:53.426 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:03:53.476 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:03:53.488 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:03:53.490 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:03:53.523 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:03:53.543 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-30 00:03:53.568 [http-nio-8080-exec-10] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=6, sessionId=07fc5663-96a7-4fcb-a94f-ea9a4d3271e8, isUserMessage=true
2025-06-30 00:03:53.569 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 소고기미역국 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-30 00:03:53.570 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:03:53.573 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-30 00:03:53.573 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-30 00:03:53.573 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 소고기미역국 레시피 알려줘
2025-06-30 00:03:53.573 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-30 00:03:53.573 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-30 00:03:53.583 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 00:03:53.585 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-30 00:03:53.585 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-30 00:03:53.585 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 소고기미역국 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-30 00:03:53.585 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-30 00:04:02.185 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-30 00:04:02.186 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-30 00:04:02.186 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 소고기미역국

2. 카테고리: 한식

3. 조리 시간: 약 40분

4. 조리 방법:
   1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].

5. 필요한 재료와 양:
   - 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/ZuSko1j.jpg

8. 요리 팁:
   - 미역을 너무 오래 혹은 세게 씻으면 향이 약해질 수 있으니 적당히 조물조물해서 씻어주세요.
   - 소고기를 참기름과 함께 충분히 볶아야 누린내가 줄고 국물 맛이 훨씬 진해집니다.
   - 멸치액젓을 소량 넣으면 감칠맛이 더해지나, 국물이 탁해지지 않도록 적게 사용하세요[1][2].
   - 청주나 맛술을 소고기 볶을 때 함께 넣으면 잡내가 더 잘 잡힙니다[2].
2025-06-30 00:04:02.193 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 00:04:02.198 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-30 00:04:02.198 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/ZuSko1j.jpg
2025-06-30 00:04:02.199 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/ZuSko1j.jpg
2025-06-30 00:04:02.199 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/ZuSko1j.jpg
2025-06-30 00:04:02.199 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]
2025-06-30 00:04:02.199 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 10
2025-06-30 00:04:02.200 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 건미역 25g
2025-06-30 00:04:02.200 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 건미역, Amount: 25g
2025-06-30 00:04:02.200 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 건미역, Amount: 25g
2025-06-30 00:04:02.208 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:04:02.212 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '건미역' not found in DB. Skipping.
2025-06-30 00:04:02.213 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 양지(또는 국거리용) 250g
2025-06-30 00:04:02.213 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소고기 양지(또는 국거리용) 250g
2025-06-30 00:04:02.213 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1~1.5스푼
2025-06-30 00:04:02.213 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 1~1.5스푼
2025-06-30 00:04:02.213 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1~2스푼
2025-06-30 00:04:02.213 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 참기름 1~2스푼
2025-06-30 00:04:02.213 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 국간장 1~2스푼
2025-06-30 00:04:02.213 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 국간장 1~2스푼
2025-06-30 00:04:02.214 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-30 00:04:02.214 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-30 00:04:02.214 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 1300mL (또는 미역 불린 물)
2025-06-30 00:04:02.214 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 1300mL
2025-06-30 00:04:02.214 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 1300mL
2025-06-30 00:04:02.216 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:04:02.218 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-30 00:04:02.218 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 멸치액젓 1스푼 (선택)
2025-06-30 00:04:02.219 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 멸치액젓, Amount: 1스푼
2025-06-30 00:04:02.219 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 멸치액젓, Amount: 1스푼
2025-06-30 00:04:02.221 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:04:02.222 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '멸치액젓' not found in DB. Skipping.
2025-06-30 00:04:02.222 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-30 00:04:02.222 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-30 00:04:02.222 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 청주 반컵[2]
2025-06-30 00:04:02.222 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (선택) 청주 반컵[2]
2025-06-30 00:04:02.223 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 
2025-06-30 00:04:02.227 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-30 00:04:02.227 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 00:04:02.231 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:04:02.234 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 소고기미역국
2025-06-30 00:04:02.271 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-30 00:04:02.276 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 124
2025-06-30 00:04:02.282 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:04:02.286 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-30 00:04:02.288 [http-nio-8080-exec-10] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=6, sessionId=07fc5663-96a7-4fcb-a94f-ea9a4d3271e8, isUserMessage=false
2025-06-30 00:06:45.886 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:06:45.886 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:06:45.899 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:45.899 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:45.913 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:45.913 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:45.945 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:45.946 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:45.965 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:06:45.968 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:45.987 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:06:45.987 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:06:45.988 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:45.988 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:45.990 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:45.990 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:45.994 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:45.994 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:45.997 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:45.997 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:06:46.006 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:06:46.008 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:46.013 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:46.016 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:46.021 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:06:46.032 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:06:46.033 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:46.036 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:46.038 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:46.042 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:06:48.100 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:06:48.105 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:06:48.108 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:48.109 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:06:48.117 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:06:48.122 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 00:06:48.126 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:06:48.128 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '닭볶음탕'의 상세 레시피 정보가 DB에 없습니다.
2025-06-30 00:06:48.130 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:06:48.132 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '소고기미역국'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 124
2025-06-30 00:06:48.132 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:06:48.134 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '마파두부'의 상세 레시피 정보가 DB에 없습니다.
2025-06-30 00:06:48.135 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:06:48.136 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '김치전'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 119
2025-06-30 00:06:48.137 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:06:48.138 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '참치계란볶음밥'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 123
2025-06-30 00:06:48.138 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 00:06:48.141 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 참치계란볶음밥
2025-06-30 00:06:48.141 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/2k6r4lm.jpg, description=필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1]., title=참치계란볶음밥, category=한식, recipeId=123, cookingTime=15}
2025-06-30 00:06:48.141 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 00:06:48.142 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 소고기미역국
2025-06-30 00:06:48.142 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZuSko1j.jpg, description=필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2]., title=소고기미역국, category=한식, recipeId=124, cookingTime=30}
2025-06-30 00:07:21.003 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:07:21.007 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:07:21.032 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:07:21.035 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:07:21.042 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:07:21.046 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-30 00:07:21.054 [http-nio-8080-exec-8] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=6, sessionId=07fc5663-96a7-4fcb-a94f-ea9a4d3271e8, isUserMessage=true
2025-06-30 00:07:21.054 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 마파두부 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-30 00:07:21.055 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:07:21.058 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-30 00:07:21.058 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-30 00:07:21.058 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 마파두부 레시피 알려줘
2025-06-30 00:07:21.058 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-30 00:07:21.058 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-30 00:07:21.062 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 00:07:21.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-30 00:07:21.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-30 00:07:21.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 마파두부 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-30 00:07:21.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-30 00:07:28.308 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-30 00:07:28.309 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-30 00:07:28.309 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 마파두부

2. 카테고리: 중식

3. 조리 시간: 25분

4. 조리 방법:
   1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.

5. 필요한 재료와 양:
   - 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/VOAZFb8.jpg

8. 요리 팁:
   - 두부를 미리 데치면 형태가 무너지지 않고 부드러운 식감을 유지할 수 있습니다.
   - 두반장은 마파두부의 감칠맛을 좌우하니 생략하지 마세요. 고추기름을 충분히 사용하면 더욱 깔끔하고 풍미 있는 맛을 즐길 수 있습니다.

**알레르기 안내**: 이 레시피에는 새우가 포함되어 있지 않으므로, 새우 알레르기가 있으신 분도 안전하게 드실 수 있습니다[1][3].
2025-06-30 00:07:28.322 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 00:07:28.325 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 중식
2025-06-30 00:07:28.325 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/VOAZFb8.jpg
2025-06-30 00:07:28.325 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/VOAZFb8.jpg
2025-06-30 00:07:28.325 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/VOAZFb8.jpg
2025-06-30 00:07:28.326 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간
2025-06-30 00:07:28.326 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 15
2025-06-30 00:07:28.326 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 두부 300g (1모)
2025-06-30 00:07:28.326 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 두부, Amount: 300g
2025-06-30 00:07:28.326 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 두부, Amount: 300g
2025-06-30 00:07:28.328 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.330 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '두부' not found in DB. Skipping.
2025-06-30 00:07:28.330 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기 다짐육 150g
2025-06-30 00:07:28.330 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 150g
2025-06-30 00:07:28.330 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 150g
2025-06-30 00:07:28.331 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.332 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-30 00:07:28.332 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/4대(흰 부분)
2025-06-30 00:07:28.332 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/4대(흰 부분)
2025-06-30 00:07:28.333 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-30 00:07:28.333 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-30 00:07:28.333 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-30 00:07:28.334 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.335 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-30 00:07:28.335 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개
2025-06-30 00:07:28.335 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/4개
2025-06-30 00:07:28.335 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 청양고추 2~3개, 홍고추 1개
2025-06-30 00:07:28.336 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 홍고추, Amount: 1개
2025-06-30 00:07:28.336 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 홍고추, Amount: 1개
2025-06-30 00:07:28.337 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.337 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '홍고추' not found in DB. Skipping.
2025-06-30 00:07:28.337 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추기름 2~3큰술
2025-06-30 00:07:28.337 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추기름 2~3큰술
2025-06-30 00:07:28.337 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 1큰술
2025-06-30 00:07:28.337 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 진간장, Amount: 1큰술
2025-06-30 00:07:28.337 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 1큰술
2025-06-30 00:07:28.338 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.339 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-30 00:07:28.339 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 1큰술
2025-06-30 00:07:28.339 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 1큰술
2025-06-30 00:07:28.339 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 1큰술
2025-06-30 00:07:28.340 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.341 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-30 00:07:28.341 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 두반장 1.5큰술
2025-06-30 00:07:28.341 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 두반장 1.5큰술
2025-06-30 00:07:28.341 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굴소스 1큰술
2025-06-30 00:07:28.341 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 굴소스, Amount: 1큰술
2025-06-30 00:07:28.341 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 굴소스, Amount: 1큰술
2025-06-30 00:07:28.342 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.343 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '굴소스' not found in DB. Skipping.
2025-06-30 00:07:28.343 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-30 00:07:28.343 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-30 00:07:28.343 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-30 00:07:28.344 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.345 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-30 00:07:28.345 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 200~300ml
2025-06-30 00:07:28.345 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 물 200~300ml
2025-06-30 00:07:28.345 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 감자전분 1큰술 + 물 2큰술 (전분물)
2025-06-30 00:07:28.345 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 감자전분, Amount: 1큰술
2025-06-30 00:07:28.345 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 감자전분, Amount: 1큰술
2025-06-30 00:07:28.346 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:07:28.348 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '감자전분' not found in DB. Skipping.
2025-06-30 00:07:28.348 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-30 00:07:28.349 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-30 00:07:28.349 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   
2025-06-30 00:07:28.349 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-30 00:07:28.349 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 00:07:28.350 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:07:28.351 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 마파두부
2025-06-30 00:07:28.351 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-30 00:07:28.352 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 125
2025-06-30 00:07:28.353 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:07:28.356 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-30 00:07:28.357 [http-nio-8080-exec-8] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=6, sessionId=07fc5663-96a7-4fcb-a94f-ea9a4d3271e8, isUserMessage=false
2025-06-30 00:07:28.380 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:07:28.381 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:07:28.384 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:07:28.386 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:07:28.395 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:07:28.397 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 00:07:28.400 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:07:28.403 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '닭볶음탕'의 상세 레시피 정보가 DB에 없습니다.
2025-06-30 00:07:28.403 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:07:28.405 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '소고기미역국'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 124
2025-06-30 00:07:28.440 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:07:28.453 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '마파두부'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 125
2025-06-30 00:07:28.463 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:07:28.466 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '김치전'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 119
2025-06-30 00:07:28.467 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:07:28.483 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '참치계란볶음밥'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 123
2025-06-30 00:07:28.484 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 00:07:28.487 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 참치계란볶음밥
2025-06-30 00:07:28.487 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/2k6r4lm.jpg, description=필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1]., title=참치계란볶음밥, category=한식, recipeId=123, cookingTime=15}
2025-06-30 00:07:28.488 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 00:07:28.492 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 소고기미역국
2025-06-30 00:07:28.492 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZuSko1j.jpg, description=필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2]., title=소고기미역국, category=한식, recipeId=124, cookingTime=30}
2025-06-30 00:07:28.492 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 00:07:28.495 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 마파두부
2025-06-30 00:07:28.495 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/VOAZFb8.jpg, description=필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다., title=마파두부, category=중식, recipeId=125, cookingTime=25}
2025-06-30 00:09:28.097 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:28.097 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:28.109 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:28.110 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:28.122 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.122 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.133 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.133 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.140 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:09:28.142 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:28.190 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:28.190 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:28.191 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:28.191 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:28.198 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.198 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.199 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.199 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.207 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:09:28.207 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:28.218 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:28.221 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:28.223 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.225 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.227 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:09:28.238 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:28.239 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:28.241 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.242 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:28.245 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:09:31.026 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:31.029 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:31.031 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:31.033 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:31.038 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:09:31.041 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 00:09:31.046 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:31.059 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '닭볶음탕'의 상세 레시피 정보가 DB에 없습니다.
2025-06-30 00:09:31.060 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:31.061 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '소고기미역국'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 124
2025-06-30 00:09:31.062 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:31.064 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '마파두부'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 125
2025-06-30 00:09:31.066 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:31.067 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '김치전'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 119
2025-06-30 00:09:31.068 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:31.069 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '참치계란볶음밥'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 123
2025-06-30 00:09:31.069 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 00:09:31.070 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 참치계란볶음밥
2025-06-30 00:09:31.070 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/2k6r4lm.jpg, description=필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1]., title=참치계란볶음밥, category=한식, recipeId=123, cookingTime=15}
2025-06-30 00:09:31.070 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 00:09:31.071 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 소고기미역국
2025-06-30 00:09:31.071 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZuSko1j.jpg, description=필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2]., title=소고기미역국, category=한식, recipeId=124, cookingTime=30}
2025-06-30 00:09:31.071 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 00:09:31.072 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 마파두부
2025-06-30 00:09:31.072 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/VOAZFb8.jpg, description=필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다., title=마파두부, category=중식, recipeId=125, cookingTime=25}
2025-06-30 00:09:37.022 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:37.024 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:37.025 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:37.026 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:37.028 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 00:09:37.549 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:37.551 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:37.554 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:37.555 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:37.559 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:09:37.561 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 00:09:37.562 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:37.563 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '닭볶음탕'의 상세 레시피 정보가 DB에 없습니다.
2025-06-30 00:09:37.564 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:37.565 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '소고기미역국'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 124
2025-06-30 00:09:37.566 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:37.568 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '마파두부'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 125
2025-06-30 00:09:37.569 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:37.570 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '김치전'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 119
2025-06-30 00:09:37.572 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:09:37.574 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '참치계란볶음밥'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 123
2025-06-30 00:09:37.574 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 00:09:37.576 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 참치계란볶음밥
2025-06-30 00:09:37.576 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/2k6r4lm.jpg, description=필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1]., title=참치계란볶음밥, category=한식, recipeId=123, cookingTime=15}
2025-06-30 00:09:37.576 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 00:09:37.577 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 소고기미역국
2025-06-30 00:09:37.577 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZuSko1j.jpg, description=필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2]., title=소고기미역국, category=한식, recipeId=124, cookingTime=30}
2025-06-30 00:09:37.577 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 00:09:37.578 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 마파두부
2025-06-30 00:09:37.579 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/VOAZFb8.jpg, description=필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다., title=마파두부, category=중식, recipeId=125, cookingTime=25}
2025-06-30 00:09:59.278 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:09:59.282 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:59.316 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:59.318 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:09:59.323 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:09:59.329 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-30 00:09:59.343 [http-nio-8080-exec-9] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=6, sessionId=07fc5663-96a7-4fcb-a94f-ea9a4d3271e8, isUserMessage=true
2025-06-30 00:09:59.343 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 닭볶음탕 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-30 00:09:59.348 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:09:59.351 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-30 00:09:59.354 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-30 00:09:59.354 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 닭볶음탕 레시피 알려줘
2025-06-30 00:09:59.354 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-30 00:09:59.354 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-30 00:09:59.357 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 00:09:59.359 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-30 00:09:59.359 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-30 00:09:59.359 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 닭볶음탕 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-30 00:09:59.359 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-30 00:10:07.155 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-30 00:10:07.155 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-30 00:10:07.156 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 닭볶음탕

2. 카테고리: 한식

3. 조리 시간: 50분

4. 조리 방법:
   1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.

5. 필요한 재료와 양:
   - 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/FI8XZwn.jpg

8. 요리 팁:
   - 닭은 반드시 끓는 물에 데쳐서 핏물과 잡내를 제거해야 잡내 없는 깔끔한 국물이 완성된다[3].
   - 감자는 너무 오래 끓이면 부서지니 중간 정도 익었을 때 마지막에 넣어주는 것이 좋다.
   - 기호에 따라 당면, 떡, 버섯 등 추가 재료를 넣으면 더 푸짐하게 즐길 수 있다.
   - 양념의 단맛은 취향에 따라 올리고당이나 설탕 양을 조절해도 좋다.
2025-06-30 00:10:07.158 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 00:10:07.159 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-30 00:10:07.159 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/FI8XZwn.jpg
2025-06-30 00:10:07.160 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/FI8XZwn.jpg
2025-06-30 00:10:07.160 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/FI8XZwn.jpg
2025-06-30 00:10:07.160 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml
2025-06-30 00:10:07.160 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 17
2025-06-30 00:10:07.160 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 닭볶음탕용 닭 1kg
2025-06-30 00:10:07.161 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 닭, Amount: 1kg
2025-06-30 00:10:07.161 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 닭, Amount: 1kg
2025-06-30 00:10:07.165 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.167 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '닭' not found in DB. Skipping.
2025-06-30 00:10:07.167 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 감자 3~4개 (중간 크기)
2025-06-30 00:10:07.167 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 감자 3~4개 (중간 크기)
2025-06-30 00:10:07.167 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-30 00:10:07.167 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-30 00:10:07.167 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-30 00:10:07.168 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.168 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-30 00:10:07.168 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/2개
2025-06-30 00:10:07.168 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/2개
2025-06-30 00:10:07.168 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대
2025-06-30 00:10:07.168 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-30 00:10:07.168 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-30 00:10:07.169 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.169 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-30 00:10:07.169 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 2개
2025-06-30 00:10:07.169 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 청양고추, Amount: 2개
2025-06-30 00:10:07.169 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 2개
2025-06-30 00:10:07.170 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.170 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-30 00:10:07.170 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 홍고추 1개
2025-06-30 00:10:07.170 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 홍고추, Amount: 1개
2025-06-30 00:10:07.170 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 홍고추, Amount: 1개
2025-06-30 00:10:07.171 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.171 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '홍고추' not found in DB. Skipping.
2025-06-30 00:10:07.172 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 1.5큰술
2025-06-30 00:10:07.172 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추장 1.5큰술
2025-06-30 00:10:07.172 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 2큰술
2025-06-30 00:10:07.172 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 2큰술
2025-06-30 00:10:07.172 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 2큰술
2025-06-30 00:10:07.175 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.176 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-30 00:10:07.176 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 5큰술
2025-06-30 00:10:07.176 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 진간장, Amount: 5큰술
2025-06-30 00:10:07.176 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 5큰술
2025-06-30 00:10:07.179 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.179 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-30 00:10:07.179 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당 2큰술
2025-06-30 00:10:07.179 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리고당, Amount: 2큰술
2025-06-30 00:10:07.179 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 2큰술
2025-06-30 00:10:07.180 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.181 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-30 00:10:07.181 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-30 00:10:07.181 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-30 00:10:07.181 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-30 00:10:07.182 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.183 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-30 00:10:07.183 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 생강 0.2큰술
2025-06-30 00:10:07.183 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 생강 0.2큰술
2025-06-30 00:10:07.183 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미림(또는 청주) 1큰술
2025-06-30 00:10:07.183 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 미림(또는 청주) 1큰술
2025-06-30 00:10:07.183 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1큰술
2025-06-30 00:10:07.183 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 1큰술
2025-06-30 00:10:07.183 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-30 00:10:07.184 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.184 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-30 00:10:07.184 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후춧가루 약간
2025-06-30 00:10:07.185 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후춧가루 약간
2025-06-30 00:10:07.185 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 350ml
2025-06-30 00:10:07.185 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 350ml
2025-06-30 00:10:07.185 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 350ml
2025-06-30 00:10:07.185 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-30 00:10:07.186 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-30 00:10:07.186 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   
2025-06-30 00:10:07.186 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-30 00:10:07.186 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 00:10:07.187 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:07.188 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 닭볶음탕
2025-06-30 00:10:07.191 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-30 00:10:07.192 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 126
2025-06-30 00:10:07.194 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:10:07.196 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-30 00:10:07.198 [http-nio-8080-exec-9] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=6, sessionId=07fc5663-96a7-4fcb-a94f-ea9a4d3271e8, isUserMessage=false
2025-06-30 00:10:07.715 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:10:07.718 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:07.719 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:07.720 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:07.722 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:10:07.725 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 00:10:07.727 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:07.729 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '닭볶음탕'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 126
2025-06-30 00:10:07.730 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:07.731 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '소고기미역국'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 124
2025-06-30 00:10:07.731 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:07.732 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '마파두부'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 125
2025-06-30 00:10:07.733 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:07.735 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '김치전'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 119
2025-06-30 00:10:07.736 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:07.738 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '참치계란볶음밥'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 123
2025-06-30 00:10:07.738 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 00:10:07.740 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 참치계란볶음밥
2025-06-30 00:10:07.740 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/2k6r4lm.jpg, description=필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1]., title=참치계란볶음밥, category=한식, recipeId=123, cookingTime=15}
2025-06-30 00:10:07.740 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 00:10:07.741 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 소고기미역국
2025-06-30 00:10:07.741 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZuSko1j.jpg, description=필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2]., title=소고기미역국, category=한식, recipeId=124, cookingTime=30}
2025-06-30 00:10:07.741 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 00:10:07.741 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 마파두부
2025-06-30 00:10:07.741 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/VOAZFb8.jpg, description=필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다., title=마파두부, category=중식, recipeId=125, cookingTime=25}
2025-06-30 00:10:07.742 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 00:10:07.742 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 00:10:07.742 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/FI8XZwn.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다., title=닭볶음탕, category=한식, recipeId=126, cookingTime=50}
2025-06-30 00:10:23.699 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:10:23.699 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:10:23.703 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:23.703 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:23.707 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.708 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.717 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.717 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.725 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:23.725 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:10:23.755 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:10:23.755 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:10:23.757 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:23.757 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:23.758 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.758 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.759 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.759 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.768 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:10:23.769 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:23.782 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:10:23.784 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:23.788 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.790 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.792 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:10:23.804 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:10:23.806 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:23.808 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.826 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:23.833 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 00:10:27.251 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 00:10:27.253 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 00:10:27.256 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:27.260 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 00:10:27.266 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 00:10:27.269 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 00:10:27.271 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:27.274 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '닭볶음탕'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 126
2025-06-30 00:10:27.275 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:27.277 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '소고기미역국'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 124
2025-06-30 00:10:27.278 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:27.279 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '마파두부'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 125
2025-06-30 00:10:27.280 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:27.281 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '김치전'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 119
2025-06-30 00:10:27.282 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 00:10:27.282 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 '참치계란볶음밥'의 상세 레시피 정보를 DB에서 조회했습니다. ID: 123
2025-06-30 00:10:27.282 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 00:10:27.284 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 참치계란볶음밥
2025-06-30 00:10:27.284 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/2k6r4lm.jpg, description=필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1]., title=참치계란볶음밥, category=한식, recipeId=123, cookingTime=15}
2025-06-30 00:10:27.284 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 00:10:27.285 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 소고기미역국
2025-06-30 00:10:27.285 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZuSko1j.jpg, description=필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2]., title=소고기미역국, category=한식, recipeId=124, cookingTime=30}
2025-06-30 00:10:27.286 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 00:10:27.287 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 마파두부
2025-06-30 00:10:27.287 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/VOAZFb8.jpg, description=필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다., title=마파두부, category=중식, recipeId=125, cookingTime=25}
2025-06-30 00:10:27.287 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 00:10:27.288 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 00:10:27.288 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/FI8XZwn.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다., title=닭볶음탕, category=한식, recipeId=126, cookingTime=50}
2025-06-30 00:13:03.941 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-30 00:13:03.947 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-30 00:13:03.950 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
