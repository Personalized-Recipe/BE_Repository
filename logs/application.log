2025-06-30 14:41:04.104 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.104 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.105 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.105 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.105 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.105 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.156 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.155 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.155 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.155 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.155 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.183 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.184 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.184 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.184 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.186 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.187 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.189 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.207 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.207 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.209 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.210 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.210 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.212 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.265 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 14:41:04.265 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 14:41:04.265 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 14:41:04.266 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 14:41:04.288 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.288 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.325 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.327 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.328 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.330 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.334 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:04.337 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.337 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:04.337 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.337 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.338 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.338 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.345 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.348 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.350 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.353 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.354 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.355 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.356 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.357 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.358 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.358 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.358 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:04.358 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:04.358 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:04.359 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.359 [http-nio-8080-exec-4] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.360 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.361 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.361 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.361 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.361 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.361 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:04.361 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:04.361 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:04.361 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:04.362 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:04.363 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:04.364 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.364 [http-nio-8080-exec-4] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.365 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.367 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.369 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.372 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.373 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.374 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.378 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.380 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.380 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.380 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.380 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:04.380 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:04.380 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:04.381 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.381 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:04.381 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.381 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:04.381 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:04.381 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:04.382 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.382 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:04.382 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.382 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:04.382 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:04.382 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:04.382 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.382 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.383 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.384 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.384 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.385 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.385 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:04.385 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.385 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:04.385 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.385 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.385 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.385 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.385 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.386 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.386 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.387 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.387 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.387 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:04.388 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:04.389 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:04.390 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:04.390 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:04.390 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.390 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:04.390 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:04.390 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:04.391 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:04.391 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:04.391 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.391 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:04.391 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:04.391 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:04.392 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:04.393 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:04.393 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:04.393 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.393 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:04.393 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:04.393 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:04.394 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:04.395 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:04.395 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:04.395 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.395 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:04.395 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.395 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.395 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.395 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.395 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.396 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.397 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.397 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.397 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.398 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.398 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.398 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:04.398 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.398 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.398 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.398 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.398 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.400 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.400 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.402 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.402 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.403 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.403 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.403 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:04.403 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.403 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.403 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.403 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.403 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.403 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.404 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.405 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.405 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.406 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.406 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.406 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:04.406 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.406 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.406 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.406 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.406 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.406 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.407 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.407 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.408 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.408 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.419 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.421 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.424 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.428 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.436 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:04.439 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.439 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:04.439 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.439 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.439 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.439 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.439 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.440 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.441 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.443 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.444 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.445 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.445 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.446 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:04.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:04.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:04.447 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.447 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:04.448 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:04.449 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:04.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:04.451 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.451 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.452 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.453 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.454 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.454 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.455 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.456 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.456 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.456 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:04.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:04.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:04.458 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.458 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:04.459 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.459 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:04.459 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:04.459 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:04.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:04.461 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:04.461 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:04.461 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.461 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:04.461 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.461 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.461 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.461 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.461 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.462 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.462 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.463 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:04.463 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.463 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:04.463 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.463 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.463 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.463 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.463 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.465 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.469 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.473 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.474 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.475 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.491 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.491 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:04.491 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.491 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.493 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.493 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.493 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:04.493 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:04.493 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:04.497 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:04.497 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:04.497 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.497 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:04.497 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:04.497 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:04.498 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:04.498 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:04.498 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.498 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:04.498 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:04.498 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:04.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:04.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:04.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:04.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:04.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:04.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:04.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:04.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:04.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:04.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:04.501 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:04.501 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:04.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:04.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:04.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:04.503 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:04.503 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:04.504 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.504 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:04.504 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:04.504 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:04.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:04.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:04.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:04.507 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:04.507 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:04.512 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:04.512 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:04.512 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.512 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:04.512 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:04.512 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.514 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.524 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.529 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.530 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.531 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.531 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.532 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.532 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.532 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:04.532 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.532 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.532 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.532 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.532 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.533 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.533 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.534 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.534 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.535 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.535 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.535 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:04.535 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.535 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.535 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.535 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.535 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.536 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.540 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.545 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.555 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.556 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.556 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.556 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:04.556 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.556 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.556 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.556 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.560 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.561 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.561 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.562 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.562 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.563 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.578 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.580 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.584 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.585 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.588 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:04.590 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.590 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:04.590 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.590 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.591 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.591 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.591 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.592 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.593 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.595 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.595 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.596 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.597 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.597 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.598 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.598 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.598 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:04.598 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:04.598 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:04.598 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.599 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:04.600 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:04.601 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:04.602 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.602 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:04.603 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.604 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.604 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.604 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.605 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.605 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.605 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.605 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:04.605 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.605 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.605 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.605 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.605 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.607 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.608 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.609 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.610 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.611 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.626 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.627 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.627 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.627 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:04.627 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:04.627 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:04.628 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.628 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:04.629 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:04.630 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.630 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:04.630 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.630 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:04.630 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:04.630 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:04.631 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:04.631 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:04.631 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.631 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:04.631 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.631 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.631 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.631 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.631 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.632 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.633 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.633 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:04.633 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.633 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:04.633 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.633 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.633 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.633 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.633 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.634 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.635 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.635 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:04.636 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:04.637 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:04.638 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:04.638 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:04.638 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:04.638 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.638 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:04.638 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:04.638 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:04.639 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:04.639 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:04.639 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.639 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:04.639 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:04.639 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:04.640 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.641 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:04.642 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:04.642 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:04.642 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:04.642 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:04.642 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.642 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:04.642 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:04.642 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:04.643 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:04.643 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:04.643 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.643 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:04.643 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.643 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.643 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.643 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.643 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.644 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.645 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.645 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.645 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.646 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.646 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.646 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:04.646 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.646 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.646 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.646 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.646 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.647 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.647 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.647 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.648 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.648 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.648 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.648 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:04.648 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.648 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.648 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.648 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.649 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.649 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.649 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.650 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.650 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:04.651 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.651 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.652 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.652 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.652 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.662 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.664 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.665 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.667 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.671 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:04.673 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.673 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:04.673 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.673 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.673 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.673 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.681 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.686 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.688 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.690 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.690 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.691 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.692 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.693 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.693 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.693 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.693 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:04.693 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:04.693 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:04.694 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.694 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.694 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.695 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.696 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:04.697 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.698 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.699 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.699 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.700 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.701 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.701 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.702 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.703 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.703 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.703 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.703 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:04.703 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:04.703 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:04.705 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.705 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:04.705 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.705 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:04.705 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:04.705 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:04.706 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:04.708 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:04.708 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:04.708 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.708 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:04.708 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.708 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.708 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.708 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.708 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.709 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.710 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.710 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:04.710 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.710 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:04.710 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.710 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.710 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.710 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.710 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.711 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.711 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.712 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.712 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.712 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.712 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.712 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:04.713 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:04.714 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:04.714 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:04.714 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.714 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:04.714 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:04.714 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:04.718 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:04.718 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:04.718 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.718 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:04.718 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:04.718 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:04.720 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:04.720 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:04.720 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.720 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:04.720 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:04.720 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:04.721 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:04.721 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:04.721 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.721 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:04.721 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:04.721 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:04.722 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:04.722 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:04.722 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.722 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:04.722 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:04.722 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:04.725 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:04.726 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:04.726 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.726 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:04.726 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:04.726 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:04.734 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:04.735 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:04.735 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.735 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:04.735 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:04.735 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:04.738 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:04.738 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:04.738 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.738 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:04.738 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:04.738 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.739 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.740 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.741 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.742 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.742 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.743 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.743 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.743 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.743 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:04.743 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.743 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.743 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.743 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.743 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.744 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.744 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:04.745 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.745 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.746 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.746 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.746 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:04.747 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.747 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.748 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.748 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.749 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.749 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.763 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.764 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.766 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.768 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.775 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:04.780 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.780 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:04.780 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.780 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.780 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.780 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.780 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.781 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.782 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.784 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.784 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.785 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.785 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.786 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.787 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.787 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.787 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:04.787 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:04.787 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:04.787 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:04.788 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:04.789 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.789 [http-nio-8080-exec-6] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:04.790 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.791 [http-nio-8080-exec-6] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:04.792 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.793 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.794 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.795 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.796 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.796 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.799 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.800 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.801 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.801 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.801 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.801 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:04.801 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:04.801 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:04.802 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.802 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:04.803 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:04.804 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:04.804 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:04.804 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.804 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:04.804 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:04.804 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:04.805 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:04.805 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:04.805 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.805 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:04.805 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.805 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.805 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.805 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.805 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.806 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.806 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.807 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:04.807 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.807 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:04.807 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.807 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.807 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.807 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.807 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.807 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.808 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.808 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:04.809 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:04.810 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:04.811 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:04.812 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:04.813 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:04.814 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.815 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.816 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.817 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.817 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.818 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.818 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.818 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.818 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:04.818 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.818 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.818 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.818 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.818 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.819 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.819 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.820 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.822 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.823 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.823 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.823 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:04.823 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.823 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.823 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.823 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.826 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.828 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.829 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.830 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.832 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.833 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.833 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.833 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:04.833 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.833 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.833 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.833 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.834 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.834 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.835 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.835 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.835 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.836 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.865 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:04.867 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:04.868 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.869 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:04.872 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:04.874 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.874 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:04.874 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.874 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.874 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.874 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.875 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.879 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.881 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.883 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.885 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.887 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.889 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.894 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.897 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:04.897 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.897 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:04.897 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:04.897 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:04.898 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.899 [http-nio-8080-exec-6] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.900 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.901 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.901 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.901 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.901 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.901 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:04.901 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:04.901 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:04.903 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.904 [http-nio-8080-exec-6] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.905 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.906 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.906 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.906 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.906 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.906 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:04.906 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:04.906 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:04.906 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.907 [http-nio-8080-exec-6] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.907 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.908 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.908 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.908 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.908 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.908 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:04.908 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:04.908 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:04.908 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:04.909 [http-nio-8080-exec-6] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:04.910 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:04.912 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.917 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:04.925 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.926 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:04.938 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.080 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.084 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.085 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.088 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.088 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:05.088 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:05.088 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:05.091 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.091 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:05.091 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.091 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:05.091 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:05.091 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:05.093 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.093 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:05.093 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.093 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:05.093 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:05.093 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:05.097 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.097 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:05.097 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.097 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:05.097 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:05.097 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:05.098 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:05.099 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:05.111 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.111 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:05.111 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.111 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.111 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.111 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.112 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.135 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.154 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.156 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:05.156 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.156 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:05.156 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.156 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.156 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.156 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.156 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.157 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.157 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.158 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.159 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.159 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.159 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:05.160 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:05.161 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:05.162 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:05.162 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:05.162 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.162 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:05.162 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:05.162 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:05.163 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.164 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:05.165 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:05.165 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:05.165 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:05.165 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:05.165 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.165 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:05.165 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:05.165 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.166 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.167 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.167 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.168 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.168 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.169 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.169 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.169 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.169 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:05.169 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.169 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.169 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.169 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.169 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.170 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.170 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.170 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.171 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.171 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.171 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.171 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:05.171 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.171 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.171 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.171 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.171 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.172 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.172 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.172 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:05.173 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.173 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.174 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.174 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.174 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.175 [http-nio-8080-exec-6] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.184 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:05.185 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:05.186 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:05.188 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:05.190 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:05.192 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.192 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:05.192 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.192 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.192 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.192 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.192 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.193 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.194 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.195 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.195 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.196 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.197 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.199 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.200 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.200 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.200 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:05.200 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:05.200 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:05.200 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:05.201 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:05.202 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.203 [http-nio-8080-exec-2] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.203 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.204 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.204 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.204 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.204 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.204 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:05.204 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:05.204 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:05.207 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.209 [http-nio-8080-exec-2] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.210 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.210 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.210 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.210 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.210 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.210 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:05.210 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:05.210 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:05.211 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.213 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.214 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.217 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.220 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.222 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.224 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.226 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.229 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.229 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.229 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.229 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:05.229 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:05.229 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:05.230 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.230 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:05.230 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.230 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:05.230 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:05.230 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:05.232 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.232 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:05.232 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.232 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:05.232 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:05.232 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:05.233 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.233 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:05.233 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.233 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:05.233 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:05.233 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:05.234 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:05.234 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:05.235 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.235 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:05.235 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.235 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.235 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.235 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.236 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.236 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.237 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.238 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:05.238 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.238 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:05.238 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.238 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.238 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.238 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.240 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.243 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.246 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.247 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:05.249 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:05.251 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:05.251 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:05.251 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.251 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:05.251 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:05.251 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:05.252 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:05.252 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:05.252 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.252 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:05.252 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:05.252 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:05.253 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:05.253 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:05.253 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.253 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:05.254 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:05.254 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:05.254 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:05.254 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:05.255 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:05.256 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:05.257 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:05.257 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:05.257 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.257 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:05.257 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:05.257 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:05.259 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:05.259 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:05.259 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.259 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:05.259 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:05.259 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:05.259 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:05.259 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:05.260 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.260 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:05.260 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.260 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.260 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.260 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.261 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.262 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.263 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.264 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.265 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.265 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.265 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.265 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:05.265 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.265 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.265 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.265 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.266 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.266 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.267 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.267 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.268 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.268 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.268 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.268 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:05.268 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.268 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.269 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.269 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.269 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.270 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.271 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.272 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.273 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.273 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.273 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.273 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:05.273 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.273 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.273 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.273 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.273 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.274 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.275 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.276 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.276 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.277 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.317 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:05.322 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:05.327 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:05.354 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:05.359 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:05.362 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.362 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:05.362 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.362 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.362 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.362 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.363 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.364 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.366 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.369 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.370 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.371 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.372 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.373 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.396 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.396 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.396 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:05.396 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:05.396 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:05.399 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.402 [http-nio-8080-exec-10] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.403 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.403 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.403 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.403 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.403 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.403 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:05.403 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:05.403 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:05.404 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.408 [http-nio-8080-exec-10] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.409 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.409 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.409 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.409 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.409 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.409 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:05.409 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:05.409 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:05.410 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:05.411 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:05.412 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.413 [http-nio-8080-exec-10] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.414 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.415 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.418 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.421 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.423 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.436 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.443 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.444 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.445 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.445 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.445 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:05.445 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:05.445 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:05.446 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.446 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:05.446 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.446 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:05.446 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:05.446 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:05.447 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.447 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:05.447 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.447 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:05.447 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:05.447 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:05.448 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.448 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:05.448 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.448 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:05.448 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:05.448 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:05.449 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:05.449 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:05.449 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.449 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:05.449 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.449 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.449 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.449 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.450 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.452 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.453 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.455 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:05.455 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.455 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:05.455 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.455 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.455 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.455 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.456 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.457 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.458 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.459 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.460 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:05.461 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:05.462 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:05.465 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:05.465 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:05.467 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.467 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:05.467 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:05.467 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:05.468 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:05.468 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:05.468 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.468 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:05.468 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:05.468 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:05.469 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:05.470 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:05.471 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:05.472 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:05.473 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:05.473 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:05.473 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.473 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:05.473 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.473 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.473 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.473 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.474 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.475 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.475 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.476 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.476 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.476 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.476 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.476 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:05.476 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.476 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.476 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.476 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.477 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.477 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.477 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.478 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.478 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.478 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.478 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.479 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:05.479 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.479 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.479 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.479 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.479 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.479 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.480 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.480 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.485 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.486 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.486 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.486 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:05.486 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.486 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.486 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.486 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.486 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.486 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.487 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.487 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.488 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.488 [http-nio-8080-exec-10] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.544 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:05.548 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:05.551 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:05.555 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:05.581 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:05.604 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.604 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:05.604 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.604 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.606 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.606 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.614 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.616 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.619 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.620 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.621 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.622 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.622 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.623 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.623 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.624 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.624 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:05.624 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:05.624 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:05.626 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.627 [http-nio-8080-exec-3] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:05.628 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:05.629 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:05.630 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:05.631 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.632 [http-nio-8080-exec-3] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.632 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.632 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.632 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.632 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.632 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.632 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:05.632 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.633 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.633 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.633 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.633 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.634 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.636 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.636 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.637 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.637 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.638 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.638 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.638 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.638 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:05.638 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:05.638 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:05.639 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.639 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:05.639 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.639 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:05.639 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:05.639 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:05.642 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.642 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:05.642 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.642 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:05.642 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:05.642 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:05.642 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.642 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:05.643 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.643 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:05.643 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:05.643 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:05.644 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:05.644 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:05.644 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.644 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:05.644 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.644 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.644 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.644 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.644 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.645 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.646 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.646 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:05.646 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.646 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:05.646 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.646 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.646 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.646 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.646 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.647 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.648 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.648 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:05.649 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:05.661 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:05.661 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:05.661 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.661 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:05.661 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:05.661 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:05.663 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:05.663 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:05.663 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.663 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:05.663 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:05.663 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:05.664 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:05.665 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:05.666 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:05.666 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:05.666 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.666 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:05.666 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:05.666 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:05.676 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:05.676 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:05.676 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.676 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:05.676 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:05.676 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:05.679 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:05.679 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:05.679 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.679 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:05.679 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:05.679 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:05.681 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:05.681 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:05.681 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.681 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:05.681 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.681 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.681 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.681 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.682 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.682 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.683 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.683 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.684 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.684 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.684 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.684 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:05.684 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.684 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.684 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.684 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.684 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.685 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.685 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.686 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.686 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.686 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.686 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.686 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:05.686 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.686 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.687 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.687 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.687 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.687 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.688 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.688 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:05.689 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.689 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.690 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.690 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.691 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.691 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.714 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:05.716 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:05.720 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:05.721 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:05.728 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:05.732 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.732 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:41:05.732 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.732 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.732 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.732 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.733 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.735 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.736 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.739 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.740 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.741 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.742 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.743 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.744 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.744 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.744 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:41:05.744 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:41:05.744 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:41:05.745 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.745 [http-nio-8080-exec-9] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:41:05.746 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:41:05.747 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:41:05.748 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor49.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.749 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.750 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.751 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.752 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.753 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:41:05.754 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.755 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.755 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.755 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.755 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:41:05.755 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:41:05.755 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:41:05.756 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.757 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.758 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.758 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.759 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:41:05.759 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.759 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:41:05.759 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.759 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.759 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.759 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.759 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.760 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.760 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:41:05.761 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:41:05.762 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:41:05.762 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:41:05.762 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.762 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:41:05.762 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:41:05.762 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:41:05.763 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:41:05.763 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:41:05.763 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.763 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:41:05.763 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:41:05.763 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:41:05.764 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:41:05.764 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:41:05.764 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.764 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:41:05.764 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:41:05.764 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:41:05.765 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:41:05.766 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:41:05.767 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:41:05.767 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:41:05.767 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.767 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:41:05.767 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:41:05.767 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:41:05.768 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:41:05.768 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:41:05.768 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.768 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:41:05.768 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:41:05.768 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:41:05.769 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:41:05.769 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:41:05.769 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.769 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:41:05.769 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.769 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.769 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.769 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.770 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.772 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.772 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.773 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.776 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.776 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.776 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.776 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:41:05.776 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.776 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.776 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.777 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.777 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.778 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.779 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.780 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.780 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.780 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.780 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.780 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:41:05.780 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.780 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.780 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.780 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.781 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.782 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.782 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.784 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.790 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.791 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:05.792 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:41:05.792 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:41:05.792 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:41:05.792 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:41:05.792 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:41:05.792 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:41:05.793 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.794 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.795 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.798 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.803 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:05.804 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:41:12.467 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:41:12.474 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:12.480 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:12.482 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:41:12.489 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 건강한 메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-30 14:41:12.489 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:41:12.491 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-30 14:41:12.491 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-30 14:41:12.491 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 건강한 메뉴 추천해줘
2025-06-30 14:41:12.491 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-30 14:41:12.491 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-30 14:41:12.498 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 14:41:12.500 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-30 14:41:12.500 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-30 14:41:12.500 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 건강한 메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 각 메뉴의 상세 레시피

**1. [메뉴명 1] 레시피**
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**2. [메뉴명 2] 레시피**
[위와 동일한 형식으로 2번 메뉴의 상세 레시피]

**3. [메뉴명 3] 레시피**
[위와 동일한 형식으로 3번 메뉴의 상세 레시피]

**4. [메뉴명 4] 레시피**
[위와 동일한 형식으로 4번 메뉴의 상세 레시피]

**5. [메뉴명 5] 레시피**
[위와 동일한 형식으로 5번 메뉴의 상세 레시피]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 각 메뉴의 상세 레시피를 반드시 포함해주세요.
**중요**: 각 레시피는 1번부터 8번까지 모든 섹션을 빠짐없이 포함해야 합니다.
**중요**: 7번 이미지 URL은 Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-30 14:41:12.500 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-30 14:41:31.319 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-30 14:41:31.321 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-30 14:41:31.321 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 콩나물국밥
2. 두부스테이크 도시락
3. 닭가슴살 샐러드
4. 쌈밥(현미/잡곡밥)
5. 그릭요거트&블루베리 볼

---

### 각 메뉴의 상세 레시피

**1. 콩나물국밥 레시피**
1. 요리 이름: 콩나물국밥
2. 카테고리: 한식
3. 조리 시간: 25분
4. 조리 방법:
   1. 콩나물을 깨끗이 씻고 준비한다.
   2. 냄비에 물을 올리고 다시마, 멸치 등으로 육수를 우린다.
   3. 육수에 콩나물을 넣고 중약불에서 5~6분 끓인다.
   4. 다진 마늘, 국간장, 소금으로 간한다.
   5. 밥을 그릇에 담고, 끓인 콩나물국을 붓는다.
   6. 송송 썬 파, 고춧가루, 후추, 김가루 등으로 마무리한다.
5. 필요한 재료와 양:
   - 콩나물 200g
   - 현미밥 1공기
   - 물 800ml
   - 멸치 5마리, 다시마 1장
   - 다진 마늘 1큰술
   - 국간장 1큰술, 소금 약간, 후추 약간
   - 대파 1/2대, 고춧가루·김가루 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/9dk4kAf
8. 요리 팁:
   - 콩나물을 오래 삶으면 냄새가 날 수 있으니 5분 이내로 익히세요.
   - 속을 편안하게 하고 싶은 경우, 멸치육수를 사용하면 더 담백합니다.

---

**2. 두부스테이크 도시락 레시피**
1. 요리 이름: 두부스테이크
2. 카테고리: 한식/도시락
3. 조리 시간: 30분
4. 조리 방법:
   1. 두부를 물기 제거 후 으깬다.
   2. 으깬 두부에 다진 당근·양파·청양고추를 섞어준다.
   3. 소금·후추·계란·부침가루를 넣고 반죽한다.
   4. 반죽을 동그랗게 빚어 팬에 살짝 눌러 굽는다.
   5. 간장+올리고당+다진 마늘로 만든 소스를 발라가며 앞뒤로 노릇하게 굽는다.
5. 필요한 재료와 양:
   - 두부 반 모(200g)
   - 당근 1/4개, 양파 1/4개, 청양고추 1/2개
   - 계란 1개, 부침가루 2큰술
   - 소금·후추 약간
   - 소스: 간장 2큰술, 올리고당 1큰술, 다진 마늘 1/2작은술
6. 난이도: 중
7. 이미지 URL: https://imgur.com/Ko9gHa7
8. 요리 팁:
   - 두부 물기를 꼭 제거해야 식감이 좋습니다.
   - 채소는 기호에 따라 다양한 채소를 사용해도 됩니다.[1]

---

**3. 닭가슴살 샐러드 레시피**
1. 요리 이름: 닭가슴살 샐러드
2. 카테고리: 한식/샐러드
3. 조리 시간: 20분
4. 조리 방법:
   1. 닭가슴살을 삶거나 구워 먹기 좋게 찢는다.
   2. 신선한 채소(양상추, 방울토마토, 오이, 파프리카 등)를 손질한다.
   3. 그릇에 채소, 닭가슴살, 견과류를 올린다.
   4. 드레싱(발사믹·레몬주스 등)을 곁들인다.
5. 필요한 재료와 양:
   - 닭가슴살 100g
   - 양상추 한 줌, 방울토마토 5개, 오이 1/3개, 파프리카 1/4개
   - 호두·아몬드 등 견과류 한 줌
   - 레몬주스·발사믹식초 각 1큰술
6. 난이도: 하
7. 이미지 URL: https://imgur.com/j6mz9wT
8. 요리 팁:
   - 드레싱은 가급적 칼로리 낮은 것으로 준비하세요.
   - 아보카도나 삶은 계란을 추가해도 영양이 좋아집니다.[4]

---

**4. 쌈밥(현미/잡곡밥) 레시피**
1. 요리 이름: 쌈밥
2. 카테고리: 한식
3. 조리 시간: 25분
4. 조리 방법:
   1. 현미 또는 잡곡밥을 준비한다.
   2. 호박잎, 상추, 깻잎 등 신선한 쌈채소를 씻는다.
   3. 밥을 채소에 올리고, 두부쌈장 또는 우렁이쌈장 등을 곁들인다.
   4. 원한다면 삶은 닭가슴살, 오이, 파프리카 등 토핑 추가.
5. 필요한 재료와 양:
   - 현미밥 1공기
   - 호박잎·상추·깻잎 등 쌈채소 각 3장
   - 두부쌈장(또는 저염쌈장) 2큰술
   - 기타 토핑(닭가슴살 50g, 파프리카 등)
6. 난이도: 하
7. 이미지 URL: https://imgur.com/5vwqL9L
8. 요리 팁:
   - 쌈장은 너무 짜지 않도록 조절하세요.
   - 쌈채소를 다양하게 준비하면 영양 밸런스가 좋아집니다.[3]

---

**5. 그릭요거트&블루베리 볼 레시피**
1. 요리 이름: 그릭요거트&블루베리 볼
2. 카테고리: 기타(간편식/아침)
3. 조리 시간: 5분
4. 조리 방법:
   1. 그릭요거트를 볼에 담는다.
   2. 블루베리, 바나나 등 과일을 토핑한다.
   3. 호두, 아몬드 등 견과류, 오트밀을 조금 올린다.
   4. 꿀 한 스푼을 더해 완성한다(선택).
5. 필요한 재료와 양:
   - 그릭요거트 120g
   - 블루베리 30g, 바나나 1/2개
   - 호두·아몬드 각 1큰술
   - 오트밀 1큰술
   - 꿀 1작은술(선택)
6. 난이도: 하
7. 이미지 URL: https://imgur.com/2RVxH30
8. 요리 팁:
   - 신선한 제철 과일을 활용하면 맛과 영양이 풍부해집니다.
   - 견과류는 미리 볶아서 사용하는 것이 고소합니다.[2]

---

### 추천 이유

- 상황 분석: "건강한 메뉴"를 요청하였고, 사용자의 건강상 문제(아침에 밥 섭취 시 복통)와 새우 알레르기가 명확하게 제시되어 있습니다.
- 추천 기준: 소화에 부담이 적고, 섬유질·단백질·비타민이 풍부하면서도 칼로리가 낮은 식단 중심으로 메뉴를 엄선했습니다. 아침에 밥이 부담스러운 경우 가벼운 그릭요거트 볼이나 닭가슴살 샐러드를 추천드렸습니다.
- 개인화 고려사항: 새우 등 갑각류를 배제하였고, 아침 식사 시 소화 부담을 최소화하는 메뉴들을 포함했습니다. 현미밥·잡곡밥을 사용하거나, 쌈밥·샐러드·요거트 등 속이 편안한 재료를 위주로 구성했습니다.
- 추가 팁: 아침에는 과일·요거트·샐러드처럼 소화가 쉬운 식단으로, 점심/저녁에는 쌈밥·국밥 등 든든하면서도 건강한 한식 메뉴로 식단을 운영하시면 좋습니다. 각 메뉴는 반찬이나 채소를 다양하게 곁들이면 영양이 더욱 균형 잡힙니다.
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Parsing detailed recipe for menu: 콩나물국밥
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 이미지 URL 파싱 시작 ===
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 파싱할 콘텐츠 길이: 2956
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/9dk4kAf
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validating image URL: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validated URL (Pattern 7): null
2025-06-30 14:41:31.322 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 콩나물을 깨끗이 씻고 준비한다.
   2. 냄비에 물을 올리고 다시마, 멸치 등으로 육수를 우린다.
   3. 육수에 콩나물을 넣고 중약불에서 5~6분 끓인다.
   4. 다
2025-06-30 14:41:31.331 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:31.351 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new detailed recipe for menu: 콩나물국밥
2025-06-30 14:41:31.378 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved detailed recipe with ID: 177
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Parsing detailed recipe for menu: 두부스테이크 도시락
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 이미지 URL 파싱 시작 ===
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 파싱할 콘텐츠 길이: 2956
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/9dk4kAf
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validating image URL: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validated URL (Pattern 7): null
2025-06-30 14:41:31.392 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 콩나물을 깨끗이 씻고 준비한다.
   2. 냄비에 물을 올리고 다시마, 멸치 등으로 육수를 우린다.
   3. 육수에 콩나물을 넣고 중약불에서 5~6분 끓인다.
   4. 다
2025-06-30 14:41:31.394 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:31.396 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new detailed recipe for menu: 두부스테이크 도시락
2025-06-30 14:41:31.396 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved detailed recipe with ID: 178
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Parsing detailed recipe for menu: 닭가슴살 샐러드
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 이미지 URL 파싱 시작 ===
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 파싱할 콘텐츠 길이: 2956
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/9dk4kAf
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validating image URL: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validated URL (Pattern 7): null
2025-06-30 14:41:31.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 콩나물을 깨끗이 씻고 준비한다.
   2. 냄비에 물을 올리고 다시마, 멸치 등으로 육수를 우린다.
   3. 육수에 콩나물을 넣고 중약불에서 5~6분 끓인다.
   4. 다
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 닭가슴살 샐러드
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Parsing detailed recipe for menu: 쌈밥(현미/잡곡밥)
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 이미지 URL 파싱 시작 ===
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 파싱할 콘텐츠 길이: 2956
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/9dk4kAf
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validating image URL: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.398 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.399 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validated URL (Pattern 7): null
2025-06-30 14:41:31.399 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 콩나물을 깨끗이 씻고 준비한다.
   2. 냄비에 물을 올리고 다시마, 멸치 등으로 육수를 우린다.
   3. 육수에 콩나물을 넣고 중약불에서 5~6분 끓인다.
   4. 다
2025-06-30 14:41:31.399 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:31.399 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new detailed recipe for menu: 쌈밥(현미/잡곡밥)
2025-06-30 14:41:31.399 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved detailed recipe with ID: 179
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Parsing detailed recipe for menu: 그릭요거트&블루베리 볼
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === 이미지 URL 파싱 시작 ===
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - 파싱할 콘텐츠 길이: 2956
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/9dk4kAf
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validating image URL: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/9dk4kAf
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Validated URL (Pattern 7): null
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 콩나물을 깨끗이 씻고 준비한다.
   2. 냄비에 물을 올리고 다시마, 멸치 등으로 육수를 우린다.
   3. 육수에 콩나물을 넣고 중약불에서 5~6분 끓인다.
   4. 다
2025-06-30 14:41:31.400 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:41:31.401 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new detailed recipe for menu: 그릭요거트&블루베리 볼
2025-06-30 14:41:31.401 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-30 14:41:31.403 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved detailed recipe with ID: 180
2025-06-30 14:41:31.403 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-30 14:41:31.404 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:31.409 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-30 14:41:31.417 [http-nio-8080-exec-4] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=6, sessionId=07fc5663-96a7-4fcb-a94f-ea9a4d3271e8, isUserMessage=true
2025-06-30 14:41:31.419 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:41:31.421 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-30 14:41:31.422 [http-nio-8080-exec-4] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=6, sessionId=07fc5663-96a7-4fcb-a94f-ea9a4d3271e8, isUserMessage=false
2025-06-30 14:55:49.775 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:55:49.801 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:55:49.812 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:55:49.813 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:55:49.818 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:55:49.888 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        (
            ur1_0.recipe_id, ur1_0.user_id
        ) in ((?, ?))
2025-06-30 14:55:49.916 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserRecipe */insert 
    into
        user_recipe (recipe_id, user_id) 
    values
        (?, ?)
2025-06-30 14:56:47.388 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:56:47.425 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:56:47.460 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:56:47.463 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:56:47.521 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 14:56:47.658 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:56:47.659 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:56:47.660 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:56:47.660 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:56:47.661 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:56:47.661 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:56:47.663 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:56:47.664 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:56:47.675 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:56:47.675 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:56:47.684 [http-nio-8080-exec-8] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Recipe not found] with root cause
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.getRecipe(RecipeController.java:58)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:57:33.596 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:33.620 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:33.625 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:33.627 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:33.645 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        (
            ur1_0.recipe_id, ur1_0.user_id
        ) in ((?, ?))
2025-06-30 14:57:33.670 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* delete for ac.su.kdt.prompttest.entity.UserRecipe */delete 
    from
        user_recipe 
    where
        recipe_id=? 
        and user_id=?
2025-06-30 14:57:40.857 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:40.859 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:40.863 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:40.884 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:40.895 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 14:57:40.912 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:40.915 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:40.918 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:40.919 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:40.920 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:57:40.921 [http-nio-8080-exec-10] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Recipe not found] with root cause
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.getRecipe(RecipeController.java:58)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:57:53.344 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:53.347 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:53.349 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:53.352 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:53.354 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:57:53.358 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        (
            ur1_0.recipe_id, ur1_0.user_id
        ) in ((?, ?))
2025-06-30 14:57:53.361 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserRecipe */insert 
    into
        user_recipe (recipe_id, user_id) 
    values
        (?, ?)
2025-06-30 14:57:55.164 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:55.166 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:55.168 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.170 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.173 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 14:57:55.186 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:55.187 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:55.189 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:55.190 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:55.195 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:55.195 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.196 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.197 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.198 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.198 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 14:57:55.199 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:57:55.199 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:55.200 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.209 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.209 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Recipe not found] with root cause
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.getRecipe(RecipeController.java:58)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:57:55.211 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:57:55.217 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:55.218 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:55.228 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.229 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:57:55.230 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:57:55.230 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.232 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.232 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:57:55.242 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Recipe not found] with root cause
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.getRecipe(RecipeController.java:58)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:57:55.253 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:57:55.257 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:19.803 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-30 14:59:19.809 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-30 14:59:19.812 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-30 14:59:25.485 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-30 14:59:25.512 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 79556 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-30 14:59:25.512 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-30 14:59:25.512 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-30 14:59:25.562 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-30 14:59:25.563 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-30 14:59:26.527 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 14:59:26.529 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-30 14:59:26.566 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-30 14:59:26.568 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-30 14:59:26.569 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-30 14:59:26.570 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-30 14:59:26.582 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-30 14:59:26.582 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-30 14:59:26.585 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-30 14:59:26.586 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-30 14:59:26.586 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55 ms. Found 0 JDBC repository interfaces.
2025-06-30 14:59:26.606 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 14:59:26.607 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-30 14:59:26.695 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 83 ms. Found 8 JPA repository interfaces.
2025-06-30 14:59:26.720 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-30 14:59:26.721 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-30 14:59:26.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-30 14:59:26.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-30 14:59:26.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-30 14:59:26.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-30 14:59:26.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-30 14:59:26.730 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-30 14:59:26.731 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-30 14:59:26.731 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-30 14:59:26.731 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-30 14:59:27.670 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-30 14:59:27.677 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-30 14:59:27.679 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-30 14:59:27.679 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-30 14:59:27.725 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-30 14:59:27.726 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2162 ms
2025-06-30 14:59:27.761 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-30 14:59:27.899 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2fb21536
2025-06-30 14:59:27.902 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-30 14:59:27.917 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-30 14:59:28.037 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-30 14:59:28.065 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-30 14:59:28.083 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-30 14:59:28.197 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-30 14:59:28.242 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-30 14:59:28.243 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-30 14:59:29.074 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-30 14:59:29.196 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-30 14:59:29.603 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-30 14:59:30.065 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - JSqlParser is in classpath; If applicable, JSqlParser will be used
2025-06-30 14:59:30.066 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-30 14:59:30.431 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-30 14:59:30.432 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-30 14:59:31.994 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-30 14:59:32.076 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-30 14:59:32.233 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@78d2544f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@35570ecb, org.springframework.security.web.context.SecurityContextHolderFilter@1743474e, org.springframework.security.web.header.HeaderWriterFilter@757586ef, org.springframework.web.filter.CorsFilter@32f4a785, org.springframework.security.web.authentication.logout.LogoutFilter@1c58a48, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@2800f5de, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5f169c8c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@38912d25, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@385df087, org.springframework.security.web.session.SessionManagementFilter@89e507, org.springframework.security.web.access.ExceptionTranslationFilter@33f09f09, org.springframework.security.web.access.intercept.AuthorizationFilter@4d601513]
2025-06-30 14:59:32.774 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-30 14:59:32.792 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-30 14:59:32.799 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-30 14:59:32.844 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 7.631 seconds (process running for 8.403)
2025-06-30 14:59:39.136 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-30 14:59:39.136 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-30 14:59:39.138 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-30 14:59:39.927 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-30 14:59:39.967 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-30 14:59:40.632 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:40.652 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:40.658 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.662 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.672 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:40.689 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 14:59:40.768 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:40.770 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:40.772 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.774 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.778 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:40.782 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 14:59:40.819 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:40.866 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:40.875 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.887 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.895 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:40.915 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-30 14:59:40.975 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:40.976 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:40.978 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:40.980 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:40.990 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.992 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.999 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:40.999 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.014 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 14:59:41.044 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:41.047 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.052 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:41.053 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.053 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.054 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.057 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.057 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.060 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 14:59:41.060 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.067 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:59:41.073 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:41.077 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.087 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.091 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.092 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:41.093 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.096 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.097 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 14:59:41.099 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.105 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.107 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.108 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:59:41.109 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.116 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.118 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.118 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:41.118 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.120 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.123 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.128 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.131 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.134 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-30 14:59:41.138 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.146 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.155 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.159 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.163 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.167 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.171 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.173 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.173 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.173 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:59:41.173 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:59:41.173 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:59:41.174 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.176 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.177 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.178 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.178 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.178 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.178 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.178 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:59:41.178 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:59:41.178 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:59:41.178 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.179 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.181 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.181 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.181 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.181 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.181 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.181 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:59:41.181 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:59:41.181 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:59:41.183 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.184 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.185 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.185 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.185 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.185 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.185 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.185 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:59:41.185 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:59:41.185 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:59:41.190 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.215 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.223 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.223 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.223 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.223 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.223 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.223 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:59:41.223 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.223 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.225 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.225 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.226 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.230 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.234 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.238 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.241 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.249 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.252 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.254 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.254 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.254 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:59:41.254 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:59:41.254 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:59:41.257 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.259 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:59:41.259 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.259 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:59:41.259 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:59:41.259 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:59:41.261 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.261 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:59:41.261 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.261 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:59:41.261 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:59:41.261 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:59:41.262 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.262 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:59:41.262 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.262 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:59:41.262 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:59:41.262 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:59:41.263 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:59:41.264 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:59:41.264 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.264 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:59:41.264 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.264 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.264 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.264 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.271 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.276 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.284 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.285 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:59:41.285 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.285 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:59:41.285 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.285 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.285 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.285 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.287 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.291 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.303 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.312 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.315 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.318 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.318 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.318 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:59:41.318 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.318 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.319 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.320 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.321 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:59:41.322 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:59:41.326 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:59:41.327 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:59:41.328 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.328 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:59:41.328 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:59:41.328 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:59:41.331 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:59:41.331 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:59:41.331 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.331 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:59:41.331 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:59:41.331 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:59:41.334 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:59:41.334 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:59:41.335 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.335 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:59:41.335 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:59:41.335 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:59:41.336 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:59:41.339 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:59:41.339 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.339 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:59:41.340 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:59:41.340 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:59:41.342 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:59:41.343 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:59:41.343 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.343 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:59:41.343 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:59:41.343 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:59:41.345 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:59:41.345 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:59:41.345 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.345 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:59:41.345 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:59:41.345 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:59:41.348 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:59:41.348 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:59:41.348 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.348 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:59:41.348 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:59:41.348 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:59:41.351 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:59:41.351 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:59:41.352 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.352 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:59:41.352 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:59:41.352 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:59:41.354 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:59:41.354 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:59:41.354 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.354 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:59:41.354 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:59:41.354 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:59:41.358 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:59:41.358 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:59:41.358 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.358 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:59:41.358 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.358 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.358 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.358 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.395 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.404 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.407 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.408 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.410 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.412 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.412 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.412 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:59:41.412 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.412 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.412 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.412 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.413 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.415 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.416 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.417 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.418 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.418 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.419 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.419 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:59:41.419 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.419 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.419 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.419 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.419 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.420 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.421 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.422 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.423 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.423 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.423 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.423 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:59:41.423 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.423 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.423 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.423 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.424 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.427 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.428 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.429 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.430 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.431 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.431 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.431 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 콩나물국밥
- 두부스테이크 도시락
- 닭가슴살 샐러드
- 쌈밥(현미/잡곡밥)
- 그릭요거트&블루베리 볼

2025-06-30 14:59:41.431 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.431 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.431 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.431 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.431 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.433 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.435 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.436 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.437 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.437 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.461 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:41.472 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.478 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.480 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.485 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:59:41.496 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.496 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:59:41.496 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.496 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.496 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.496 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.497 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.502 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.505 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.508 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.509 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.511 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.513 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.515 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.516 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.516 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.516 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:59:41.516 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:59:41.516 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:59:41.517 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.517 [http-nio-8080-exec-2] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.518 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.518 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.518 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.518 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.518 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.518 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:59:41.518 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:59:41.518 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:59:41.519 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:59:41.520 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:59:41.522 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.523 [http-nio-8080-exec-2] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.523 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.524 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.524 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.524 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.524 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.524 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:59:41.524 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:59:41.524 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:59:41.524 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.525 [http-nio-8080-exec-2] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.526 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.527 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.528 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.537 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.540 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.542 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.546 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.548 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.549 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.549 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.549 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:59:41.550 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:59:41.550 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:59:41.552 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.552 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:59:41.552 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.552 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:59:41.552 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:59:41.552 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:59:41.553 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.553 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:59:41.553 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.553 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:59:41.553 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:59:41.553 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:59:41.554 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.554 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:59:41.554 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.554 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:59:41.554 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:59:41.554 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:59:41.559 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:59:41.559 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:59:41.559 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.559 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:59:41.559 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.559 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.560 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.560 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.561 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.565 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.569 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.572 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:59:41.572 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.572 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:59:41.572 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.572 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.572 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.572 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.573 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.574 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.575 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.576 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.577 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:59:41.578 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:59:41.580 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:59:41.580 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:59:41.580 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.580 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:59:41.580 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:59:41.580 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:59:41.581 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:59:41.581 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:59:41.581 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.581 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:59:41.581 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:59:41.581 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:59:41.582 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:59:41.586 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:59:41.586 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:59:41.586 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.586 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:59:41.587 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:59:41.587 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:59:41.588 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:59:41.588 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:59:41.588 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.588 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:59:41.588 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:59:41.588 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:59:41.589 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:59:41.589 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:59:41.589 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.589 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:59:41.589 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:59:41.589 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:59:41.590 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:59:41.590 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:59:41.590 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.590 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:59:41.590 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:59:41.590 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.591 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.592 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.592 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.593 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.598 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.600 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.605 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.607 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.609 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.609 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.609 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:59:41.609 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.609 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.609 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.609 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.610 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.613 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.615 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.617 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.618 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.618 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.618 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.618 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:59:41.618 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.618 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.618 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.618 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.619 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.620 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.621 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.622 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.623 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.624 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.624 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.624 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:59:41.624 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.624 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.624 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.624 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.624 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.626 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.629 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.631 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.633 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.633 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.634 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.634 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 콩나물국밥
- 두부스테이크 도시락
- 닭가슴살 샐러드
- 쌈밥(현미/잡곡밥)
- 그릭요거트&블루베리 볼

2025-06-30 14:59:41.634 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.634 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.634 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.634 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.634 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.636 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.637 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.638 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.638 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.639 [http-nio-8080-exec-2] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.665 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:41.671 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:41.676 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.684 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:41.691 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:59:41.702 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.702 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:59:41.702 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.702 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.702 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.702 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.704 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.708 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.714 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.722 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.725 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.727 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.729 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.730 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.732 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.732 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.732 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:59:41.732 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:59:41.732 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:59:41.733 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.736 [http-nio-8080-exec-3] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.743 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.743 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.743 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.743 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.743 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.743 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:59:41.743 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:59:41.743 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:59:41.776 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.778 [http-nio-8080-exec-3] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.781 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.783 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.784 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.784 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.784 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.785 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:59:41.787 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:59:41.787 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:59:41.790 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.794 [http-nio-8080-exec-3] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.796 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.796 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.796 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.796 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.796 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.796 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:59:41.796 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:59:41.796 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:59:41.797 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:41.799 [http-nio-8080-exec-3] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.800 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.802 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.806 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.810 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.817 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.830 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:41.833 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.835 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.838 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.838 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.838 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:59:41.838 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:59:41.838 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:59:41.839 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.839 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:59:41.840 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.840 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:59:41.840 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:59:41.840 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:59:41.845 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.845 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:59:41.845 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.845 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:59:41.845 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:59:41.845 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:59:41.849 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:41.849 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:59:41.849 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.849 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:59:41.849 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:59:41.849 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:59:41.851 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:59:41.852 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:59:41.852 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.852 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:59:41.852 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.852 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.852 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.852 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.856 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.861 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.872 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.875 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:59:41.875 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.875 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:59:41.875 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.875 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.876 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.876 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.887 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.893 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.895 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.897 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.901 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:59:41.903 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:59:41.906 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:59:41.906 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:59:41.906 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.906 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:59:41.906 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:59:41.906 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.907 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:59:41.908 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:59:41.908 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:59:41.908 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:59:41.908 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:59:41.908 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.908 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:59:41.908 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:59:41.909 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:59:41.910 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:59:41.910 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:59:41.910 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.910 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:59:41.911 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:59:41.911 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:59:41.912 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:59:41.912 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:59:41.913 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.913 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:59:41.913 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:59:41.913 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:59:41.913 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:59:41.913 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:59:41.914 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.914 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:59:41.914 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:59:41.914 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:59:41.916 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:59:41.916 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:59:41.916 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.916 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:59:41.916 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:59:41.916 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:59:41.917 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.918 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.920 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.921 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.924 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.926 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.928 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.928 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.928 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.928 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:59:41.928 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.928 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.928 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.928 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.929 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.930 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.932 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.933 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.937 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.939 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.939 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.939 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:59:41.939 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.939 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.940 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.940 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.941 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.944 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.946 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.947 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.955 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.956 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.957 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.957 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:59:41.957 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.957 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.957 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.957 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.959 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.961 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.963 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.964 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.968 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.969 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:41.970 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:41.970 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 콩나물국밥
- 두부스테이크 도시락
- 닭가슴살 샐러드
- 쌈밥(현미/잡곡밥)
- 그릭요거트&블루베리 볼

2025-06-30 14:59:41.970 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:41.970 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:41.971 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:41.971 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:41.972 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.974 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.976 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.993 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.995 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:41.996 [http-nio-8080-exec-3] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.010 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:42.014 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:42.017 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:42.020 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:42.025 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:59:42.039 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.039 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:59:42.039 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.039 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.039 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.039 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.040 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.044 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.047 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.050 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.053 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.056 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.057 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.059 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.060 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.060 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.060 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:59:42.060 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:59:42.060 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:59:42.061 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:59:42.062 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:59:42.063 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:59:42.066 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:59:42.067 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.068 [http-nio-8080-exec-4] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.068 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.069 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.069 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.069 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.069 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.069 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:59:42.069 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:59:42.069 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:59:42.069 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.071 [http-nio-8080-exec-4] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.071 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.071 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.071 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.071 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.071 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.071 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:59:42.071 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.071 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.072 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.072 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.075 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.077 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.079 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.080 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.082 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.090 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.093 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.094 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.094 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.094 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:59:42.094 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:59:42.094 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:59:42.096 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.096 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:59:42.096 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.096 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:59:42.096 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:59:42.096 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:59:42.097 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.097 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:59:42.097 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.097 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:59:42.097 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:59:42.097 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:59:42.098 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.098 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:59:42.098 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.098 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:59:42.098 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:59:42.098 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:59:42.101 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:59:42.102 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:59:42.102 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.102 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:59:42.102 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.102 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.102 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.102 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.108 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.111 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.113 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.115 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:59:42.115 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.115 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:59:42.115 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.115 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.115 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.115 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.117 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.121 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.123 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.126 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.130 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.131 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.131 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:59:42.132 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:59:42.136 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:59:42.136 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:59:42.136 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.136 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:59:42.136 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:59:42.136 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:59:42.138 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:59:42.138 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:59:42.138 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.138 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:59:42.138 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:59:42.138 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:59:42.139 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:59:42.139 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:59:42.139 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.139 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:59:42.139 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:59:42.139 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:59:42.140 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:59:42.141 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:59:42.141 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.141 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:59:42.141 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:59:42.141 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:59:42.143 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:59:42.143 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:59:42.143 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.143 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:59:42.143 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:59:42.143 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:59:42.145 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:59:42.145 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:59:42.145 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.145 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:59:42.145 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:59:42.145 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:59:42.146 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:59:42.146 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:59:42.146 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.146 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:59:42.146 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:59:42.146 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:59:42.148 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:59:42.148 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:59:42.148 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.148 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:59:42.148 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:59:42.148 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:59:42.150 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:59:42.150 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:59:42.150 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.150 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:59:42.150 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:59:42.150 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:59:42.152 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:59:42.152 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:59:42.152 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.152 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:59:42.152 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.152 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.152 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.152 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.154 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.156 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.159 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.170 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.175 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.178 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.179 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.179 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:59:42.179 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.179 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.179 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.180 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.202 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.233 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.235 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.237 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.238 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.239 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.239 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.239 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:59:42.239 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.239 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.239 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.239 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.240 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.244 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.247 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.250 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.273 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.279 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.279 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.279 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:59:42.280 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.281 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.281 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.281 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.285 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.293 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.296 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.297 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.298 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.298 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.298 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.298 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 콩나물국밥
- 두부스테이크 도시락
- 닭가슴살 샐러드
- 쌈밥(현미/잡곡밥)
- 그릭요거트&블루베리 볼

2025-06-30 14:59:42.298 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.298 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.298 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.298 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.299 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.300 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.301 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.303 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.305 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.305 [http-nio-8080-exec-4] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.323 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:42.331 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:42.351 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:42.376 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:42.389 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:59:42.397 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.398 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:59:42.398 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.398 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.398 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.398 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.400 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.404 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.405 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.408 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.411 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.438 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.442 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.444 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:59:42.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:59:42.447 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:59:42.448 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.449 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.449 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:59:42.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:59:42.450 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:59:42.451 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.452 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:59:42.452 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:59:42.453 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:59:42.453 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.456 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:59:42.457 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.459 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.460 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.461 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.462 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.465 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.471 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.475 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.478 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.480 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.480 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.480 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.480 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:59:42.480 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:59:42.480 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:59:42.481 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.481 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:59:42.484 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.484 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:59:42.484 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:59:42.484 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:59:42.485 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.485 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:59:42.485 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.485 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:59:42.485 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:59:42.485 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:59:42.486 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.486 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.487 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.488 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.488 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.489 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.490 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.492 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:59:42.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:59:42.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.492 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.495 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.496 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.497 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.498 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.499 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:59:42.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:59:42.500 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:59:42.501 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:59:42.501 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:59:42.501 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.501 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:59:42.501 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:59:42.501 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:59:42.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:59:42.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:59:42.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:59:42.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:59:42.502 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:59:42.505 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:59:42.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:59:42.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:59:42.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:59:42.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:59:42.506 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:59:42.507 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:59:42.507 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:59:42.507 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.507 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:59:42.507 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:59:42.507 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:59:42.508 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.509 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.511 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.512 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.513 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.514 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.515 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.516 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.516 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.516 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:59:42.516 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.516 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.516 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.516 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.516 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.518 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.521 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.522 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.541 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.542 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.542 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.542 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:59:42.542 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.542 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.542 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.542 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.545 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.548 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.551 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.554 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.556 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.558 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.559 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.559 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:59:42.559 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.559 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.559 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.559 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.561 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.566 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.568 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.571 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.572 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.573 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.573 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.573 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 콩나물국밥
- 두부스테이크 도시락
- 닭가슴살 샐러드
- 쌈밥(현미/잡곡밥)
- 그릭요거트&블루베리 볼

2025-06-30 14:59:42.573 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.573 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.573 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.573 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.573 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.574 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.577 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.579 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.584 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.585 [http-nio-8080-exec-5] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.613 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:42.624 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:42.636 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:42.643 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:42.654 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-30 14:59:42.666 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.666 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 닭볶음탕
- 소고기미역국
- 마파두부
- 김치전
- 참치계란볶음밥

2025-06-30 14:59:42.666 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.666 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.666 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.666 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.674 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.679 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.682 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.685 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.691 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.693 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.695 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.696 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.697 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.697 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.697 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 참치계란볶음밥
필요한 재료와 양:
- 즉석밥 1공기(약 180g)
   - 계란 2개
   - 참치캔 1개(90g)
   - 대파 2/3대
   - 양파 1/4개
   - 식용유 6큰술
   - 진간장 3큰술
   - 매실청 1큰술
   - 미원 0.2티스푼 (선택)
   - 참기름 0.4큰술

조리 방법:
1. 팬에 식용유 6큰술을 두르고, 대파 2/3대와 양파 1/4개를 썰어 넣어 중불에서 향이 올라올 때까지 볶아줍니다.
   2. 기름을 뺀 참치캔(90g)을 넣고 5분간 잘 볶아줍니다.
   3. 계란 2개를 풀어서 팬에 넣고 스크램블하듯 저어가며 익힙니다.
   4. 진간장 3큰술을 팬 가장자리에 둘러 강불에서 1분간 졸이듯 볶아 향을 더합니다.
   5. 즉석밥 1공기(약 180g)를 넣고 고루 섞으며 볶아줍니다.
   6. 매실청 1큰술, 미원 0.2티스푼(선택)을 넣고 잘 섞어줍니다.
   7. 마지막으로 참기름 0.4큰술을 두른 뒤 불을 끄고 윤기가 나게 섞으면 완성입니다[1].
2025-06-30 14:59:42.697 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 123
2025-06-30 14:59:42.697 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 123로 상세 레시피 조회 시도
2025-06-30 14:59:42.698 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.698 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 123 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 소고기미역국
필요한 재료와 양:
- 건미역 25g
   - 소고기 양지(또는 국거리용) 250g
   - 다진 마늘 1~1.5스푼
   - 참기름 1~2스푼
   - 국간장 1~2스푼
   - 소금 약간
   - 물 1300mL (또는 미역 불린 물)
   - 멸치액젓 1스푼 (선택)
   - 후추 약간
   - (선택) 청주 반컵[2]

조리 방법:
1. 건미역 25g을 미지근한 물에 10분간 불린 뒤, 먹기 좋은 길이로 자르고 조물조물 여러 번 헹궈서 물기를 뺍니다[3].
   2. 소고기 양지 250g을 찬물에 5분 정도 담가 핏물을 뺀 다음, 적당한 크기로 썹니다[3].
   3. 냄비에 참기름 1~2스푼을 두르고, 다진 마늘 1스푼과 소고기를 먼저 넣고 중불에서 볶아줍니다. 고기 겉면이 익기 시작하면 국간장 1~2스푼을 넣고 계속 볶아줍니다[1][3].
   4. 준비해둔 미역을 넣고, 미역이 푸른빛을 띨 때까지 2~3분간 달달 볶아줍니다[3].
   5. 물 1300mL(1.3L, 혹은 미역 불린 물 활용 가능)를 붓고 강불에서 끓입니다[1][3].
   6. 끓기 시작하면 거품을 걷어내고, 중불로 줄여 20분간 끓입니다. 중간에 간마늘 1/2~1스푼, 멸치액젓 1스푼(취향), 소금 약간으로 간을 맞춥니다[1][3].
   7. 마지막에 맛을 보고 필요하면 추가로 소금이나 국간장으로 간을 조절합니다. 불을 끄고 후추를 약간 뿌려 제공합니다[2].
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 124
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 124로 상세 레시피 조회 시도
2025-06-30 14:59:42.699 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 124 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 마파두부
필요한 재료와 양:
- 두부 300g (1모)
   - 돼지고기 다짐육 150g
   - 대파 1/4대(흰 부분)
   - 다진 마늘 1큰술
   - 당근 1/4개
   - (선택) 청양고추 2~3개, 홍고추 1개
   - 고추기름 2~3큰술
   - 진간장 1큰술
   - 맛술 1큰술
   - 두반장 1.5큰술
   - 굴소스 1큰술
   - 설탕 1큰술
   - 물 200~300ml
   - 감자전분 1큰술 + 물 2큰술 (전분물)
   - 소금, 후추 약간

조리 방법:
1. 두부는 2~3cm 크기로 깍둑썰기해서 끓는 물에 소금을 약간 넣고 1분간 데친 후 건져둡니다.
   2. 대파 흰 부분, 당근, (필요 시) 고추, 마늘을 다져둡니다.
   3. 팬에 고추기름 2~3큰술을 두르고 중약불에서 대파를 넣어 파기름을 냅니다.
   4. 파향이 올라오면 다진 마늘, 당근, (청양고추·홍고추가 있다면 함께) 넣고 볶아줍니다.
   5. 다진 돼지고기(150g)를 넣고 으깨듯이 익히다가 맛술 1큰술, 진간장 1큰술로 밑간을 합니다.
   6. 돼지고기가 익으면 물 200~300ml를 붓고, 설탕 1큰술, 굴소스 1큰술, 두반장 1.5큰술을 넣고 소스를 만듭니다.
   7. 소스가 부글부글 끓으면 데친 두부를 넣고 4~5분간 약불에서 조립니다.
   8. 전분 1큰술과 물 2큰술을 섞어 전분물을 만들어 조금씩 넣으며 농도를 조절합니다.
   9. 걸쭉해지면 불을 끄고 접시에 담아 완성합니다.
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 125
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 125로 상세 레시피 조회 시도
2025-06-30 14:59:42.700 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 125 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 3~4개 (중간 크기)
   - 양파 1개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 1개
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림(또는 청주) 1큰술
   - 식용유 1큰술
   - 후춧가루 약간
   - 물 350ml

조리 방법:
1. **닭 손질 및 잡내 제거**  
      닭은 깨끗하게 씻어 핏물과 불필요한 지방을 제거한 후, 끓는 물에 약 2~3분 데쳐 잡내를 뺀 뒤 다시 헹군다[1][3].
   2. **재료 손질**  
      감자, 양파, 당근은 큼직하게 깍둑썰기 하고, 대파와 고추는 어슷 썬다[3][4].
   3. **닭 볶기**  
      냄비에 식용유를 두르고 손질한 닭을 넣어 중불에서 볶다가 청주(또는 미림)를 부어 잡내를 한 번 더 날린다[3].
   4. **채소 넣기**  
      감자, 당근, 양파를 닭과 함께 볶는다.
   5. **양념장 만들기**  
      고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 모두 섞어 양념장을 만든다[1].
   6. **조리**  
      볶은 닭과 채소에 물(약 350ml)과 양념장을 같이 넣고 센 불에서 끓인다. 끓기 시작하면 중불로 줄여 20~25분 익힌다.
   7. **마무리**  
      대파, 청양고추, 홍고추를 넣고 5~10분 추가로 끓여 채소와 닭이 완전히 익으면 불을 끈다.
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 126
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 126로 상세 레시피 조회 시도
2025-06-30 14:59:42.701 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:42.702 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 레시피 ID 126 조회 실패: Recipe not found
java.lang.RuntimeException: Recipe not found
	at ac.su.kdt.prompttest.service.RecipeService.lambda$getRecipeById$1(RecipeService.java:103)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at ac.su.kdt.prompttest.service.RecipeService.getRecipeById(RecipeService.java:103)
	at jdk.internal.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.getRecipeById(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseAIMessage(ChatHistoryController.java:117)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.parseChatMessage(ChatHistoryController.java:92)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.getChatRoomMessages(ChatHistoryController.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-30 14:59:42.703 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음
- 비빔밥
- 된장찌개
- 바지락 칼국수
- 닭가슴살 샐러드

2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.704 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.707 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.709 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.712 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.716 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.717 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0
2025-06-30 14:59:42.720 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.720 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.721 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.721 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.721 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다.
2025-06-30 14:59:42.721 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 134
2025-06-30 14:59:42.721 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 134로 상세 레시피 조회 시도
2025-06-30 14:59:42.722 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.723 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/ZytvhVY.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2~4개
   - 양파 1개
   - 대파 1줄
   - 청양고추 1~2개
   - 홍고추 1~2개
   - 물 300ml~400ml
   - 고추장 1.5큰술
   - 고춧가루 2큰술
   - 진간장 5큰술
   - 올리고당 2큰술
   - 다진 마늘 1큰술
   - 다진 생강 0.2큰술
   - 미림 1큰술
   - 후춧가루 약간

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 2-3번 깨끗이 씻고, 필요하면 내장과 지방을 제거합니다[1].
   2. 닭의 잡내 제거를 위해 끓는 물에 닭을 3~5분간 데친 뒤 건져내어 한 번 더 헹궈줍니다[3][5].
   3. 감자(2~4개), 양파(1개), 당근(선택), 대파(1줄), 청양고추·홍고추(각 1~2개)를 먹기 좋은 크기로 썰어둡니다[2][3].
   4. 넓은 냄비에 손질한 닭과 썬 감자, 양파, 준비한 채소를 넣습니다.
   5. 물 300~400ml와 양념(고추장 1.5큰술, 고춧가루 2큰술, 진간장 5큰술, 올리고당 2큰술, 다진 마늘 1큰술, 다진 생강 0.2큰술, 미림 1큰술, 후춧가루 약간)을 모두 섞어 닭과 채소 위에 붓습니다[1].
   6. 중불에서 끓이다가 끓기 시작하면 불순물을 걷어내고, 감자가 익을 때까지 25분~30분간 뚜껑을 덮고 끓입니다.
   7. 마지막에 대파와 고추를 넣고 5분 정도 더 끓여 마무리합니다., title=닭볶음탕, category=한식, recipeId=134, cookingTime=50}
2025-06-30 14:59:42.723 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.723 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다.
2025-06-30 14:59:42.723 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 135
2025-06-30 14:59:42.723 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 135로 상세 레시피 조회 시도
2025-06-30 14:59:42.724 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.724 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/oBggpSH.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 당근 ½개
   - 대파 1대
   - 청양고추 2~4개
   - 진간장 8T
   - 고추가루 4T
   - 고추장 1T
   - 설탕 3T
   - 다진마늘 1T
   - 쌈장 1T
   - 소금 3꼬집
   - 후추 약간
   - 물 1L

조리 방법:
1. **닭 손질 및 데치기**: 닭볶음탕용 닭 1kg을 차가운 물에 깨끗이 헹군 뒤 내장과 잡내를 제거합니다. 끓는 물에 닭을 2~3분간 데친 후 찬물로 헹궈줍니다.
   2. **재료 손질**: 감자 2개는 껍질을 벗기고 큼직하게 썰고, 양파 1개도 큼직하게 썰어줍니다. 당근 ½개는 어슷하게 썹니다. 대파 1대와 청양고추 2~4개는 송송 썹니다.
   3. **양념장 만들기**: 볼에 진간장 8T, 고추가루 4T, 고추장 1T, 설탕 3T, 다진마늘 1T, 쌈장 1T, 소금 3꼬집, 후추 약간 넣고 고루 섞어 양념장을 만듭니다[1][5].
   4. **볶기**: 깊은 냄비나 팬에 닭을 넣고 양념장의 ⅔를 부어 중불에서 5분간 볶아 닭에 양념이 잘 배도록 합니다.
   5. **끓이기**: 물 1L를 붓고 감자, 양파, 당근을 넣은 뒤 센 불에서 끓입니다. 끓기 시작하면 거품을 걷어내고 불을 중간으로 줄여 20분간 끓입니다.
   6. **마무리 양념과 졸임**: 남은 양념장과 대파, 청양고추를 넣고 10~15분간 졸입니다. 국물이 자작하고 감자가 익으면 완성입니다., title=닭볶음탕, category=한식, recipeId=135, cookingTime=50}
2025-06-30 14:59:42.724 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.724 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5].
2025-06-30 14:59:42.724 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 136
2025-06-30 14:59:42.724 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 136로 상세 레시피 조회 시도
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭볶음탕
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/jw9nZZ3.jpg, description=필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1개
   - 당근 1개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 400ml
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간

조리 방법:
1. 닭고기는 흐르는 물에 깨끗이 2~3번 씻은 뒤, 불필요한 지방과 핏물을 제거합니다[1][3][5].
   2. 냄비에 물을 팔팔 끓인 뒤 닭을 넣고 2~3분간 데쳐 잡내를 제거한 후, 체에 받쳐 한 번 더 헹굽니다[3][5].
   3. 감자(4개), 양파(1개), 당근(1개), 대파(1대), 청양고추(2개), 홍고추(2개)를 먹기 좋은 크기로 썰어 준비합니다[2][3][5].
   4. 준비한 닭을 냄비에 넣고 물 400ml와 함께 고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루를 넣고 섞어 중불에 올립니다[1].
   5. 닭이 거의 익어가면 감자, 당근, 양파, 대파, 고추를 모두 넣고 골고루 섞으며 끓입니다. 국물이 자작해질 때까지 중불로 25~30분간 끓입니다[3][5].
   6. 마지막으로 간을 보고 기호에 따라 올리고당 또는 간장으로 단맛과 짠맛을 맞춘 뒤, 대파와 고추를 올려 마무리합니다[1][3][5]., title=닭볶음탕, category=한식, recipeId=136, cookingTime=60}
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭가슴살 샐러드
필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1].
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 137
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 137로 상세 레시피 조회 시도
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 닭가슴살 샐러드
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/p82XdXz.jpg, description=필요한 재료와 양:
- 닭가슴살 1조각(약 150~190g)
   - 양상추 또는 샐러드 채소 한 줌
   - 오이 1개
   - 파프리카 1개
   - 방울토마토 7~8개
   - 올리브유 1큰술
   - 발사믹 식초 1큰술
   - 홀그레인 머스터드 1작은술
   - 올리고당(또는 알룰로스 시럽) 1작은술
   - 다진 마늘 1작은술
   - 그라나파다노 치즈(생략 가능) 약간
   - 파슬리 가루 약간
   - 소금 한 꼬집
   - 후춧가루 약간

조리 방법:
1. 닭가슴살(생 또는 훈제)을 준비해 소금, 후추로 밑간하고, 올리브유를 두른 팬에서 노릇하게 구워 식혀둡니다[1][5].
   2. 샐러드 야채(양상추, 오이, 파프리카, 방울토마토 등)는 깨끗이 씻어 물기를 제거한 뒤 먹기 좋은 크기로 썹니다[1][3][5].
   3. 방울토마토는 반으로 자르고, 오이와 파프리카도 얇게 썹니다. 
   4. 구운 닭가슴살을 식힌 뒤 먹기 좋은 크기로 찢거나 썰어서 준비한 야채 위에 올립니다.
   5. 드레싱은 발사믹 식초 1큰술, 올리고당 1작은술, 홀그레인 머스터드 1작은술, 다진 마늘 1작은술, 올리브유 1큰술, 소금과 후추 약간을 잘 섞어 만듭니다[1].
   6. 샐러드 전체에 드레싱을 골고루 뿌립니다.
   7. 마지막으로 그라나파다노 치즈나 파슬리 가루 등을 취향대로 뿌려 완성합니다[1]., title=닭가슴살 샐러드, category=한식, recipeId=137, cookingTime=15}
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- **오므라이스**
- **된장찌개**
- **불고기**
- **치킨마요 샌드위치**
- **잡채**

2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.725 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.726 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.727 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.728 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.728 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 3개의 레시피 추출
2025-06-30 14:59:42.728 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.728 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 제육볶음 덮밥
- 비빔국수
- 소고기 가지덮밥
- 스팸두부샌드
- 에그인홀토스트

2025-06-30 14:59:42.728 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.728 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.729 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.729 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.729 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.730 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.732 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.735 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.736 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 3큰술
   - 다진마늘 1큰술
   - 쌈장 1큰술 (듬뿍)
   - 소금 3꼬집
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 물에 깨끗이 헹군 뒤 붙어있는 내장을 제거하고 기름은 남겨둡니다[1].
   2. 감자 2개의 껍질을 벗기고 1cm 두께로 썰며, 양파 1개는 굵게 채 썰고 대파 1대는 송송 썹니다. 청양고추 4개도 송송 썹니다[1].
   3. 큰 냄비에 닭을 넣고 물 1L를 부은 뒤 끓입니다. 끓는 중에 생기는 거품(불순물)을 걷어냅니다.
   4. 닭이 반쯤 익으면 감자, 양파, 대파, 청양고추를 넣어줍니다.
   5. 분량의 양념(진간장, 고춧가루, 설탕, 다진마늘, 쌈장, 소금)을 모두 넣고 고루 잘 섞어줍니다.
   6. 약불~중불에서 30분 정도, 감자가 익고 국물이 걸쭉해질 때까지 끓입니다. 중간중간 국물이 너무 졸아들면 물을 조금씩 추가하세요[1].
   7. 약간의 간을 보고 필요하면 소금을 추가합니다.
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 2개
   - 양파 1개
   - 대파 1대
   - 청양고추 3~4개
   - 진간장 8큰술
   - 고춧가루 4큰술
   - 설탕 2~3큰술
   - 다진마늘 2큰술
   - 고추장 1큰술
   - 쌈장 1큰술(생략 가능, 깊은 맛 추가)
   - 소금 2~3꼬집
   - 후추 약간
   - 참기름 1/2큰술(마무리용)
   - 물 1L

조리 방법:
1. 닭볶음탕용 닭(1kg)을 흐르는 물에 깨끗이 씻은 후, 내장이나 불필요한 기름은 제거하세요[1].
   2. 감자(2개)는 껍질을 벗기고 한입 크기로 썰고, 양파(1개)는 굵게 채썰고, 대파(1대)는 큼직하게 어슷썰기, 청양고추(3~4개)는 송송 썰어 준비하세요[1][5].
   3. 냄비에 닭과 물(1L)을 넣고 끓입니다. 끓기 시작하면 중불로 줄여 5분간 데쳐 불순물을 제거한 뒤, 물은 버리고 닭만 건져 씻어주세요.
   4. 냄비에 준비된 닭, 감자, 양파, 양념장(아래 참고), 물(다시 1L)을 넣고 뚜껑을 덮어 센 불에 끓입니다.
   5. 10~15분간 끓이다가, 감자가 거의 익으면 대파와 고추를 넣고 중불에서 약 10분 더 끓여 국물이 졸아들고 재료에 양념이 잘 배이도록 합니다.
   6. 국물이 자작하게 남으면 불을 끕니다.
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 닭볶음탕
필요한 재료와 양:
- 닭볶음탕용 닭 1kg
   - 감자 4개
   - 양파 1/2개
   - 당근 1/2개
   - 대파 1대
   - 청양고추 2개
   - 홍고추 2개
   - 물 300~400ml

   **양념**
   - 고추장 1.5숟가락
   - 고춧가루 2숟가락
   - 진간장 5숟가락
   - 올리고당 2숟가락
   - 다진 마늘 1숟가락
   - 다진 생강 0.2숟가락
   - 미림 1숟가락
   - 후춧가루 약간[1][3]

조리 방법:
1. 닭은 흐르는 물에 2~3회 깨끗이 씻고, 필요에 따라 지방을 제거한 뒤 준비합니다[1][3][5].
   2. 닭의 비린내를 제거하기 위해 끓는 물에 닭을 한번 데쳐낸 뒤 찬물에 헹궈 물기 를 뺍니다[3][5].
   3. 감자(4개), 양파(1/2개), 당근(1/2개), 대파(1대)는 먹기 좋은 크기로 썰고, 청양고추와 홍고추(각 2개)는 어슷하게 썰어둡니다[2][3][5].
   4. 냄비에 닭과 썰어둔 감자, 양파, 당근을 넣고 물(300~400ml)을 붓습니다[1][3].
   5. 닭볶음탕 양념(고추장, 고춧가루, 진간장, 올리고당, 다진 마늘, 다진 생강, 미림, 후춧가루)을 모두 넣고 중불에서 끓입니다[1].
   6. 끓기 시작하면 불을 중·약불로 줄이고 뚜껑을 덮어 20분 정도 끓입니다.
   7. 감자가 반쯤 익으면 대파와 고추를 넣고 10~15분 더 끓입니다.
   8. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다.
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 상세 레시피 키워드 '조리 방법:' 발견으로 메뉴 추천이 아님으로 판별
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지가 아님으로 판별됨
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 일반 텍스트 메시지로 처리됨
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자치즈볼
필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1].
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 148
2025-06-30 14:59:42.737 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 148로 상세 레시피 조회 시도
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자치즈볼
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/C6kxYBz.jpg, description=필요한 재료와 양:
- 감자(중간 크기) 3개(약 350g)
   - 소금 1티스푼
   - 모짜렐라치즈 적당량
   - 파슬리 약간

조리 방법:
1. 중간 크기 감자 3개(약 350g)는 껍질을 벗기고, 적당한 크기로 썹니다.
   2. 전자레인지 사용 가능한 용기에 감자를 담고, 물을 약간 넣은 뒤 전자레인지에서 7~10분간 완전히 익힙니다.
   3. 익힌 감자는 물기를 빼고 곱게 으깨줍니다.
   4. 으깬 감자에 소금 1티스푼을 넣고 섞어 반죽합니다.
   5. 감자 반죽을 적당량 집어 동그랗게 빚은 뒤, 가운데에 모짜렐라치즈를 넣고 다시 동그랗게 감쌉니다.
   6. 오븐 혹은 에어프라이어용 용기에 볼을 올리고, 원하는 경우 감자볼 위에 치즈를 약간 더 올립니다.
   7. 에어프라이어 170도에서 10분간 조리합니다.
   8. 완성된 감자치즈볼에 파슬리를 솔솔 뿌려 마무리합니다[1]., title=감자치즈볼, category=한식, recipeId=148, cookingTime=30}
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파볶음
필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3].
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 149
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 149로 상세 레시피 조회 시도
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파볶음
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3Eka726.jpg, description=필요한 재료와 양:
- 양파 1개 (약 270g)
   - 다진 마늘 1/2 큰 술
   - 대파 2 큰 술
   - 홍고추 1/2개
   - 청양고추 1/2개
   - 간장 2 큰 술
   - 올리브유(또는 식용유) 1 큰 술
   - 통깨 1 큰 술
   - 참기름 1/3 큰 술
   - 후추 약간

조리 방법:
1. 양파 1개를 껍질을 벗기고 1cm 두께로 채 썰어줍니다.
   2. 홍고추와 청양고추를 어슷하게 썰고, 대파를 송송 썹니다.
   3. 프라이팬에 올리브유(또는 식용유) 1 큰 술을 두르고, 다진 마늘 1/2 큰 술을 넣어 약간 볶아 향을 내줍니다.
   4. 썬 양파를 모두 넣고 센 불에서 2~3분간 빠르게 볶아줍니다.
   5. 간장 2 큰 술을 넣고 고루 볶아줍니다.
   6. 썰어둔 고추와 대파를 넣고 1분간 더 볶아줍니다.
   7. 후추 약간, 통깨 1 큰 술을 뿌려 고소한 맛을 더합니다.
   8. 마지막에 참기름 1/3 큰 술을 넣고 한 번 더 휘리릭 볶아 완성합니다[3]., title=양파볶음, category=한식, recipeId=149, cookingTime=10}
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 양파구이 조림
필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3].
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 150
2025-06-30 14:59:42.738 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 150로 상세 레시피 조회 시도
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 양파구이 조림
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/uuevgtI.jpg, description=필요한 재료와 양:
- 양파 1/2개
   - 식용유 1큰술
   - 양조간장 1큰술
   - 굴소스 1/2큰술 (없으면 생략 가능)
   - 맛술 1큰술
   - 물엿 1큰술
   - 다진 마늘 1/3큰술
   - 후추 약간
   - 물 50mL

조리 방법:
1. 양파 1/2개를 두툼하게 반달 모양으로 썰어줍니다.
   2. 팬에 식용유(약 1큰술)를 두르고 중불로 달군 뒤, 양파를 올려 앞뒤로 노릇노릇하게 굽습니다.
   3. 양파가 카라멜 색으로 구워지면, 한쪽에 모아두세요.
   4. 그릇에 양조간장 1큰술, 굴소스 1/2큰술(없으면 생략), 맛술 1큰술, 물엿 1큰술, 다진 마늘 1/3큰술, 후추 약간, 물 50mL를 섞어 양념장을 만듭니다.
   5. 구운 양파 위에 양념장을 붓고, 센불에서 바글바글 끓이면서 양념이 졸아들 때까지 조려줍니다.
   6. 양파를 앞뒤로 뒤집어 가며 양념이 골고루 배면 불을 끄고 그릇에 담아냅니다[3]., title=양파구이 조림, category=한식, recipeId=150, cookingTime=30}
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 청양고추 다짐장
필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요.
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 151
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 151로 상세 레시피 조회 시도
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 청양고추 다짐장
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/c0yCeQ0.jpg, description=필요한 재료와 양:
- 청양고추 2개
   - 양파 1/4개
   - 식용유 1큰술
   - 물 60ml (약 1/3컵)
   - 진간장 1큰술
   - 국간장 1/2큰술
   - 까나리액젓 1/2큰술
   - 참기름 1작은술
   - 통깨 약간

조리 방법:
1. 청양고추 2개를 깨끗하게 세척한 후 꼭지를 제거하고 잘게 다져주세요.
   2. 양파 1/4개를 잘게 다집니다.
   3. 중불로 달군 팬에 식용유 1큰술을 두르고 다진 청양고추와 양파를 넣어 1~2분간 볶아 향을 내줍니다.
   4. 물 60ml(종이컵 1/3컵)를 넣고, 진간장 1큰술, 국간장 1/2큰술, 까나리액젓 1/2큰술을 넣고 잘 저어줍니다.
   5. 약불로 줄인 뒤 2~3분간 소스가 자작해질 때까지 조리합니다.
   6. 불을 끄고 참기름 1작은술과 통깨 약간을 뿌려 마무리합니다.
   7. 완성된 고추다짐을 밥 위에 올리거나 반찬으로 곁들여 드세요., title=청양고추 다짐장, category=한식, recipeId=151, cookingTime=20}
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 감자전
필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3].
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 152
2025-06-30 14:59:42.739 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 152로 상세 레시피 조회 시도
2025-06-30 14:59:42.740 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 감자전
2025-06-30 14:59:42.740 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/OvRZLs5.jpg, description=필요한 재료와 양:
- 감자 4개
   - 소금 2꼬집
   - 후추 약간
   - 감자전분 3숟가락
   - 식용유(지짐용, 넉넉히)
   - (양념장) 다진 홍고추 1숟가락
   - (양념장) 다진 청양고추 2숟가락
   - (양념장) 양조간장 3숟가락
   - (양념장) 설탕 1숟가락
   - (양념장) 식초 2숟가락[3]

조리 방법:
1. 감자 4개를 깨끗이 씻고 껍질을 벗긴 뒤, 강판에 곱게 갈아주세요.
   2. 갈은 감자를 면포 등에 올려 물기를 최대한 짜내고, 갈은 감자와 나오는 전분물은 5분간 가라앉힌 뒤 윗물을 버리고 가라앉은 전분만 사용하세요.
   3. 감자 간 것과 가라앉은 전분을 잘 섞고, 소금 2꼬집, 후추 약간, 감자전분 3숟가락을 넣어 반죽합니다[3].
   4. 중불로 달군 팬에 식용유를 넉넉히 두른 뒤, 반죽을 한 숟가락씩 떠서 얇게 펼쳐 올려주세요.
   5. 앞뒤로 노릇하게 3~4분씩 구워 완성합니다.
   6. 찍어 먹을 양념장은 다진 홍고추 1숟가락, 다진 청양고추 2숟가락, 양조간장 3숟가락, 설탕 1숟가락, 식초 2숟가락을 섞어서 만드세요[3]., title=감자전, category=한식, recipeId=152, cookingTime=25}
2025-06-30 14:59:42.740 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.740 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 대파볶음
필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다.
2025-06-30 14:59:42.740 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 153
2025-06-30 14:59:42.740 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 153로 상세 레시피 조회 시도
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 대파볶음
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/u2ITPGx.jpg, description=필요한 재료와 양:
- 대파 1대(약 150~200g)
   - 파프리카 1/4개
   - 양파 1/4개
   - 식용유 3큰술
   - 소금 약간
   - 후춧가루 약간
   - 물 20ml
   - 간장 1큰술
   - 올리고당 1/2큰술
   - 참기름 1큰술

조리 방법:
1. 대파 1대(흰 부분 포함)를 깨끗이 씻어서 5cm 길이로 썬다. 굵은 부분은 세로로 한 번 갈라준다.
   2. 양파 1/4개와 파프리카 1/4개를 채 썰어 준비한다.
   3. 중불로 달군 팬에 식용유 3큰술을 두르고, 썰어둔 양파와 파프리카를 1분간 먼저 볶는다.
   4. 준비한 대파를 넣고 소금, 후춧가루를 약간씩 뿌린 뒤 2분 더 볶는다.
   5. 물 20ml, 간장 1큰술, 올리고당 1/2큰술을 넣고 한 번 더 센 불에서 볶아준다.
   6. 불을 끄고 참기름 1큰술을 두른 후, 재빨리 섞어 낸다., title=대파볶음, category=한식, recipeId=153, cookingTime=10}
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 가지 깐풍기
필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2].
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 154
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 154로 상세 레시피 조회 시도
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 가지 깐풍기
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/bNJfME8.jpg, description=필요한 재료와 양:
- 가지 2개
   - 홍고추 2개
   - 청양고추 2개
   - 대파 3큰술
   - 다진 마늘 1/2큰술
   - 전분가루 4큰술
   - 간장 2큰술
   - 굴소스 1/2큰술
   - 식초 2큰술
   - 설탕 1큰술
   - 맛술 2큰술
   - 식용유 (튀김용)
   - 참기름 1큰술
   - 통깨 약간
   - 소금 2꼬집

조리 방법:
1. 가지 2개를 한 입 크기로 썬 뒤 소금 2꼬집을 뿌려 10분간 절인다.
   2. 절인 가지의 물기를 키친타월로 눌러 제거한다.
   3. 가지에 전분가루 4큰술을 골고루 묻힌다.
   4. 대파 3큰술, 청양고추 2개, 홍고추 2개를 잘게 썬다.
   5. 간장 2큰술, 굴소스 1/2큰술, 식초 2큰술, 설탕 1큰술, 맛술 2큰술을 섞어 소스를 만든다.
   6. 팬에 식용유를 넉넉히 두른 뒤, 가지를 중강불에서 노릇하게 튀긴다.
   7. 다른 팬에 식용유 2큰술을 두르고 다진 마늘 1/2큰술, 대파, 썬 고추를 중약불에서 볶는다.
   8. 마늘향이 올라오면 미리 만든 소스를 붓고 끓인다.
   9. 소스가 끓어오르면 튀긴 가지를 넣고 재빨리 섞는다.
   10. 마지막에 참기름 1큰술과 통깨를 뿌린다[2]., title=가지 깐풍기, category=한식, recipeId=154, cookingTime=30}
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: ** 닭볶음탕
조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2].
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 155
2025-06-30 14:59:42.741 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 155로 상세 레시피 조회 시도
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: ** 닭볶음탕
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/3WUSl7b.jpg, description=조리 방법:
**  
   1. 닭 1kg을 찬물에 여러 번 헹군 뒤 내장(있을 경우)은 제거한다. 기름은 떼지 말고, 물기를 제거한다.
   2. 냄비에 물을 충분히 붓고 닭을 넣고 끓이다가, 거품이 생기면 물을 버리고 한 번 더 깨끗한 물(약 1L)로 헹군다.
   3. 감자, 당근, 양파, 대파, 청양고추는 먹기 좋은 크기로 손질한다.
   4. 진간장, 고추장, 고춧가루, 설탕(또는 물엿), 다진마늘, 맛술, 후추 등을 섞어 양념장을 만든다. (굴소스, 소고기다시다 등은 선택)
   5. 냄비에 닭과 양념장을 넣고 섞는다. 손질한 야채도 함께 넣는다.
   6. 물 1L 정도를 넣고 센 불에서 끓인 뒤, 중불로 줄여 20~25분간 끓인다. 중간중간 저어주며 간을 맞춘다.
   7. 파와 고추는 조금 남겨뒀다가 마지막에 넣어 볶아주면 풍미가 살아난다.
   8. 국물이 어느 정도 졸아들고, 닭과 감자가 완전히 익으면 불을 끈다[3][5][2]., title=** 닭볶음탕, category=한식, recipeId=155, cookingTime=30}
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 계란 장국수
필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2].
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 156
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 156로 상세 레시피 조회 시도
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 계란 장국수
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/pG24sZ1.jpg, description=필요한 재료와 양:
- 소면 180g
   - 달걀 2개
   - 대파 1대
   - 고추장 1작은술
   - 된장 1작은술
   - 치킨스톡 1작은술
   - 고춧가루 1작은술
   - 마늘 2톨 (다진 것)
   - 물 600ml

조리 방법:
1. 냄비에 물 600ml를 넣고, 국물 재료(고추장, 된장, 치킨스톡, 고춧가루, 다진 마늘)를 모두 넣고 팔팔 끓입니다.
   2. 대파는 송송 썰어 준비하고, 계란 2개는 깨서 잘 저어둡니다.
   3. 국물이 끓으면 소면(180g)을 넣고 젓가락으로 살살 저어가며 2분간 익힙니다.
   4. 소면이 익으면 대파를 넣고, 불을 약불로 줄입니다.
   5. 계란물을 천천히 냄비에 부은 뒤, 저어주지 않고 그대로 계란이 몽글몽글 익도록 둡니다.
   6. 국물이 적당히 졸아들면 불을 끄고 그릇에 담아 완성합니다[2]., title=계란 장국수, category=한식, recipeId=156, cookingTime=15}
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 김치 두루치기
필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3].
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: 157
2025-06-30 14:59:42.742 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID 157로 상세 레시피 조회 시도
2025-06-30 14:59:42.743 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 조회 성공: 김치 두루치기
2025-06-30 14:59:42.743 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 상세 정보 파싱 완료: {difficulty=중, imageUrl=https://i.imgur.com/asDJx8L.jpg, description=필요한 재료와 양:
- 삼겹살 400g
   - 김치 1.5컵
   - 양파 반 개
   - 대파 1대
   - 청양고추 2~3개
   - 당근 약간
   - 고추장 1.5큰술
   - 다진 마늘 반 큰술
   - 고춧가루 1큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 맛술 1큰술
   - 곰탕 육수 200ml
   - 들기름(또는 참기름) 1티스푼
   - 볶은 참깨 약간

조리 방법:
1. 삼겹살 400g과 김치 1.5컵을 먹기 좋은 크기로 잘라 준비합니다.
   2. 돼지고기에 김치 1.5컵, 고추장 1.5큰술, 다진 마늘 반 큰술, 고춧가루 1큰술, 진간장 1큰술, 설탕 1큰술, 맛술 1큰술을 넣고 잘 버무려 30분간 재웁니다.
   3. 고기 재우는 동안 양파 반 개, 대파 한 대, 청양고추 2~3개, 당근을 먹기 좋은 크기로 썰어둡니다.
   4. 프라이팬에 기름을 두르지 않고 강불에서 돼지고기와 김치를 볶다가, 중불로 낮추어 국물이 나오고 졸아들 때까지 계속 볶습니다.
   5. 곰탕 육수 200ml를 붓고 끓입니다. (이때 준비한 야채도 함께 넣어줍니다.)
   6. 국물이 자작하게 남을 때까지 끓이다가 불을 끕니다.
   7. 기호에 따라 들기름 또는 참기름 1티스푼을 넣고 마무리합니다.
   8. 완성된 두루치기를 그릇에 담고 볶은 참깨를 뿌려 마무리합니다[3]., title=김치 두루치기, category=한식, recipeId=157, cookingTime=35}
2025-06-30 14:59:42.743 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.743 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 김치찌개
- 소불고기덮밥
- 비빔국수
- 돼지고기 대파볶음
- 추억의 옛날도시락

2025-06-30 14:59:42.743 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.743 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.743 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.743 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.747 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.750 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.752 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.758 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.770 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.771 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.771 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.771 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 돼지고기 김치찌개
- 닭날개구이
- 두부조림
- 목살구이 & 버섯구이
- 김치전

2025-06-30 14:59:42.771 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.771 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.771 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.771 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.772 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.773 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.776 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.777 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.778 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.779 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.779 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.779 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 불고기덮밥
- 삼색소보로덮밥
- 비빔국수
- 바지락칼국수
- 에그인헬(쉬운 브런치 메뉴)

2025-06-30 14:59:42.779 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.779 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.779 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.779 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.779 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.780 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.780 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.781 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.781 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.782 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.782 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.782 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 비빔밥
- 김치찌개
- 바지락 칼국수
- 돼지고기 덮밥
- 계란말이 도시락

2025-06-30 14:59:42.782 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.782 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.782 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.782 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.782 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.783 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.785 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.785 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.787 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.787 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:42.787 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - === AI 메시지 파싱 시작 ===
2025-06-30 14:59:42.787 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 원본 메시지: 메뉴 추천:
- 콩나물국밥
- 두부스테이크 도시락
- 닭가슴살 샐러드
- 쌈밥(현미/잡곡밥)
- 그릭요거트&블루베리 볼

2025-06-30 14:59:42.787 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 레시피 ID: null
2025-06-30 14:59:42.787 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지 판별 시도...
2025-06-30 14:59:42.787 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 판별 결과: hasRecommendationKeywords=true, menuItemCount=5, isMenuList=true
2025-06-30 14:59:42.787 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 메시지로 판별됨
2025-06-30 14:59:42.788 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.789 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.790 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.791 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.792 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-30 14:59:42.793 [http-nio-8080-exec-7] INFO  a.s.k.p.c.ChatHistoryController - 메뉴 추천 파싱 완료. 총 5개의 레시피 추출
2025-06-30 14:59:56.781 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 14:59:56.810 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 14:59:56.816 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:56.819 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 14:59:56.826 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 14:59:56.851 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        (
            ur1_0.recipe_id, ur1_0.user_id
        ) in ((?, ?))
2025-06-30 14:59:56.872 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserRecipe */insert 
    into
        user_recipe (recipe_id, user_id) 
    values
        (?, ?)
2025-06-30 15:00:42.856 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:42.877 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:42.885 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.890 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.910 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 15:00:42.931 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:42.931 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:42.931 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:42.933 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:42.933 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:42.933 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:42.935 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.935 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.935 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.936 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:42.936 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.936 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.937 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.937 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:42.938 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:00:42.938 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:00:42.939 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.941 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 15:00:42.950 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.954 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:00:42.962 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:42.962 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:42.963 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:42.964 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:42.965 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.965 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.967 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.967 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.970 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:00:42.970 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:00:42.976 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:42.977 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:42.979 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.982 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:42.986 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:00:49.047 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:00:49.078 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:00:49.091 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:49.094 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:00:49.099 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        (
            ur1_0.recipe_id, ur1_0.user_id
        ) in ((?, ?))
2025-06-30 15:00:49.124 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* delete for ac.su.kdt.prompttest.entity.UserRecipe */delete 
    from
        user_recipe 
    where
        recipe_id=? 
        and user_id=?
2025-06-30 15:01:30.054 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:01:30.082 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:01:30.094 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:30.104 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:30.113 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 15:01:30.132 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:01:30.133 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:01:30.185 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:30.187 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:30.189 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:01:34.090 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:01:34.092 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:01:34.095 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:34.097 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:34.103 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 15:01:34.114 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:01:34.114 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:01:34.115 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:01:34.115 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:01:34.127 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:34.128 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:34.130 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:34.130 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:34.133 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:01:34.133 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 15:01:34.151 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:01:34.152 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:01:34.154 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:34.160 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:34.162 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=?
2025-06-30 15:01:37.056 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:01:37.058 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:01:37.061 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:37.065 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:37.068 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        (
            ur1_0.recipe_id, ur1_0.user_id
        ) in ((?, ?))
2025-06-30 15:01:37.073 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* delete for ac.su.kdt.prompttest.entity.UserRecipe */delete 
    from
        user_recipe 
    where
        recipe_id=? 
        and user_id=?
2025-06-30 15:01:38.712 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-30 15:01:38.713 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-30 15:01:38.716 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:38.717 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-30 15:01:38.719 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ur1_0.recipe_id,
        ur1_0.user_id 
    from
        user_recipe ur1_0 
    where
        ur1_0.user_id=?
2025-06-30 15:02:21.233 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-30 15:02:21.241 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-30 15:02:21.257 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
