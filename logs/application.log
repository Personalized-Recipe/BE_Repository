2025-06-29 15:42:07.121 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 15:42:07.160 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 13537 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:42:07.161 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:42:07.162 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:42:07.216 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 15:42:07.216 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 15:42:08.222 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:42:08.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:42:08.260 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.261 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.262 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.263 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.264 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.264 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.276 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.278 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.278 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:42:08.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:42:08.300 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:42:08.383 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 8 JPA repository interfaces.
2025-06-29 15:42:08.406 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:42:08.407 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:42:08.416 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 15:42:08.986 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:42:08.994 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:42:08.996 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:42:08.996 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:42:09.033 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:42:09.033 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1817 ms
2025-06-29 15:42:09.068 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 15:42:09.225 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7e78c8d8
2025-06-29 15:42:09.229 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 15:42:09.246 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:42:09.367 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:42:09.398 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 15:42:09.417 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:42:09.605 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:42:09.688 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:42:09.689 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:42:10.598 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:42:10.747 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:42:11.123 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:42:11.389 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 15:42:11.390 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 15:42:12.276 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:42:12.364 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:42:12.485 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@44f40829, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@23303427, org.springframework.security.web.context.SecurityContextHolderFilter@14aea603, org.springframework.security.web.header.HeaderWriterFilter@436d33b, org.springframework.web.filter.CorsFilter@65ffa82f, org.springframework.security.web.authentication.logout.LogoutFilter@22bcd047, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@55ea864b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@72e57a87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@42ac6588, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1d49a1c0, org.springframework.security.web.session.SessionManagementFilter@6b4dad51, org.springframework.security.web.access.ExceptionTranslationFilter@594ea9e5, org.springframework.security.web.access.intercept.AuthorizationFilter@1e5f2f87]
2025-06-29 15:42:12.813 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 15:42:12.835 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:42:12.842 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 15:42:12.854 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.08 seconds (process running for 6.727)
2025-06-29 15:42:42.268 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 15:42:42.268 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 15:42:42.273 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-06-29 15:42:43.021 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 15:42:43.043 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 15:42:43.662 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:42:43.672 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.676 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.681 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.690 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.696 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:42:43.739 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:42:43.739 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:42:43.740 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.740 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.745 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.745 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.748 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.749 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.751 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.753 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.759 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:42:43.759 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:42:54.321 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:42:54.325 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:54.331 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:54.338 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:54.364 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 15:42:54.365 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:54.378 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:42:54.379 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:42:54.380 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천
2025-06-29 15:42:54.380 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:42:54.380 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 15:42:54.383 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:42:54.385 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 15:42:54.388 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:42:54.390 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 15:42:54.390 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:42:54.836 [http-nio-8080-exec-5] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:42:54.850 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:44:51.755 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:44:51.785 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:44:51.790 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:44:51.793 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:44:51.799 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 15:44:51.802 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:44:51.803 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:44:51.804 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:44:51.804 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천해줘
2025-06-29 15:44:51.804 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:44:51.804 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 15:44:51.809 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:44:51.811 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 15:44:51.812 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:44:51.812 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 15:44:51.812 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:44:52.174 [http-nio-8080-exec-6] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:44:52.183 [http-nio-8080-exec-6] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:45:18.444 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:45:18.464 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:45:18.481 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:45:18.484 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:45:18.490 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 15:45:18.491 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:45:18.494 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:45:18.496 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:45:18.496 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 알려줘
2025-06-29 15:45:18.496 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:45:18.496 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 15:45:18.505 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:45:18.509 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 15:45:18.509 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:45:18.509 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 15:45:18.509 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:45:18.801 [http-nio-8080-exec-7] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:45:18.806 [http-nio-8080-exec-7] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:57:45.655 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 6 class path changes (0 additions, 6 deletions, 0 modifications)
2025-06-29 15:57:45.681 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:45.755 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:45.759 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 15:57:45.768 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 15:57:46.181 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 13537 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:57:46.182 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:57:46.182 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:57:46.576 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:46.576 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:57:46.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.589 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.590 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.591 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.592 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.592 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.593 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.594 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.594 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:57:46.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:46.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:57:46.621 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 8 JPA repository interfaces.
2025-06-29 15:57:46.630 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:46.630 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:57:46.636 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.636 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-29 15:57:46.898 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:57:46.901 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:46.901 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:57:46.901 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:57:46.916 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:57:46.916 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 724 ms
2025-06-29 15:57:46.935 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-06-29 15:57:46.956 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2ffeaeb7
2025-06-29 15:57:46.957 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-06-29 15:57:46.958 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:57:47.006 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:57:47.009 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:57:47.015 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:57:47.017 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:57:47.017 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:57:47.316 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:57:47.389 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:47.510 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:57:47.707 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:57:47.724 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:57:47.791 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6d1ef7ea, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3201c0a1, org.springframework.security.web.context.SecurityContextHolderFilter@325ff12, org.springframework.security.web.header.HeaderWriterFilter@111b6228, org.springframework.web.filter.CorsFilter@3c4d94c, org.springframework.security.web.authentication.logout.LogoutFilter@5810fa02, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@473c47bd, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6d1ac36d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@275ae6c4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@273bf7e0, org.springframework.security.web.session.SessionManagementFilter@310c5c80, org.springframework.security.web.access.ExceptionTranslationFilter@18becde6, org.springframework.security.web.access.intercept.AuthorizationFilter@1336edb1]
2025-06-29 15:57:47.998 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 15:57:48.009 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:48.011 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 15:57:48.020 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 2.031 seconds (process running for 941.885)
2025-06-29 15:57:48.023 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-06-29 15:57:49.413 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 19 class path changes (6 additions, 0 deletions, 13 modifications)
2025-06-29 15:57:49.415 [Thread-7] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:49.422 [Thread-7] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:49.423 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-06-29 15:57:49.424 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-06-29 15:57:49.654 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 13537 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:57:49.655 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:57:49.655 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:57:49.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:49.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:57:49.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.851 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.851 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:57:49.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:49.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:57:49.863 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 8 JPA repository interfaces.
2025-06-29 15:57:49.867 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:49.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2025-06-29 15:57:50.087 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:57:50.094 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:50.094 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:57:50.094 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:57:50.147 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:57:50.147 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 486 ms
2025-06-29 15:57:50.184 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-06-29 15:57:50.204 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@21a4b871
2025-06-29 15:57:50.205 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-06-29 15:57:50.207 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:57:50.239 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:57:50.241 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:57:50.244 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:57:50.246 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:57:50.246 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:57:50.430 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 15:57:50.469 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 14703 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:57:50.469 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:57:50.470 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:57:50.535 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 15:57:50.537 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 15:57:50.537 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:57:50.638 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:50.763 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:57:50.874 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 15:57:50.874 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 15:57:50.975 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:57:50.990 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:57:51.044 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1f2a17c4, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@786b3c64, org.springframework.security.web.context.SecurityContextHolderFilter@1158dd56, org.springframework.security.web.header.HeaderWriterFilter@73da8235, org.springframework.web.filter.CorsFilter@28d96698, org.springframework.security.web.authentication.logout.LogoutFilter@4114c65b, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@623a2e7e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@285bacdb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@fb748cf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6b87bef1, org.springframework.security.web.session.SessionManagementFilter@23b74d1a, org.springframework.security.web.access.ExceptionTranslationFilter@30b1217f, org.springframework.security.web.access.intercept.AuthorizationFilter@19850b2]
2025-06-29 15:57:51.141 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 15:57:51.148 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:51.150 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 15:57:51.154 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 1.637 seconds (process running for 945.02)
2025-06-29 15:57:51.155 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-06-29 15:57:51.480 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:51.482 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:57:51.524 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.525 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.526 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.527 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.528 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.529 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.530 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.531 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.531 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 47 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:57:51.546 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:51.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:57:51.656 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 107 ms. Found 8 JPA repository interfaces.
2025-06-29 15:57:51.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:51.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 15:57:52.292 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:57:52.298 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:52.300 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:57:52.301 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:57:52.340 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:57:52.342 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1803 ms
2025-06-29 15:57:52.373 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 15:57:52.613 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1c8c6383
2025-06-29 15:57:52.617 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 15:57:52.634 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:57:52.752 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:57:52.778 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 15:57:52.795 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:57:52.905 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:57:52.944 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:57:52.944 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:57:53.811 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:57:53.932 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:54.304 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:57:54.529 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 15:57:54.530 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 15:57:55.401 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:57:55.474 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:57:55.587 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@44f40829, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@23303427, org.springframework.security.web.context.SecurityContextHolderFilter@14aea603, org.springframework.security.web.header.HeaderWriterFilter@436d33b, org.springframework.web.filter.CorsFilter@65ffa82f, org.springframework.security.web.authentication.logout.LogoutFilter@22bcd047, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@55ea864b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@72e57a87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@42ac6588, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1d49a1c0, org.springframework.security.web.session.SessionManagementFilter@6b4dad51, org.springframework.security.web.access.ExceptionTranslationFilter@594ea9e5, org.springframework.security.web.access.intercept.AuthorizationFilter@1e5f2f87]
2025-06-29 15:57:55.894 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2025-06-29 15:57:55.912 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:55.924 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-29 15:57:55.929 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:55.931 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 15:57:55.936 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 15:57:55.954 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-29 15:57:55.965 [restartedMain] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-29 15:58:28.914 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:58:28.918 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2025-06-29 15:58:28.921 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2025-06-29 15:58:35.845 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 15:58:35.874 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 14924 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:58:35.875 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:58:35.876 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:58:35.926 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 15:58:35.927 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 15:58:36.930 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:58:36.932 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:58:36.971 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.973 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.975 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.975 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.976 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:58:36.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:58:36.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:58:37.096 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 101 ms. Found 8 JPA repository interfaces.
2025-06-29 15:58:37.128 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:58:37.128 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:58:37.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 15:58:37.753 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:58:37.760 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:58:37.762 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:58:37.762 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:58:37.803 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:58:37.805 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1876 ms
2025-06-29 15:58:37.857 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 15:58:37.997 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7e78c8d8
2025-06-29 15:58:38.001 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 15:58:38.016 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:58:38.135 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:58:38.164 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 15:58:38.184 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:58:38.303 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:58:38.350 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:58:38.350 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:58:39.211 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:58:39.333 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:58:39.702 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:58:39.929 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 15:58:39.930 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 15:58:40.660 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:58:40.756 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:58:40.876 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@139a5e82, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@28012bb6, org.springframework.security.web.context.SecurityContextHolderFilter@344d9a1b, org.springframework.security.web.header.HeaderWriterFilter@65eb4ca5, org.springframework.web.filter.CorsFilter@2d07b82b, org.springframework.security.web.authentication.logout.LogoutFilter@228fe32e, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@48a3d391, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@639c61ff, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@176c0c72, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3a094a9, org.springframework.security.web.session.SessionManagementFilter@23d35d60, org.springframework.security.web.access.ExceptionTranslationFilter@82737db, org.springframework.security.web.access.intercept.AuthorizationFilter@79184700]
2025-06-29 15:58:41.209 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 15:58:41.229 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:58:41.236 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 15:58:41.247 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.718 seconds (process running for 6.301)
2025-06-29 15:59:08.276 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 15:59:08.277 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 15:59:08.324 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 46 ms
2025-06-29 15:59:08.553 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:59:08.595 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:59:08.613 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:59:08.619 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:59:08.675 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 점심메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 15:59:08.676 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:59:08.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:59:08.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:59:08.680 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 점심메뉴 추천
2025-06-29 15:59:08.680 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:59:08.680 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 15:59:08.756 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:59:08.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 15:59:08.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:59:08.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 점심메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 15:59:08.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:59:18.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 15:59:18.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 15:59:18.792 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 삼색소보로덮밥**
- 카테고리: 한식
- 추천 이유: 한 그릇에 단백질(계란, 소고기)과 채소가 골고루 들어가 있어 균형 잡힌 점심식사에 적합합니다. 간단하게 만들 수 있어 바쁜 점심시간에 추천합니다[2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우가 들어가지 않으며, 아침에 밥을 먹으면 배가 아픈 점을 고려해 점심에 영양 보충이 잘 되는 메뉴입니다.

**2. 바지락 칼국수**
- 카테고리: 한식
- 추천 이유: 국물이 있는 메뉴로 속을 편안하게 해주며, 기름지지 않아 건강을 챙기기 좋습니다. 면을 사용해 아침보다 부담 없이 즐길 수 있어 점심 메뉴로 적합합니다[1].
- 예상 조리 시간: 30분
- 난이도: 중
- 개인화 고려사항: 주 재료가 바지락과 밀가루로 알레르기 걱정이 없고, 속이 편안한 메뉴입니다.

**3. 규동(소고기덮밥)**
- 카테고리: 일식
- 추천 이유: 단백질(소고기)과 밥을 함께 먹을 수 있어 한 그릇으로 충분한 포만감을 주는 점심용 메뉴입니다. 조리 과정도 간단하고, 빠르게 만들 수 있습니다[2].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 소고기를 사용해 새우 알레르기와 무관하며, 점심에 속을 든든하게 채울 수 있습니다.

**4. 김치볶음밥**
- 카테고리: 한식
- 추천 이유: 간단하지만 깊은 맛을 낼 수 있는 한 그릇 요리로, 남은 밥이나 냉장고 속 재료로 금방 만들 수 있습니다. 다양한 토핑(계란, 김 등)으로 영양을 보충할 수 있습니다[4].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우를 넣지 않고 만들 수 있고, 기름지지 않으면서도 포만감이 높은 메뉴입니다.

**5. 비빔국수**
- 카테고리: 한식
- 추천 이유: 면요리이면서 새콤달콤한 양념과 함께 채소, 계란 등을 곁들여 가볍지만 영양가 있게 즐길 수 있는 메뉴입니다. 여름이나 입맛 없을 때도 부담 없이 먹을 수 있습니다[1].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기와 무관하고, 아침에 속이 약한 분도 점심에 가볍게 먹기 좋습니다.

---

### 전체 추천 요약

- 상황 분석: 점심식사로, 아침에 밥을 먹으면 소화가 불편한 25세 남성의 건강과 영양을 고려함. 점심에는 영양을 채우되, 속에 부담을 주지 않는 메뉴가 필요합니다.
- 추천 기준: 알레르기(새우) 주의, 속을 편안하게 해주는 메뉴, 단백질과 채소 등 영양 균형, 비교적 간단하게 만들 수 있는 점심 중심으로 선정했습니다.
- 개인화 고려사항: 새우 알레르기와 아침 소화불량 이슈를 완전히 배제. 점심에는 든든하지만 속에 부담 없는 국물 메뉴와 한 그릇 요리를 위주로 추천했습니다.
- 추가 팁: 각 메뉴에 나물, 샐러드 등 신선한 야채를 추가하면 더욱 건강에 좋으며, 점심에는 무거운 튀김류보다는 담백하고 편안한 메뉴를 선택하는 것이 좋습니다.

레시피가 궁금하다면, '레시피'라는 단어를 포함해서 다시 요청해 주세요!
2025-06-29 15:59:18.792 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 15:59:22.650 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:59:22.654 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:59:22.657 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:59:22.663 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:59:22.667 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 삼색소보로덮밥 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 15:59:22.668 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 삼색소보로덮밥 레시피
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 15:59:22.673 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:59:22.675 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 15:59:22.676 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:59:22.676 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 삼색소보로덮밥 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 15:59:22.676 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:59:29.161 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 15:59:29.163 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 15:59:29.163 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 삼색소보로덮밥

2. 카테고리: 한식

3. 조리 시간: 30~40분

4. 조리 방법:
   1. 밥에 단촛물을 골고루 섞어 준비해둡니다. (식초 2큰술, 설탕 1큰술, 소금 1/2~1작은술 기준)
   2. 다진 소고기에 간장 1큰술, 맛술 1큰술, 참기름 1큰술, 설탕 1/2큰술, 다진 마늘 1/2큰술, 후추 약간을 넣고 잘 섞은 뒤, 중약불에서 고기가 익을 때까지 볶아줍니다[1][2].
   3. 계란 3~4개를 소금 약간, 맛술 1큰술, 참기름 1티스푼, 오일 1큰술과 함께 풀어 고운 스크램블을 만들어줍니다[1][2].
   4. 오이(혹은 애호박)를 잘게 썰어 들기름 2큰술, 소금, 후추와 함께 볶아 수분을 날려줍니다. 또는 시금치를 데쳐 나물무침으로 활용해도 좋습니다[1][2][3][4].
   5. 밥 위에 볶은 고기, 계란 스크램블, 볶은 오이(또는 애호박/시금치나물)를 세 줄로 가지런히 올려줍니다.

5. 필요한 재료와 양:
   - 밥 2공기
   - 다진 소고기 150g (돼지고기로 대체 가능)
   - 계란 3~4개
   - 오이 1/3~1개 (또는 애호박/데친 시금치)
   - 식초 2큰술
   - 설탕 1큰술(+1/2큰술, 고기 양념용)
   - 소금 1/2~1작은술
   - 간장 1큰술
   - 맛술 1큰술
   - 참기름 1큰술
   - 다진 마늘 1/2큰술
   - 후추 약간
   - 들기름 2큰술(채소 볶음용)
   - 오일 1큰술(계란 볶음용)

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/11/23/fd256c77f0e8e1efc505fa8d548c43e71.jpg

8. 요리 팁:
   - 고기는 센 불에서 볶으면 육즙이 빠지지 않아 촉촉하게 완성됩니다.
   - 계란은 중약불에서 천천히 저어가며 부드럽게 만들어주세요.
   - 오이나 애호박 등 채소는 수분을 충분히 날려야 밥과 잘 어울립니다.
   - 취향에 따라 당근, 시금치, 김치볶음 등을 추가하면 더 다채로운 맛을 즐길 수 있습니다.

**주의**: 새우 등 해산물은 본 레시피에 포함되어 있지 않아 알레르기 우려가 없습니다.
2025-06-29 15:59:29.168 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:59:29.173 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 15:59:29.173 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2021/11/23/fd256c77f0e8e1efc505fa8d548c43e71.jpg
2025-06-29 15:59:29.173 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/11/23/fd256c77f0e8e1efc505fa8d548c43e71.jpg
2025-06-29 15:59:29.174 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 2공기
   - 다진 소고기 150g (돼지고기로 대체 가능)
   - 계란 3~4개
   - 오이 1/3~1개 (또는 애호박/데친 시금치)
   - 식초 2큰술
   - 설탕 1큰술(+1/2큰술, 고기 양념용)
   - 소금 1/2~1작은술
   - 간장 1큰술
   - 맛술 1큰술
   - 참기름 1큰술
   - 다진 마늘 1/2큰술
   - 후추 약간
   - 들기름 2큰술(채소 볶음용)
   - 오일 1큰술(계란 볶음용)
2025-06-29 15:59:29.175 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-29 15:59:29.175 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 2공기
2025-06-29 15:59:29.175 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 2공기
2025-06-29 15:59:29.175 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 2공기
2025-06-29 15:59:29.181 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.187 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 15:59:29.187 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 소고기 150g (돼지고기로 대체 가능)
2025-06-29 15:59:29.187 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소고기, Amount: 150g
2025-06-29 15:59:29.187 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기, Amount: 150g
2025-06-29 15:59:29.191 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.192 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기' not found in DB. Skipping.
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 3~4개
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 계란 3~4개
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 1/3~1개 (또는 애호박/데친 시금치)
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 1/3~1개 (또는 애호박/데친 시금치)
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식초 2큰술
2025-06-29 15:59:29.194 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식초, Amount: 2큰술
2025-06-29 15:59:29.194 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식초, Amount: 2큰술
2025-06-29 15:59:29.197 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.198 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '식초' not found in DB. Skipping.
2025-06-29 15:59:29.199 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술(+1/2큰술, 고기 양념용)
2025-06-29 15:59:29.200 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 15:59:29.200 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 15:59:29.202 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.203 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/2~1작은술
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 1/2~1작은술
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 1큰술
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 1큰술
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 1큰술
2025-06-29 15:59:29.206 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.208 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 15:59:29.208 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 1큰술
2025-06-29 15:59:29.208 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 1큰술
2025-06-29 15:59:29.208 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 1큰술
2025-06-29 15:59:29.210 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.210 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 15:59:29.211 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-29 15:59:29.211 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 15:59:29.211 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 15:59:29.213 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.217 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1/2큰술
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 1/2큰술
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 들기름 2큰술(채소 볶음용)
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 들기름, Amount: 2큰술
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 들기름, Amount: 2큰술
2025-06-29 15:59:29.221 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.222 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '들기름' not found in DB. Skipping.
2025-06-29 15:59:29.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오일 1큰술(계란 볶음용)
2025-06-29 15:59:29.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 오일, Amount: 1큰술
2025-06-29 15:59:29.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 오일, Amount: 1큰술
2025-06-29 15:59:29.225 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.226 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '오일' not found in DB. Skipping.
2025-06-29 15:59:29.227 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 밥에 단촛물을 골고루 섞어 준비해둡니다. (식초 2큰술, 설탕 1큰술, 소금 1/2~1작은술 기준)
   2. 다진 소고기에 간장 1큰술, 맛술 1큰술, 참기름 1큰술, 설탕
2025-06-29 15:59:29.228 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 15:59:29.228 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 2공기
   - 다진 소고기 150g (돼지고기로 대체 가능)
   - 계란 3~4개
   - 오이 1/3~1개 (또는 애호박/데친 시금치)
   - 식초 2큰술
   - 설탕 1큰술(+1/2큰술, 고기 양념용)
   - 소금 1/2~1작은술
   - 간장 1큰술
   - 맛술 1큰술
   - 참기름 1큰술
   - 다진 마늘 1/2큰술
   - 후추 약간
   - 들기름 2큰술(채소 볶음용)
   - 오일 1큰술(계란 볶음용)

조리 방법:
1. 밥에 단촛물을 골고루 섞어 준비해둡니다. (식초 2큰술, 설탕 1큰술, 소금 1/2~1작은술 기준)
   2. 다진 소고기에 간장 1큰술, 맛술 1큰술, 참기름 1큰술, 설탕 1/2큰술, 다진 마늘 1/2큰술, 후추 약간을 넣고 잘 섞은 뒤, 중약불에서 고기가 익을 때까지 볶아줍니다[1][2].
   3. 계란 3~4개를 소금 약간, 맛술 1큰술, 참기름 1티스푼, 오일 1큰술과 함께 풀어 고운 스크램블을 만들어줍니다[1][2].
   4. 오이(혹은 애호박)를 잘게 썰어 들기름 2큰술, 소금, 후추와 함께 볶아 수분을 날려줍니다. 또는 시금치를 데쳐 나물무침으로 활용해도 좋습니다[1][2][3][4].
   5. 밥 위에 볶은 고기, 계란 스크램블, 볶은 오이(또는 애호박/시금치나물)를 세 줄로 가지런히 올려줍니다.
2025-06-29 15:59:29.232 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 15:59:29.233 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 삼색소보로덮밥
2025-06-29 15:59:29.261 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 15:59:29.272 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 90
2025-06-29 16:01:13.826 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:01:13.856 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:01:13.863 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:01:13.886 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:01:13.894 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:01:13.895 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:01:13.907 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:01:13.908 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:01:13.908 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천
2025-06-29 16:01:13.908 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:01:13.908 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:01:13.917 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:01:14.029 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:01:14.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:01:14.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:01:14.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:01:21.910 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:01:21.911 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:01:21.911 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 제육볶음**
- 카테고리: 한식
- 추천 이유: 직장인 점심으로 가장 인기 있는 메뉴 중 하나로, 든든하게 한 끼를 해결할 수 있고 전형적으로 밥과 함께 나와 에너지를 채워줍니다. 기름지지 않게 조리 가능하며, 간단한 반찬과도 잘 어울립니다[2][4].
- 예상 조리 시간: 25분
- 난이도: 중
- 개인화 고려사항: 새우 등 해산물이 들어가지 않아 알레르기 걱정이 없고, 아침에 속이 불편할 수 있지만 점심에는 부담 없이 즐기기 좋습니다.

**2. 순두부찌개**
- 카테고리: 한식
- 추천 이유: 부담 없이 속을 편안하게 해주는 메뉴로, 부드러운 순두부와 함께 영양소를 고루 섭취할 수 있습니다. 맵기 조절도 쉬워 개인 기호에 맞춰 먹을 수 있습니다[3].
- 예상 조리 시간: 20분
- 난이도: 중
- 개인화 고려사항: 일반적으로 새우 등 해산물 없이도 맛을 내거나 해산물 대신 돼지고기 등으로도 조리할 수 있어 알레르기 안전성이 높습니다.

**3. 소불고기덮밥**
- 카테고리: 한식
- 추천 이유: 달콤짭짤한 불고기는 점심에 부담 없이 먹기 좋고, 한 끼 식사로 든든하게 즐길 수 있습니다. 밥 위에 올라가 소화도 잘 되고 점심 메뉴로 인기가 많습니다[2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 해산물이 포함되지 않는 안전한 메뉴로, 건강을 생각해 기름기를 최소화하여 조리할 수 있습니다.

**4. 김치찌개**
- 카테고리: 한식
- 추천 이유: 대표적인 점심 메뉴로, 김치와 고기, 두부 등이 어우러져 영양과 맛을 모두 챙길 수 있으며 직장인 점심 베스트 메뉴 중 하나입니다[1][2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 없이도 충분히 맛있게 조리가 가능해 알레르기 걱정이 없습니다.

**5. 오므라이스**
- 카테고리: 분식/양식
- 추천 이유: 부담스럽지 않으면서도 든든한 한 끼 식사로, 부드러운 계란과 볶음밥의 조합이 남녀노소 모두에게 인기 있습니다. 한식에 가까운 스타일로 변형하여 먹을 수도 있습니다[3].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 기본적으로 해산물 없이 조리가 가능하며, 소화 부담이 적어 점심에 적합합니다.

### 전체 추천 요약
- 상황 분석: ‘내일 점심 메뉴’ 요청으로, 오전이 아닌 점심 식사에 어울리는 든든한 메뉴를 선정하였습니다. 아침에 밥을 먹으면 속이 불편하다는 점을 고려해 점심에 속 부담이 적고, 에너지 보충에 좋은 메뉴 위주로 구성했습니다.
- 추천 기준: 한식 선호도를 참고하되, 알레르기(새우)와 건강상태(위 부담 최소화)를 우선적으로 반영했습니다. 점심에 빠르게 조리 가능한 메뉴와 일반적으로 대중적으로 선호되는 메뉴를 위주로 선정했습니다.
- 개인화 고려사항: 새우를 포함한 해산물은 모두 제외했고, 점심에는 부담 없으면서도 영양을 충분히 보충할 수 있도록 했습니다. 매운맛, 기름기 등은 기호에 맞게 조절이 가능합니다.
- 추가 팁: 메뉴별로 입맛과 조리 여건에 맞게 맵기, 간, 재료를 조절하시면 건강하게 점심을 즐기실 수 있습니다. 더 다양한 메뉴나 ‘레시피’가 필요하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.
2025-06-29 16:01:21.913 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:01:25.452 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:01:25.454 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:01:25.459 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:01:25.464 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:01:25.471 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 제육볶음 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:01:25.472 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육볶음 레시피
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:01:25.476 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:01:25.476 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:01:25.477 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:01:25.477 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 제육볶음 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:01:25.477 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:01:36.904 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:01:36.905 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:01:36.905 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육볶음

2. 카테고리: 한식

3. 조리 시간: 약 30분

4. 조리 방법:
   1. 돼지고기(앞다리살 또는 목살 600g)의 핏물을 키친타월로 닦아 제거한 뒤 한 입 크기로 썰어 준비합니다[2][3].
   2. 볼에 돼지고기를 담고 진간장 2큰술, 설탕 1큰술을 넣어 조물조물 섞은 뒤 5~10분간 재워둡니다[2][3].
   3. 그동안 양파 1개는 채 썰고, 대파 1대와 청양고추(또는 꽈리고추 3~5개), 당근(1/2개)는 어슷하게 썰어둡니다[1][2].
   4. 별도의 그릇에 양념장을 만듭니다: 고추장 2큰술, 고춧가루 3~4큰술, 다진 마늘 1큰술, 미림(또는 맛술) 2큰술, 물엿 1~2큰술, 참기름 1큰술, 후추 약간, 매실액 1큰술을 넣어 잘 섞어줍니다[1][2][3].
   5. 재운 돼지고기에 양념장을 넣고 잘 무쳐 10분 정도 더 재워둡니다[1][2][3].
   6. 팬에 식용유(2큰술)를 두르고 대파를 먼저 볶아 파기름을 만듭니다[3].
   7. 중불에서 돼지고기와 양념을 넣고 볶다가 고기가 반쯤 익으면 준비한 양파, 당근, 고추를 넣고 볶아줍니다[1][2][3].
   8. 고기가 완전히 익으면 불을 끄고 참기름(1큰술)을 두른 후, 통깨를 뿌려 마무리합니다[1][3].
   9. 그릇에 담아 완성합니다.

5. 필요한 재료와 양:
   - 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/2개
   - 청양고추 또는 꽈리고추 3~5개
   - 진간장 2큰술
   - 설탕 1큰술
   - 고추장 2큰술
   - 고춧가루 3~4큰술
   - 다진 마늘 1큰술
   - 미림(맛술) 2큰술
   - 물엿 1~2큰술
   - 참기름 1큰술 (마무리용 1큰술 추가)
   - 후추 약간
   - 매실액 1큰술(생략 가능)
   - 식용유 2큰술
   - 통깨 약간
   - (기호에 따라) 미원 1/2티스푼

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/06/18/2d70b64640863f7a43066fbfe0a3a3bb1.jpg

8. 요리 팁:
   - 고기의 핏물을 반드시 제거하면 잡내가 훨씬 덜합니다.
   - 돼지고기는 앞다리살, 목살 등 기름이 적당히 있는 부위를 사용하면 더 맛있습니다.
   - 양념장은 고기와 야채에 골고루 잘 버무려 10분 이상 재워주면 맛이 더욱 깊어집니다.
   - 매운맛을 원하면 청양고추를, 덜 맵게 하고 싶다면 일반 고추나 꽈리고추를 사용하세요.
   - 야채는 너무 오래 볶지 말고 아삭함이 남아 있을 때 불을 끄면 식감이 더 좋습니다.

※ 새우 등 알레르기 유발 재료가 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.
2025-06-29 16:01:36.909 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2016/06/18/2d70b64640863f7a43066fbfe0a3a3bb1.jpg
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/06/18/2d70b64640863f7a43066fbfe0a3a3bb1.jpg
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/2개
   - 청양고추 또는 꽈리고추 3~5개
   - 진간장 2큰술
   - 설탕 1큰술
   - 고추장 2큰술
   - 고춧가루 3~4큰술
   - 다진 마늘 1큰술
   - 미림(맛술) 2큰술
   - 물엿 1~2큰술
   - 참기름 1큰술 (마무리용 1큰술 추가)
   - 후추 약간
   - 매실액 1큰술(생략 가능)
   - 식용유 2큰술
   - 통깨 약간
   - (기호에 따라) 미원 1/2티스푼
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 18
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살 또는 목살) 600g
2025-06-29 16:01:36.915 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 돼지고기(앞다리살 또는 목살) 600g
2025-06-29 16:01:36.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-29 16:01:36.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-29 16:01:36.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 16:01:36.918 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.921 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 16:01:36.921 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대
2025-06-29 16:01:36.921 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-29 16:01:36.921 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-29 16:01:36.924 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.925 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 16:01:36.925 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/2개
2025-06-29 16:01:36.925 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/2개
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 또는 꽈리고추 3~5개
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 청양고추 또는 꽈리고추 3~5개
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 2큰술
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 진간장, Amount: 2큰술
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 2큰술
2025-06-29 16:01:36.927 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.928 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-29 16:01:36.928 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 16:01:36.928 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 16:01:36.928 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 16:01:36.931 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.931 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 16:01:36.931 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 2큰술
2025-06-29 16:01:36.932 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 2큰술
2025-06-29 16:01:36.932 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 2큰술
2025-06-29 16:01:36.933 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 3~4큰술
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고춧가루 3~4큰술
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-29 16:01:36.938 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.939 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 16:01:36.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미림(맛술) 2큰술
2025-06-29 16:01:36.939 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 미림(맛술) 2큰술
2025-06-29 16:01:36.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물엿 1~2큰술
2025-06-29 16:01:36.940 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 물엿 1~2큰술
2025-06-29 16:01:36.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술 (마무리용 1큰술 추가)
2025-06-29 16:01:36.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 16:01:36.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 16:01:36.946 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 매실액 1큰술(생략 가능)
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 매실액, Amount: 1큰술
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 매실액, Amount: 1큰술
2025-06-29 16:01:36.952 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.954 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '매실액' not found in DB. Skipping.
2025-06-29 16:01:36.954 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 2큰술
2025-06-29 16:01:36.954 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 2큰술
2025-06-29 16:01:36.954 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 2큰술
2025-06-29 16:01:36.958 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 약간
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 통깨 약간
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (기호에 따라) 미원 1/2티스푼
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (기호에 따라) 미원 1/2티스푼
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기(앞다리살 또는 목살 600g)의 핏물을 키친타월로 닦아 제거한 뒤 한 입 크기로 썰어 준비합니다[2][3].
   2. 볼에 돼지고기를 담고 진간장 2큰술, 설탕 1
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/2개
   - 청양고추 또는 꽈리고추 3~5개
   - 진간장 2큰술
   - 설탕 1큰술
   - 고추장 2큰술
   - 고춧가루 3~4큰술
   - 다진 마늘 1큰술
   - 미림(맛술) 2큰술
   - 물엿 1~2큰술
   - 참기름 1큰술 (마무리용 1큰술 추가)
   - 후추 약간
   - 매실액 1큰술(생략 가능)
   - 식용유 2큰술
   - 통깨 약간
   - (기호에 따라) 미원 1/2티스푼

조리 방법:
1. 돼지고기(앞다리살 또는 목살 600g)의 핏물을 키친타월로 닦아 제거한 뒤 한 입 크기로 썰어 준비합니다[2][3].
   2. 볼에 돼지고기를 담고 진간장 2큰술, 설탕 1큰술을 넣어 조물조물 섞은 뒤 5~10분간 재워둡니다[2][3].
   3. 그동안 양파 1개는 채 썰고, 대파 1대와 청양고추(또는 꽈리고추 3~5개), 당근(1/2개)는 어슷하게 썰어둡니다[1][2].
   4. 별도의 그릇에 양념장을 만듭니다: 고추장 2큰술, 고춧가루 3~4큰술, 다진 마늘 1큰술, 미림(또는 맛술) 2큰술, 물엿 1~2큰술, 참기름 1큰술, 후추 약간, 매실액 1큰술을 넣어 잘 섞어줍니다[1][2][3].
   5. 재운 돼지고기에 양념장을 넣고 잘 무쳐 10분 정도 더 재워둡니다[1][2][3].
   6. 팬에 식용유(2큰술)를 두르고 대파를 먼저 볶아 파기름을 만듭니다[3].
   7. 중불에서 돼지고기와 양념을 넣고 볶다가 고기가 반쯤 익으면 준비한 양파, 당근, 고추를 넣고 볶아줍니다[1][2][3].
   8. 고기가 완전히 익으면 불을 끄고 참기름(1큰술)을 두른 후, 통깨를 뿌려 마무리합니다[1][3].
   9. 그릇에 담아 완성합니다.
2025-06-29 16:01:36.962 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:01:36.997 [http-nio-8080-exec-4] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 16 results were returned
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:301)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:244)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:478)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:165)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.NonUniqueResultException: Query did not return a unique result: 16 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 131 common frames omitted
2025-06-29 16:03:29.936 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:03:29.944 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:03:29.966 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:03:29.968 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:03:29.973 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 저녁 메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:03:29.975 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 저녁 메뉴 추천해줘
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:03:29.985 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:03:29.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:03:29.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:03:29.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 저녁 메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:03:29.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:03:41.722 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:03:41.722 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:03:41.722 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 돼지고기김치찌개**
- 카테고리: 한식
- 추천 이유: 저녁에 든든하게 먹을 수 있는 대표적인 한식 메뉴로, 밥과 곁들여 한 끼 식사로 적합합니다. 건강한 재료(김치, 돼지고기, 두부 등) 사용으로 영양 밸런스도 좋아 혼자 식사하기에도 부담이 없습니다[1].
- 예상 조리 시간: 30-40분
- 난이도: 중
- 개인화 고려사항: 새우 등 해산물 없이 조리 가능하며, 배에 부담이 덜한 따뜻한 국물 요리입니다.

**2. 소불고기**
- 카테고리: 한식
- 추천 이유: 한식 선호도와 저녁시간에 잘 어울리는 대표적 메뉴로, 단짠의 맛과 함께 부드러운 소고기가 밥과 잘 어울립니다. 식단의 메인반찬으로 가족 또는 혼자 먹기에도 적합합니다[2].
- 예상 조리 시간: 20-30분
- 난이도: 하
- 개인화 고려사항: 해산물 알레르기 걱정 없이 즐길 수 있습니다.

**3. 두부조림**
- 카테고리: 한식
- 추천 이유: 복부 부담이 적고, 간단하면서도 맛있는 반찬으로 저녁에 소화가 잘 되는 메뉴입니다. 건강을 신경 쓰거나 가벼운 저녁을 원할 때 강력 추천합니다[3].
- 예상 조리 시간: 15-20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없이 두부와 야채 위주로 조리합니다.

**4. 고등어김치찜**
- 카테고리: 한식
- 추천 이유: 건강한 등푸른 생선을 활용한 저녁 메뉴로, 밥반찬으로 훌륭하며 비린내도 적어 많은 20대 남성들에게 인기가 높습니다. 소화도 잘 되고 영양도 풍부합니다[1][2].
- 예상 조리 시간: 30-40분
- 난이도: 중
- 개인화 고려사항: 새우를 비롯한 갑각류가 들어가지 않아 안전합니다.

**5. 찹스테이크**
- 카테고리: 양식
- 추천 이유: 저녁 식사에 색다른 기분을 내고 싶을 때, 간단한 조리법으로 집에서도 레스토랑 느낌이 납니다. 소고기와 다양한 채소를 활용해 영양 균형도 좋습니다[2].
- 예상 조리 시간: 20-30분
- 난이도: 중
- 개인화 고려사항: 해산물 재료가 없어 알레르기 걱정 없이 즐길 수 있습니다.

### 전체 추천 요약

- 상황 분석: 25세 남성, 저녁 식사 요청. 복부 부담을 줄이기 위한 부드러운 메뉴와 알레르기(새우) 유발 재료를 제외한 메뉴만 추천.
- 추천 기준: 저녁에 든든하고 건강하게 먹을 수 있는 한식 위주 메뉴, 만들기 쉬우면서도 식탁에서 품격을 높일 수 있는 메뉴들로 구성.
- 개인화 고려사항: 새우 등 해산물 알레르기를 배제한 안전한 메뉴만 선별. 아침에 소화가 어려운 점을 고려해 저녁에 덜 부담되고, 필요시 단백질과 채소를 균형 있게 섭취할 수 있도록 구성.
- 추가 팁: 재료가 남는 경우 두부조림, 김치찌개 등은 냉장 보관해두었다가 다음날 간단한 반찬으로도 활용할 수 있습니다.

원하는 메뉴의 레시피가 필요하다면 '레시피'라는 단어를 포함해서 다시 요청해 주세요!
2025-06-29 16:03:41.723 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:03:47.467 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:03:47.470 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:03:47.474 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:03:47.479 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:03:47.482 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 고등어김치찜 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:03:47.483 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 고등어김치찜 레시피
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:03:47.489 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:03:47.494 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:03:47.494 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:03:47.494 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 고등어김치찜 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:03:47.494 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:04:01.728 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:04:01.730 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:04:01.730 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 고등어김치찜

2. 카테고리: 한식

3. 조리 시간: 약 40분

4. 조리 방법:
   1. 고등어 손질: 생고등어(2마리)는 깨끗하게 씻은 후, 소금 1스푼과 식초 2스푼, 물을 섞어 5~10분 담가둡니다. 이후 천일염 1스푼을 뿌려 10분 정도 절인 뒤 흐르는 물에 씻어 준비합니다[1].
   2. 채소 손질: 묵은지 1/2포기(약 350~750g)는 먹기 좋은 크기로 자르고, 무(1/4개, 약 400g)는 1cm 두께로 썰고, 양파(1개)는 채썰기, 대파(1~2대)와 청양고추(3~5개)는 어슷 썰어둡니다[1][3][4].
   3. 양념 만들기: 볼에 고춧가루 3스푼, 고추장 1스푼, 케첩 1스푼, 진간장 3스푼, 다진 마늘 2스푼, 다진 생강 1/2스푼, 설탕 2~3스푼, 참치액 1/2스푼(선택), 맛술 또는 소주 1스푼, 들기름 1스푼, 식용유 1스푼을 넣어 잘 섞어줍니다[1][2][3].
   4. 재료 깔기: 냄비 바닥에 무를 두껍게 깔고, 그 위에 묵은지를 올린 뒤, 손질한 고등어를 올립니다[1][4].
   5. 채소 올리기: 양파, 대파, 청양고추를 고등어 위에 넉넉히 얹습니다.
   6. 양념 넣기: 준비한 양념장을 골고루 끼얹은 뒤, 멸치 다시마 육수 또는 쌀뜨물(약 400~700ml)을 부어줍니다[1][2][3].
   7. 끓이기: 센 불에서 5분간 끓이다가 끓기 시작하면 중약불로 줄여 20~25분간 뚜껑을 덮고 푹 끓입니다. 김치와 고등어가 모두 부드러워질 때까지 자작하게 졸여줍니다[2][3].
   8. 마무리: 국물이 자작해지면 불을 끄고, 기호에 따라 들기름을 한 바퀴 두릅니다.

5. 필요한 재료와 양:
   - 고등어(생고등어): 2마리(중~대)
   - 묵은지: 1/2포기(350~750g)
   - 무: 1/4개(약 400g)
   - 양파: 1개
   - 대파: 1~2대
   - 청양고추: 3~5개
   - 소금: 1스푼
   - 식초: 2스푼
   - 천일염: 1스푼
   - 고춧가루: 3스푼
   - 고추장: 1스푼
   - 케첩: 1스푼
   - 진간장: 3스푼
   - 다진 마늘: 2스푼
   - 다진 생강: 1/2스푼
   - 설탕: 2~3스푼
   - 참치액: 1/2스푼(선택)
   - 맛술 또는 소주: 1스푼
   - 들기름: 1스푼
   - 식용유: 1스푼
   - 멸치 다시마 육수 or 쌀뜨물: 400~700ml

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/07/06/886e029c7b5b720348c93f20fb0e447b1.jpg

8. 요리 팁:
   - 고등어의 비린내 제거를 위해 소금, 식초, 맛술(또는 소주)로 미리 절이는 과정이 중요합니다[1][2].
   - 무를 넉넉히 넣으면 국물이 더욱 시원하고 깊은 맛을 냅니다.
   - 김치의 신맛이 강할수록 감칠맛이 살아납니다.
   - 조리 중간에 국물 농도를 조절하며 너무 졸아들면 육수를 추가하세요.
   - 알레르기 유발 재료(새우)는 포함되어 있지 않습니다.
2025-06-29 16:04:01.736 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2018/07/06/886e029c7b5b720348c93f20fb0e447b1.jpg
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/07/06/886e029c7b5b720348c93f20fb0e447b1.jpg
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 고등어(생고등어): 2마리(중~대)
   - 묵은지: 1/2포기(350~750g)
   - 무: 1/4개(약 400g)
   - 양파: 1개
   - 대파: 1~2대
   - 청양고추: 3~5개
   - 소금: 1스푼
   - 식초: 2스푼
   - 천일염: 1스푼
   - 고춧가루: 3스푼
   - 고추장: 1스푼
   - 케첩: 1스푼
   - 진간장: 3스푼
   - 다진 마늘: 2스푼
   - 다진 생강: 1/2스푼
   - 설탕: 2~3스푼
   - 참치액: 1/2스푼(선택)
   - 맛술 또는 소주: 1스푼
   - 들기름: 1스푼
   - 식용유: 1스푼
   - 멸치 다시마 육수 or 쌀뜨물: 400~700ml
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 21
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고등어(생고등어): 2마리(중~대)
2025-06-29 16:04:01.740 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고등어(생고등어), Amount: 2마리(중~대)
2025-06-29 16:04:01.740 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고등어(생고등어), Amount: 2마리(중~대)
2025-06-29 16:04:01.744 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.746 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '고등어(생고등어)' not found in DB. Skipping.
2025-06-29 16:04:01.746 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 묵은지: 1/2포기(350~750g)
2025-06-29 16:04:01.746 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 묵은지, Amount: 1/2포기(350~750g)
2025-06-29 16:04:01.746 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 묵은지, Amount: 1/2포기(350~750g)
2025-06-29 16:04:01.748 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.749 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '묵은지' not found in DB. Skipping.
2025-06-29 16:04:01.750 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 무: 1/4개(약 400g)
2025-06-29 16:04:01.750 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 무, Amount: 1/4개(약 400g)
2025-06-29 16:04:01.750 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 무, Amount: 1/4개(약 400g)
2025-06-29 16:04:01.751 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.752 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '무' not found in DB. Skipping.
2025-06-29 16:04:01.752 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파: 1개
2025-06-29 16:04:01.752 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 양파, Amount: 1개
2025-06-29 16:04:01.752 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 16:04:01.761 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.762 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 16:04:01.762 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파: 1~2대
2025-06-29 16:04:01.762 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 대파, Amount: 1~2대
2025-06-29 16:04:01.762 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1~2대
2025-06-29 16:04:01.766 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.767 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 16:04:01.767 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추: 3~5개
2025-06-29 16:04:01.767 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 청양고추, Amount: 3~5개
2025-06-29 16:04:01.767 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 3~5개
2025-06-29 16:04:01.768 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.769 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-29 16:04:01.769 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금: 1스푼
2025-06-29 16:04:01.769 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 소금, Amount: 1스푼
2025-06-29 16:04:01.769 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 1스푼
2025-06-29 16:04:01.770 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.770 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-29 16:04:01.770 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식초: 2스푼
2025-06-29 16:04:01.772 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 식초, Amount: 2스푼
2025-06-29 16:04:01.772 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식초, Amount: 2스푼
2025-06-29 16:04:01.774 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.775 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '식초' not found in DB. Skipping.
2025-06-29 16:04:01.775 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 천일염: 1스푼
2025-06-29 16:04:01.775 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 천일염, Amount: 1스푼
2025-06-29 16:04:01.775 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 천일염, Amount: 1스푼
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '천일염' not found in DB. Skipping.
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루: 3스푼
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고춧가루, Amount: 3스푼
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 3스푼
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장: 1스푼
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고추장, Amount: 1스푼
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 1스푼
2025-06-29 16:04:01.779 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.780 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 16:04:01.780 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케첩: 1스푼
2025-06-29 16:04:01.780 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 케첩, Amount: 1스푼
2025-06-29 16:04:01.780 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케첩, Amount: 1스푼
2025-06-29 16:04:01.781 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.782 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '케첩' not found in DB. Skipping.
2025-06-29 16:04:01.784 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장: 3스푼
2025-06-29 16:04:01.785 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 진간장, Amount: 3스푼
2025-06-29 16:04:01.785 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 3스푼
2025-06-29 16:04:01.785 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.786 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-29 16:04:01.786 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘: 2스푼
2025-06-29 16:04:01.786 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 마늘, Amount: 2스푼
2025-06-29 16:04:01.786 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 마늘, Amount: 2스푼
2025-06-29 16:04:01.787 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.787 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 마늘' not found in DB. Skipping.
2025-06-29 16:04:01.787 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 생강: 1/2스푼
2025-06-29 16:04:01.788 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 생강, Amount: 1/2스푼
2025-06-29 16:04:01.788 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 생강, Amount: 1/2스푼
2025-06-29 16:04:01.788 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.789 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 생강' not found in DB. Skipping.
2025-06-29 16:04:01.789 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕: 2~3스푼
2025-06-29 16:04:01.789 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 설탕, Amount: 2~3스푼
2025-06-29 16:04:01.789 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 2~3스푼
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참치액: 1/2스푼(선택)
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 참치액, Amount: 1/2스푼(선택)
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참치액, Amount: 1/2스푼(선택)
2025-06-29 16:04:01.791 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.792 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '참치액' not found in DB. Skipping.
2025-06-29 16:04:01.792 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 또는 소주: 1스푼
2025-06-29 16:04:01.792 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 맛술 또는 소주, Amount: 1스푼
2025-06-29 16:04:01.792 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술 또는 소주, Amount: 1스푼
2025-06-29 16:04:01.793 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.793 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술 또는 소주' not found in DB. Skipping.
2025-06-29 16:04:01.793 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 들기름: 1스푼
2025-06-29 16:04:01.793 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 들기름, Amount: 1스푼
2025-06-29 16:04:01.794 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 들기름, Amount: 1스푼
2025-06-29 16:04:01.794 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.795 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '들기름' not found in DB. Skipping.
2025-06-29 16:04:01.795 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유: 1스푼
2025-06-29 16:04:01.795 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 식용유, Amount: 1스푼
2025-06-29 16:04:01.795 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1스푼
2025-06-29 16:04:01.796 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.797 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 16:04:01.797 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 멸치 다시마 육수 or 쌀뜨물: 400~700ml
2025-06-29 16:04:01.797 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 멸치 다시마 육수 or 쌀뜨물, Amount: 400~700ml
2025-06-29 16:04:01.797 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 멸치 다시마 육수 or 쌀뜨물, Amount: 400~700ml
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '멸치 다시마 육수 or 쌀뜨물' not found in DB. Skipping.
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 고등어 손질: 생고등어(2마리)는 깨끗하게 씻은 후, 소금 1스푼과 식초 2스푼, 물을 섞어 5~10분 담가둡니다. 이후 천일염 1스푼을 뿌려 10분 정도 절인 뒤 흐르는 물
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 고등어(생고등어): 2마리(중~대)
   - 묵은지: 1/2포기(350~750g)
   - 무: 1/4개(약 400g)
   - 양파: 1개
   - 대파: 1~2대
   - 청양고추: 3~5개
   - 소금: 1스푼
   - 식초: 2스푼
   - 천일염: 1스푼
   - 고춧가루: 3스푼
   - 고추장: 1스푼
   - 케첩: 1스푼
   - 진간장: 3스푼
   - 다진 마늘: 2스푼
   - 다진 생강: 1/2스푼
   - 설탕: 2~3스푼
   - 참치액: 1/2스푼(선택)
   - 맛술 또는 소주: 1스푼
   - 들기름: 1스푼
   - 식용유: 1스푼
   - 멸치 다시마 육수 or 쌀뜨물: 400~700ml

조리 방법:
1. 고등어 손질: 생고등어(2마리)는 깨끗하게 씻은 후, 소금 1스푼과 식초 2스푼, 물을 섞어 5~10분 담가둡니다. 이후 천일염 1스푼을 뿌려 10분 정도 절인 뒤 흐르는 물에 씻어 준비합니다[1].
   2. 채소 손질: 묵은지 1/2포기(약 350~750g)는 먹기 좋은 크기로 자르고, 무(1/4개, 약 400g)는 1cm 두께로 썰고, 양파(1개)는 채썰기, 대파(1~2대)와 청양고추(3~5개)는 어슷 썰어둡니다[1][3][4].
   3. 양념 만들기: 볼에 고춧가루 3스푼, 고추장 1스푼, 케첩 1스푼, 진간장 3스푼, 다진 마늘 2스푼, 다진 생강 1/2스푼, 설탕 2~3스푼, 참치액 1/2스푼(선택), 맛술 또는 소주 1스푼, 들기름 1스푼, 식용유 1스푼을 넣어 잘 섞어줍니다[1][2][3].
   4. 재료 깔기: 냄비 바닥에 무를 두껍게 깔고, 그 위에 묵은지를 올린 뒤, 손질한 고등어를 올립니다[1][4].
   5. 채소 올리기: 양파, 대파, 청양고추를 고등어 위에 넉넉히 얹습니다.
   6. 양념 넣기: 준비한 양념장을 골고루 끼얹은 뒤, 멸치 다시마 육수 또는 쌀뜨물(약 400~700ml)을 부어줍니다[1][2][3].
   7. 끓이기: 센 불에서 5분간 끓이다가 끓기 시작하면 중약불로 줄여 20~25분간 뚜껑을 덮고 푹 끓입니다. 김치와 고등어가 모두 부드러워질 때까지 자작하게 졸여줍니다[2][3].
   8. 마무리: 국물이 자작해지면 불을 끄고, 기호에 따라 들기름을 한 바퀴 두릅니다.
2025-06-29 16:04:01.799 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:04:01.801 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 고등어김치찜
2025-06-29 16:04:01.822 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:04:01.824 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 91
2025-06-29 16:05:16.029 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:05:16.065 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:05:16.074 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:05:16.076 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:05:16.081 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 점심메뉴추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:05:16.082 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:05:16.085 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:05:16.085 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:05:16.086 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 점심메뉴추천해줘
2025-06-29 16:05:16.086 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:05:16.086 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:05:16.092 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:05:16.094 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:05:16.094 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:05:16.094 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 점심메뉴추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:05:16.094 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:05:24.324 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:05:24.325 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:05:24.325 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 비빔밥**
- 카테고리: 한식
- 추천 이유: 다양한 채소와 고기를 골고루 섞어먹어 영양이 풍부하면서도 포만감을 주는 대표 한식 점심 메뉴입니다. 따뜻한 밥과 신선한 재료로 부담 없이 즐길 수 있어 점심에 적합합니다[2].
- 예상 조리 시간: 15-20분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 위험이 없고, 속이 불편할 때에도 크게 부담 없는 한 그릇 식사입니다.

**2. 도시락 (돈까스/불고기/제육 등)**
- 카테고리: 한식
- 추천 이유: 다양한 반찬과 메인 메뉴(돈까스, 불고기, 제육 등)로 구성된 도시락은 한 끼로 든든하게 즐길 수 있습니다. 외부에서 간편하게 구매하거나 직접 구성해 먹을 수 있어 바쁜 점심시간에 제격입니다[2].
- 예상 조리 시간: 10-20분
- 난이도: 하~중
- 개인화 고려사항: 메뉴 선택 시 새우가 들어가지 않은 구성을 선택할 수 있습니다.

**3. 찌개류 (된장찌개, 김치찌개 등)**
- 카테고리: 한식
- 추천 이유: 한식 선호도와 점심에 든든한 메뉴를 원할 때 찌개류는 따뜻하고 자극적이지 않아 소화에 부담이 적습니다. 밥과 함께 먹어서 포만감이 높으며, 다양한 채소도 섭취할 수 있습니다[1][3].
- 예상 조리 시간: 15-25분
- 난이도: 중
- 개인화 고려사항: 된장, 김치찌개 등 기본 재료만 사용하면 새우 알레르기 문제가 없습니다.

**4. 서브웨이 샌드위치**
- 카테고리: 기타(샌드위치/건강식)
- 추천 이유: 신선한 채소와 고기를 직접 선택할 수 있어 건강하게 한 끼를 해결할 수 있습니다. 속이 예민할 때도 부담이 적은 메뉴이며, 메뉴 선택 시 해산물(새우) 없이 주문이 가능합니다[2].
- 예상 조리 시간: 5-10분(구매 시)
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료를 제외할 수 있어 안전합니다.

**5. 바지락 칼국수**
- 카테고리: 한식
- 추천 이유: 시원한 국물과 쫄깃한 면발이 점심으로 부담 없으며, 해산물 중에서도 비교적 알레르기 가능성이 낮은 바지락을 사용(단, 본인 체질에 맞는지 확인 필요)하므로 새우 알레르기를 피해 선택할 수 있습니다[4].
- 예상 조리 시간: 20분 내외
- 난이도: 중
- 개인화 고려사항: 새우 사용이 없고, 아침에 밥을 먹었을 때와 달리 점심에는 국물과 면류로 속을 편하게 할 수 있습니다.

### 전체 추천 요약
- 상황 분석: 점심식사로 든든하면서도 건강에 부담이 적은 메뉴를 찾는 상황으로 판단했습니다.
- 추천 기준: 한식을 우선적으로 고려했고, 영양 밸런스와 포만감, 조리 및 구매의 간편함을 기준으로 선정했습니다. 사용자의 새우 알레르기와 아침 식사 시 소화불량 경험을 반영해 점심엔 소화에 부담이 적은 메뉴를 위주로 추천했습니다.
- 개인화 고려사항: 메뉴별로 새우가 포함되지 않도록 구성했으며, 한 끼로 영양을 고루 섭취할 수 있도록 했습니다. 국물/채소가 많은 메뉴를 포함시켜 소화 불편을 줄이도록 했습니다.
- 추가 팁: 외식 메뉴 선택 시 샐러드나 야채를 추가하면 더 건강하게 즐길 수 있습니다. 만약 레시피가 필요하다면 '레시피'라는 단어를 포함해서 다시 요청해 주세요.
2025-06-29 16:05:24.326 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:05:27.957 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:05:27.960 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:05:27.964 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:05:27.968 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:05:27.970 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 서브웨이 샌드위치 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:05:27.971 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 서브웨이 샌드위치 레시피
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:05:27.978 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:05:27.979 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:05:27.980 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:05:27.980 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 서브웨이 샌드위치 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:05:27.980 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:05:36.463 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:05:36.465 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:05:36.466 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 서브웨이 스타일 샌드위치

2. 카테고리: 양식

3. 조리 시간: 15분

4. 조리 방법:
   1. 호기 롤(또는 바게트 등 샌드위치용 빵)을 반으로 갈라 토스터기에 살짝 굽거나 프라이팬에 구워 겉을 바삭하게 준비합니다.
   2. 빵 아랫면에 슬라이스 치즈(모짜렐라 혹은 체다 치즈)를 올립니다.
   3. 햄(또는 칠면조 슬라이스, 닭가슴살 슬라이스 등 원하는 육류)을 치즈 위에 올립니다.
   4. 양상추는 깨끗이 씻어 물기를 뺀 후 적당한 크기로 찢어 햄 위에 얹습니다.
   5. 토마토, 오이, 양파, (선택 사항: 할라피뇨, 올리브) 등 준비한 신선한 채소를 슬라이스하여 골고루 올립니다.
   6. 소금과 후추로 간을 한 뒤, 원하는 소스(스위트 칠리, 마요네즈, 머스타드 등)를 넉넉히 뿌려줍니다.
   7. 빵 윗면을 덮고, 랩이나 쿠킹호일을 이용해 김밥처럼 단단하게 말아줍니다.
   8. 먹기 좋은 크기로 잘라 접시에 담아 완성합니다.

5. 필요한 재료와 양:
   - 호기 롤 또는 바게트 빵 1개
   - 슬라이스 치즈 1장
   - 햄(또는 칠면조 슬라이스) 2~3장
   - 양상추 적당량
   - 토마토 2~3조각(슬라이스)
   - 양파 몇 조각(슬라이스)
   - 오이 2~3조각(슬라이스)
   - 올리브, 할라피뇨(선택) 약간
   - 스위트 칠리 소스 1스푼
   - 마요네즈 1스푼
   - 옐로우 머스타드 또는 홀그레인 머스타드 1스푼
   - 소금, 후추 약간

6. 난이도: 하

7. 이미지 URL: https://blog.kakaocdn.net/dn/bwfWyz/btsw1Kp2YpK/3mtaYKQCHxu2J9Iqyh7Jdk/img.jpg

8. 요리 팁:
   - 빵은 토스터나 팬에 살짝 구워야 겉은 바삭하고 속은 촉촉하게 즐길 수 있습니다.
   - 원하는 야채와 소스를 추가하거나 빼서 자신의 취향에 맞게 조절하세요.
   - 랩이나 쿠킹호일로 단단히 말아야 샌드위치가 흐트러지지 않습니다.
   - 재료는 모두 신선한 것일수록 식감과 맛이 살아납니다.

※ 새우 알레르기 정보: 본 레시피에는 새우가 포함되어 있지 않아 안심하고 드실 수 있습니다.
2025-06-29 16:05:36.479 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://blog.kakaocdn.net/dn/bwfWyz/btsw1Kp2YpK/3mtaYKQCHxu2J9Iqyh7Jdk/img.jpg
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://blog.kakaocdn.net/dn/bwfWyz/btsw1Kp2YpK/3mtaYKQCHxu2J9Iqyh7Jdk/img.jpg
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 호기 롤 또는 바게트 빵 1개
   - 슬라이스 치즈 1장
   - 햄(또는 칠면조 슬라이스) 2~3장
   - 양상추 적당량
   - 토마토 2~3조각(슬라이스)
   - 양파 몇 조각(슬라이스)
   - 오이 2~3조각(슬라이스)
   - 올리브, 할라피뇨(선택) 약간
   - 스위트 칠리 소스 1스푼
   - 마요네즈 1스푼
   - 옐로우 머스타드 또는 홀그레인 머스타드 1스푼
   - 소금, 후추 약간
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 호기 롤 또는 바게트 빵 1개
2025-06-29 16:05:36.492 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 빵, Amount: 1개
2025-06-29 16:05:36.492 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 빵, Amount: 1개
2025-06-29 16:05:36.495 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.498 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '빵' not found in DB. Skipping.
2025-06-29 16:05:36.498 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 1장
2025-06-29 16:05:36.498 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 16:05:36.498 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 16:05:36.501 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄(또는 칠면조 슬라이스) 2~3장
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄(또는 칠면조 슬라이스) 2~3장
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 적당량
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양상추 적당량
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 2~3조각(슬라이스)
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 토마토 2~3조각(슬라이스)
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 몇 조각(슬라이스)
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 몇 조각(슬라이스)
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 2~3조각(슬라이스)
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 2~3조각(슬라이스)
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브, 할라피뇨(선택) 약간
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 올리브, 할라피뇨(선택) 약간
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 스위트 칠리 소스 1스푼
2025-06-29 16:05:36.504 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소스, Amount: 1스푼
2025-06-29 16:05:36.504 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소스, Amount: 1스푼
2025-06-29 16:05:36.506 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.506 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '소스' not found in DB. Skipping.
2025-06-29 16:05:36.507 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 1스푼
2025-06-29 16:05:36.507 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마요네즈, Amount: 1스푼
2025-06-29 16:05:36.507 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마요네즈, Amount: 1스푼
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '마요네즈' not found in DB. Skipping.
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 옐로우 머스타드 또는 홀그레인 머스타드 1스푼
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 머스타드, Amount: 1스푼
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 머스타드, Amount: 1스푼
2025-06-29 16:05:36.509 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '머스타드' not found in DB. Skipping.
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 호기 롤(또는 바게트 등 샌드위치용 빵)을 반으로 갈라 토스터기에 살짝 굽거나 프라이팬에 구워 겉을 바삭하게 준비합니다.
   2. 빵 아랫면에 슬라이스 치즈(모짜렐라 혹은 
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 호기 롤 또는 바게트 빵 1개
   - 슬라이스 치즈 1장
   - 햄(또는 칠면조 슬라이스) 2~3장
   - 양상추 적당량
   - 토마토 2~3조각(슬라이스)
   - 양파 몇 조각(슬라이스)
   - 오이 2~3조각(슬라이스)
   - 올리브, 할라피뇨(선택) 약간
   - 스위트 칠리 소스 1스푼
   - 마요네즈 1스푼
   - 옐로우 머스타드 또는 홀그레인 머스타드 1스푼
   - 소금, 후추 약간

조리 방법:
1. 호기 롤(또는 바게트 등 샌드위치용 빵)을 반으로 갈라 토스터기에 살짝 굽거나 프라이팬에 구워 겉을 바삭하게 준비합니다.
   2. 빵 아랫면에 슬라이스 치즈(모짜렐라 혹은 체다 치즈)를 올립니다.
   3. 햄(또는 칠면조 슬라이스, 닭가슴살 슬라이스 등 원하는 육류)을 치즈 위에 올립니다.
   4. 양상추는 깨끗이 씻어 물기를 뺀 후 적당한 크기로 찢어 햄 위에 얹습니다.
   5. 토마토, 오이, 양파, (선택 사항: 할라피뇨, 올리브) 등 준비한 신선한 채소를 슬라이스하여 골고루 올립니다.
   6. 소금과 후추로 간을 한 뒤, 원하는 소스(스위트 칠리, 마요네즈, 머스타드 등)를 넉넉히 뿌려줍니다.
   7. 빵 윗면을 덮고, 랩이나 쿠킹호일을 이용해 김밥처럼 단단하게 말아줍니다.
   8. 먹기 좋은 크기로 잘라 접시에 담아 완성합니다.
2025-06-29 16:05:36.512 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:05:36.513 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 서브웨이 스타일 샌드위치
2025-06-29 16:05:36.522 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:05:36.526 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 92
2025-06-29 16:06:25.550 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:06:25.556 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:25.562 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:25.565 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:25.570 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 바지락 칼국수 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:06:25.573 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 바지락 칼국수 레시피
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:06:25.578 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:25.580 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:06:25.580 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:06:25.580 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 바지락 칼국수 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:06:25.580 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:06:36.491 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:06:36.494 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:36.498 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:36.501 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:36.506 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 찌개류 (된장찌개, 김치찌개 등) 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:06:36.506 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 찌개류 (된장찌개, 김치찌개 등) 레시피
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:06:36.510 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:36.511 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:06:36.511 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:06:36.511 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 찌개류 (된장찌개, 김치찌개 등) 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:06:36.511 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:06:36.877 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:06:36.878 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:06:36.878 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. **요리 이름:** 바지락 칼국수  
2. **카테고리:** 한식  
3. **조리 시간:** 약 30분  
4. **조리 방법:**  
   1. 바지락은 이미 해감된 것을 구입했다면, 한 번 더 모래가 남지 않도록 깨끗이 씻어주세요[1][4].
   2. 냄비에 물을 넣고 끓인 다음, 바지락을 넣고 약 5분 정도 삶아주세요. 중간중간 떠오르는 거품 등 불순물을 제거해주세요[1][3].
   3. 바지락이 입을 벌리면 건져내어 따로 둡니다. 국물은 거름망에 걸러 깨끗하게 걸러서 다시 냄비에 담고, 애호박과 감자(또는 당근), 대파(손질), 마늘(다진 것)을 넣고 소프트하게 끓여주세요[1][3].
   4. 재료가 어느 정도 익으면 칼국수면을 넣고 끓여주세요. 칼국수면은 따로 끓여도 됩니다[1][3].
   5. 국간장, 굵은소금(취향에 따라), 다진마늘로 간을 맞춘 뒤, 마지막에 고추(청양고추 등)와 대파, 부추 등을 넣어 마무리합니다[2][3].
   6. 불을 끄기 전에 바지락을 다시 넣고 한 번 더 끓여주면 더욱 맛있습니다.  
5. **필요한 재료와 양:**  
   - 바지락: 1kg (2~3인 기준)  
   - 칼국수면: 2개(2인 기준)  
   - 애호박: 1/2개  
   - 감자 또는 당근: 1개(또는 당근 50g)  
   - 대파: 1개  
   - 마늘: 2알(다진 마늘 1/2스푼)  
   - 청양고추: 1~2개  
   - 부추: 조금(고명용, 선택)  
   - 물: 3~4컵  
   - 국간장: 1큰술  
   - 굵은소금: 취향에 따라  
   - 미원: 선택(약간, 없어도 무방)  
6. **난이도:** 하  
7. **이미지 URL:**  
https://recipe1.ezmember.co.kr/cache/recipe/2020/07/17/2e6a5cb0c5c8d99cbb3d3c987b6e2e9e1.jpg  
8. **요리 팁:**  
   - 바지락은 꼭 모래가 남지 않도록 씻어주세요.  
   - 육수는 바지락, 무, 다시마, 멸치 등으로 내면 더 깊은 맛이 납니다. (단, 새우 알레르기 주의)  
   - 칼국수면은 따로 삶으면 면이 퍼지지 않고 쫄깃하게 즐길 수 있습니다[1][2].  
   - 마지막에 고추와 부추를 넣으면 칼칼하고 향긋한 맛이 살아납니다[3].  

> **알레르기 정보:**  
> **새우 알레르기**가 있으신 분은, 건새우로 육수를 내는 레시피(예: 일부 전문 레시피[2])는 사용하지 마세요.  
> **대체 레시피**: 건새우 대신 다시마, 무, 멸치(멸치도 알레르기가 있다면 생략), 표고버섯 등으로 육수를 내면 됩니다[3].  
> **이 레시피에는 새우 재료가 직접 포함되지 않았으므로 섭취 가능합니다.**  
> **단, 외부 레시피 자료에 새우가 포함된 경우가 있으니 주의하세요.**
2025-06-29 16:06:36.882 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:36.886 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from general pattern: https://recipe1.ezmember.co.kr/cache/recipe/2020/07/17/2e6a5cb0c5c8d99cbb3d3c987b6e2e9e1.jpg
2025-06-29 16:06:36.886 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/07/17/2e6a5cb0c5c8d99cbb3d3c987b6e2e9e1.jpg
2025-06-29 16:06:36.888 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-29 16:06:36.889 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern cooking method): **  
   1. 바지락은 이미 해감된 것을 구입했다면, 한 번 더 모래가 남지 않도록 깨끗이 씻어주세요[1][4].
   2. 냄비에 물을 넣고 끓인 다음, 바지락을 넣고 약 
2025-06-29 16:06:36.893 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:06:36.893 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
**  
   1. 바지락은 이미 해감된 것을 구입했다면, 한 번 더 모래가 남지 않도록 깨끗이 씻어주세요[1][4].
   2. 냄비에 물을 넣고 끓인 다음, 바지락을 넣고 약 5분 정도 삶아주세요. 중간중간 떠오르는 거품 등 불순물을 제거해주세요[1][3].
   3. 바지락이 입을 벌리면 건져내어 따로 둡니다. 국물은 거름망에 걸러 깨끗하게 걸러서 다시 냄비에 담고, 애호박과 감자(또는 당근), 대파(손질), 마늘(다진 것)을 넣고 소프트하게 끓여주세요[1][3].
   4. 재료가 어느 정도 익으면 칼국수면을 넣고 끓여주세요. 칼국수면은 따로 끓여도 됩니다[1][3].
   5. 국간장, 굵은소금(취향에 따라), 다진마늘로 간을 맞춘 뒤, 마지막에 고추(청양고추 등)와 대파, 부추 등을 넣어 마무리합니다[2][3].
   6. 불을 끄기 전에 바지락을 다시 넣고 한 번 더 끓여주면 더욱 맛있습니다.
2025-06-29 16:06:36.898 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:06:36.899 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: ** 바지락 칼국수
2025-06-29 16:06:36.901 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:06:36.907 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 93
2025-06-29 16:06:44.659 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:06:44.660 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:06:44.660 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 된장찌개

2. 카테고리: 한식

3. 조리 시간: 25분

4. 조리 방법:
   1. 애호박, 양파, 두부를 먹기 좋은 크기로 잘라 준비합니다.
   2. 느타리버섯은 가닥가닥 찢어줍니다.
   3. 대파, 청양고추, 홍고추는 1cm 두께로 송송 썰어줍니다.
   4. 육수용 멸치는 머리와 내장을 제거하고 3등분 정도로 찢어 준비합니다.
   5. 냄비에 손질한 멸치와 물, 양파를 넣고 끓여 멸치 육수를 만듭니다(약 10분).
   6. 육수가 우러나면 느타리버섯, 애호박, 다진 마늘과 된장을 넣고 잘 풀어줍니다.
   7. 된장이 풀어져 끓어오르면 대파, 청양고추, 홍고추를 넣고 한 번 더 끓입니다.
   8. 마지막에 두부를 넣고 1분 정도 더 끓여 완성합니다[2].

5. 필요한 재료와 양:
   - 된장 1/3컵(약 60g)
   - 물 4컵(약 750mL)
   - 다진 마늘 1/2큰술(8g)
   - 육수용 멸치 10마리(20g)
   - 애호박 1/2개(130g)
   - 양파 1/2개(80g)
   - 느타리버섯 1컵(80g)
   - 대파 2/3컵(60g)
   - 청양고추 2개(14g)
   - 홍고추 1/2개(7g)
   - 두부 1/2모(180g)
   - (기호에 따라 쇠고기 또는 돼지고기 50g 추가 가능)
   - (쌀뜨물 혹은 멸치육수 사용 추천)

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/03/06/83aa2827f1b1d6fe8e4fb433da914f8c1.jpg

8. 요리 팁:
   - 된장은 끓이는 중간에 한꺼번에 넣지 말고, 국자로 풀어가며 풀어주는 것이 국물맛이 탁해지지 않고 깔끔합니다.
   - 기호에 따라 감자, 표고버섯, 애호박 대신 다른 채소를 활용할 수 있습니다.
   - 국물 맛을 풍부하게 하고 싶으면 쌀뜨물이나 멸치+다시마 육수를 사용하세요.
   - 새우 알레르기가 있다면 멸치만으로 육수를 내세요(건새우 사용 금지)[2].

※ 새우 알레르기 주의: 본 레시피는 멸치육수를 사용하며, 새우는 포함되지 않았으니 안전하게 드실 수 있습니다. (육수에 건새우를 넣는 버전이 있으나, 새우 알레르기 시 반드시 제외해주세요.)
2025-06-29 16:06:44.666 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:44.670 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2020/03/06/83aa2827f1b1d6fe8e4fb433da914f8c1.jpg
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/03/06/83aa2827f1b1d6fe8e4fb433da914f8c1.jpg
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 된장 1/3컵(약 60g)
   - 물 4컵(약 750mL)
   - 다진 마늘 1/2큰술(8g)
   - 육수용 멸치 10마리(20g)
   - 애호박 1/2개(130g)
   - 양파 1/2개(80g)
   - 느타리버섯 1컵(80g)
   - 대파 2/3컵(60g)
   - 청양고추 2개(14g)
   - 홍고추 1/2개(7g)
   - 두부 1/2모(180g)
   - (기호에 따라 쇠고기 또는 돼지고기 50g 추가 가능)
   - (쌀뜨물 혹은 멸치육수 사용 추천)
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 된장 1/3컵(약 60g)
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 60g
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 60g
2025-06-29 16:06:44.674 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.676 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 16:06:44.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 4컵(약 750mL)
2025-06-29 16:06:44.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 4컵
2025-06-29 16:06:44.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 4컵
2025-06-29 16:06:44.677 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.678 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 16:06:44.678 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1/2큰술(8g)
2025-06-29 16:06:44.679 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 1/2큰술(8g)
2025-06-29 16:06:44.679 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 육수용 멸치 10마리(20g)
2025-06-29 16:06:44.679 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 멸치, Amount: 10마리
2025-06-29 16:06:44.679 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 멸치, Amount: 10마리
2025-06-29 16:06:44.680 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.682 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '멸치' not found in DB. Skipping.
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 1/2개(130g)
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 애호박 1/2개(130g)
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개(80g)
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개(80g)
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 느타리버섯 1컵(80g)
2025-06-29 16:06:44.684 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 느타리버섯, Amount: 1컵
2025-06-29 16:06:44.684 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 느타리버섯, Amount: 1컵
2025-06-29 16:06:44.685 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '느타리버섯' not found in DB. Skipping.
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 2/3컵(60g)
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 2/3컵(60g)
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 2개(14g)
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 청양고추, Amount: 2개
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 2개
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 홍고추 1/2개(7g)
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 홍고추 1/2개(7g)
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 두부 1/2모(180g)
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 두부 1/2모(180g)
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (기호에 따라 쇠고기 또는 돼지고기 50g 추가 가능)
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 돼지고기, Amount: 50g
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 돼지고기, Amount: 50g
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '돼지고기' not found in DB. Skipping.
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (쌀뜨물 혹은 멸치육수 사용 추천)
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (쌀뜨물 혹은 멸치육수 사용 추천)
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 애호박, 양파, 두부를 먹기 좋은 크기로 잘라 준비합니다.
   2. 느타리버섯은 가닥가닥 찢어줍니다.
   3. 대파, 청양고추, 홍고추는 1cm 두께로 송송 썰어줍니다.

2025-06-29 16:06:44.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 된장 1/3컵(약 60g)
   - 물 4컵(약 750mL)
   - 다진 마늘 1/2큰술(8g)
   - 육수용 멸치 10마리(20g)
   - 애호박 1/2개(130g)
   - 양파 1/2개(80g)
   - 느타리버섯 1컵(80g)
   - 대파 2/3컵(60g)
   - 청양고추 2개(14g)
   - 홍고추 1/2개(7g)
   - 두부 1/2모(180g)
   - (기호에 따라 쇠고기 또는 돼지고기 50g 추가 가능)
   - (쌀뜨물 혹은 멸치육수 사용 추천)

조리 방법:
1. 애호박, 양파, 두부를 먹기 좋은 크기로 잘라 준비합니다.
   2. 느타리버섯은 가닥가닥 찢어줍니다.
   3. 대파, 청양고추, 홍고추는 1cm 두께로 송송 썰어줍니다.
   4. 육수용 멸치는 머리와 내장을 제거하고 3등분 정도로 찢어 준비합니다.
   5. 냄비에 손질한 멸치와 물, 양파를 넣고 끓여 멸치 육수를 만듭니다(약 10분).
   6. 육수가 우러나면 느타리버섯, 애호박, 다진 마늘과 된장을 넣고 잘 풀어줍니다.
   7. 된장이 풀어져 끓어오르면 대파, 청양고추, 홍고추를 넣고 한 번 더 끓입니다.
   8. 마지막에 두부를 넣고 1분 정도 더 끓여 완성합니다[2].
2025-06-29 16:06:44.690 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:06:44.691 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 된장찌개
2025-06-29 16:06:44.692 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:06:44.702 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 94
2025-06-29 16:06:50.923 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:06:50.925 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:50.928 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:50.932 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:50.934 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:06:50.935 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:06:50.940 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:50.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:06:50.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:06:50.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:06:50.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:06:57.116 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:06:57.116 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:06:57.116 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 수제 햄버거

2. 카테고리: 양식

3. 조리 시간: 40분

4. 조리 방법:
   1. 양파는 채 썰어 팬에 식용유를 두르고 갈색이 될 때까지 볶다가, 발사믹 식초 1/4컵과 설탕 1큰술을 넣고 잘 볶아 캐러멜라이즈드 양파를 만듭니다[2].
   2. 소고기 다짐육(200g)과 돼지고기 다짐육(300g)을 섞어 소금, 후추로 간하고 동그랗게 패티 모양을 만듭니다[2][4].
   3. 햄버거 빵(번)을 반으로 자르고, 팬에 버터 10g을 녹여 안쪽 면만 노릇하게 굽습니다[1][2].
   4. 같은 팬에 식용유와 남은 버터를 두른 후, 패티를 올리고 중불에서 한쪽 면이 갈색이 되도록 2분 정도 굽다가 뒤집어 속까지 충분히 익힙니다. 패티 위에 체다 치즈를 올려 뚜껑을 덮고 치즈가 녹게 합니다[2].
   5. 빵 아래쪽에는 마요네즈와 홀그레인 머스타드 또는 케첩을 바릅니다[1][2].
   6. 그 위에 상추, 토마토 슬라이스, 오이 피클, 캐러멜라이즈드 양파를 올립니다[2][3].
   7. 준비된 패티(치즈 올린 상태)를 올리고 빵 윗부분으로 덮어 완성합니다[1][2].

5. 필요한 재료와 양:
   - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 빵(번) 2개
   - 체다 치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 버터 10g
   - 소금, 후추 약간
   - 마요네즈, 홀그레인 머스타드, 케첩 적당량
   - 발사믹 식초 1/4컵
   - 설탕 1큰술

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/11/21/6bb439dc49b0c077de9e1a01bea9c9511.jpg

8. 요리 팁:
   - 패티는 두께가 너무 두껍지 않게 만들어야 익는 시간이 적당해집니다.
   - 번(빵)은 꼭 구워야 질감이 좋아지고 소스나 육즙이 흘러내리지 않아 맛이 더 좋아집니다.
   - 채소는 먹기 직전에 넣으면 아삭한 식감을 더 느낄 수 있습니다.
2025-06-29 16:06:57.120 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2017/11/21/6bb439dc49b0c077de9e1a01bea9c9511.jpg
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/11/21/6bb439dc49b0c077de9e1a01bea9c9511.jpg
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 빵(번) 2개
   - 체다 치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 버터 10g
   - 소금, 후추 약간
   - 마요네즈, 홀그레인 머스타드, 케첩 적당량
   - 발사믹 식초 1/4컵
   - 설탕 1큰술
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 다짐육 200g
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 200g
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 200g
2025-06-29 16:06:57.124 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.126 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-29 16:06:57.126 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기 다짐육 300g
2025-06-29 16:06:57.126 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 300g
2025-06-29 16:06:57.126 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 300g
2025-06-29 16:06:57.127 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거 빵(번) 2개
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄버거 빵(번) 2개
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다 치즈 2장
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 2장
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 2장
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 16:06:57.130 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.131 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 16:06:57.131 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개
2025-06-29 16:06:57.131 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-29 16:06:57.131 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-29 16:06:57.132 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 상추 약간
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 상추 약간
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 피클 약간
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 피클 약간
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 10g
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 버터, Amount: 10g
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 버터, Amount: 10g
2025-06-29 16:06:57.134 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.134 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '버터' not found in DB. Skipping.
2025-06-29 16:06:57.134 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 16:06:57.134 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈, 홀그레인 머스타드, 케첩 적당량
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마요네즈, 홀그레인 머스타드, 케첩 적당량
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 발사믹 식초 1/4컵
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 발사믹 식초 1/4컵
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 16:06:57.136 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.137 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 16:06:57.137 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파는 채 썰어 팬에 식용유를 두르고 갈색이 될 때까지 볶다가, 발사믹 식초 1/4컵과 설탕 1큰술을 넣고 잘 볶아 캐러멜라이즈드 양파를 만듭니다[2].
   2. 소고기 다
2025-06-29 16:06:57.137 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:06:57.137 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 빵(번) 2개
   - 체다 치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 버터 10g
   - 소금, 후추 약간
   - 마요네즈, 홀그레인 머스타드, 케첩 적당량
   - 발사믹 식초 1/4컵
   - 설탕 1큰술

조리 방법:
1. 양파는 채 썰어 팬에 식용유를 두르고 갈색이 될 때까지 볶다가, 발사믹 식초 1/4컵과 설탕 1큰술을 넣고 잘 볶아 캐러멜라이즈드 양파를 만듭니다[2].
   2. 소고기 다짐육(200g)과 돼지고기 다짐육(300g)을 섞어 소금, 후추로 간하고 동그랗게 패티 모양을 만듭니다[2][4].
   3. 햄버거 빵(번)을 반으로 자르고, 팬에 버터 10g을 녹여 안쪽 면만 노릇하게 굽습니다[1][2].
   4. 같은 팬에 식용유와 남은 버터를 두른 후, 패티를 올리고 중불에서 한쪽 면이 갈색이 되도록 2분 정도 굽다가 뒤집어 속까지 충분히 익힙니다. 패티 위에 체다 치즈를 올려 뚜껑을 덮고 치즈가 녹게 합니다[2].
   5. 빵 아래쪽에는 마요네즈와 홀그레인 머스타드 또는 케첩을 바릅니다[1][2].
   6. 그 위에 상추, 토마토 슬라이스, 오이 피클, 캐러멜라이즈드 양파를 올립니다[2][3].
   7. 준비된 패티(치즈 올린 상태)를 올리고 빵 윗부분으로 덮어 완성합니다[1][2].
2025-06-29 16:06:57.138 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:06:57.142 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 수제 햄버거
2025-06-29 16:13:42.954 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:13:42.975 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:13:42.986 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:13:42.989 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:13:43.002 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천해, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:13:43.003 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:13:43.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:13:43.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:13:43.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천해
2025-06-29 16:13:43.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:13:43.017 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:13:43.026 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:13:43.028 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:13:43.028 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:13:43.028 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천해
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:13:43.028 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:13:49.735 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:13:49.735 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:13:49.736 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 에그 토스트**
- 카테고리: 한식/브런치
- 추천 이유: 아침에 밥을 먹으면 배가 아프다는 건강상태를 반영해, 소화가 잘되는 빵과 계란으로 만든 에그 토스트를 추천합니다. 준비도 간편하고 한 끼로 든든합니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥 대신 부담 없는 메뉴, 새우가 들어가지 않는 안전한 재료 사용

**2. 순두부찌개**
- 카테고리: 한식
- 추천 이유: 한식을 선호하며, 속이 편안한 메뉴를 원하는 경우 순두부찌개가 좋습니다. 자극적이지 않으면서도 영양가가 높고 속에 부담이 덜 갑니다[3].
- 예상 조리 시간: 20분
- 난이도: 중
- 개인화 고려사항: 새우 제외, 두부와 채소 위주로 건강하게 조리 가능

**3. 두부조림**
- 카테고리: 한식
- 추천 이유: 두부는 소화가 잘되고 담백하여 아침이나 점심에 부담 없이 먹기 좋으며, 알레르기 위험이 없습니다[2][3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 제외, 소화 부담 적은 메뉴

**4. 감자샐러드**
- 카테고리: 기타/브런치
- 추천 이유: 신선한 감자와 계란, 야채를 이용해 만든 샐러드는 소화가 쉽고 가볍게 먹기 좋은 메뉴로, 아침이나 간편한 한 끼로 적합합니다.
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 없는 메뉴, 아침에 부담 없이 섭취 가능

**5. 어묵탕**
- 카테고리: 한식
- 추천 이유: 따뜻한 국물이 속을 편하게 해주며, 빠르고 쉽게 만들 수 있습니다. 어묵도 소화에 부담이 적은 편이라 추천합니다[1][2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우성분 없는 어묵 선택, 맑은 국물로 부담 줄임

### 전체 추천 요약
- 상황 분석: 사용자는 아침에 밥을 먹으면 소화장애가 있고, 새우 알레르기가 있으며, 한식을 선호하는 25세 남성입니다.
- 추천 기준: 소화가 쉽고 밥이 아닌 재료를 중심으로, 새우가 포함되지 않은 한식 또는 브런치 메뉴를 간단하게 준비할 수 있도록 선정했습니다.
- 개인화 고려사항: 새우와 해산물을 철저히 제외하고, 소화에 부담이 적은 재료(빵, 두부, 계란, 감자 등)를 사용한 메뉴를 골랐습니다.
- 추가 팁: 아침엔 밥 대신 빵이나 감자, 두부류를 활용하면 위에 부담을 줄일 수 있습니다. 선택한 메뉴에 다양한 채소를 추가해 영양 균형을 맞추면 더욱 좋습니다.

특정 메뉴의 레시피가 필요하면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요!
2025-06-29 16:13:49.738 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:13:51.553 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:13:51.555 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:13:51.560 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:13:51.566 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:13:51.569 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그 토스트 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:13:51.570 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그 토스트 레시피
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:13:51.573 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:13:51.575 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:13:51.575 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:13:51.575 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그 토스트 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:13:51.575 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:14:04.727 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:14:04.735 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:14:04.742 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:14:04.745 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:14:04.749 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그 토스트 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:14:04.750 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:14:04.751 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:14:04.751 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:14:04.751 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그 토스트 레시피
2025-06-29 16:14:04.752 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:14:04.752 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:14:04.753 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:04.755 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:14:04.755 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:14:04.755 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그 토스트 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:14:04.755 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:14:07.007 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:14:07.007 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:14:07.007 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그 토스트

2. 카테고리: 양식

3. 조리 시간: 15분

4. 조리 방법:
   1. 계란 2개를 볼에 넣고 소금 한 꼬집, 우유 2큰술을 넣어 곱게 풀어줍니다[1][3].
   2. 팬에 버터 1/2큰술을 녹인 후, 계란물을 부어 스크램블 에그를 만들어줍니다(중불에서 천천히 저으면서 부드럽게 익혀주세요)[3].
   3. 식빵 2장을 토스터나 팬에 노릇하게 구워줍니다[3].
   4. 베이컨 2장을 팬에서 바삭하게 구워줍니다(선택).
   5. 식빵 한쪽에는 양상추 1장, 베이컨, 체다 치즈 1장, 그리고 완성된 스크램블 에그를 올립니다[3].
   6. 다른 식빵 한 장으로 덮어 샌드위치 형태로 완성합니다.
   7. 먹기 좋게 반으로 자르고, 취향에 따라 파슬리 가루나 잼을 곁들여도 좋습니다[1].

5. 필요한 재료와 양:
   - 식빵 2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 체다 치즈 1장
   - 식용유 약간

6. 난이도: 하

7. 이미지 URL: https://blogfiles.pstatic.net/MjAyMTA4MzBfMTEz/MDAxNjMwMzEwNjkzNDY5.X1NpNqQZ5l5Gkv8CEt9vBLw5WK2JXaf5m1kAifYECnQg.HvI_X6IqECjae_P-4FkYQ8pUqZCW4UAlOK5yqeJE2Ikg.JPEG.elarpi/IMG_3675.jpg[1]

8. 요리 팁:
   - 계란은 약불에서 천천히 익히면 더 부드러운 식감을 즐길 수 있습니다.
   - 치즈나 베이컨, 양상추 등은 취향에 따라 생략하거나 추가할 수 있습니다.
   - 팬에 버터를 한 번 더 둘러 식빵을 구우면 더 고소한 풍미를 낼 수 있습니다.

알레르기 정보: 새우는 포함되어 있지 않으므로 안전하게 섭취하실 수 있습니다.
2025-06-29 16:14:07.012 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://blogfiles.pstatic.net/MjAyMTA4MzBfMTEz/MDAxNjMwMzEwNjkzNDY5.X1NpNqQZ5l5Gkv8CEt9vBLw5WK2JXaf5m1kAifYECnQg.HvI_X6IqECjae_P-4FkYQ8pUqZCW4UAlOK5yqeJE2Ikg.JPEG.elarpi/IMG_3675.jpg[1]
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://blogfiles.pstatic.net/MjAyMTA4MzBfMTEz/MDAxNjMwMzEwNjkzNDY5.X1NpNqQZ5l5Gkv8CEt9vBLw5WK2JXaf5m1kAifYECnQg.HvI_X6IqECjae_P-4FkYQ8pUqZCW4UAlOK5yqeJE2Ikg.JPEG.elarpi/IMG_3675.jpg[1]
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 체다 치즈 1장
   - 식용유 약간
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 16:14:07.020 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 2장
2025-06-29 16:14:07.021 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 2장
2025-06-29 16:14:07.021 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 2장
2025-06-29 16:14:07.025 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.029 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-29 16:14:07.029 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 2개
2025-06-29 16:14:07.029 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 2개
2025-06-29 16:14:07.029 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 2개
2025-06-29 16:14:07.031 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 우유 2큰술
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 우유, Amount: 2큰술
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 우유, Amount: 2큰술
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '우유' not found in DB. Skipping.
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1/2큰술
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1/2큰술
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 베이컨 2장(선택)
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 베이컨, Amount: 2장
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 베이컨, Amount: 2장
2025-06-29 16:14:07.036 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.038 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '베이컨' not found in DB. Skipping.
2025-06-29 16:14:07.038 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 1장(선택)
2025-06-29 16:14:07.038 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양상추, Amount: 1장
2025-06-29 16:14:07.038 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양상추, Amount: 1장
2025-06-29 16:14:07.041 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.043 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '양상추' not found in DB. Skipping.
2025-06-29 16:14:07.043 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다 치즈 1장
2025-06-29 16:14:07.043 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 16:14:07.043 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 16:14:07.045 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.045 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:14:07.045 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 16:14:07.045 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 16:14:07.046 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란 2개를 볼에 넣고 소금 한 꼬집, 우유 2큰술을 넣어 곱게 풀어줍니다[1][3].
   2. 팬에 버터 1/2큰술을 녹인 후, 계란물을 부어 스크램블 에그를 만들어줍니다
2025-06-29 16:14:07.046 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:14:07.046 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 체다 치즈 1장
   - 식용유 약간

조리 방법:
1. 계란 2개를 볼에 넣고 소금 한 꼬집, 우유 2큰술을 넣어 곱게 풀어줍니다[1][3].
   2. 팬에 버터 1/2큰술을 녹인 후, 계란물을 부어 스크램블 에그를 만들어줍니다(중불에서 천천히 저으면서 부드럽게 익혀주세요)[3].
   3. 식빵 2장을 토스터나 팬에 노릇하게 구워줍니다[3].
   4. 베이컨 2장을 팬에서 바삭하게 구워줍니다(선택).
   5. 식빵 한쪽에는 양상추 1장, 베이컨, 체다 치즈 1장, 그리고 완성된 스크램블 에그를 올립니다[3].
   6. 다른 식빵 한 장으로 덮어 샌드위치 형태로 완성합니다.
   7. 먹기 좋게 반으로 자르고, 취향에 따라 파슬리 가루나 잼을 곁들여도 좋습니다[1].
2025-06-29 16:14:07.047 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:14:07.048 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 에그 토스트
2025-06-29 16:14:07.055 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:14:07.058 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 95
2025-06-29 16:14:12.102 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:14:12.103 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:14:12.103 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그 토스트

2. 카테고리: 기타 (한식 스타일 가미 가능)

3. 조리 시간: 15분

4. 조리 방법:
   1. 볼에 달걀 2개, 소금 약간, 우유 2큰술을 넣고 곱게 풀어 준비합니다[1][3].
   2. 팬에 버터 1/2큰술을 녹이고 달걀물을 붓습니다. 달걀물이 반쯤 익으면 식빵 1장을 그 위에 올립니다[1].
   3. 약불에서 달걀이 거의 익을 때쯤 식빵을 뒤집고, 계란을 식빵 크기에 맞게 접어줍니다[1].
   4. 식빵 위에 슬라이스 치즈 1장과 햄 1장(선택)을 올리고 치즈가 녹을 때까지 구워줍니다[1][3].
   5. 필요하다면 스크램블로 계란을 만들어, 식빵 사이에 넣어줘도 좋습니다[3].
   6. 기호에 따라 잼 또는 소스를 추가하고 식빵을 반으로 접어 마무리합니다[1].
   
5. 필요한 재료와 양:
   - 식빵 1~2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 슬라이스 치즈 1장
   - 햄 1장(생략 가능)
   - (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/06/30/3f719f2d4f8777e7e9ea302b6b6e498a1.jpg

8. 요리 팁:
   - 에그 토스트는 불을 약하게 하여 달걀이 타지 않게 조리하는 것이 중요합니다.
   - 달걀에 우유를 추가하면 더욱 촉촉하고 부드럽게 즐길 수 있습니다.
   - 치즈, 햄, 잼 등 토핑은 기호에 따라 조절하면 됩니다.
   - 한식 스타일로 즐기고 싶다면 슬라이스 햄 대신 구운 김치 또는 볶은 야채를 추가해도 잘 어울립니다.

**알레르기 정보:** 본 레시피에는 새우가 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.
2025-06-29 16:14:12.109 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:12.112 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 기타 (한식 스타일 가미 가능)
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2018/06/30/3f719f2d4f8777e7e9ea302b6b6e498a1.jpg
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/06/30/3f719f2d4f8777e7e9ea302b6b6e498a1.jpg
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 1~2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 슬라이스 치즈 1장
   - 햄 1장(생략 가능)
   - (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 8
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 1~2장
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식빵 1~2장
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 2개
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 2개
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 2개
2025-06-29 16:14:12.115 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 우유 2큰술
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 우유, Amount: 2큰술
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 우유, Amount: 2큰술
2025-06-29 16:14:12.118 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '우유' not found in DB. Skipping.
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1/2큰술
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1/2큰술
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 1장
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 16:14:12.120 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 16:14:12.121 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:12.122 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:14:12.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄 1장(생략 가능)
2025-06-29 16:14:12.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 햄, Amount: 1장
2025-06-29 16:14:12.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 햄, Amount: 1장
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '햄' not found in DB. Skipping.
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 볼에 달걀 2개, 소금 약간, 우유 2큰술을 넣고 곱게 풀어 준비합니다[1][3].
   2. 팬에 버터 1/2큰술을 녹이고 달걀물을 붓습니다. 달걀물이 반쯤 익으면 식빵 1
2025-06-29 16:14:12.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:14:12.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 1~2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 슬라이스 치즈 1장
   - 햄 1장(생략 가능)
   - (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑

조리 방법:
1. 볼에 달걀 2개, 소금 약간, 우유 2큰술을 넣고 곱게 풀어 준비합니다[1][3].
   2. 팬에 버터 1/2큰술을 녹이고 달걀물을 붓습니다. 달걀물이 반쯤 익으면 식빵 1장을 그 위에 올립니다[1].
   3. 약불에서 달걀이 거의 익을 때쯤 식빵을 뒤집고, 계란을 식빵 크기에 맞게 접어줍니다[1].
   4. 식빵 위에 슬라이스 치즈 1장과 햄 1장(선택)을 올리고 치즈가 녹을 때까지 구워줍니다[1][3].
   5. 필요하다면 스크램블로 계란을 만들어, 식빵 사이에 넣어줘도 좋습니다[3].
   6. 기호에 따라 잼 또는 소스를 추가하고 식빵을 반으로 접어 마무리합니다[1].
2025-06-29 16:14:12.124 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:14:12.125 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 에그 토스트
2025-06-29 16:14:12.139 [http-nio-8080-exec-4] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:486)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:165)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 16:14:12.163 [http-nio-8080-exec-4] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only] with root cause
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:803)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 16:14:27.823 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:14:27.827 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:14:27.830 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:14:27.835 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:14:27.839 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그 토스트 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:14:27.848 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그 토스트 레시피
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:14:27.859 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:27.861 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:14:27.861 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:14:27.861 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그 토스트 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:14:27.861 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:14:37.742 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:14:37.742 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:14:37.742 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그 토스트

2. 카테고리: 기타 (양식 기반 간단 토스트 요리)

3. 조리 시간: 약 10~15분

4. 조리 방법:  
   1. 계란에 소금 한 꼬집을 넣고 곱게 풀어 준비한다.  
   2. 팬에 버터를 녹인 후, 약한 불에서 계란물을 부어 익히기 시작한다.  
   3. 계란물이 반 정도 익으면 그 위에 식빵 한 장을 올린다.  
   4. 식빵을 뒤집어 계란이 식빵 크기에 맞게 접히도록 조심스럽게 접는다.  
   5. 계란 위에 슬라이스 치즈와 햄을 올린 후 치즈가 녹을 때까지 구워준다.  
   6. 치즈가 녹으면 뒤집개를 사용해 접기 좋게 자국을 내고, 중앙에 잼 한 숟가락을 올린 뒤 반으로 접어 마무리한다.  

5. 필요한 재료와 양:  
   - 계란 1~2개  
   - 식빵 1장  
   - 버터 적당량 (팬에 녹일 만큼)  
   - 슬라이스 치즈 1장  
   - 슬라이스 햄 1장  
   - 소금 한 꼬집  
   - 잼 (딸기잼 등, 기호에 따라)  

6. 난이도: 하

7. 이미지 URL:  
   https://blog.kakaocdn.net/dn/bFGQqE/btqR8jUdQmD/AHVrKvF7sJIEXY5sxAmXOk/img.jpg  
   (출처: 네이버 블로그 에그토스트 이미지)

8. 요리 팁:  
   - 계란을 풀 때 소금을 조금 넣으면 간이 더 잘 배어 맛있다.  
   - 버터를 충분히 녹여 약한 불에서 조리해야 계란이 부드럽고 촉촉하게 익는다.  
   - 잼 대신 케첩이나 마요네즈를 발라도 맛있다.  
   - 아이 간식으로도 좋으며, 우유 한 잔과 함께하면 영양 듬뿍 아침 식사가 된다.  

본 레시피는 간단하면서도 부드럽고 촉촉한 에그 토스트를 만드는 방법으로, 아이 간식이나 간단한 아침 식사로 적합합니다[1].
2025-06-29 16:14:37.744 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:37.747 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 기타 (양식 기반 간단 토스트 요리)
2025-06-29 16:14:37.747 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://blog.kakaocdn.net/dn/bFGQqE/btqR8jUdQmD/AHVrKvF7sJIEXY5sxAmXOk/img.jpg
2025-06-29 16:14:37.747 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://blog.kakaocdn.net/dn/bFGQqE/btqR8jUdQmD/AHVrKvF7sJIEXY5sxAmXOk/img.jpg
2025-06-29 16:14:37.747 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 계란 1~2개  
   - 식빵 1장  
   - 버터 적당량 (팬에 녹일 만큼)  
   - 슬라이스 치즈 1장  
   - 슬라이스 햄 1장  
   - 소금 한 꼬집  
   - 잼 (딸기잼 등, 기호에 따라)
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 7
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1~2개
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 계란 1~2개
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 1장
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 1장
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 1장
2025-06-29 16:14:37.750 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 적당량 (팬에 녹일 만큼)
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 적당량 (팬에 녹일 만큼)
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 1장
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 16:14:37.753 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:37.754 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:14:37.754 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 햄 1장
2025-06-29 16:14:37.754 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 햄, Amount: 1장
2025-06-29 16:14:37.754 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 햄, Amount: 1장
2025-06-29 16:14:37.755 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '햄' not found in DB. Skipping.
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 한 꼬집
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 한 꼬집
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 잼 (딸기잼 등, 기호에 따라)
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 잼 (딸기잼 등, 기호에 따라)
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란에 소금 한 꼬집을 넣고 곱게 풀어 준비한다.  
   2. 팬에 버터를 녹인 후, 약한 불에서 계란물을 부어 익히기 시작한다.  
   3. 계란물이 반 정도 익으면 그
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 계란 1~2개  
   - 식빵 1장  
   - 버터 적당량 (팬에 녹일 만큼)  
   - 슬라이스 치즈 1장  
   - 슬라이스 햄 1장  
   - 소금 한 꼬집  
   - 잼 (딸기잼 등, 기호에 따라)

조리 방법:
1. 계란에 소금 한 꼬집을 넣고 곱게 풀어 준비한다.  
   2. 팬에 버터를 녹인 후, 약한 불에서 계란물을 부어 익히기 시작한다.  
   3. 계란물이 반 정도 익으면 그 위에 식빵 한 장을 올린다.  
   4. 식빵을 뒤집어 계란이 식빵 크기에 맞게 접히도록 조심스럽게 접는다.  
   5. 계란 위에 슬라이스 치즈와 햄을 올린 후 치즈가 녹을 때까지 구워준다.  
   6. 치즈가 녹으면 뒤집개를 사용해 접기 좋게 자국을 내고, 중앙에 잼 한 숟가락을 올린 뒤 반으로 접어 마무리한다.
2025-06-29 16:14:37.757 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:14:37.758 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 에그 토스트
2025-06-29 16:21:57.640 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:21:57.645 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:21:57.649 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:21:57.651 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:21:57.654 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:21:57.655 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:21:57.667 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:21:57.684 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:21:57.684 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:21:57.684 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:21:57.684 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:22:06.215 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:22:06.215 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:22:06.215 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 김치전**
- 카테고리: 한식
- 추천 이유: 밀가루와 김치를 활용해 간단하게 만들 수 있고, 밥 없이도 속이 부담스럽지 않아 아침에 밥을 먹으면 배가 아픈 분께 적합합니다. 오징어나 해물을 넣을 수 있으나, 새우 알레르기가 있으므로 오징어 또는 야채 위주로 조리하시면 안전합니다[3].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않고, 새우를 제외한 재료로 조리가 가능합니다.

**2. 에그 샌드위치**
- 카테고리: 양식
- 추천 이유: 속이 예민할 때 아침으로 부담 없이 먹기 좋은 메뉴입니다. 빵과 달걀, 가벼운 야채만 있으면 간편하게 만들 수 있어 바쁜 출근길에도 적합합니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 해산물(특히 새우) 알레르기와 무관한 재료 사용, 밥을 대체하는 빵 사용.

**3. 컵밥(밥 제외, 곤약 등 대체 곡류 활용도 가능)**
- 카테고리: 한식
- 추천 이유: 간단하게 한 끼를 해결할 수 있지만, 밥 대신 곤약 또는 단백질 위주 토핑을 선택하면 속에 부담이 덜합니다. 일반 컵밥이 부담스러우면 곤약밥이나 오트밀 밥 등으로 응용 가능합니다[1][2].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 속에 부담을 덜 주도록 밥 양을 최소화하거나 대체 곡류로 변경, 새우 등 알레르기 식품 제외.

**4. 우유와 시리얼**
- 카테고리: 양식
- 추천 이유: 아침 식사로 매우 간편하며, 소화가 잘 된다면 빠르고 속을 덜 자극하는 메뉴입니다. 식사 준비 시간이 짧고, 간단하게 영양도 챙길 수 있습니다[1].
- 예상 조리 시간: 2~3분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기와 무관, 밥이 들어가지 않아 위장에 부담이 적음.

**5. 두부구이 또는 두부샐러드**
- 카테고리: 한식/기타
- 추천 이유: 고단백, 저자극 메뉴로 아침에 속이 약할 때 좋으며, 조리도 간단합니다. 소스에만 주의하면 새우 성분이 들어가지 않아 알레르기 걱정이 없습니다.
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않고, 새우, 해산물 제외.

---

### 전체 추천 요약

- 상황 분석: 아침에 밥을 먹으면 소화가 불편한 25세 남성을 위한, 간단하고 위에 부담이 적은 메뉴를 중심으로 추천했습니다.
- 추천 기준: 밥이 주재료인 메뉴는 배제하거나 대체 곡류로 응용하고, 준비가 쉽고 부담 없는 한식 및 양식 위주로 선택했습니다.
- 개인화 고려사항: 새우 알레르기, 위장 민감성 등 건강상태를 철저히 반영해 밀가루, 달걀, 두부 등 원재료 중심으로 안전하게 추천했습니다.
- 추가 팁: 위장 상태가 특히 예민한 날엔 국물 요리(맑은 두부국, 야채스프 등)도 추천하며, 시리얼이나 샌드위치는 소화를 방해하는 기름진 소스는 피하는 것이 좋습니다.

**원하는 메뉴의 레시피가 필요하다면 '레시피'라는 단어를 포함해 다시 요청해주세요!**
2025-06-29 16:22:06.215 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:25:41.591 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:25:41.602 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:25:41.610 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:25:41.614 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:25:41.619 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 저녁메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:25:41.620 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 저녁메뉴 추천해줘
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:25:41.629 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:25:41.630 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:25:41.630 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:25:41.630 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 저녁메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:25:41.630 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:25:53.714 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:25:53.714 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:25:53.714 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 목살구이와 버섯구이, 겉절이**
- 카테고리: 한식
- 추천 이유: 저녁 식사로 든든하면서도 건강하게 즐길 수 있는 고기 메뉴입니다. 버섯과 함께 구우면 기름짐을 줄이고, 겉절이와 곁들여 상큼하게 마무리할 수 있습니다. 25세 남성의 활동적인 에너지 보충에도 적합합니다[1].
- 예상 조리 시간: 30~35분
- 난이도: 중
- 개인화 고려사항: 새우 알레르기를 피했으며, 소화에 무리가 없는 저녁 식단입니다.

**2. 두부조림**
- 카테고리: 한식
- 추천 이유: 간단하게 만들 수 있고, 단백질이 풍부해 부담 없이 먹기 좋습니다. 밥과 함께 먹기에도 적합해 간단한 집밥 저녁 메뉴로 추천합니다[3].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료가 없고, 가볍고 건강한 메뉴입니다.

**3. 닭날개구이**
- 카테고리: 한식
- 추천 이유: 오븐이나 에어프라이어로 간단하게 조리할 수 있으며, 기름기는 적고 고소한 맛을 즐길 수 있어 저녁식사로 부담 없습니다[4].
- 예상 조리 시간: 25~30분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정이 없고, 과도한 기름짐 없이 단백질을 섭취할 수 있습니다.

**4. 순두부찌개**
- 카테고리: 한식
- 추천 이유: 자극적이지 않고 부드러워 속이 편안하며, 저녁에 먹기 좋은 국물 요리입니다. 간단하게 조리할 수 있어 바쁜 일상에 적합합니다[2].
- 예상 조리 시간: 20~25분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 식재료가 없어 안전하며, 위에 부담이 적습니다.

**5. 참치계란볶음밥**
- 카테고리: 한식
- 추천 이유: 집에 있는 재료로 빠르게 만들 수 있고, 참치와 계란으로 영양을 다양하게 챙길 수 있는 저녁 메뉴입니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우가 들어가지 않고, 소화에 부담 없는 볶음밥입니다.

### 전체 추천 요약

- 상황 분석: 포만감이 있으면서 건강하고, 너무 기름지지 않은 저녁 메뉴를 찾는 상황입니다. 새우 알레르기를 반드시 피해야 하고, 건강 상태상 아침에만 소화가 예민하니 저녁엔 단백질과 채소 위주로 골랐습니다.
- 추천 기준: 한식 위주로, 조리가 복잡하지 않으면서 다양한 영양을 고르게 섭취할 수 있는 메뉴를 우선 선택했습니다. 새우 등 알레르기 유발 식재료는 완전히 제외했습니다.
- 개인화 고려사항: 새우 알레르기 및 건강 상태(아침에만 소화 문제 있음)를 면밀히 반영했습니다. 기름기를 크게 줄이면서도 맛있게 먹을 수 있는 메뉴로 선정했습니다.
- 추가 팁: 저녁에 과식은 피하시고, 고기 메뉴를 선택하실 땐 채소와 곁들이면 소화에 더 도움이 됩니다. 만약 특정 메뉴의 레시피가 필요하시면 "레시피"라는 단어를 포함해 다시 요청해주세요!
2025-06-29 16:25:53.718 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:35:38.787 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m30s293ms).
2025-06-29 16:36:53.803 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m15s16ms).
2025-06-29 16:40:57.768 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4m3s966ms).
2025-06-29 16:44:52.373 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m54s604ms).
2025-06-29 16:45:45.891 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=53s519ms).
2025-06-29 16:46:37.011 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=51s120ms).
2025-06-29 16:48:41.348 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m4s337ms).
2025-06-29 16:51:49.536 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:51:49.553 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:51:49.576 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:51:49.579 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:51:49.590 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:51:49.591 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴추천
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:51:49.601 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:51:49.603 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:51:49.603 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:51:49.603 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 메뉴추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:51:49.603 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:52:00.918 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:52:00.918 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:52:00.918 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 두부조림**
- 카테고리: 한식
- 추천 이유: 간단하면서도 단백질이 풍부해 건강하게 한 끼를 해결할 수 있는 메뉴입니다. 밥 없이도 반찬처럼 먹기 좋아 아침 공복에 부담을 줄일 수 있습니다[4].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료를 사용하지 않고, 아침 식사 시 배가 아픈 점을 고려해 소화에 부담이 적은 메뉴입니다.

**2. 김치전**
- 카테고리: 한식
- 추천 이유: 밀가루와 김치로 만드는 간단한 한식 메뉴로, 든든하면서도 상대적으로 소화가 잘 되어 아침에 먹기 부담이 적습니다. 밥이 들어가지 않아 속이 편안할 수 있습니다[2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물이 들어가지 않는 기본 김치전으로 추천합니다.

**3. 오믈렛**
- 카테고리: 양식
- 추천 이유: 달걀을 주재료로 한 오믈렛은 속이 편하고 단백질이 풍부하여 아침에 적합합니다. 간단하면서도 영양을 챙길 수 있습니다[1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 해산물이 들어가지 않으며, 소화에 부담이 적어 아침에 먹기 좋습니다.

**4. 시리얼 & 요거트**
- 카테고리: 양식
- 추천 이유: 조리가 필요 없고, 부드럽고 가볍게 먹을 수 있어 아침 식사로 부담이 적습니다. 소화에 부담을 주지 않는 메뉴로 아침에 먹기 적합합니다[1].
- 예상 조리 시간: 3분
- 난이도: 하
- 개인화 고려사항: 우유, 요거트 등만 사용되므로 알레르기 및 소화 문제를 최소화할 수 있습니다.

**5. 도토리묵무침**
- 카테고리: 한식
- 추천 이유: 쫄깃한 도토리묵과 각종 채소로 만드는 간단한 무침 메뉴로, 가볍고 건강하게 먹을 수 있습니다. 밥이 들어가지 않아 아침에 속이 편할 수 있습니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우, 해산물 없이 채소 위주로 구성하여 안전합니다.

---

### 전체 추천 요약

- 상황 분석: 사용자는 아침에 밥을 먹으면 배가 아픈 25세 남성으로, 간단하고 소화에 부담이 적으며, 알레르기(새우)가 없는 메뉴를 찾고 있습니다.
- 추천 기준: 쌀밥이나 무거운 주식 대신 가볍고 소화가 잘 되는 메뉴, 그리고 알레르기 유발 재료가 들어가지 않은 한식/양식 위주의 간단 메뉴를 우선 선택했습니다.
- 개인화 고려사항: 밥이 들어가지 않거나 소화에 부담이 적은 메뉴, 새우 등 알레르기 원재료가 없는 안전한 메뉴만을 선정했습니다.
- 추가 팁: 아침에 속이 약하다면 소량씩 여러 번, 자극적이지 않게 드시는 것이 좋습니다. 만약 특정 메뉴의 레시피가 필요하면 "레시피"라는 단어를 포함해 다시 요청해 주세요.
2025-06-29 16:52:00.920 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:56:05.606 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:56:05.615 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:56:05.631 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:56:05.639 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:56:05.644 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 스테이크 레시피 추천, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:56:05.645 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 스테이크 레시피 추천
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:56:05.655 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:56:05.657 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:56:05.657 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:56:05.657 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 스테이크 레시피 추천
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:56:05.657 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:56:17.444 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:56:17.444 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:56:17.444 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 소고기 스테이크

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 소고기(등심 또는 살치살)는 키친타월로 핏물을 제거한 뒤, 소금과 후추로 앞뒤에 골고루 밑간을 해주세요[1][2][4].
   2. 팬을 센 불로 예열한 후 올리브유를 충분히 두릅니다[1][4].
   3. 소고기를 팬에 올려 겉면을 센 불로 빠르게 구워 육즙을 가둡니다(한 면당 약 1~2분). 고기를 뒤집어 반대 면도 같은 방식으로 구워주세요[1][4].
   4. 마늘, 양파 등 곁들임 채소와 버터를 추가해 향을 더합니다. 버터와 마늘을 고기 위에 끼얹어가며 더 풍미있게 구워줍니다[2][4].
   5. 미디엄레어 기준, 고기를 한 면당 2분 내외로 구운 후 불을 끄고 팬 위에서 2분 정도 레스팅(휴지)합니다.
   6. 완성된 스테이크를 도마에 올려 먹기 좋은 크기로 썰고, 파프리카·브로콜리·버섯 등 기호에 따라 구운 채소와 함께 플레이팅합니다[1].
   7. 소스는 시판 스테이크 소스에 진간장, 설탕, 케첩, 물을 더해 간단하게 만들어 곁들입니다[1].

5. 필요한 재료와 양:
   - 소고기 등심 또는 살치살 300~400g
   - 소금 1/2작은술
   - 후추 약간
   - 올리브유 2큰술
   - 마늘 5~7개
   - 양파 1/2개
   - 버터 1~2큰술
   - (선택) 파프리카 1/2개, 브로콜리 1/4개, 양송이버섯 4개
   - 스테이크 소스 3큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 케첩 3큰술
   - 물 1/2큰술

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/12/11/4be3ae2115934f4e56d602c684dbeeef1.jpg

8. 요리 팁:
   - 고기는 충분히 실온에 두었다가 조리해야 속까지 골고루 익습니다.
   - 팬이 충분히 달궈진 후 고기를 올려야 육즙이 빠지지 않고 겉은 바삭, 속은 촉촉하게 구워집니다.
   - 구운 후 반드시 2~3분간 레스팅해서 육즙이 고기 안에 머물도록 하세요.
   - 소스는 간단하게 만들 수 있지만, 시판 소스나 직접 만든 소스 모두 곁들여도 좋습니다.

*새우 알레르기 정보: 본 레시피에는 새우가 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.*
2025-06-29 16:56:17.452 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2017/12/11/4be3ae2115934f4e56d602c684dbeeef1.jpg
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/12/11/4be3ae2115934f4e56d602c684dbeeef1.jpg
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 등심 또는 살치살 300~400g
   - 소금 1/2작은술
   - 후추 약간
   - 올리브유 2큰술
   - 마늘 5~7개
   - 양파 1/2개
   - 버터 1~2큰술
   - (선택) 파프리카 1/2개, 브로콜리 1/4개, 양송이버섯 4개
   - 스테이크 소스 3큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 케첩 3큰술
   - 물 1/2큰술
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 등심 또는 살치살 300~400g
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소고기 등심 또는 살치살 300~400g
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/2작은술
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 1/2작은술
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브유 2큰술
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브유, Amount: 2큰술
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브유, Amount: 2큰술
2025-06-29 16:56:17.459 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.462 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브유' not found in DB. Skipping.
2025-06-29 16:56:17.462 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마늘 5~7개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마늘 5~7개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1~2큰술
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1~2큰술
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 파프리카 1/2개, 브로콜리 1/4개, 양송이버섯 4개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양송이버섯, Amount: 4개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양송이버섯, Amount: 4개
2025-06-29 16:56:17.466 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.466 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '양송이버섯' not found in DB. Skipping.
2025-06-29 16:56:17.466 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 스테이크 소스 3큰술
2025-06-29 16:56:17.467 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소스, Amount: 3큰술
2025-06-29 16:56:17.468 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소스, Amount: 3큰술
2025-06-29 16:56:17.469 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.470 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '소스' not found in DB. Skipping.
2025-06-29 16:56:17.470 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 1큰술
2025-06-29 16:56:17.470 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 진간장, Amount: 1큰술
2025-06-29 16:56:17.470 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 1큰술
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 16:56:17.472 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.473 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 16:56:17.473 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케첩 3큰술
2025-06-29 16:56:17.473 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 케첩, Amount: 3큰술
2025-06-29 16:56:17.473 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케첩, Amount: 3큰술
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '케첩' not found in DB. Skipping.
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 1/2큰술
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 물 1/2큰술
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소고기(등심 또는 살치살)는 키친타월로 핏물을 제거한 뒤, 소금과 후추로 앞뒤에 골고루 밑간을 해주세요[1][2][4].
   2. 팬을 센 불로 예열한 후 올리브유를 충분히
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 등심 또는 살치살 300~400g
   - 소금 1/2작은술
   - 후추 약간
   - 올리브유 2큰술
   - 마늘 5~7개
   - 양파 1/2개
   - 버터 1~2큰술
   - (선택) 파프리카 1/2개, 브로콜리 1/4개, 양송이버섯 4개
   - 스테이크 소스 3큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 케첩 3큰술
   - 물 1/2큰술

조리 방법:
1. 소고기(등심 또는 살치살)는 키친타월로 핏물을 제거한 뒤, 소금과 후추로 앞뒤에 골고루 밑간을 해주세요[1][2][4].
   2. 팬을 센 불로 예열한 후 올리브유를 충분히 두릅니다[1][4].
   3. 소고기를 팬에 올려 겉면을 센 불로 빠르게 구워 육즙을 가둡니다(한 면당 약 1~2분). 고기를 뒤집어 반대 면도 같은 방식으로 구워주세요[1][4].
   4. 마늘, 양파 등 곁들임 채소와 버터를 추가해 향을 더합니다. 버터와 마늘을 고기 위에 끼얹어가며 더 풍미있게 구워줍니다[2][4].
   5. 미디엄레어 기준, 고기를 한 면당 2분 내외로 구운 후 불을 끄고 팬 위에서 2분 정도 레스팅(휴지)합니다.
   6. 완성된 스테이크를 도마에 올려 먹기 좋은 크기로 썰고, 파프리카·브로콜리·버섯 등 기호에 따라 구운 채소와 함께 플레이팅합니다[1].
   7. 소스는 시판 스테이크 소스에 진간장, 설탕, 케첩, 물을 더해 간단하게 만들어 곁들입니다[1].
2025-06-29 16:56:17.477 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:56:17.478 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 소고기 스테이크
2025-06-29 16:56:17.507 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:56:17.510 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 96
2025-06-29 17:05:13.536 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:05:13.554 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:05:13.566 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:05:13.569 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:05:13.580 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아침 메뉴 추천해줘 , useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 17:05:13.580 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아침 메뉴 추천해줘 
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 17:05:13.590 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:05:13.592 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 17:05:13.592 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:05:13.592 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천해줘 
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 17:05:13.592 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:05:21.245 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:05:21.245 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 17:05:21.245 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 야채 스크램블 에그

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 계란을 볼에 풀고 소금, 후추로 간을 합니다.
   2. 양송이버섯, 방울토마토, 브로콜리, 당근 등 준비된 야채를 한입 크기로 썰어줍니다.
   3. 프라이팬에 아보카도 오일이나 식용유를 두르고, 야채를 중불에 2~3분간 볶아줍니다.
   4. 야채가 어느 정도 익으면 풀어둔 계란을 부어줍니다.
   5. 젓가락이나 주걱으로 계란을 천천히 저어 스크램블 하듯 저어주다가, 반숙 상태에서 불을 끕니다.
   6. 그릇에 담고 치즈와 견과류(선택)를 위에 올려 마무리합니다.

5. 필요한 재료와 양:
   - 계란 2개
   - 양송이버섯 2~3개
   - 방울토마토 3~4개
   - 브로콜리 한 줌
   - 당근 1/4개
   - 치즈 한 장 또는 조금 (선택)
   - 견과류 약간 (선택)
   - 소금 약간
   - 후추 약간
   - 아보카도 오일 또는 식용유 1 큰술

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/08/09/05c6ad386878fc1e7e98ecb2f5d1874b1.jpg

8. 요리 팁:
   - 냉장고에 있는 다양한 야채를 활용하면 편하게 만들 수 있습니다.
   - 계란을 너무 익히지 않고 촉촉하게 마무리하면 더욱 부드럽고 소화가 잘 됩니다.
   - 밥이 부담스러운 분들에게 속이 편안한 단백질 위주 아침 식사로 추천합니다.
2025-06-29 17:05:21.249 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:05:21.255 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 17:05:21.255 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2020/08/09/05c6ad386878fc1e7e98ecb2f5d1874b1.jpg
2025-06-29 17:05:21.255 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/08/09/05c6ad386878fc1e7e98ecb2f5d1874b1.jpg
2025-06-29 17:05:21.255 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 계란 2개
   - 양송이버섯 2~3개
   - 방울토마토 3~4개
   - 브로콜리 한 줌
   - 당근 1/4개
   - 치즈 한 장 또는 조금 (선택)
   - 견과류 약간 (선택)
   - 소금 약간
   - 후추 약간
   - 아보카도 오일 또는 식용유 1 큰술
2025-06-29 17:05:21.256 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 10
2025-06-29 17:05:21.256 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 2개
2025-06-29 17:05:21.257 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 2개
2025-06-29 17:05:21.257 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 2개
2025-06-29 17:05:21.259 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양송이버섯 2~3개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양송이버섯 2~3개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 방울토마토 3~4개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 방울토마토 3~4개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 브로콜리 한 줌
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 브로콜리 한 줌
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/4개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 치즈 한 장 또는 조금 (선택)
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 치즈 한 장 또는 조금 (선택)
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 견과류 약간 (선택)
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 견과류 약간 (선택)
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 아보카도 오일 또는 식용유 1 큰술
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 아보카도 오일 또는 식용유 1 큰술
2025-06-29 17:05:21.266 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란을 볼에 풀고 소금, 후추로 간을 합니다.
   2. 양송이버섯, 방울토마토, 브로콜리, 당근 등 준비된 야채를 한입 크기로 썰어줍니다.
   3. 프라이팬에 아보카도 오
2025-06-29 17:05:21.266 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 17:05:21.266 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 계란 2개
   - 양송이버섯 2~3개
   - 방울토마토 3~4개
   - 브로콜리 한 줌
   - 당근 1/4개
   - 치즈 한 장 또는 조금 (선택)
   - 견과류 약간 (선택)
   - 소금 약간
   - 후추 약간
   - 아보카도 오일 또는 식용유 1 큰술

조리 방법:
1. 계란을 볼에 풀고 소금, 후추로 간을 합니다.
   2. 양송이버섯, 방울토마토, 브로콜리, 당근 등 준비된 야채를 한입 크기로 썰어줍니다.
   3. 프라이팬에 아보카도 오일이나 식용유를 두르고, 야채를 중불에 2~3분간 볶아줍니다.
   4. 야채가 어느 정도 익으면 풀어둔 계란을 부어줍니다.
   5. 젓가락이나 주걱으로 계란을 천천히 저어 스크램블 하듯 저어주다가, 반숙 상태에서 불을 끕니다.
   6. 그릇에 담고 치즈와 견과류(선택)를 위에 올려 마무리합니다.
2025-06-29 17:05:21.268 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 17:05:21.270 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 야채 스크램블 에그
2025-06-29 17:05:21.289 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 17:05:21.294 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 97
2025-06-29 17:05:30.306 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:05:30.310 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:05:30.314 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:05:30.319 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:05:30.321 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아침 메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 17:05:30.322 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:05:30.323 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:05:30.324 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:05:30.324 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아침 메뉴 추천해줘
2025-06-29 17:05:30.324 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 17:05:30.324 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 17:05:30.325 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:05:30.325 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 17:05:30.326 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:05:30.326 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 17:05:30.326 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:05:38.127 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:05:38.127 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 17:05:38.128 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 그릭 요거트 & 과일**
- 카테고리: 기타 (건강식)
- 추천 이유: 속이 불편한 아침에도 부담 없이 먹을 수 있고, 단백질과 비타민이 풍부하여 든든하게 시작할 수 있는 가벼운 건강식입니다. 딸기, 바나나, 블루베리 등 좋아하는 과일을 곁들이면 맛과 포만감 모두 챙길 수 있습니다[1].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 밥 대신 소화가 쉬운 요거트 위주 메뉴, 알레르기 유발 성분(새우) 미포함

**2. 구운 야채와 스크램블 에그**
- 카테고리: 한식/기타
- 추천 이유: 계란과 다양한 야채를 곁들여 영양과 포만감을 주고, 속 부담이 적어 아침에 잘 맞는 메뉴입니다. 기름·조미료를 최소화하면 더 건강하게 즐길 수 있습니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 쌀밥 없이도 충분히 든든, 새우 등 알레르기 성분 없음

**3. 햄치즈계란토스트**
- 카테고리: 한식/분식
- 추천 이유: 한끼 대용으로 간편하고, 빵을 사용해 속을 덜 부담스럽게 할 수 있습니다. 토스트에 계란, 치즈, 햄(취향에 따라 생략·대체 가능)만 있으면 금방 만들 수 있어 바쁜 아침에 적합합니다[2].
- 예상 조리 시간: 7분
- 난이도: 하
- 개인화 고려사항: 쌀밥 생략, 속에 부담 적음, 새우 등 알레르기 성분 없음

**4. 과일 샐러드 & 견과류**
- 카테고리: 기타/건강식
- 추천 이유: 여러 가지 과일과 견과류를 곁들여 속이 편안하고 빠르게 준비할 수 있는 메뉴입니다. 비타민과 섬유질이 풍부해 아침 허기를 가볍게 달래줍니다[1].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 소화에 좋은 식단, 알레르기 유발 식재료 배제

**5. 에다마메(풋콩) 스팀**
- 카테고리: 기타/건강식
- 추천 이유: 단백질과 섬유질이 많아 포만감을 주고 소화에 부담이 적습니다. 소금만 뿌려 간단히 즐길 수 있어 바쁜 아침에 적합합니다[1].
- 예상 조리 시간: 7분
- 난이도: 하
- 개인화 고려사항: 밥 대신 가벼운 식사, 새우 등 알레르기 성분 없음

### 전체 추천 요약

- 상황 분석: '아침 메뉴' 요청에 따라 속이 편안하고 간단히 준비할 수 있는 메뉴 위주로 선정했으며, 아침에 밥을 먹으면 배가 아프다는 건강상태를 고려해 쌀밥 없이도 든든하게 먹을 수 있는 메뉴로 구성했습니다.
- 추천 기준: 소화 부담이 적으면서도 포만감, 영양을 챙길 수 있는 메뉴. 조리과정이 간단한 아침 식사 위주로 선정.
- 개인화 고려사항: 쌀밥, 새우 등 속 불편을 유발할 수 있는 식재료 및 알레르기 재료는 모두 배제하였습니다.
- 추가 팁: 요거트 또는 샐러드에 견과류·씨앗을 추가하면 포만감과 영양이 더욱 올라가며, 계절과일이나 삶은 계란 등 취향에 따라 간단히 응용하실 수 있습니다.

※ 만약 위 메뉴들 중에서 '레시피'가 필요하시다면, '레시피'라는 단어를 포함해 다시 요청해 주세요!
2025-06-29 17:05:38.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 17:09:28.452 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:09:28.456 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:09:28.462 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:09:28.473 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:09:28.476 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 점심메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 17:09:28.476 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 점심메뉴 추천해줘
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 17:09:28.482 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:09:28.486 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 17:09:28.486 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:09:28.486 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 점심메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 17:09:28.486 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:09:36.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:09:36.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 17:09:36.223 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 돌솥비빔밥**
- 카테고리: 한식
- 추천 이유: 다양한 채소와 고기로 균형 잡힌 영양을 챙길 수 있고, 기름기 적으며 든든하게 점심을 먹기에 적합합니다. 조리법이 간단하고 소화에도 부담이 적은 메뉴로 점심 추천에 잘 어울립니다[2][3].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우를 비롯한 해산물이 필요 없고, 아침에 밥을 먹으면 배가 아프다는 점을 고려해 점심에는 충분히 소화가 잘 되는 채소 위주 메뉴를 추천합니다.

**2. 된장찌개 & 밥**
- 카테고리: 한식
- 추천 이유: 한식 선호도를 반영, 따뜻하고 속이 편안한 찌개로 점심시간을 든든하게 보낼 수 있습니다. 고기나 해산물 없이도 두부, 채소 등으로 간단하게 만들 수 있어 건강에 좋으며, 밥과 곁들이면 포만감도 높습니다[1][3].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료를 제외하고, 소화에 부담이 적은 재료(두부, 호박, 버섯 등)를 사용하면 좋습니다.

**3. 샌드위치(서브웨이 스타일)**
- 카테고리: 기타/양식
- 추천 이유: 다양한 신선한 채소와 닭가슴살, 달걀 등 단백질을 추가해 간편하게 영양을 보충할 수 있습니다. 소화가 잘 되며, 칼로리 조절이 쉽고 점심식사로 인기가 높습니다[2].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 해산물(특히 새우)은 빼고 닭, 달걀, 야채 위주로 선택하면 건강한 점심이 됩니다.

**4. 바지락 칼국수(새우 제외)**
- 카테고리: 한식
- 추천 이유: 국물 요리로 점심에 속을 편안하게 해주며, 부드럽고 든든한 한 끼를 제공합니다. 국물이나 면을 좋아하는 분께 추천드립니다. 새우 대신 바지락만 사용해서 알레르기 위험 없이 즐길 수 있습니다[4].
- 예상 조리 시간: 25분
- 난이도: 중
- 개인화 고려사항: 새우는 절대 넣지 않고, 바지락 등으로 감칠맛을 내며 소화에도 부담을 줄였습니다.

### 전체 추천 요약
- 상황 분석: 점심식사로 든든하면서도 건강에 신경 쓸 필요가 있는 상황입니다.
- 추천 기준: 기름지지 않고, 다양한 영양을 골고루 섭취할 수 있는 한식 및 간편식 위주의 메뉴 중심으로 선정했습니다. 점심시간에 부담 없이 빠르고 쉽게 먹을 수 있는 메뉴를 위주로 추천했습니다.
- 개인화 고려사항: 새우 알레르기를 철저히 배제했으며, 아침에 밥을 먹으면 배가 아프다는 점을 반영해 점심에는 소화에 부담이 적은 채소, 두부 중심의 한식 또는 신선한 양식 메뉴를 포함했습니다.
- 추가 팁: 한식 메뉴를 먹을 때는 국물이나 채소를 충분히 섭취해 소화를 돕고, 양식을 선택한다면 소스는 너무 자극적이지 않은 것으로 고르면 더욱 건강하게 식사할 수 있습니다.

**레시피가 필요하다면 '레시피'라는 단어를 포함해서 다시 요청해주세요!**
2025-06-29 17:09:36.224 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 17:19:27.245 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:19:27.255 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:19:27.264 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:19:27.267 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:19:27.311 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 피자, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 17:19:27.319 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:19:27.328 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:19:27.329 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:19:27.329 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 피자
2025-06-29 17:19:27.329 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 17:19:27.329 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 17:19:27.342 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:19:27.344 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 17:19:27.344 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:19:27.344 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 피자
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 17:19:27.344 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:19:47.127 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:19:47.127 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 17:19:47.127 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 기본 치즈 피자

2. 카테고리: 양식

3. 조리 시간: 40분

4. 조리 방법:
   1. 중력분(강력분), 인스턴트 드라이 이스트, 소금, 설탕을 볼에 넣고 섞어주세요.
   2. 따뜻한 물과 올리브 오일을 넣고 5~10분간 손으로 반죽해 주세요.
   3. 볼에 랩을 씌워 따뜻한 곳에서 1시간 정도 1차 발효를 합니다.
   4. 발효가 끝난 반죽을 원형으로 밀어줍니다.
   5. 반죽을 오븐팬이나 피자 스톤에 올립니다.
   6. 올리브 오일 소량을 표면에 바른 뒤, 토마토 소스를 고르게 펴 발라줍니다.
   7. 모짜렐라 치즈를 듬뿍 올립니다.
   8. 기호에 따라 햄, 야채 등 토핑을 추가합니다(새우 제외).
   9. 예열한 오븐(200℃, 390℉)에서 15~18분간 구워줍니다.
   10. 완성된 피자에 바질이나 파슬리 등 향신료를 뿌려 마무리합니다[2][3].

5. 필요한 재료와 양:
   - 중력분(강력분) 2컵 (약 290g)
   - 인스턴트 드라이 이스트 2티스푼 (약 6g)
   - 소금 1/3티스푼 (약 2g)
   - 설탕 1/2큰술 (약 6g)
   - 따뜻한 물 3/4컵 (약 180ml)
   - 올리브 오일 2큰술 (약 30ml), 추가로 1큰술(토핑용)
   - 토마토 소스 1/2컵 (약 120ml)
   - 모짜렐라 치즈 2컵 (약 250g)
   - 햄 50g(기호에 따라 선택)
   - 바질 또는 파슬리 약간(마무리용)

6. 난이도: 중

7. 이미지 URL: https://cdn.pixabay.com/photo/2017/12/09/08/18/pizza-3007395_1280.jpg

8. 요리 팁:
   - 도우는 반드시 따뜻한 곳에서 충분히 발효하세요. 그래야 쫄깃하고 풍부한 맛이 납니다.
   - 오븐을 최대한 높은 온도로 예열하고, 피자 바닥이 바삭해지도록 피자 팬 대신 피자 스톤이나 두꺼운 오븐 팬을 사용하면 더욱 맛있습니다[2][4].
   - 토핑은 기호에 따라 자유롭게 바꿔도 좋지만, 수분이 많은 재료(버섯, 파인애플 등)는 미리 수분을 제거하고 사용하면 도우가 눅눅해지는 걸 막을 수 있습니다.
   - 새우 알레르기가 있으므로 새우 토핑은 절대 사용하지 마세요.
2025-06-29 17:19:47.130 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://cdn.pixabay.com/photo/2017/12/09/08/18/pizza-3007395_1280.jpg
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://cdn.pixabay.com/photo/2017/12/09/08/18/pizza-3007395_1280.jpg
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 중력분(강력분) 2컵 (약 290g)
   - 인스턴트 드라이 이스트 2티스푼 (약 6g)
   - 소금 1/3티스푼 (약 2g)
   - 설탕 1/2큰술 (약 6g)
   - 따뜻한 물 3/4컵 (약 180ml)
   - 올리브 오일 2큰술 (약 30ml), 추가로 1큰술(토핑용)
   - 토마토 소스 1/2컵 (약 120ml)
   - 모짜렐라 치즈 2컵 (약 250g)
   - 햄 50g(기호에 따라 선택)
   - 바질 또는 파슬리 약간(마무리용)
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 10
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 중력분(강력분) 2컵 (약 290g)
2025-06-29 17:19:47.138 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 290g
2025-06-29 17:19:47.138 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 290g
2025-06-29 17:19:47.140 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.143 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.143 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 인스턴트 드라이 이스트 2티스푼 (약 6g)
2025-06-29 17:19:47.143 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 이스트, Amount: 2티스푼
2025-06-29 17:19:47.143 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 이스트, Amount: 2티스푼
2025-06-29 17:19:47.144 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.145 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '이스트' not found in DB. Skipping.
2025-06-29 17:19:47.145 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/3티스푼 (약 2g)
2025-06-29 17:19:47.145 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 2g
2025-06-29 17:19:47.145 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 2g
2025-06-29 17:19:47.147 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.148 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.148 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1/2큰술 (약 6g)
2025-06-29 17:19:47.148 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 6g
2025-06-29 17:19:47.148 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 6g
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 따뜻한 물 3/4컵 (약 180ml)
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 180ml
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 180ml
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브 오일 2큰술 (약 30ml), 추가로 1큰술(토핑용)
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 오일, Amount: 2큰술
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 오일, Amount: 2큰술
2025-06-29 17:19:47.154 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.155 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '오일' not found in DB. Skipping.
2025-06-29 17:19:47.155 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 소스 1/2컵 (약 120ml)
2025-06-29 17:19:47.155 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 120ml
2025-06-29 17:19:47.155 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 120ml
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 모짜렐라 치즈 2컵 (약 250g)
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 2컵
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 2컵
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄 50g(기호에 따라 선택)
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 햄, Amount: 50g
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 햄, Amount: 50g
2025-06-29 17:19:47.160 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.160 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '햄' not found in DB. Skipping.
2025-06-29 17:19:47.160 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 바질 또는 파슬리 약간(마무리용)
2025-06-29 17:19:47.160 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 바질 또는 파슬리 약간(마무리용)
2025-06-29 17:19:47.161 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 중력분(강력분), 인스턴트 드라이 이스트, 소금, 설탕을 볼에 넣고 섞어주세요.
   2. 따뜻한 물과 올리브 오일을 넣고 5~10분간 손으로 반죽해 주세요.
   3. 볼에
2025-06-29 17:19:47.161 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 17:19:47.161 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 중력분(강력분) 2컵 (약 290g)
   - 인스턴트 드라이 이스트 2티스푼 (약 6g)
   - 소금 1/3티스푼 (약 2g)
   - 설탕 1/2큰술 (약 6g)
   - 따뜻한 물 3/4컵 (약 180ml)
   - 올리브 오일 2큰술 (약 30ml), 추가로 1큰술(토핑용)
   - 토마토 소스 1/2컵 (약 120ml)
   - 모짜렐라 치즈 2컵 (약 250g)
   - 햄 50g(기호에 따라 선택)
   - 바질 또는 파슬리 약간(마무리용)

조리 방법:
1. 중력분(강력분), 인스턴트 드라이 이스트, 소금, 설탕을 볼에 넣고 섞어주세요.
   2. 따뜻한 물과 올리브 오일을 넣고 5~10분간 손으로 반죽해 주세요.
   3. 볼에 랩을 씌워 따뜻한 곳에서 1시간 정도 1차 발효를 합니다.
   4. 발효가 끝난 반죽을 원형으로 밀어줍니다.
   5. 반죽을 오븐팬이나 피자 스톤에 올립니다.
   6. 올리브 오일 소량을 표면에 바른 뒤, 토마토 소스를 고르게 펴 발라줍니다.
   7. 모짜렐라 치즈를 듬뿍 올립니다.
   8. 기호에 따라 햄, 야채 등 토핑을 추가합니다(새우 제외).
   9. 예열한 오븐(200℃, 390℉)에서 15~18분간 구워줍니다.
   10. 완성된 피자에 바질이나 파슬리 등 향신료를 뿌려 마무리합니다[2][3].
2025-06-29 17:19:47.162 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 17:19:47.162 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 기본 치즈 피자
2025-06-29 17:19:47.180 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 17:19:47.183 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 98
2025-06-29 17:22:30.433 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:22:30.440 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:22:30.445 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:22:30.448 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:22:30.453 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내 냉장고 재료를 활용한 피자 레시피 제공해줘, useRefrigerator: true, isSpecificRecipe: true, retry: 0
2025-06-29 17:22:30.454 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내 냉장고 재료를 활용한 피자 레시피 제공해줘
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: true
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 17:22:30.459 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:22:30.459 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 17:22:30.483 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:22:30.490 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:22:30.490 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 보유 재료
등록된 보유 재료가 없습니다. 일반적인 재료로 레시피를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내 냉장고 재료를 활용한 피자 레시피 제공해줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 17:22:30.490 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:22:37.608 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:22:37.608 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 17:22:37.609 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 냉장고 재료 활용 밥피자

2. 카테고리: 분식

3. 조리 시간: 20분

4. 조리 방법:
   1. 볼에 밥(찬밥, 식은밥 가능)과 계란을 넣고 충분히 섞어준다.
   2. 후라이팬에 기름을 두르고 밥을 넓게 펴서 약불에 노릇하게 구워 피자 도우를 만든다.
   3. 도우 위에 토마토소스나 케첩을 골고루 바른다.
   4. 냉장고에 남은 자투리 채소(예: 양파, 피망, 양배추 등)와 원하는 토핑(햄, 베이컨, 옥수수 등)을 잘라서 올린다. *새우는 알레르기 때문에 제외*
   5. 피자치즈를 듬뿍 뿌린다.
   6. 뚜껑을 덮고 치즈가 녹을 때까지 중약불에서 5~7분간 익힌다.
   7. 완성된 밥피자를 먹기 좋게 잘라서 접시에 담아낸다.

5. 필요한 재료와 양:
   - 밥(찬밥/식은밥 등) 1공기
   - 계란 1~2개
   - 토마토소스 또는 케첩 2큰술
   - 양파 1/4개
   - 피망 1/4개
   - 옥수수 통조림 2큰술
   - 햄 또는 베이컨 2~3장
   - 피자치즈 1컵
   - 식용유 약간

6. 난이도: 하

7. 이미지 URL: https://mblogthumb-phinf.pstatic.net/MjAyMDA0MjBfMjg0/MDAxNTg3MjczNDkyMTk3.4r9QUMrFXQaIbgw3A_n4yD2eo4mD2jicdoRQlJbXJ10g.GvJjGb13p5vGLu57SU6vF5Eok7a2j1irtKHyAJ9t6jwg.JPEG.choi020115/IMG_2084.JPG?type=w800

8. 요리 팁:
   - 밥이 너무 퍼진 경우, 계란을 한 개 더 넣으면 도우가 잘 뭉쳐져요.
   - 토핑은 냉장고 사정에 맞게 자유롭게 변경하세요. 단, 새우는 알레르기 때문에 절대 넣지 마세요.
   - 치즈는 넉넉히 올릴수록 맛과 식감이 좋아져요.
   - 바닥이 잘 타지 않도록 약불 조리를 추천합니다.
2025-06-29 17:22:37.623 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 분식
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://mblogthumb-phinf.pstatic.net/MjAyMDA0MjBfMjg0/MDAxNTg3MjczNDkyMTk3.4r9QUMrFXQaIbgw3A_n4yD2eo4mD2jicdoRQlJbXJ10g.GvJjGb13p5vGLu57SU6vF5Eok7a2j1irtKHyAJ9t6jwg.JPEG.choi020115/IMG_2084.JPG?type=w800
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://mblogthumb-phinf.pstatic.net/MjAyMDA0MjBfMjg0/MDAxNTg3MjczNDkyMTk3.4r9QUMrFXQaIbgw3A_n4yD2eo4mD2jicdoRQlJbXJ10g.GvJjGb13p5vGLu57SU6vF5Eok7a2j1irtKHyAJ9t6jwg.JPEG.choi020115/IMG_2084.JPG?type=w800
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥(찬밥/식은밥 등) 1공기
   - 계란 1~2개
   - 토마토소스 또는 케첩 2큰술
   - 양파 1/4개
   - 피망 1/4개
   - 옥수수 통조림 2큰술
   - 햄 또는 베이컨 2~3장
   - 피자치즈 1컵
   - 식용유 약간
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥(찬밥/식은밥 등) 1공기
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 밥(찬밥/식은밥 등) 1공기
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1~2개
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 계란 1~2개
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토소스 또는 케첩 2큰술
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 케첩, Amount: 2큰술
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케첩, Amount: 2큰술
2025-06-29 17:22:37.628 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:22:37.630 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '케첩' not found in DB. Skipping.
2025-06-29 17:22:37.630 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-29 17:22:37.630 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-29 17:22:37.630 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피망 1/4개
2025-06-29 17:22:37.631 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 피망 1/4개
2025-06-29 17:22:37.631 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 옥수수 통조림 2큰술
2025-06-29 17:22:37.631 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통조림, Amount: 2큰술
2025-06-29 17:22:37.631 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통조림, Amount: 2큰술
2025-06-29 17:22:37.632 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '통조림' not found in DB. Skipping.
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄 또는 베이컨 2~3장
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄 또는 베이컨 2~3장
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피자치즈 1컵
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 피자치즈, Amount: 1컵
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 피자치즈, Amount: 1컵
2025-06-29 17:22:37.634 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:22:37.635 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '피자치즈' not found in DB. Skipping.
2025-06-29 17:22:37.635 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 17:22:37.635 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 17:22:37.636 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 볼에 밥(찬밥, 식은밥 가능)과 계란을 넣고 충분히 섞어준다.
   2. 후라이팬에 기름을 두르고 밥을 넓게 펴서 약불에 노릇하게 구워 피자 도우를 만든다.
   3. 도우 
2025-06-29 17:22:37.636 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 17:22:37.636 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥(찬밥/식은밥 등) 1공기
   - 계란 1~2개
   - 토마토소스 또는 케첩 2큰술
   - 양파 1/4개
   - 피망 1/4개
   - 옥수수 통조림 2큰술
   - 햄 또는 베이컨 2~3장
   - 피자치즈 1컵
   - 식용유 약간

조리 방법:
1. 볼에 밥(찬밥, 식은밥 가능)과 계란을 넣고 충분히 섞어준다.
   2. 후라이팬에 기름을 두르고 밥을 넓게 펴서 약불에 노릇하게 구워 피자 도우를 만든다.
   3. 도우 위에 토마토소스나 케첩을 골고루 바른다.
   4. 냉장고에 남은 자투리 채소(예: 양파, 피망, 양배추 등)와 원하는 토핑(햄, 베이컨, 옥수수 등)을 잘라서 올린다. *새우는 알레르기 때문에 제외*
   5. 피자치즈를 듬뿍 뿌린다.
   6. 뚜껑을 덮고 치즈가 녹을 때까지 중약불에서 5~7분간 익힌다.
   7. 완성된 밥피자를 먹기 좋게 잘라서 접시에 담아낸다.
2025-06-29 17:22:37.637 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 17:22:37.639 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 냉장고 재료 활용 밥피자
2025-06-29 17:22:37.642 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 17:22:37.645 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 99
2025-06-29 17:24:52.415 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:24:52.419 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:24:52.422 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:24:52.423 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:24:52.439 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:24:52.441 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:24:52.443 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:24:52.445 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:26:13.562 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:26:13.566 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:26:13.572 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:26:13.574 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:28:17.191 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:28:17.196 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 17:28:17.199 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 17:28:23.670 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 17:28:23.701 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 20512 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 17:28:23.701 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 17:28:23.701 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 17:28:23.748 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 17:28:23.749 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 17:28:24.575 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:28:24.576 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 17:28:24.615 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.617 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.618 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.619 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.620 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.620 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.621 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.622 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.622 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 JDBC repository interfaces.
2025-06-29 17:28:24.636 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:28:24.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 17:28:24.736 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 8 JPA repository interfaces.
2025-06-29 17:28:24.766 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:28:24.767 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-29 17:28:25.368 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 17:28:25.377 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 17:28:25.379 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 17:28:25.379 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 17:28:25.416 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 17:28:25.418 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1667 ms
2025-06-29 17:28:25.462 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 17:28:25.593 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@67335650
2025-06-29 17:28:25.596 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 17:28:25.611 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 17:28:25.726 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 17:28:25.758 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 17:28:25.779 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 17:28:25.895 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 17:28:25.948 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 17:28:25.949 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 17:28:26.754 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 17:28:26.867 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:28:27.234 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 17:28:27.445 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 17:28:27.446 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 17:28:28.348 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 17:28:28.419 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 17:28:28.528 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6cd2838b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@44f40829, org.springframework.security.web.context.SecurityContextHolderFilter@517c30bb, org.springframework.security.web.header.HeaderWriterFilter@2beaf491, org.springframework.web.filter.CorsFilter@23303427, org.springframework.security.web.authentication.logout.LogoutFilter@7480d829, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@21e98968, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@120fb6e2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@72e57a87, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@65ffa82f, org.springframework.security.web.session.SessionManagementFilter@3e4f6b1c, org.springframework.security.web.access.ExceptionTranslationFilter@bf4e87a, org.springframework.security.web.access.intercept.AuthorizationFilter@504f1820]
2025-06-29 17:28:28.824 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 17:28:28.841 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 17:28:28.848 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 17:28:28.860 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.498 seconds (process running for 6.117)
2025-06-29 17:31:23.012 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 17:31:23.012 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 17:31:23.015 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-29 17:31:23.068 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:31:23.095 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:31:23.112 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:31:23.117 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:31:23.145 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:31:23.146 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:31:23.151 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:31:23.153 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:07.860 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:34:07.862 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:34:07.867 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:07.869 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:07.884 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:34:07.885 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:34:07.888 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:07.893 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:15.315 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:34:15.318 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 17:34:15.325 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 17:34:19.851 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 17:34:19.881 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 20922 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 17:34:19.882 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 17:34:19.882 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 17:34:19.938 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 17:34:19.938 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 17:34:20.829 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:34:20.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 17:34:20.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.876 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.876 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46 ms. Found 0 JDBC repository interfaces.
2025-06-29 17:34:20.893 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:34:20.894 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 17:34:20.998 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 8 JPA repository interfaces.
2025-06-29 17:34:21.029 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:34:21.030 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 17:34:21.681 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 17:34:21.689 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 17:34:21.691 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 17:34:21.691 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 17:34:21.729 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 17:34:21.731 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1791 ms
2025-06-29 17:34:21.775 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 17:34:21.909 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@9581e1c
2025-06-29 17:34:21.913 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 17:34:21.928 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 17:34:22.042 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 17:34:22.068 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 17:34:22.086 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 17:34:22.199 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 17:34:22.246 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 17:34:22.247 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 17:34:23.236 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 17:34:23.349 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:34:23.728 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 17:34:23.966 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 17:34:23.967 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 17:34:24.906 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 17:34:24.984 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 17:34:25.099 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@39d1076d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6ea5e97c, org.springframework.security.web.context.SecurityContextHolderFilter@7b6d2433, org.springframework.security.web.header.HeaderWriterFilter@4c04475e, org.springframework.web.filter.CorsFilter@6171a836, org.springframework.security.web.authentication.logout.LogoutFilter@28012bb6, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@390cfbe4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6394beb8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18aec02, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5e8b86a8, org.springframework.security.web.session.SessionManagementFilter@1fe5307e, org.springframework.security.web.access.ExceptionTranslationFilter@42ac6588, org.springframework.security.web.access.intercept.AuthorizationFilter@55b04261]
2025-06-29 17:34:25.404 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 17:34:25.429 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 17:34:25.435 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 17:34:25.445 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.922 seconds (process running for 6.536)
2025-06-29 17:34:26.970 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 17:34:26.970 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 17:34:26.973 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-29 17:34:27.033 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:34:27.059 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:34:27.087 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:27.092 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:27.133 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:34:27.179 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name is null
2025-06-29 17:34:27.194 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 17:34:27.206 [http-nio-8080-exec-1] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1048, SQLState: 23000
2025-06-29 17:34:27.206 [http-nio-8080-exec-1] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Column 'name' cannot be null
2025-06-29 17:39:28.218 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:39:28.225 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.237 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.239 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.251 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.276 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:39:28.280 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.285 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.295 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.299 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.307 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:39:28.309 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.313 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.316 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.322 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.339 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:39:28.349 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.354 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.356 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.361 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:49:35.888 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m13s826ms).
2025-06-29 17:53:28.484 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:28.487 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:28.490 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:28.493 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:28.500 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:28.510 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:28.512 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:28.514 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:28.515 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:28.518 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:31.587 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:31.590 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:31.593 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:31.596 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:31.604 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:31.614 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:31.616 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:31.619 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:31.623 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:31.630 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:41.120 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:41.122 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:41.124 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:41.127 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:41.131 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:41.149 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name is null
2025-06-29 17:53:41.154 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 17:53:41.156 [http-nio-8080-exec-10] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1048, SQLState: 23000
2025-06-29 17:53:41.156 [http-nio-8080-exec-10] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Column 'name' cannot be null
2025-06-29 17:53:41.183 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4m5s297ms).
2025-06-29 17:55:41.719 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:55:41.722 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 17:55:41.730 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 17:55:46.833 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 17:55:46.860 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 21447 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 17:55:46.861 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 17:55:46.862 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 17:55:46.917 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 17:55:46.917 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 17:55:47.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:55:47.895 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 17:55:48.036 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.040 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.044 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.045 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.046 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 0 JDBC repository interfaces.
2025-06-29 17:55:48.085 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:55:48.086 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 17:55:48.175 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 8 JPA repository interfaces.
2025-06-29 17:55:48.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:55:48.205 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 17:55:48.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.217 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-29 17:55:49.049 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 17:55:49.056 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 17:55:49.058 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 17:55:49.058 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 17:55:49.099 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 17:55:49.101 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2182 ms
2025-06-29 17:55:49.137 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 17:55:49.279 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4742ef23
2025-06-29 17:55:49.282 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 17:55:49.298 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 17:55:49.417 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 17:55:49.443 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 17:55:49.461 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 17:55:49.592 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 17:55:49.639 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 17:55:49.640 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 17:55:50.467 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 17:55:50.574 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:55:50.980 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 17:55:51.216 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 17:55:51.217 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 17:55:52.149 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 17:55:52.235 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 17:55:52.376 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@56d6ed67, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@605012c8, org.springframework.security.web.context.SecurityContextHolderFilter@33f25560, org.springframework.security.web.header.HeaderWriterFilter@66b10e96, org.springframework.web.filter.CorsFilter@4e87b097, org.springframework.security.web.authentication.logout.LogoutFilter@13f3fc79, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@75de20a5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@74bf8b4c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@64ad01b9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4e082c11, org.springframework.security.web.session.SessionManagementFilter@38e6d3b7, org.springframework.security.web.access.ExceptionTranslationFilter@7ed2ee4, org.springframework.security.web.access.intercept.AuthorizationFilter@7899c530]
2025-06-29 17:55:52.755 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 17:55:52.774 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 17:55:52.780 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 17:55:52.789 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.284 seconds (process running for 7.067)
2025-06-29 17:56:06.680 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 17:56:06.680 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 17:56:06.682 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-29 17:56:06.745 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:56:06.775 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:56:06.790 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:56:06.795 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:56:06.862 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:56:06.915 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:56:06.931 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 17:56:06.947 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 17:56:06.961 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (user_id, weight_in_grams) 
    values
        (?, ?)
2025-06-29 17:56:06.976 [http-nio-8080-exec-1] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1364, SQLState: HY000
2025-06-29 17:56:06.976 [http-nio-8080-exec-1] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Field 'ingredient_id' doesn't have a default value
2025-06-29 17:57:54.252 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:57:54.256 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 17:57:54.265 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 17:57:59.807 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 17:57:59.835 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 21685 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 17:57:59.835 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 17:57:59.836 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 17:57:59.893 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 17:57:59.894 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 17:58:00.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:58:00.779 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 17:58:00.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.835 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.839 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 58 ms. Found 0 JDBC repository interfaces.
2025-06-29 17:58:00.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:58:00.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 17:58:00.950 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 87 ms. Found 8 JPA repository interfaces.
2025-06-29 17:58:00.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:58:00.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 17:58:00.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 17:58:01.652 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 17:58:01.658 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 17:58:01.661 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 17:58:01.661 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 17:58:01.697 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 17:58:01.699 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1803 ms
2025-06-29 17:58:01.738 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 17:58:01.887 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1a7367b9
2025-06-29 17:58:01.890 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 17:58:01.907 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 17:58:02.034 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 17:58:02.063 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 17:58:02.080 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 17:58:02.190 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 17:58:02.233 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 17:58:02.234 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 17:58:03.096 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 17:58:03.203 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:58:03.588 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 17:58:03.843 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 17:58:03.844 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 17:58:04.595 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 17:58:04.681 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 17:58:04.819 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4770fe8b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1aa6d6c1, org.springframework.security.web.context.SecurityContextHolderFilter@2abb2248, org.springframework.security.web.header.HeaderWriterFilter@15e8df45, org.springframework.web.filter.CorsFilter@2809fed, org.springframework.security.web.authentication.logout.LogoutFilter@71e9c161, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@5fa21c9c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@46e1d0ef, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3e3b46b7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1f0d9965, org.springframework.security.web.session.SessionManagementFilter@13f3fc79, org.springframework.security.web.access.ExceptionTranslationFilter@34308ee6, org.springframework.security.web.access.intercept.AuthorizationFilter@4793431f]
2025-06-29 17:58:05.199 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 17:58:05.219 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 17:58:05.224 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 17:58:05.235 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.761 seconds (process running for 6.386)
2025-06-29 17:58:17.674 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 17:58:17.674 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 17:58:17.676 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 17:58:17.734 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:58:17.763 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:58:17.780 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:58:17.784 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:58:17.843 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:58:17.891 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:58:17.904 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 17:58:17.916 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 17:58:17.920 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 17:58:17.934 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?)
2025-06-29 17:58:29.811 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:58:29.814 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:58:29.820 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:58:29.855 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:58:29.869 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:58:29.875 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:58:29.878 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 17:58:29.880 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 17:58:29.883 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?)
2025-06-29 18:01:35.696 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:01:35.700 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:01:35.706 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:08:42.671 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:08:42.704 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 23046 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:08:42.704 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:08:42.705 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:08:42.760 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:08:42.761 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:08:43.633 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:08:43.634 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:08:43.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.684 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.686 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.688 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.688 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.689 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.691 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 54 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:08:43.708 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:08:43.708 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:08:43.801 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 86 ms. Found 8 JPA repository interfaces.
2025-06-29 18:08:43.827 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:08:43.828 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 18:08:44.572 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:08:44.578 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:08:44.580 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:08:44.580 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:08:44.617 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:08:44.619 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1856 ms
2025-06-29 18:08:44.648 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:08:44.876 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@233d07c2
2025-06-29 18:08:44.879 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:08:44.896 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:08:45.022 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:08:45.048 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:08:45.063 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:08:45.262 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:08:45.315 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:08:45.315 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:08:46.192 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:08:46.335 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:08:46.737 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:08:46.984 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:08:46.985 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:08:47.927 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:08:48.015 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:08:48.169 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1a539a4b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@54009368, org.springframework.security.web.context.SecurityContextHolderFilter@2b2271ac, org.springframework.security.web.header.HeaderWriterFilter@2f544d62, org.springframework.web.filter.CorsFilter@4d4ab590, org.springframework.security.web.authentication.logout.LogoutFilter@b337aa5, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@a75d5dc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6a2f70a9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@47ac667, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3f6847ef, org.springframework.security.web.session.SessionManagementFilter@daa74ab, org.springframework.security.web.access.ExceptionTranslationFilter@4e87b097, org.springframework.security.web.access.intercept.AuthorizationFilter@7da6776e]
2025-06-29 18:08:48.563 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:08:48.582 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:08:48.588 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:08:48.597 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.222 seconds (process running for 6.796)
2025-06-29 18:09:05.299 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:09:05.300 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:09:05.301 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 18:09:05.357 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:09:05.382 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:09:05.397 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:09:05.402 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:09:05.460 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:09:05.505 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:09:05.518 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:09:05.531 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:09:34.281 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:09:34.308 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 23300 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:09:34.308 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:09:34.308 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:09:34.370 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:09:34.370 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:09:35.288 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:35.289 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:09:35.342 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.345 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.346 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.347 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.348 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.348 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.350 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.350 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.351 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 59 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:09:35.369 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:35.370 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:09:35.466 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 90 ms. Found 8 JPA repository interfaces.
2025-06-29 18:09:35.494 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:35.495 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:09:35.513 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.513 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-29 18:09:36.288 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:09:36.295 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:09:36.297 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:09:36.297 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:09:36.334 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:09:36.337 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1964 ms
2025-06-29 18:09:36.374 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:09:36.526 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@29b8a3b7
2025-06-29 18:09:36.530 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:09:36.546 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:09:36.677 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:09:36.705 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:09:36.724 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:09:36.846 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:09:36.902 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:09:36.903 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:09:37.786 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:09:37.898 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:09:38.305 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:09:38.563 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:09:38.564 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:09:39.558 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:09:39.681 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:09:39.847 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@594b68eb, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@493dc735, org.springframework.security.web.context.SecurityContextHolderFilter@5349fc92, org.springframework.security.web.header.HeaderWriterFilter@4de18a5a, org.springframework.web.filter.CorsFilter@24e29c47, org.springframework.security.web.authentication.logout.LogoutFilter@4c60e61e, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@5eb091c3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@203b7694, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6d65e19f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@146a950e, org.springframework.security.web.session.SessionManagementFilter@671c3891, org.springframework.security.web.access.ExceptionTranslationFilter@46e1d0ef, org.springframework.security.web.access.intercept.AuthorizationFilter@b337aa5]
2025-06-29 18:09:40.243 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2025-06-29 18:09:40.261 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:09:40.273 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-29 18:09:40.279 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:09:40.281 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:09:40.286 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:09:40.301 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-29 18:09:40.312 [restartedMain] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-29 18:09:49.026 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:09:49.029 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:09:49.036 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:09:57.856 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:09:57.882 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 23401 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:09:57.882 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:09:57.883 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:09:57.933 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:09:57.933 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:09:58.722 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:58.723 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:09:58.759 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.762 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.762 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.764 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.765 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.765 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.766 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:09:58.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:58.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:09:58.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 90 ms. Found 8 JPA repository interfaces.
2025-06-29 18:09:58.903 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:58.904 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:09:58.912 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.914 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.914 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 18:09:59.500 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:09:59.506 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:09:59.508 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:09:59.509 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:09:59.542 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:09:59.543 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1609 ms
2025-06-29 18:09:59.576 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:09:59.705 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4bb6e52d
2025-06-29 18:09:59.708 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:09:59.723 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:09:59.833 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:09:59.856 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:09:59.873 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:09:59.972 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:10:00.021 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:10:00.021 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:10:00.790 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:10:00.887 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:10:01.255 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:10:01.489 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:10:01.490 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:10:02.180 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:10:02.256 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:10:02.390 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7da6776e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@47ebd717, org.springframework.security.web.context.SecurityContextHolderFilter@daa74ab, org.springframework.security.web.header.HeaderWriterFilter@605012c8, org.springframework.web.filter.CorsFilter@2ccbd36d, org.springframework.security.web.authentication.logout.LogoutFilter@6323637d, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@2dcaafe2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@147f588b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2b2271ac, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a539a4b, org.springframework.security.web.session.SessionManagementFilter@6328c62a, org.springframework.security.web.access.ExceptionTranslationFilter@4b596adc, org.springframework.security.web.access.intercept.AuthorizationFilter@1f77015]
2025-06-29 18:10:02.741 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:10:02.759 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:10:02.764 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:10:02.775 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.206 seconds (process running for 5.815)
2025-06-29 18:10:14.428 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:10:14.428 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:10:14.430 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-29 18:10:14.493 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:10:14.520 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:10:14.536 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:10:14.541 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:10:14.605 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:10:14.655 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:10:14.682 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:10:14.698 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:10:14.703 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:10:14.715 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:11:22.179 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:11:22.206 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 23651 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:11:22.207 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:11:22.208 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:11:22.262 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:11:22.262 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:11:23.223 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:11:23.225 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:11:23.269 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.272 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.273 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.273 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.274 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.275 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.276 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.277 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.277 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 49 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:11:23.292 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:11:23.293 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:11:23.382 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 8 JPA repository interfaces.
2025-06-29 18:11:23.410 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:11:23.410 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.421 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.421 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.421 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.421 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 18:11:24.076 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:11:24.082 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:11:24.084 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:11:24.084 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:11:24.121 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:11:24.123 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1858 ms
2025-06-29 18:11:24.155 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:11:24.294 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@14c98662
2025-06-29 18:11:24.298 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:11:24.315 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:11:24.442 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:11:24.469 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:11:24.485 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:11:24.593 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:11:24.650 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:11:24.651 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:11:25.535 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:11:25.637 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:11:26.083 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:11:26.452 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:11:26.453 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:11:27.774 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:11:27.863 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:11:28.011 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1a1532ce, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@11353a2d, org.springframework.security.web.context.SecurityContextHolderFilter@3c5f9513, org.springframework.security.web.header.HeaderWriterFilter@4965c55d, org.springframework.web.filter.CorsFilter@70a3e1c, org.springframework.security.web.authentication.logout.LogoutFilter@1d948c59, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@7c2e2c01, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4852542e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@9d35506, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@37d6c6, org.springframework.security.web.session.SessionManagementFilter@5f775a8, org.springframework.security.web.access.ExceptionTranslationFilter@1f7c7d0c, org.springframework.security.web.access.intercept.AuthorizationFilter@76efb891]
2025-06-29 18:11:28.581 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:11:28.601 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:11:28.607 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:11:28.618 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.759 seconds (process running for 7.476)
2025-06-29 18:12:06.008 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:12:06.008 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:12:06.009 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 18:12:06.064 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:12:06.097 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:12:06.111 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:12:06.117 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:12:06.187 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:12:06.298 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:12:06.345 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:12:06.366 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:12:06.372 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:12:06.392 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:13:31.735 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:13:31.743 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:13:31.750 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:13:31.755 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:13:31.766 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:13:31.773 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:13:31.776 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:13:31.779 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:13:31.782 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:13:31.786 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:14:13.034 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:14:13.037 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:14:13.045 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:14:19.759 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:14:19.789 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 24061 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:14:19.790 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:14:19.791 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:14:19.847 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:14:19.847 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:14:20.674 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:14:20.675 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:14:20.713 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.716 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.716 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.717 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.719 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.720 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.721 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:14:20.733 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:14:20.733 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:14:20.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 8 JPA repository interfaces.
2025-06-29 18:14:20.862 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:14:20.863 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 18:14:21.474 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:14:21.481 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:14:21.483 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:14:21.484 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:14:21.519 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:14:21.520 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1672 ms
2025-06-29 18:14:21.553 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:14:21.840 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5ffd0992
2025-06-29 18:14:21.843 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:14:21.864 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:14:22.017 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:14:22.044 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:14:22.062 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:14:22.177 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:14:22.227 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:14:22.227 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:14:23.054 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:14:23.152 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:14:23.541 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:14:23.770 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:14:23.771 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:14:24.680 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:14:24.775 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:14:24.915 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@47ebd717, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ccbd36d, org.springframework.security.web.context.SecurityContextHolderFilter@2896eaa2, org.springframework.security.web.header.HeaderWriterFilter@4e87b097, org.springframework.web.filter.CorsFilter@1a539a4b, org.springframework.security.web.authentication.logout.LogoutFilter@5954e9d2, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@98fd313, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2b2271ac, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@75f3474f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@54009368, org.springframework.security.web.session.SessionManagementFilter@2183bac9, org.springframework.security.web.access.ExceptionTranslationFilter@56d6ed67, org.springframework.security.web.access.intercept.AuthorizationFilter@417547c0]
2025-06-29 18:14:25.294 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:14:25.315 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:14:25.321 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:14:25.333 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.899 seconds (process running for 6.603)
2025-06-29 18:14:31.032 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:14:31.032 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:14:31.034 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-29 18:14:31.093 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:14:31.120 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:14:31.135 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:14:31.140 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:14:31.196 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:14:31.275 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:14:31.288 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:14:31.310 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:14:31.317 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:14:31.338 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:14:44.660 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:14:44.662 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:14:44.666 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:14:44.671 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:14:44.680 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:14:44.685 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:14:44.687 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:14:44.692 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:14:44.695 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:14:44.699 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:21:25.116 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:21:25.119 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:21:25.124 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:21:25.127 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:21:25.140 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:21:25.156 [http-nio-8080-exec-3] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:21:25.156 [http-nio-8080-exec-3] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:21:25.165 [http-nio-8080-exec-3] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:21:25.183 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:21:25.185 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:21:25.187 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:21:25.193 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:21:25.199 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:21:25.201 [http-nio-8080-exec-4] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:21:25.202 [http-nio-8080-exec-4] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:21:25.203 [http-nio-8080-exec-4] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:22:58.279 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:22:58.284 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:22:58.289 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:22:58.293 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:22:58.297 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:22:58.298 [http-nio-8080-exec-5] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:22:58.298 [http-nio-8080-exec-5] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:22:58.299 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:23:06.992 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:23:06.996 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:23:07.003 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:23:07.008 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:23:07.015 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:23:07.017 [http-nio-8080-exec-6] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:23:07.018 [http-nio-8080-exec-6] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:23:07.018 [http-nio-8080-exec-6] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:23:07.031 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:23:07.034 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:23:07.038 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:23:07.040 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:23:07.044 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:23:07.045 [http-nio-8080-exec-7] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:23:07.045 [http-nio-8080-exec-7] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:23:07.045 [http-nio-8080-exec-7] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:27:08.599 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:27:08.631 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:27:08.634 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:27:08.640 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:27:08.649 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:27:08.650 [http-nio-8080-exec-8] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:27:08.650 [http-nio-8080-exec-8] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:27:08.651 [http-nio-8080-exec-8] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:27:08.665 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:27:08.666 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:27:08.668 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:27:08.670 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:27:08.676 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:27:08.677 [http-nio-8080-exec-9] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:27:08.677 [http-nio-8080-exec-9] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:27:08.678 [http-nio-8080-exec-9] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:28:10.147 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:28:10.150 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:28:10.157 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:29:37.582 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:29:37.609 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 25251 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:29:37.610 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:29:37.610 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:29:37.662 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:29:37.662 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:29:38.549 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:29:38.550 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:29:38.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.601 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.602 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.603 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.604 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.605 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.606 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.607 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.608 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:29:38.626 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:29:38.627 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:29:38.714 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 83 ms. Found 8 JPA repository interfaces.
2025-06-29 18:29:38.741 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:29:38.742 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:29:38.754 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-29 18:29:39.384 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:29:39.391 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:29:39.394 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:29:39.394 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:29:39.447 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:29:39.449 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1785 ms
2025-06-29 18:29:39.479 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:29:39.625 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@63533a29
2025-06-29 18:29:39.628 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:29:39.644 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:29:39.761 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:29:39.786 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:29:39.803 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:29:39.914 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:29:39.974 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:29:39.975 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:29:40.831 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:29:40.994 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:29:41.577 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:29:41.841 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:29:41.842 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:29:42.754 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:29:42.837 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:29:42.991 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@47ebd717, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ccbd36d, org.springframework.security.web.context.SecurityContextHolderFilter@2896eaa2, org.springframework.security.web.header.HeaderWriterFilter@4e87b097, org.springframework.web.filter.CorsFilter@1a539a4b, org.springframework.security.web.authentication.logout.LogoutFilter@5954e9d2, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@24bd28b2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2b2271ac, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@75f3474f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@54009368, org.springframework.security.web.session.SessionManagementFilter@2183bac9, org.springframework.security.web.access.ExceptionTranslationFilter@56d6ed67, org.springframework.security.web.access.intercept.AuthorizationFilter@417547c0]
2025-06-29 18:29:43.381 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:29:43.400 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:29:43.411 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:29:43.424 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.165 seconds (process running for 6.773)
2025-06-29 18:30:32.685 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:30:32.688 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:30:32.695 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:30:36.819 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:30:36.847 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 25373 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:30:36.847 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:30:36.848 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:30:36.902 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:30:36.902 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:30:37.785 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:30:37.787 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:30:37.826 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.828 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.829 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.831 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:30:37.847 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:30:37.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:30:37.953 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 101 ms. Found 8 JPA repository interfaces.
2025-06-29 18:30:37.988 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:30:37.988 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.002 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.002 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.002 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.002 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-29 18:30:38.812 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:30:38.820 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:30:38.823 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:30:38.823 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:30:38.870 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:30:38.871 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1968 ms
2025-06-29 18:30:38.912 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:30:39.064 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@402445d1
2025-06-29 18:30:39.067 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:30:39.083 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:30:39.214 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:30:39.239 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:30:39.255 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:30:39.369 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:30:39.421 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:30:39.423 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:30:40.322 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:30:40.426 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:30:40.854 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:30:41.101 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:30:41.102 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:30:42.132 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:30:42.227 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:30:42.379 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@48671590, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@21907dd8, org.springframework.security.web.context.SecurityContextHolderFilter@2f544d62, org.springframework.security.web.header.HeaderWriterFilter@14ef3fdf, org.springframework.web.filter.CorsFilter@6323637d, org.springframework.security.web.authentication.logout.LogoutFilter@1aa6d6c1, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@4df51926, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3c82ce63, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@33e51546, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5954e9d2, org.springframework.security.web.session.SessionManagementFilter@605012c8, org.springframework.security.web.access.ExceptionTranslationFilter@58bbdc1b, org.springframework.security.web.access.intercept.AuthorizationFilter@70a327bb]
2025-06-29 18:30:42.776 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:30:42.794 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:30:42.800 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:30:42.810 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.294 seconds (process running for 6.895)
2025-06-29 18:30:50.554 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:30:50.554 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:30:50.557 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-29 18:30:51.206 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 18:30:51.220 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 18:30:51.734 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:51.743 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.746 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.751 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.759 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.764 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:30:51.811 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:51.813 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.815 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.818 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.820 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.824 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:30:51.841 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:51.857 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.868 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.881 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.895 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.909 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:30:51.967 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:51.969 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.972 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.983 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:52.015 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:52.043 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:52.045 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:52.049 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:52.051 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:52.060 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:58.763 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:58.766 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:58.771 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:58.774 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:58.780 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:58.801 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:58.802 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:58.805 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:58.807 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:58.811 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:32:06.368 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:32:06.373 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:32:06.382 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:32:06.387 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:32:06.404 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:32:06.409 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:32:06.419 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:32:06.430 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:32:06.433 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:32:06.455 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (amount, ingredient_name, unit, ingredient_id, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:35:46.258 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:35:46.277 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.288 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.292 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.316 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.361 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:35:46.363 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.367 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.370 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.375 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.388 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:35:46.390 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.392 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.394 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.401 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.413 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:35:46.417 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.421 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.425 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.427 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:36:40.617 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:36:40.620 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:36:40.623 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:36:40.626 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:36:40.634 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:36:40.653 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:36:40.656 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:36:40.658 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:36:40.660 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:36:40.665 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.869 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:10.885 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.889 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.892 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.899 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.925 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:10.927 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.929 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.932 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.935 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.945 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:10.947 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.951 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.953 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.955 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.967 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:10.969 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.972 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.974 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.978 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:16.356 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:16.383 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:16.387 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:16.390 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:16.394 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:16.408 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:16.410 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:16.413 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:16.418 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:16.426 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.086 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:53.086 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:53.086 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:53.089 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:53.089 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.089 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.089 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.092 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.093 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.093 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.095 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.096 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.099 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.100 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.102 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.102 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.111 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.115 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.121 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.125 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.386 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:15.391 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.394 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.396 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.407 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.421 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:15.424 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.426 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.428 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.433 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.454 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:15.455 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.458 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.459 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.461 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.471 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:15.472 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.474 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.475 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.481 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:21.787 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:21.790 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:21.792 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:21.797 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:21.801 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.101 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:32.103 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.107 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.110 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.122 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.136 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:32.141 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.143 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.155 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.165 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.682 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:32.684 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.691 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.700 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.710 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.749 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:32.752 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.756 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.811 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.892 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:33.123 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:33.125 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:33.128 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:33.130 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:33.133 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:33.148 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:33.149 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:33.151 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:33.152 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:33.155 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.598 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:46.598 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:46.598 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:46.598 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:46.609 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.609 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.609 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.614 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.628 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.628 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.627 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.628 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.633 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.634 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.636 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.636 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.658 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.658 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.658 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.659 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:53.844 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:53.848 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:53.870 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:53.872 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:53.896 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:45:53.915 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.UserIngredient */update user_ingredient 
    set
        amount=?,
        ingredient_name=?,
        unit=? 
    where
        ingredient_id=? 
        and user_id=?
2025-06-29 18:45:53.928 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:53.932 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:53.935 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:53.936 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:53.938 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:07.155 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:46:07.157 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:07.159 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:07.161 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:07.165 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:16.435 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:46:16.437 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:16.439 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:16.440 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:16.452 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내 재료를 활용한 레시피 제공해줘, useRefrigerator: true, isSpecificRecipe: true, retry: 0
2025-06-29 18:46:16.452 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:16.453 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 18:46:16.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 18:46:16.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내 재료를 활용한 레시피 제공해줘
2025-06-29 18:46:16.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: true
2025-06-29 18:46:16.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 18:46:16.457 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:46:16.458 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 18:46:16.460 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:16.462 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.ingredient_id=?
2025-06-29 18:46:16.464 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 18:46:16.464 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 보유 재료 우선 추천 (1순위)
- 딸기 
**중요**: 위 재료 중 1개 이상을 반드시 포함한 레시피를 우선적으로 추천해주세요.

## 사용자 요청 (2순위)
요청: 내 재료를 활용한 레시피 제공해줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 18:46:16.464 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 18:46:22.622 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 18:46:22.622 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 18:46:22.622 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 딸기 오트밀 죽

2. 카테고리: 한식

3. 조리 시간: 10분

4. 조리 방법:
   1. 오트밀 1컵과 우유 또는 두유 1컵을 냄비에 넣고 중불에서 천천히 저으면서 끓여줍니다.
   2. 오트밀이 부드럽게 퍼지고 걸쭉해지면, 깨끗이 손질한 딸기 5~6개(또는 취향껏)를 작게 썰어 넣습니다.
   3. 잘 저어서 딸기의 단맛과 향이 오트밀에 배도록 1~2분 정도 더 끓입니다.
   4. 기호에 따라 꿀 1스푼 또는 올리고당, 견과류, 씨앗(아몬드, 해바라기씨 등)을 위에 뿌려줍니다.
   5. 따뜻하게 그릇에 담아 바로 제공합니다.

5. 필요한 재료와 양:
   - 딸기 5~6개
   - 오트밀 1컵
   - 우유 또는 두유 1컵
   - 꿀 또는 올리고당 1스푼(선택)
   - 견과류, 씨앗 소량(선택)

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/1Sh0ue4.jpg

8. 요리 팁:
   - 아침에 밥이 부담스러운 분에게 속이 편안한 한 끼 식사로 추천합니다.
   - 딸기를 믹서에 갈아 오트밀과 함께 끓이면 더 부드럽고 진한 맛을 느낄 수 있습니다.
   - 견과류나 씨앗을 추가할 때는 마지막에, 섬유질과 식감을 위해 넣어주세요.
2025-06-29 18:46:22.625 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:46:22.631 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 18:46:22.631 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/1Sh0ue4.jpg
2025-06-29 18:46:22.631 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/1Sh0ue4.jpg
2025-06-29 18:46:22.631 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/1Sh0ue4.jpg
2025-06-29 18:46:22.632 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 딸기 5~6개
   - 오트밀 1컵
   - 우유 또는 두유 1컵
   - 꿀 또는 올리고당 1스푼(선택)
   - 견과류, 씨앗 소량(선택)
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 5
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 딸기 5~6개
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 딸기 5~6개
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오트밀 1컵
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 오트밀, Amount: 1컵
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 오트밀, Amount: 1컵
2025-06-29 18:46:22.637 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:46:22.639 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '오트밀' not found in DB. Skipping.
2025-06-29 18:46:22.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 우유 또는 두유 1컵
2025-06-29 18:46:22.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 두유, Amount: 1컵
2025-06-29 18:46:22.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 두유, Amount: 1컵
2025-06-29 18:46:22.642 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:46:22.643 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '두유' not found in DB. Skipping.
2025-06-29 18:46:22.643 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 꿀 또는 올리고당 1스푼(선택)
2025-06-29 18:46:22.643 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리고당, Amount: 1스푼
2025-06-29 18:46:22.643 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 1스푼
2025-06-29 18:46:22.649 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:46:22.651 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-29 18:46:22.651 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 견과류, 씨앗 소량(선택)
2025-06-29 18:46:22.651 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 견과류, 씨앗 소량(선택)
2025-06-29 18:46:22.652 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 오트밀 1컵과 우유 또는 두유 1컵을 냄비에 넣고 중불에서 천천히 저으면서 끓여줍니다.
   2. 오트밀이 부드럽게 퍼지고 걸쭉해지면, 깨끗이 손질한 딸기 5~6개(또는 취향
2025-06-29 18:46:22.653 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 18:46:22.653 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 딸기 5~6개
   - 오트밀 1컵
   - 우유 또는 두유 1컵
   - 꿀 또는 올리고당 1스푼(선택)
   - 견과류, 씨앗 소량(선택)

조리 방법:
1. 오트밀 1컵과 우유 또는 두유 1컵을 냄비에 넣고 중불에서 천천히 저으면서 끓여줍니다.
   2. 오트밀이 부드럽게 퍼지고 걸쭉해지면, 깨끗이 손질한 딸기 5~6개(또는 취향껏)를 작게 썰어 넣습니다.
   3. 잘 저어서 딸기의 단맛과 향이 오트밀에 배도록 1~2분 정도 더 끓입니다.
   4. 기호에 따라 꿀 1스푼 또는 올리고당, 견과류, 씨앗(아몬드, 해바라기씨 등)을 위에 뿌려줍니다.
   5. 따뜻하게 그릇에 담아 바로 제공합니다.
2025-06-29 18:46:22.657 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 18:46:22.660 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 딸기 오트밀 죽
2025-06-29 18:46:22.664 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 18:46:22.666 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 100
2025-06-29 18:46:32.292 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:46:32.295 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:32.302 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:32.303 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:32.306 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:32.315 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:46:32.316 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:32.318 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:32.319 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:32.322 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:47:16.022 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:47:16.027 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:47:16.031 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
