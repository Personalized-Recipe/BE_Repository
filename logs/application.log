2025-06-29 15:42:07.121 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 15:42:07.160 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 13537 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:42:07.161 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:42:07.162 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:42:07.216 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 15:42:07.216 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 15:42:08.222 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:42:08.224 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:42:08.260 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.261 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.262 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.263 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.264 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.264 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.276 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.278 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:42:08.278 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:42:08.299 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:42:08.300 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:42:08.383 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 8 JPA repository interfaces.
2025-06-29 15:42:08.406 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:42:08.407 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:42:08.416 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:42:08.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 15:42:08.986 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:42:08.994 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:42:08.996 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:42:08.996 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:42:09.033 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:42:09.033 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1817 ms
2025-06-29 15:42:09.068 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 15:42:09.225 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7e78c8d8
2025-06-29 15:42:09.229 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 15:42:09.246 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:42:09.367 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:42:09.398 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 15:42:09.417 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:42:09.605 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:42:09.688 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:42:09.689 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:42:10.598 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:42:10.747 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:42:11.123 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:42:11.389 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 15:42:11.390 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 15:42:12.276 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:42:12.364 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:42:12.485 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@44f40829, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@23303427, org.springframework.security.web.context.SecurityContextHolderFilter@14aea603, org.springframework.security.web.header.HeaderWriterFilter@436d33b, org.springframework.web.filter.CorsFilter@65ffa82f, org.springframework.security.web.authentication.logout.LogoutFilter@22bcd047, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@55ea864b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@72e57a87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@42ac6588, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1d49a1c0, org.springframework.security.web.session.SessionManagementFilter@6b4dad51, org.springframework.security.web.access.ExceptionTranslationFilter@594ea9e5, org.springframework.security.web.access.intercept.AuthorizationFilter@1e5f2f87]
2025-06-29 15:42:12.813 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 15:42:12.835 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:42:12.842 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 15:42:12.854 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.08 seconds (process running for 6.727)
2025-06-29 15:42:42.268 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 15:42:42.268 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 15:42:42.273 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-06-29 15:42:43.021 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 15:42:43.043 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 15:42:43.662 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:42:43.672 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.676 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.681 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.690 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.696 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:42:43.739 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:42:43.739 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:42:43.740 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.740 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.745 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.745 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.748 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.749 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:43.751 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.753 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:43.759 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:42:43.759 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:42:54.321 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:42:54.325 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:54.331 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:54.338 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:42:54.364 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 15:42:54.365 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:42:54.378 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:42:54.379 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:42:54.380 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천
2025-06-29 15:42:54.380 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:42:54.380 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 15:42:54.383 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:42:54.385 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 15:42:54.388 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:42:54.390 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 15:42:54.390 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:42:54.836 [http-nio-8080-exec-5] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:42:54.850 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:44:51.755 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:44:51.785 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:44:51.790 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:44:51.793 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:44:51.799 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 15:44:51.802 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:44:51.803 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:44:51.804 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:44:51.804 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천해줘
2025-06-29 15:44:51.804 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:44:51.804 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 15:44:51.809 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:44:51.811 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 15:44:51.812 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:44:51.812 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 15:44:51.812 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:44:52.174 [http-nio-8080-exec-6] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:44:52.183 [http-nio-8080-exec-6] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:45:18.444 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:45:18.464 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:45:18.481 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:45:18.484 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:45:18.490 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 15:45:18.491 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:45:18.494 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:45:18.496 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:45:18.496 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 알려줘
2025-06-29 15:45:18.496 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:45:18.496 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 15:45:18.505 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:45:18.509 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 15:45:18.509 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:45:18.509 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 15:45:18.509 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:45:18.801 [http-nio-8080-exec-7] ERROR a.s.k.p.service.PerplexityService - Error calling Perplexity API
org.springframework.web.client.HttpClientErrorException$Unauthorized: 401 Unauthorized: [no body]
	at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:106)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:183)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:507)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:95)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:45:18.806 [http-nio-8080-exec-7] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]] with root cause
java.lang.RuntimeException: Error calling Perplexity API: 401 Unauthorized: [no body]
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:120)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 15:57:45.655 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 6 class path changes (0 additions, 6 deletions, 0 modifications)
2025-06-29 15:57:45.681 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:45.755 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:45.759 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 15:57:45.768 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 15:57:46.181 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 13537 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:57:46.182 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:57:46.182 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:57:46.576 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:46.576 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:57:46.588 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.589 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.590 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.591 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.592 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.592 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.593 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.594 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:46.594 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:57:46.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:46.598 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:57:46.621 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 8 JPA repository interfaces.
2025-06-29 15:57:46.630 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:46.630 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:57:46.636 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.636 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:46.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-29 15:57:46.898 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:57:46.901 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:46.901 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:57:46.901 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:57:46.916 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:57:46.916 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 724 ms
2025-06-29 15:57:46.935 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-06-29 15:57:46.956 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2ffeaeb7
2025-06-29 15:57:46.957 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-06-29 15:57:46.958 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:57:47.006 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:57:47.009 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:57:47.015 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:57:47.017 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:57:47.017 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:57:47.316 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:57:47.389 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:47.510 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:57:47.707 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:57:47.724 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:57:47.791 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6d1ef7ea, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3201c0a1, org.springframework.security.web.context.SecurityContextHolderFilter@325ff12, org.springframework.security.web.header.HeaderWriterFilter@111b6228, org.springframework.web.filter.CorsFilter@3c4d94c, org.springframework.security.web.authentication.logout.LogoutFilter@5810fa02, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@473c47bd, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6d1ac36d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@275ae6c4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@273bf7e0, org.springframework.security.web.session.SessionManagementFilter@310c5c80, org.springframework.security.web.access.ExceptionTranslationFilter@18becde6, org.springframework.security.web.access.intercept.AuthorizationFilter@1336edb1]
2025-06-29 15:57:47.998 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 15:57:48.009 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:48.011 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 15:57:48.020 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 2.031 seconds (process running for 941.885)
2025-06-29 15:57:48.023 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-06-29 15:57:49.413 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 19 class path changes (6 additions, 0 deletions, 13 modifications)
2025-06-29 15:57:49.415 [Thread-7] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:49.422 [Thread-7] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:49.423 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-06-29 15:57:49.424 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-06-29 15:57:49.654 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 13537 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:57:49.655 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:57:49.655 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:57:49.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:49.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:57:49.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.851 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:49.851 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:57:49.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:49.854 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:57:49.863 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 8 JPA repository interfaces.
2025-06-29 15:57:49.867 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:49.868 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:49.871 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2025-06-29 15:57:50.087 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:57:50.094 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:50.094 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:57:50.094 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:57:50.147 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:57:50.147 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 486 ms
2025-06-29 15:57:50.184 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-06-29 15:57:50.204 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@21a4b871
2025-06-29 15:57:50.205 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-06-29 15:57:50.207 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:57:50.239 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:57:50.241 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:57:50.244 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:57:50.246 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:57:50.246 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:57:50.430 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 15:57:50.469 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 14703 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:57:50.469 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:57:50.470 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:57:50.535 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 15:57:50.537 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 15:57:50.537 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:57:50.638 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:50.763 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:57:50.874 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 15:57:50.874 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 15:57:50.975 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:57:50.990 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:57:51.044 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1f2a17c4, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@786b3c64, org.springframework.security.web.context.SecurityContextHolderFilter@1158dd56, org.springframework.security.web.header.HeaderWriterFilter@73da8235, org.springframework.web.filter.CorsFilter@28d96698, org.springframework.security.web.authentication.logout.LogoutFilter@4114c65b, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@623a2e7e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@285bacdb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@fb748cf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6b87bef1, org.springframework.security.web.session.SessionManagementFilter@23b74d1a, org.springframework.security.web.access.ExceptionTranslationFilter@30b1217f, org.springframework.security.web.access.intercept.AuthorizationFilter@19850b2]
2025-06-29 15:57:51.141 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 15:57:51.148 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:51.150 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 15:57:51.154 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 1.637 seconds (process running for 945.02)
2025-06-29 15:57:51.155 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-06-29 15:57:51.480 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:51.482 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:57:51.524 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.525 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.526 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.527 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.528 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.529 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.530 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.531 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:57:51.531 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 47 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:57:51.546 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:51.547 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:57:51.656 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 107 ms. Found 8 JPA repository interfaces.
2025-06-29 15:57:51.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:57:51.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.699 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:57:51.700 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 15:57:52.292 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:57:52.298 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:52.300 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:57:52.301 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:57:52.340 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:57:52.342 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1803 ms
2025-06-29 15:57:52.373 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 15:57:52.613 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1c8c6383
2025-06-29 15:57:52.617 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 15:57:52.634 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:57:52.752 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:57:52.778 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 15:57:52.795 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:57:52.905 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:57:52.944 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:57:52.944 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:57:53.811 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:57:53.932 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:54.304 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:57:54.529 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 15:57:54.530 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 15:57:55.401 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:57:55.474 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:57:55.587 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@44f40829, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@23303427, org.springframework.security.web.context.SecurityContextHolderFilter@14aea603, org.springframework.security.web.header.HeaderWriterFilter@436d33b, org.springframework.web.filter.CorsFilter@65ffa82f, org.springframework.security.web.authentication.logout.LogoutFilter@22bcd047, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@55ea864b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@72e57a87, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@42ac6588, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1d49a1c0, org.springframework.security.web.session.SessionManagementFilter@6b4dad51, org.springframework.security.web.access.ExceptionTranslationFilter@594ea9e5, org.springframework.security.web.access.intercept.AuthorizationFilter@1e5f2f87]
2025-06-29 15:57:55.894 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2025-06-29 15:57:55.912 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:57:55.924 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-29 15:57:55.929 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:57:55.931 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 15:57:55.936 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 15:57:55.954 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-29 15:57:55.965 [restartedMain] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-29 15:58:28.914 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:58:28.918 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2025-06-29 15:58:28.921 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2025-06-29 15:58:35.845 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 15:58:35.874 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 14924 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 15:58:35.875 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 15:58:35.876 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 15:58:35.926 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 15:58:35.927 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 15:58:36.930 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:58:36.932 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 15:58:36.971 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.973 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.975 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.975 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.976 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.977 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.978 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 15:58:36.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 JDBC repository interfaces.
2025-06-29 15:58:36.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:58:36.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 15:58:37.096 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 101 ms. Found 8 JPA repository interfaces.
2025-06-29 15:58:37.128 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 15:58:37.128 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 15:58:37.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.140 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 15:58:37.141 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 15:58:37.753 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 15:58:37.760 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 15:58:37.762 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 15:58:37.762 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 15:58:37.803 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 15:58:37.805 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1876 ms
2025-06-29 15:58:37.857 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 15:58:37.997 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7e78c8d8
2025-06-29 15:58:38.001 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 15:58:38.016 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 15:58:38.135 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 15:58:38.164 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 15:58:38.184 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 15:58:38.303 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 15:58:38.350 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 15:58:38.350 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 15:58:39.211 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 15:58:39.333 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 15:58:39.702 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 15:58:39.929 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 15:58:39.930 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 15:58:40.660 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 15:58:40.756 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 15:58:40.876 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@139a5e82, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@28012bb6, org.springframework.security.web.context.SecurityContextHolderFilter@344d9a1b, org.springframework.security.web.header.HeaderWriterFilter@65eb4ca5, org.springframework.web.filter.CorsFilter@2d07b82b, org.springframework.security.web.authentication.logout.LogoutFilter@228fe32e, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@48a3d391, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@639c61ff, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@176c0c72, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3a094a9, org.springframework.security.web.session.SessionManagementFilter@23d35d60, org.springframework.security.web.access.ExceptionTranslationFilter@82737db, org.springframework.security.web.access.intercept.AuthorizationFilter@79184700]
2025-06-29 15:58:41.209 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 15:58:41.229 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 15:58:41.236 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 15:58:41.247 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.718 seconds (process running for 6.301)
2025-06-29 15:59:08.276 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 15:59:08.277 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 15:59:08.324 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 46 ms
2025-06-29 15:59:08.553 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:59:08.595 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:59:08.613 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:59:08.619 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:59:08.675 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 점심메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 15:59:08.676 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:59:08.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:59:08.679 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:59:08.680 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 점심메뉴 추천
2025-06-29 15:59:08.680 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:59:08.680 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 15:59:08.756 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:59:08.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 15:59:08.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:59:08.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 점심메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 15:59:08.772 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:59:18.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 15:59:18.791 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 15:59:18.792 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 삼색소보로덮밥**
- 카테고리: 한식
- 추천 이유: 한 그릇에 단백질(계란, 소고기)과 채소가 골고루 들어가 있어 균형 잡힌 점심식사에 적합합니다. 간단하게 만들 수 있어 바쁜 점심시간에 추천합니다[2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우가 들어가지 않으며, 아침에 밥을 먹으면 배가 아픈 점을 고려해 점심에 영양 보충이 잘 되는 메뉴입니다.

**2. 바지락 칼국수**
- 카테고리: 한식
- 추천 이유: 국물이 있는 메뉴로 속을 편안하게 해주며, 기름지지 않아 건강을 챙기기 좋습니다. 면을 사용해 아침보다 부담 없이 즐길 수 있어 점심 메뉴로 적합합니다[1].
- 예상 조리 시간: 30분
- 난이도: 중
- 개인화 고려사항: 주 재료가 바지락과 밀가루로 알레르기 걱정이 없고, 속이 편안한 메뉴입니다.

**3. 규동(소고기덮밥)**
- 카테고리: 일식
- 추천 이유: 단백질(소고기)과 밥을 함께 먹을 수 있어 한 그릇으로 충분한 포만감을 주는 점심용 메뉴입니다. 조리 과정도 간단하고, 빠르게 만들 수 있습니다[2].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 소고기를 사용해 새우 알레르기와 무관하며, 점심에 속을 든든하게 채울 수 있습니다.

**4. 김치볶음밥**
- 카테고리: 한식
- 추천 이유: 간단하지만 깊은 맛을 낼 수 있는 한 그릇 요리로, 남은 밥이나 냉장고 속 재료로 금방 만들 수 있습니다. 다양한 토핑(계란, 김 등)으로 영양을 보충할 수 있습니다[4].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우를 넣지 않고 만들 수 있고, 기름지지 않으면서도 포만감이 높은 메뉴입니다.

**5. 비빔국수**
- 카테고리: 한식
- 추천 이유: 면요리이면서 새콤달콤한 양념과 함께 채소, 계란 등을 곁들여 가볍지만 영양가 있게 즐길 수 있는 메뉴입니다. 여름이나 입맛 없을 때도 부담 없이 먹을 수 있습니다[1].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기와 무관하고, 아침에 속이 약한 분도 점심에 가볍게 먹기 좋습니다.

---

### 전체 추천 요약

- 상황 분석: 점심식사로, 아침에 밥을 먹으면 소화가 불편한 25세 남성의 건강과 영양을 고려함. 점심에는 영양을 채우되, 속에 부담을 주지 않는 메뉴가 필요합니다.
- 추천 기준: 알레르기(새우) 주의, 속을 편안하게 해주는 메뉴, 단백질과 채소 등 영양 균형, 비교적 간단하게 만들 수 있는 점심 중심으로 선정했습니다.
- 개인화 고려사항: 새우 알레르기와 아침 소화불량 이슈를 완전히 배제. 점심에는 든든하지만 속에 부담 없는 국물 메뉴와 한 그릇 요리를 위주로 추천했습니다.
- 추가 팁: 각 메뉴에 나물, 샐러드 등 신선한 야채를 추가하면 더욱 건강에 좋으며, 점심에는 무거운 튀김류보다는 담백하고 편안한 메뉴를 선택하는 것이 좋습니다.

레시피가 궁금하다면, '레시피'라는 단어를 포함해서 다시 요청해 주세요!
2025-06-29 15:59:18.792 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 15:59:22.650 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 15:59:22.654 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:59:22.657 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 15:59:22.663 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 15:59:22.667 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 삼색소보로덮밥 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 15:59:22.668 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 삼색소보로덮밥 레시피
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 15:59:22.670 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 15:59:22.673 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:59:22.675 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 15:59:22.676 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 15:59:22.676 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 삼색소보로덮밥 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 15:59:22.676 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 15:59:29.161 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 15:59:29.163 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 15:59:29.163 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 삼색소보로덮밥

2. 카테고리: 한식

3. 조리 시간: 30~40분

4. 조리 방법:
   1. 밥에 단촛물을 골고루 섞어 준비해둡니다. (식초 2큰술, 설탕 1큰술, 소금 1/2~1작은술 기준)
   2. 다진 소고기에 간장 1큰술, 맛술 1큰술, 참기름 1큰술, 설탕 1/2큰술, 다진 마늘 1/2큰술, 후추 약간을 넣고 잘 섞은 뒤, 중약불에서 고기가 익을 때까지 볶아줍니다[1][2].
   3. 계란 3~4개를 소금 약간, 맛술 1큰술, 참기름 1티스푼, 오일 1큰술과 함께 풀어 고운 스크램블을 만들어줍니다[1][2].
   4. 오이(혹은 애호박)를 잘게 썰어 들기름 2큰술, 소금, 후추와 함께 볶아 수분을 날려줍니다. 또는 시금치를 데쳐 나물무침으로 활용해도 좋습니다[1][2][3][4].
   5. 밥 위에 볶은 고기, 계란 스크램블, 볶은 오이(또는 애호박/시금치나물)를 세 줄로 가지런히 올려줍니다.

5. 필요한 재료와 양:
   - 밥 2공기
   - 다진 소고기 150g (돼지고기로 대체 가능)
   - 계란 3~4개
   - 오이 1/3~1개 (또는 애호박/데친 시금치)
   - 식초 2큰술
   - 설탕 1큰술(+1/2큰술, 고기 양념용)
   - 소금 1/2~1작은술
   - 간장 1큰술
   - 맛술 1큰술
   - 참기름 1큰술
   - 다진 마늘 1/2큰술
   - 후추 약간
   - 들기름 2큰술(채소 볶음용)
   - 오일 1큰술(계란 볶음용)

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/11/23/fd256c77f0e8e1efc505fa8d548c43e71.jpg

8. 요리 팁:
   - 고기는 센 불에서 볶으면 육즙이 빠지지 않아 촉촉하게 완성됩니다.
   - 계란은 중약불에서 천천히 저어가며 부드럽게 만들어주세요.
   - 오이나 애호박 등 채소는 수분을 충분히 날려야 밥과 잘 어울립니다.
   - 취향에 따라 당근, 시금치, 김치볶음 등을 추가하면 더 다채로운 맛을 즐길 수 있습니다.

**주의**: 새우 등 해산물은 본 레시피에 포함되어 있지 않아 알레르기 우려가 없습니다.
2025-06-29 15:59:29.168 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 15:59:29.173 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 15:59:29.173 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2021/11/23/fd256c77f0e8e1efc505fa8d548c43e71.jpg
2025-06-29 15:59:29.173 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2021/11/23/fd256c77f0e8e1efc505fa8d548c43e71.jpg
2025-06-29 15:59:29.174 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 2공기
   - 다진 소고기 150g (돼지고기로 대체 가능)
   - 계란 3~4개
   - 오이 1/3~1개 (또는 애호박/데친 시금치)
   - 식초 2큰술
   - 설탕 1큰술(+1/2큰술, 고기 양념용)
   - 소금 1/2~1작은술
   - 간장 1큰술
   - 맛술 1큰술
   - 참기름 1큰술
   - 다진 마늘 1/2큰술
   - 후추 약간
   - 들기름 2큰술(채소 볶음용)
   - 오일 1큰술(계란 볶음용)
2025-06-29 15:59:29.175 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-29 15:59:29.175 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 2공기
2025-06-29 15:59:29.175 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 2공기
2025-06-29 15:59:29.175 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 2공기
2025-06-29 15:59:29.181 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.187 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 15:59:29.187 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 소고기 150g (돼지고기로 대체 가능)
2025-06-29 15:59:29.187 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소고기, Amount: 150g
2025-06-29 15:59:29.187 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기, Amount: 150g
2025-06-29 15:59:29.191 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.192 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기' not found in DB. Skipping.
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 3~4개
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 계란 3~4개
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 1/3~1개 (또는 애호박/데친 시금치)
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 1/3~1개 (또는 애호박/데친 시금치)
2025-06-29 15:59:29.193 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식초 2큰술
2025-06-29 15:59:29.194 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식초, Amount: 2큰술
2025-06-29 15:59:29.194 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식초, Amount: 2큰술
2025-06-29 15:59:29.197 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.198 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '식초' not found in DB. Skipping.
2025-06-29 15:59:29.199 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술(+1/2큰술, 고기 양념용)
2025-06-29 15:59:29.200 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 15:59:29.200 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 15:59:29.202 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.203 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/2~1작은술
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 1/2~1작은술
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 1큰술
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 1큰술
2025-06-29 15:59:29.204 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 1큰술
2025-06-29 15:59:29.206 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.208 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 15:59:29.208 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 1큰술
2025-06-29 15:59:29.208 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 1큰술
2025-06-29 15:59:29.208 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 1큰술
2025-06-29 15:59:29.210 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.210 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 15:59:29.211 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-29 15:59:29.211 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 15:59:29.211 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 15:59:29.213 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.217 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1/2큰술
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 1/2큰술
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 들기름 2큰술(채소 볶음용)
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 들기름, Amount: 2큰술
2025-06-29 15:59:29.218 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 들기름, Amount: 2큰술
2025-06-29 15:59:29.221 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.222 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '들기름' not found in DB. Skipping.
2025-06-29 15:59:29.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오일 1큰술(계란 볶음용)
2025-06-29 15:59:29.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 오일, Amount: 1큰술
2025-06-29 15:59:29.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 오일, Amount: 1큰술
2025-06-29 15:59:29.225 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 15:59:29.226 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '오일' not found in DB. Skipping.
2025-06-29 15:59:29.227 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 밥에 단촛물을 골고루 섞어 준비해둡니다. (식초 2큰술, 설탕 1큰술, 소금 1/2~1작은술 기준)
   2. 다진 소고기에 간장 1큰술, 맛술 1큰술, 참기름 1큰술, 설탕
2025-06-29 15:59:29.228 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 15:59:29.228 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 2공기
   - 다진 소고기 150g (돼지고기로 대체 가능)
   - 계란 3~4개
   - 오이 1/3~1개 (또는 애호박/데친 시금치)
   - 식초 2큰술
   - 설탕 1큰술(+1/2큰술, 고기 양념용)
   - 소금 1/2~1작은술
   - 간장 1큰술
   - 맛술 1큰술
   - 참기름 1큰술
   - 다진 마늘 1/2큰술
   - 후추 약간
   - 들기름 2큰술(채소 볶음용)
   - 오일 1큰술(계란 볶음용)

조리 방법:
1. 밥에 단촛물을 골고루 섞어 준비해둡니다. (식초 2큰술, 설탕 1큰술, 소금 1/2~1작은술 기준)
   2. 다진 소고기에 간장 1큰술, 맛술 1큰술, 참기름 1큰술, 설탕 1/2큰술, 다진 마늘 1/2큰술, 후추 약간을 넣고 잘 섞은 뒤, 중약불에서 고기가 익을 때까지 볶아줍니다[1][2].
   3. 계란 3~4개를 소금 약간, 맛술 1큰술, 참기름 1티스푼, 오일 1큰술과 함께 풀어 고운 스크램블을 만들어줍니다[1][2].
   4. 오이(혹은 애호박)를 잘게 썰어 들기름 2큰술, 소금, 후추와 함께 볶아 수분을 날려줍니다. 또는 시금치를 데쳐 나물무침으로 활용해도 좋습니다[1][2][3][4].
   5. 밥 위에 볶은 고기, 계란 스크램블, 볶은 오이(또는 애호박/시금치나물)를 세 줄로 가지런히 올려줍니다.
2025-06-29 15:59:29.232 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 15:59:29.233 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 삼색소보로덮밥
2025-06-29 15:59:29.261 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 15:59:29.272 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 90
2025-06-29 16:01:13.826 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:01:13.856 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:01:13.863 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:01:13.886 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:01:13.894 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:01:13.895 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:01:13.907 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:01:13.908 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:01:13.908 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천
2025-06-29 16:01:13.908 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:01:13.908 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:01:13.917 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:01:14.029 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:01:14.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:01:14.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:01:14.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:01:21.910 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:01:21.911 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:01:21.911 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 제육볶음**
- 카테고리: 한식
- 추천 이유: 직장인 점심으로 가장 인기 있는 메뉴 중 하나로, 든든하게 한 끼를 해결할 수 있고 전형적으로 밥과 함께 나와 에너지를 채워줍니다. 기름지지 않게 조리 가능하며, 간단한 반찬과도 잘 어울립니다[2][4].
- 예상 조리 시간: 25분
- 난이도: 중
- 개인화 고려사항: 새우 등 해산물이 들어가지 않아 알레르기 걱정이 없고, 아침에 속이 불편할 수 있지만 점심에는 부담 없이 즐기기 좋습니다.

**2. 순두부찌개**
- 카테고리: 한식
- 추천 이유: 부담 없이 속을 편안하게 해주는 메뉴로, 부드러운 순두부와 함께 영양소를 고루 섭취할 수 있습니다. 맵기 조절도 쉬워 개인 기호에 맞춰 먹을 수 있습니다[3].
- 예상 조리 시간: 20분
- 난이도: 중
- 개인화 고려사항: 일반적으로 새우 등 해산물 없이도 맛을 내거나 해산물 대신 돼지고기 등으로도 조리할 수 있어 알레르기 안전성이 높습니다.

**3. 소불고기덮밥**
- 카테고리: 한식
- 추천 이유: 달콤짭짤한 불고기는 점심에 부담 없이 먹기 좋고, 한 끼 식사로 든든하게 즐길 수 있습니다. 밥 위에 올라가 소화도 잘 되고 점심 메뉴로 인기가 많습니다[2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 해산물이 포함되지 않는 안전한 메뉴로, 건강을 생각해 기름기를 최소화하여 조리할 수 있습니다.

**4. 김치찌개**
- 카테고리: 한식
- 추천 이유: 대표적인 점심 메뉴로, 김치와 고기, 두부 등이 어우러져 영양과 맛을 모두 챙길 수 있으며 직장인 점심 베스트 메뉴 중 하나입니다[1][2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 없이도 충분히 맛있게 조리가 가능해 알레르기 걱정이 없습니다.

**5. 오므라이스**
- 카테고리: 분식/양식
- 추천 이유: 부담스럽지 않으면서도 든든한 한 끼 식사로, 부드러운 계란과 볶음밥의 조합이 남녀노소 모두에게 인기 있습니다. 한식에 가까운 스타일로 변형하여 먹을 수도 있습니다[3].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 기본적으로 해산물 없이 조리가 가능하며, 소화 부담이 적어 점심에 적합합니다.

### 전체 추천 요약
- 상황 분석: ‘내일 점심 메뉴’ 요청으로, 오전이 아닌 점심 식사에 어울리는 든든한 메뉴를 선정하였습니다. 아침에 밥을 먹으면 속이 불편하다는 점을 고려해 점심에 속 부담이 적고, 에너지 보충에 좋은 메뉴 위주로 구성했습니다.
- 추천 기준: 한식 선호도를 참고하되, 알레르기(새우)와 건강상태(위 부담 최소화)를 우선적으로 반영했습니다. 점심에 빠르게 조리 가능한 메뉴와 일반적으로 대중적으로 선호되는 메뉴를 위주로 선정했습니다.
- 개인화 고려사항: 새우를 포함한 해산물은 모두 제외했고, 점심에는 부담 없으면서도 영양을 충분히 보충할 수 있도록 했습니다. 매운맛, 기름기 등은 기호에 맞게 조절이 가능합니다.
- 추가 팁: 메뉴별로 입맛과 조리 여건에 맞게 맵기, 간, 재료를 조절하시면 건강하게 점심을 즐기실 수 있습니다. 더 다양한 메뉴나 ‘레시피’가 필요하다면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.
2025-06-29 16:01:21.913 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:01:25.452 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:01:25.454 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:01:25.459 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:01:25.464 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:01:25.471 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 제육볶음 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:01:25.472 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육볶음 레시피
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:01:25.473 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:01:25.476 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:01:25.476 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:01:25.477 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:01:25.477 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 제육볶음 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:01:25.477 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:01:36.904 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:01:36.905 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:01:36.905 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육볶음

2. 카테고리: 한식

3. 조리 시간: 약 30분

4. 조리 방법:
   1. 돼지고기(앞다리살 또는 목살 600g)의 핏물을 키친타월로 닦아 제거한 뒤 한 입 크기로 썰어 준비합니다[2][3].
   2. 볼에 돼지고기를 담고 진간장 2큰술, 설탕 1큰술을 넣어 조물조물 섞은 뒤 5~10분간 재워둡니다[2][3].
   3. 그동안 양파 1개는 채 썰고, 대파 1대와 청양고추(또는 꽈리고추 3~5개), 당근(1/2개)는 어슷하게 썰어둡니다[1][2].
   4. 별도의 그릇에 양념장을 만듭니다: 고추장 2큰술, 고춧가루 3~4큰술, 다진 마늘 1큰술, 미림(또는 맛술) 2큰술, 물엿 1~2큰술, 참기름 1큰술, 후추 약간, 매실액 1큰술을 넣어 잘 섞어줍니다[1][2][3].
   5. 재운 돼지고기에 양념장을 넣고 잘 무쳐 10분 정도 더 재워둡니다[1][2][3].
   6. 팬에 식용유(2큰술)를 두르고 대파를 먼저 볶아 파기름을 만듭니다[3].
   7. 중불에서 돼지고기와 양념을 넣고 볶다가 고기가 반쯤 익으면 준비한 양파, 당근, 고추를 넣고 볶아줍니다[1][2][3].
   8. 고기가 완전히 익으면 불을 끄고 참기름(1큰술)을 두른 후, 통깨를 뿌려 마무리합니다[1][3].
   9. 그릇에 담아 완성합니다.

5. 필요한 재료와 양:
   - 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/2개
   - 청양고추 또는 꽈리고추 3~5개
   - 진간장 2큰술
   - 설탕 1큰술
   - 고추장 2큰술
   - 고춧가루 3~4큰술
   - 다진 마늘 1큰술
   - 미림(맛술) 2큰술
   - 물엿 1~2큰술
   - 참기름 1큰술 (마무리용 1큰술 추가)
   - 후추 약간
   - 매실액 1큰술(생략 가능)
   - 식용유 2큰술
   - 통깨 약간
   - (기호에 따라) 미원 1/2티스푼

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/06/18/2d70b64640863f7a43066fbfe0a3a3bb1.jpg

8. 요리 팁:
   - 고기의 핏물을 반드시 제거하면 잡내가 훨씬 덜합니다.
   - 돼지고기는 앞다리살, 목살 등 기름이 적당히 있는 부위를 사용하면 더 맛있습니다.
   - 양념장은 고기와 야채에 골고루 잘 버무려 10분 이상 재워주면 맛이 더욱 깊어집니다.
   - 매운맛을 원하면 청양고추를, 덜 맵게 하고 싶다면 일반 고추나 꽈리고추를 사용하세요.
   - 야채는 너무 오래 볶지 말고 아삭함이 남아 있을 때 불을 끄면 식감이 더 좋습니다.

※ 새우 등 알레르기 유발 재료가 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.
2025-06-29 16:01:36.909 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2016/06/18/2d70b64640863f7a43066fbfe0a3a3bb1.jpg
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2016/06/18/2d70b64640863f7a43066fbfe0a3a3bb1.jpg
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/2개
   - 청양고추 또는 꽈리고추 3~5개
   - 진간장 2큰술
   - 설탕 1큰술
   - 고추장 2큰술
   - 고춧가루 3~4큰술
   - 다진 마늘 1큰술
   - 미림(맛술) 2큰술
   - 물엿 1~2큰술
   - 참기름 1큰술 (마무리용 1큰술 추가)
   - 후추 약간
   - 매실액 1큰술(생략 가능)
   - 식용유 2큰술
   - 통깨 약간
   - (기호에 따라) 미원 1/2티스푼
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 18
2025-06-29 16:01:36.914 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살 또는 목살) 600g
2025-06-29 16:01:36.915 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 돼지고기(앞다리살 또는 목살) 600g
2025-06-29 16:01:36.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-29 16:01:36.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-29 16:01:36.915 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 16:01:36.918 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.921 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 16:01:36.921 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대
2025-06-29 16:01:36.921 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-29 16:01:36.921 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-29 16:01:36.924 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.925 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 16:01:36.925 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/2개
2025-06-29 16:01:36.925 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/2개
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 또는 꽈리고추 3~5개
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 청양고추 또는 꽈리고추 3~5개
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 2큰술
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 진간장, Amount: 2큰술
2025-06-29 16:01:36.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 2큰술
2025-06-29 16:01:36.927 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.928 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-29 16:01:36.928 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 16:01:36.928 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 16:01:36.928 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 16:01:36.931 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.931 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 16:01:36.931 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 2큰술
2025-06-29 16:01:36.932 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 2큰술
2025-06-29 16:01:36.932 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 2큰술
2025-06-29 16:01:36.933 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 3~4큰술
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고춧가루 3~4큰술
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-29 16:01:36.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-29 16:01:36.938 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.939 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 16:01:36.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미림(맛술) 2큰술
2025-06-29 16:01:36.939 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 미림(맛술) 2큰술
2025-06-29 16:01:36.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물엿 1~2큰술
2025-06-29 16:01:36.940 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 물엿 1~2큰술
2025-06-29 16:01:36.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술 (마무리용 1큰술 추가)
2025-06-29 16:01:36.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 16:01:36.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 16:01:36.946 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 매실액 1큰술(생략 가능)
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 매실액, Amount: 1큰술
2025-06-29 16:01:36.950 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 매실액, Amount: 1큰술
2025-06-29 16:01:36.952 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.954 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '매실액' not found in DB. Skipping.
2025-06-29 16:01:36.954 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 2큰술
2025-06-29 16:01:36.954 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 2큰술
2025-06-29 16:01:36.954 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 2큰술
2025-06-29 16:01:36.958 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 약간
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 통깨 약간
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (기호에 따라) 미원 1/2티스푼
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (기호에 따라) 미원 1/2티스푼
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기(앞다리살 또는 목살 600g)의 핏물을 키친타월로 닦아 제거한 뒤 한 입 크기로 썰어 준비합니다[2][3].
   2. 볼에 돼지고기를 담고 진간장 2큰술, 설탕 1
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:01:36.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/2개
   - 청양고추 또는 꽈리고추 3~5개
   - 진간장 2큰술
   - 설탕 1큰술
   - 고추장 2큰술
   - 고춧가루 3~4큰술
   - 다진 마늘 1큰술
   - 미림(맛술) 2큰술
   - 물엿 1~2큰술
   - 참기름 1큰술 (마무리용 1큰술 추가)
   - 후추 약간
   - 매실액 1큰술(생략 가능)
   - 식용유 2큰술
   - 통깨 약간
   - (기호에 따라) 미원 1/2티스푼

조리 방법:
1. 돼지고기(앞다리살 또는 목살 600g)의 핏물을 키친타월로 닦아 제거한 뒤 한 입 크기로 썰어 준비합니다[2][3].
   2. 볼에 돼지고기를 담고 진간장 2큰술, 설탕 1큰술을 넣어 조물조물 섞은 뒤 5~10분간 재워둡니다[2][3].
   3. 그동안 양파 1개는 채 썰고, 대파 1대와 청양고추(또는 꽈리고추 3~5개), 당근(1/2개)는 어슷하게 썰어둡니다[1][2].
   4. 별도의 그릇에 양념장을 만듭니다: 고추장 2큰술, 고춧가루 3~4큰술, 다진 마늘 1큰술, 미림(또는 맛술) 2큰술, 물엿 1~2큰술, 참기름 1큰술, 후추 약간, 매실액 1큰술을 넣어 잘 섞어줍니다[1][2][3].
   5. 재운 돼지고기에 양념장을 넣고 잘 무쳐 10분 정도 더 재워둡니다[1][2][3].
   6. 팬에 식용유(2큰술)를 두르고 대파를 먼저 볶아 파기름을 만듭니다[3].
   7. 중불에서 돼지고기와 양념을 넣고 볶다가 고기가 반쯤 익으면 준비한 양파, 당근, 고추를 넣고 볶아줍니다[1][2][3].
   8. 고기가 완전히 익으면 불을 끄고 참기름(1큰술)을 두른 후, 통깨를 뿌려 마무리합니다[1][3].
   9. 그릇에 담아 완성합니다.
2025-06-29 16:01:36.962 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:01:36.997 [http-nio-8080-exec-4] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 16 results were returned
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:301)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:244)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:478)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:165)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.NonUniqueResultException: Query did not return a unique result: 16 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:586)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:570)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 131 common frames omitted
2025-06-29 16:03:29.936 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:03:29.944 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:03:29.966 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:03:29.968 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:03:29.973 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 저녁 메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:03:29.975 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 저녁 메뉴 추천해줘
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:03:29.977 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:03:29.985 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:03:29.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:03:29.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:03:29.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 저녁 메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:03:29.988 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:03:41.722 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:03:41.722 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:03:41.722 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 돼지고기김치찌개**
- 카테고리: 한식
- 추천 이유: 저녁에 든든하게 먹을 수 있는 대표적인 한식 메뉴로, 밥과 곁들여 한 끼 식사로 적합합니다. 건강한 재료(김치, 돼지고기, 두부 등) 사용으로 영양 밸런스도 좋아 혼자 식사하기에도 부담이 없습니다[1].
- 예상 조리 시간: 30-40분
- 난이도: 중
- 개인화 고려사항: 새우 등 해산물 없이 조리 가능하며, 배에 부담이 덜한 따뜻한 국물 요리입니다.

**2. 소불고기**
- 카테고리: 한식
- 추천 이유: 한식 선호도와 저녁시간에 잘 어울리는 대표적 메뉴로, 단짠의 맛과 함께 부드러운 소고기가 밥과 잘 어울립니다. 식단의 메인반찬으로 가족 또는 혼자 먹기에도 적합합니다[2].
- 예상 조리 시간: 20-30분
- 난이도: 하
- 개인화 고려사항: 해산물 알레르기 걱정 없이 즐길 수 있습니다.

**3. 두부조림**
- 카테고리: 한식
- 추천 이유: 복부 부담이 적고, 간단하면서도 맛있는 반찬으로 저녁에 소화가 잘 되는 메뉴입니다. 건강을 신경 쓰거나 가벼운 저녁을 원할 때 강력 추천합니다[3].
- 예상 조리 시간: 15-20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 재료 없이 두부와 야채 위주로 조리합니다.

**4. 고등어김치찜**
- 카테고리: 한식
- 추천 이유: 건강한 등푸른 생선을 활용한 저녁 메뉴로, 밥반찬으로 훌륭하며 비린내도 적어 많은 20대 남성들에게 인기가 높습니다. 소화도 잘 되고 영양도 풍부합니다[1][2].
- 예상 조리 시간: 30-40분
- 난이도: 중
- 개인화 고려사항: 새우를 비롯한 갑각류가 들어가지 않아 안전합니다.

**5. 찹스테이크**
- 카테고리: 양식
- 추천 이유: 저녁 식사에 색다른 기분을 내고 싶을 때, 간단한 조리법으로 집에서도 레스토랑 느낌이 납니다. 소고기와 다양한 채소를 활용해 영양 균형도 좋습니다[2].
- 예상 조리 시간: 20-30분
- 난이도: 중
- 개인화 고려사항: 해산물 재료가 없어 알레르기 걱정 없이 즐길 수 있습니다.

### 전체 추천 요약

- 상황 분석: 25세 남성, 저녁 식사 요청. 복부 부담을 줄이기 위한 부드러운 메뉴와 알레르기(새우) 유발 재료를 제외한 메뉴만 추천.
- 추천 기준: 저녁에 든든하고 건강하게 먹을 수 있는 한식 위주 메뉴, 만들기 쉬우면서도 식탁에서 품격을 높일 수 있는 메뉴들로 구성.
- 개인화 고려사항: 새우 등 해산물 알레르기를 배제한 안전한 메뉴만 선별. 아침에 소화가 어려운 점을 고려해 저녁에 덜 부담되고, 필요시 단백질과 채소를 균형 있게 섭취할 수 있도록 구성.
- 추가 팁: 재료가 남는 경우 두부조림, 김치찌개 등은 냉장 보관해두었다가 다음날 간단한 반찬으로도 활용할 수 있습니다.

원하는 메뉴의 레시피가 필요하다면 '레시피'라는 단어를 포함해서 다시 요청해 주세요!
2025-06-29 16:03:41.723 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:03:47.467 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:03:47.470 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:03:47.474 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:03:47.479 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:03:47.482 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 고등어김치찜 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:03:47.483 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 고등어김치찜 레시피
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:03:47.484 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:03:47.489 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:03:47.494 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:03:47.494 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:03:47.494 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 고등어김치찜 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:03:47.494 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:04:01.728 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:04:01.730 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:04:01.730 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 고등어김치찜

2. 카테고리: 한식

3. 조리 시간: 약 40분

4. 조리 방법:
   1. 고등어 손질: 생고등어(2마리)는 깨끗하게 씻은 후, 소금 1스푼과 식초 2스푼, 물을 섞어 5~10분 담가둡니다. 이후 천일염 1스푼을 뿌려 10분 정도 절인 뒤 흐르는 물에 씻어 준비합니다[1].
   2. 채소 손질: 묵은지 1/2포기(약 350~750g)는 먹기 좋은 크기로 자르고, 무(1/4개, 약 400g)는 1cm 두께로 썰고, 양파(1개)는 채썰기, 대파(1~2대)와 청양고추(3~5개)는 어슷 썰어둡니다[1][3][4].
   3. 양념 만들기: 볼에 고춧가루 3스푼, 고추장 1스푼, 케첩 1스푼, 진간장 3스푼, 다진 마늘 2스푼, 다진 생강 1/2스푼, 설탕 2~3스푼, 참치액 1/2스푼(선택), 맛술 또는 소주 1스푼, 들기름 1스푼, 식용유 1스푼을 넣어 잘 섞어줍니다[1][2][3].
   4. 재료 깔기: 냄비 바닥에 무를 두껍게 깔고, 그 위에 묵은지를 올린 뒤, 손질한 고등어를 올립니다[1][4].
   5. 채소 올리기: 양파, 대파, 청양고추를 고등어 위에 넉넉히 얹습니다.
   6. 양념 넣기: 준비한 양념장을 골고루 끼얹은 뒤, 멸치 다시마 육수 또는 쌀뜨물(약 400~700ml)을 부어줍니다[1][2][3].
   7. 끓이기: 센 불에서 5분간 끓이다가 끓기 시작하면 중약불로 줄여 20~25분간 뚜껑을 덮고 푹 끓입니다. 김치와 고등어가 모두 부드러워질 때까지 자작하게 졸여줍니다[2][3].
   8. 마무리: 국물이 자작해지면 불을 끄고, 기호에 따라 들기름을 한 바퀴 두릅니다.

5. 필요한 재료와 양:
   - 고등어(생고등어): 2마리(중~대)
   - 묵은지: 1/2포기(350~750g)
   - 무: 1/4개(약 400g)
   - 양파: 1개
   - 대파: 1~2대
   - 청양고추: 3~5개
   - 소금: 1스푼
   - 식초: 2스푼
   - 천일염: 1스푼
   - 고춧가루: 3스푼
   - 고추장: 1스푼
   - 케첩: 1스푼
   - 진간장: 3스푼
   - 다진 마늘: 2스푼
   - 다진 생강: 1/2스푼
   - 설탕: 2~3스푼
   - 참치액: 1/2스푼(선택)
   - 맛술 또는 소주: 1스푼
   - 들기름: 1스푼
   - 식용유: 1스푼
   - 멸치 다시마 육수 or 쌀뜨물: 400~700ml

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/07/06/886e029c7b5b720348c93f20fb0e447b1.jpg

8. 요리 팁:
   - 고등어의 비린내 제거를 위해 소금, 식초, 맛술(또는 소주)로 미리 절이는 과정이 중요합니다[1][2].
   - 무를 넉넉히 넣으면 국물이 더욱 시원하고 깊은 맛을 냅니다.
   - 김치의 신맛이 강할수록 감칠맛이 살아납니다.
   - 조리 중간에 국물 농도를 조절하며 너무 졸아들면 육수를 추가하세요.
   - 알레르기 유발 재료(새우)는 포함되어 있지 않습니다.
2025-06-29 16:04:01.736 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2018/07/06/886e029c7b5b720348c93f20fb0e447b1.jpg
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/07/06/886e029c7b5b720348c93f20fb0e447b1.jpg
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 고등어(생고등어): 2마리(중~대)
   - 묵은지: 1/2포기(350~750g)
   - 무: 1/4개(약 400g)
   - 양파: 1개
   - 대파: 1~2대
   - 청양고추: 3~5개
   - 소금: 1스푼
   - 식초: 2스푼
   - 천일염: 1스푼
   - 고춧가루: 3스푼
   - 고추장: 1스푼
   - 케첩: 1스푼
   - 진간장: 3스푼
   - 다진 마늘: 2스푼
   - 다진 생강: 1/2스푼
   - 설탕: 2~3스푼
   - 참치액: 1/2스푼(선택)
   - 맛술 또는 소주: 1스푼
   - 들기름: 1스푼
   - 식용유: 1스푼
   - 멸치 다시마 육수 or 쌀뜨물: 400~700ml
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 21
2025-06-29 16:04:01.739 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고등어(생고등어): 2마리(중~대)
2025-06-29 16:04:01.740 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고등어(생고등어), Amount: 2마리(중~대)
2025-06-29 16:04:01.740 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고등어(생고등어), Amount: 2마리(중~대)
2025-06-29 16:04:01.744 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.746 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '고등어(생고등어)' not found in DB. Skipping.
2025-06-29 16:04:01.746 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 묵은지: 1/2포기(350~750g)
2025-06-29 16:04:01.746 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 묵은지, Amount: 1/2포기(350~750g)
2025-06-29 16:04:01.746 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 묵은지, Amount: 1/2포기(350~750g)
2025-06-29 16:04:01.748 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.749 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '묵은지' not found in DB. Skipping.
2025-06-29 16:04:01.750 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 무: 1/4개(약 400g)
2025-06-29 16:04:01.750 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 무, Amount: 1/4개(약 400g)
2025-06-29 16:04:01.750 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 무, Amount: 1/4개(약 400g)
2025-06-29 16:04:01.751 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.752 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '무' not found in DB. Skipping.
2025-06-29 16:04:01.752 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파: 1개
2025-06-29 16:04:01.752 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 양파, Amount: 1개
2025-06-29 16:04:01.752 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 16:04:01.761 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.762 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 16:04:01.762 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파: 1~2대
2025-06-29 16:04:01.762 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 대파, Amount: 1~2대
2025-06-29 16:04:01.762 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1~2대
2025-06-29 16:04:01.766 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.767 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 16:04:01.767 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추: 3~5개
2025-06-29 16:04:01.767 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 청양고추, Amount: 3~5개
2025-06-29 16:04:01.767 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 3~5개
2025-06-29 16:04:01.768 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.769 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-29 16:04:01.769 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금: 1스푼
2025-06-29 16:04:01.769 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 소금, Amount: 1스푼
2025-06-29 16:04:01.769 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 1스푼
2025-06-29 16:04:01.770 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.770 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-29 16:04:01.770 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식초: 2스푼
2025-06-29 16:04:01.772 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 식초, Amount: 2스푼
2025-06-29 16:04:01.772 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식초, Amount: 2스푼
2025-06-29 16:04:01.774 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.775 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '식초' not found in DB. Skipping.
2025-06-29 16:04:01.775 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 천일염: 1스푼
2025-06-29 16:04:01.775 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 천일염, Amount: 1스푼
2025-06-29 16:04:01.775 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 천일염, Amount: 1스푼
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '천일염' not found in DB. Skipping.
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루: 3스푼
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고춧가루, Amount: 3스푼
2025-06-29 16:04:01.777 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 3스푼
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장: 1스푼
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고추장, Amount: 1스푼
2025-06-29 16:04:01.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 1스푼
2025-06-29 16:04:01.779 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.780 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 16:04:01.780 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케첩: 1스푼
2025-06-29 16:04:01.780 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 케첩, Amount: 1스푼
2025-06-29 16:04:01.780 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케첩, Amount: 1스푼
2025-06-29 16:04:01.781 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.782 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '케첩' not found in DB. Skipping.
2025-06-29 16:04:01.784 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장: 3스푼
2025-06-29 16:04:01.785 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 진간장, Amount: 3스푼
2025-06-29 16:04:01.785 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 3스푼
2025-06-29 16:04:01.785 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.786 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-29 16:04:01.786 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘: 2스푼
2025-06-29 16:04:01.786 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 마늘, Amount: 2스푼
2025-06-29 16:04:01.786 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 마늘, Amount: 2스푼
2025-06-29 16:04:01.787 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.787 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 마늘' not found in DB. Skipping.
2025-06-29 16:04:01.787 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 생강: 1/2스푼
2025-06-29 16:04:01.788 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 생강, Amount: 1/2스푼
2025-06-29 16:04:01.788 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 생강, Amount: 1/2스푼
2025-06-29 16:04:01.788 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.789 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 생강' not found in DB. Skipping.
2025-06-29 16:04:01.789 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕: 2~3스푼
2025-06-29 16:04:01.789 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 설탕, Amount: 2~3스푼
2025-06-29 16:04:01.789 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 2~3스푼
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참치액: 1/2스푼(선택)
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 참치액, Amount: 1/2스푼(선택)
2025-06-29 16:04:01.790 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참치액, Amount: 1/2스푼(선택)
2025-06-29 16:04:01.791 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.792 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '참치액' not found in DB. Skipping.
2025-06-29 16:04:01.792 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 또는 소주: 1스푼
2025-06-29 16:04:01.792 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 맛술 또는 소주, Amount: 1스푼
2025-06-29 16:04:01.792 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술 또는 소주, Amount: 1스푼
2025-06-29 16:04:01.793 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.793 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술 또는 소주' not found in DB. Skipping.
2025-06-29 16:04:01.793 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 들기름: 1스푼
2025-06-29 16:04:01.793 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 들기름, Amount: 1스푼
2025-06-29 16:04:01.794 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 들기름, Amount: 1스푼
2025-06-29 16:04:01.794 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.795 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '들기름' not found in DB. Skipping.
2025-06-29 16:04:01.795 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유: 1스푼
2025-06-29 16:04:01.795 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 식용유, Amount: 1스푼
2025-06-29 16:04:01.795 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1스푼
2025-06-29 16:04:01.796 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.797 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 16:04:01.797 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 멸치 다시마 육수 or 쌀뜨물: 400~700ml
2025-06-29 16:04:01.797 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 멸치 다시마 육수 or 쌀뜨물, Amount: 400~700ml
2025-06-29 16:04:01.797 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 멸치 다시마 육수 or 쌀뜨물, Amount: 400~700ml
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '멸치 다시마 육수 or 쌀뜨물' not found in DB. Skipping.
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 고등어 손질: 생고등어(2마리)는 깨끗하게 씻은 후, 소금 1스푼과 식초 2스푼, 물을 섞어 5~10분 담가둡니다. 이후 천일염 1스푼을 뿌려 10분 정도 절인 뒤 흐르는 물
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:04:01.798 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 고등어(생고등어): 2마리(중~대)
   - 묵은지: 1/2포기(350~750g)
   - 무: 1/4개(약 400g)
   - 양파: 1개
   - 대파: 1~2대
   - 청양고추: 3~5개
   - 소금: 1스푼
   - 식초: 2스푼
   - 천일염: 1스푼
   - 고춧가루: 3스푼
   - 고추장: 1스푼
   - 케첩: 1스푼
   - 진간장: 3스푼
   - 다진 마늘: 2스푼
   - 다진 생강: 1/2스푼
   - 설탕: 2~3스푼
   - 참치액: 1/2스푼(선택)
   - 맛술 또는 소주: 1스푼
   - 들기름: 1스푼
   - 식용유: 1스푼
   - 멸치 다시마 육수 or 쌀뜨물: 400~700ml

조리 방법:
1. 고등어 손질: 생고등어(2마리)는 깨끗하게 씻은 후, 소금 1스푼과 식초 2스푼, 물을 섞어 5~10분 담가둡니다. 이후 천일염 1스푼을 뿌려 10분 정도 절인 뒤 흐르는 물에 씻어 준비합니다[1].
   2. 채소 손질: 묵은지 1/2포기(약 350~750g)는 먹기 좋은 크기로 자르고, 무(1/4개, 약 400g)는 1cm 두께로 썰고, 양파(1개)는 채썰기, 대파(1~2대)와 청양고추(3~5개)는 어슷 썰어둡니다[1][3][4].
   3. 양념 만들기: 볼에 고춧가루 3스푼, 고추장 1스푼, 케첩 1스푼, 진간장 3스푼, 다진 마늘 2스푼, 다진 생강 1/2스푼, 설탕 2~3스푼, 참치액 1/2스푼(선택), 맛술 또는 소주 1스푼, 들기름 1스푼, 식용유 1스푼을 넣어 잘 섞어줍니다[1][2][3].
   4. 재료 깔기: 냄비 바닥에 무를 두껍게 깔고, 그 위에 묵은지를 올린 뒤, 손질한 고등어를 올립니다[1][4].
   5. 채소 올리기: 양파, 대파, 청양고추를 고등어 위에 넉넉히 얹습니다.
   6. 양념 넣기: 준비한 양념장을 골고루 끼얹은 뒤, 멸치 다시마 육수 또는 쌀뜨물(약 400~700ml)을 부어줍니다[1][2][3].
   7. 끓이기: 센 불에서 5분간 끓이다가 끓기 시작하면 중약불로 줄여 20~25분간 뚜껑을 덮고 푹 끓입니다. 김치와 고등어가 모두 부드러워질 때까지 자작하게 졸여줍니다[2][3].
   8. 마무리: 국물이 자작해지면 불을 끄고, 기호에 따라 들기름을 한 바퀴 두릅니다.
2025-06-29 16:04:01.799 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:04:01.801 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 고등어김치찜
2025-06-29 16:04:01.822 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:04:01.824 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 91
2025-06-29 16:05:16.029 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:05:16.065 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:05:16.074 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:05:16.076 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:05:16.081 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 점심메뉴추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:05:16.082 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:05:16.085 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:05:16.085 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:05:16.086 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 점심메뉴추천해줘
2025-06-29 16:05:16.086 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:05:16.086 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:05:16.092 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:05:16.094 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:05:16.094 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:05:16.094 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 점심메뉴추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:05:16.094 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:05:24.324 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:05:24.325 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:05:24.325 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 비빔밥**
- 카테고리: 한식
- 추천 이유: 다양한 채소와 고기를 골고루 섞어먹어 영양이 풍부하면서도 포만감을 주는 대표 한식 점심 메뉴입니다. 따뜻한 밥과 신선한 재료로 부담 없이 즐길 수 있어 점심에 적합합니다[2].
- 예상 조리 시간: 15-20분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 위험이 없고, 속이 불편할 때에도 크게 부담 없는 한 그릇 식사입니다.

**2. 도시락 (돈까스/불고기/제육 등)**
- 카테고리: 한식
- 추천 이유: 다양한 반찬과 메인 메뉴(돈까스, 불고기, 제육 등)로 구성된 도시락은 한 끼로 든든하게 즐길 수 있습니다. 외부에서 간편하게 구매하거나 직접 구성해 먹을 수 있어 바쁜 점심시간에 제격입니다[2].
- 예상 조리 시간: 10-20분
- 난이도: 하~중
- 개인화 고려사항: 메뉴 선택 시 새우가 들어가지 않은 구성을 선택할 수 있습니다.

**3. 찌개류 (된장찌개, 김치찌개 등)**
- 카테고리: 한식
- 추천 이유: 한식 선호도와 점심에 든든한 메뉴를 원할 때 찌개류는 따뜻하고 자극적이지 않아 소화에 부담이 적습니다. 밥과 함께 먹어서 포만감이 높으며, 다양한 채소도 섭취할 수 있습니다[1][3].
- 예상 조리 시간: 15-25분
- 난이도: 중
- 개인화 고려사항: 된장, 김치찌개 등 기본 재료만 사용하면 새우 알레르기 문제가 없습니다.

**4. 서브웨이 샌드위치**
- 카테고리: 기타(샌드위치/건강식)
- 추천 이유: 신선한 채소와 고기를 직접 선택할 수 있어 건강하게 한 끼를 해결할 수 있습니다. 속이 예민할 때도 부담이 적은 메뉴이며, 메뉴 선택 시 해산물(새우) 없이 주문이 가능합니다[2].
- 예상 조리 시간: 5-10분(구매 시)
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료를 제외할 수 있어 안전합니다.

**5. 바지락 칼국수**
- 카테고리: 한식
- 추천 이유: 시원한 국물과 쫄깃한 면발이 점심으로 부담 없으며, 해산물 중에서도 비교적 알레르기 가능성이 낮은 바지락을 사용(단, 본인 체질에 맞는지 확인 필요)하므로 새우 알레르기를 피해 선택할 수 있습니다[4].
- 예상 조리 시간: 20분 내외
- 난이도: 중
- 개인화 고려사항: 새우 사용이 없고, 아침에 밥을 먹었을 때와 달리 점심에는 국물과 면류로 속을 편하게 할 수 있습니다.

### 전체 추천 요약
- 상황 분석: 점심식사로 든든하면서도 건강에 부담이 적은 메뉴를 찾는 상황으로 판단했습니다.
- 추천 기준: 한식을 우선적으로 고려했고, 영양 밸런스와 포만감, 조리 및 구매의 간편함을 기준으로 선정했습니다. 사용자의 새우 알레르기와 아침 식사 시 소화불량 경험을 반영해 점심엔 소화에 부담이 적은 메뉴를 위주로 추천했습니다.
- 개인화 고려사항: 메뉴별로 새우가 포함되지 않도록 구성했으며, 한 끼로 영양을 고루 섭취할 수 있도록 했습니다. 국물/채소가 많은 메뉴를 포함시켜 소화 불편을 줄이도록 했습니다.
- 추가 팁: 외식 메뉴 선택 시 샐러드나 야채를 추가하면 더 건강하게 즐길 수 있습니다. 만약 레시피가 필요하다면 '레시피'라는 단어를 포함해서 다시 요청해 주세요.
2025-06-29 16:05:24.326 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:05:27.957 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:05:27.960 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:05:27.964 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:05:27.968 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:05:27.970 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 서브웨이 샌드위치 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:05:27.971 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 서브웨이 샌드위치 레시피
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:05:27.975 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:05:27.978 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:05:27.979 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:05:27.980 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:05:27.980 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 서브웨이 샌드위치 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:05:27.980 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:05:36.463 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:05:36.465 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:05:36.466 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 서브웨이 스타일 샌드위치

2. 카테고리: 양식

3. 조리 시간: 15분

4. 조리 방법:
   1. 호기 롤(또는 바게트 등 샌드위치용 빵)을 반으로 갈라 토스터기에 살짝 굽거나 프라이팬에 구워 겉을 바삭하게 준비합니다.
   2. 빵 아랫면에 슬라이스 치즈(모짜렐라 혹은 체다 치즈)를 올립니다.
   3. 햄(또는 칠면조 슬라이스, 닭가슴살 슬라이스 등 원하는 육류)을 치즈 위에 올립니다.
   4. 양상추는 깨끗이 씻어 물기를 뺀 후 적당한 크기로 찢어 햄 위에 얹습니다.
   5. 토마토, 오이, 양파, (선택 사항: 할라피뇨, 올리브) 등 준비한 신선한 채소를 슬라이스하여 골고루 올립니다.
   6. 소금과 후추로 간을 한 뒤, 원하는 소스(스위트 칠리, 마요네즈, 머스타드 등)를 넉넉히 뿌려줍니다.
   7. 빵 윗면을 덮고, 랩이나 쿠킹호일을 이용해 김밥처럼 단단하게 말아줍니다.
   8. 먹기 좋은 크기로 잘라 접시에 담아 완성합니다.

5. 필요한 재료와 양:
   - 호기 롤 또는 바게트 빵 1개
   - 슬라이스 치즈 1장
   - 햄(또는 칠면조 슬라이스) 2~3장
   - 양상추 적당량
   - 토마토 2~3조각(슬라이스)
   - 양파 몇 조각(슬라이스)
   - 오이 2~3조각(슬라이스)
   - 올리브, 할라피뇨(선택) 약간
   - 스위트 칠리 소스 1스푼
   - 마요네즈 1스푼
   - 옐로우 머스타드 또는 홀그레인 머스타드 1스푼
   - 소금, 후추 약간

6. 난이도: 하

7. 이미지 URL: https://blog.kakaocdn.net/dn/bwfWyz/btsw1Kp2YpK/3mtaYKQCHxu2J9Iqyh7Jdk/img.jpg

8. 요리 팁:
   - 빵은 토스터나 팬에 살짝 구워야 겉은 바삭하고 속은 촉촉하게 즐길 수 있습니다.
   - 원하는 야채와 소스를 추가하거나 빼서 자신의 취향에 맞게 조절하세요.
   - 랩이나 쿠킹호일로 단단히 말아야 샌드위치가 흐트러지지 않습니다.
   - 재료는 모두 신선한 것일수록 식감과 맛이 살아납니다.

※ 새우 알레르기 정보: 본 레시피에는 새우가 포함되어 있지 않아 안심하고 드실 수 있습니다.
2025-06-29 16:05:36.479 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://blog.kakaocdn.net/dn/bwfWyz/btsw1Kp2YpK/3mtaYKQCHxu2J9Iqyh7Jdk/img.jpg
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://blog.kakaocdn.net/dn/bwfWyz/btsw1Kp2YpK/3mtaYKQCHxu2J9Iqyh7Jdk/img.jpg
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 호기 롤 또는 바게트 빵 1개
   - 슬라이스 치즈 1장
   - 햄(또는 칠면조 슬라이스) 2~3장
   - 양상추 적당량
   - 토마토 2~3조각(슬라이스)
   - 양파 몇 조각(슬라이스)
   - 오이 2~3조각(슬라이스)
   - 올리브, 할라피뇨(선택) 약간
   - 스위트 칠리 소스 1스푼
   - 마요네즈 1스푼
   - 옐로우 머스타드 또는 홀그레인 머스타드 1스푼
   - 소금, 후추 약간
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-29 16:05:36.491 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 호기 롤 또는 바게트 빵 1개
2025-06-29 16:05:36.492 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 빵, Amount: 1개
2025-06-29 16:05:36.492 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 빵, Amount: 1개
2025-06-29 16:05:36.495 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.498 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '빵' not found in DB. Skipping.
2025-06-29 16:05:36.498 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 1장
2025-06-29 16:05:36.498 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 16:05:36.498 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 16:05:36.501 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄(또는 칠면조 슬라이스) 2~3장
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄(또는 칠면조 슬라이스) 2~3장
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 적당량
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양상추 적당량
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 2~3조각(슬라이스)
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 토마토 2~3조각(슬라이스)
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 몇 조각(슬라이스)
2025-06-29 16:05:36.502 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 몇 조각(슬라이스)
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 2~3조각(슬라이스)
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 2~3조각(슬라이스)
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브, 할라피뇨(선택) 약간
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 올리브, 할라피뇨(선택) 약간
2025-06-29 16:05:36.503 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 스위트 칠리 소스 1스푼
2025-06-29 16:05:36.504 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소스, Amount: 1스푼
2025-06-29 16:05:36.504 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소스, Amount: 1스푼
2025-06-29 16:05:36.506 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.506 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '소스' not found in DB. Skipping.
2025-06-29 16:05:36.507 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 1스푼
2025-06-29 16:05:36.507 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마요네즈, Amount: 1스푼
2025-06-29 16:05:36.507 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마요네즈, Amount: 1스푼
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '마요네즈' not found in DB. Skipping.
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 옐로우 머스타드 또는 홀그레인 머스타드 1스푼
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 머스타드, Amount: 1스푼
2025-06-29 16:05:36.508 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 머스타드, Amount: 1스푼
2025-06-29 16:05:36.509 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '머스타드' not found in DB. Skipping.
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 호기 롤(또는 바게트 등 샌드위치용 빵)을 반으로 갈라 토스터기에 살짝 굽거나 프라이팬에 구워 겉을 바삭하게 준비합니다.
   2. 빵 아랫면에 슬라이스 치즈(모짜렐라 혹은 
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:05:36.510 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 호기 롤 또는 바게트 빵 1개
   - 슬라이스 치즈 1장
   - 햄(또는 칠면조 슬라이스) 2~3장
   - 양상추 적당량
   - 토마토 2~3조각(슬라이스)
   - 양파 몇 조각(슬라이스)
   - 오이 2~3조각(슬라이스)
   - 올리브, 할라피뇨(선택) 약간
   - 스위트 칠리 소스 1스푼
   - 마요네즈 1스푼
   - 옐로우 머스타드 또는 홀그레인 머스타드 1스푼
   - 소금, 후추 약간

조리 방법:
1. 호기 롤(또는 바게트 등 샌드위치용 빵)을 반으로 갈라 토스터기에 살짝 굽거나 프라이팬에 구워 겉을 바삭하게 준비합니다.
   2. 빵 아랫면에 슬라이스 치즈(모짜렐라 혹은 체다 치즈)를 올립니다.
   3. 햄(또는 칠면조 슬라이스, 닭가슴살 슬라이스 등 원하는 육류)을 치즈 위에 올립니다.
   4. 양상추는 깨끗이 씻어 물기를 뺀 후 적당한 크기로 찢어 햄 위에 얹습니다.
   5. 토마토, 오이, 양파, (선택 사항: 할라피뇨, 올리브) 등 준비한 신선한 채소를 슬라이스하여 골고루 올립니다.
   6. 소금과 후추로 간을 한 뒤, 원하는 소스(스위트 칠리, 마요네즈, 머스타드 등)를 넉넉히 뿌려줍니다.
   7. 빵 윗면을 덮고, 랩이나 쿠킹호일을 이용해 김밥처럼 단단하게 말아줍니다.
   8. 먹기 좋은 크기로 잘라 접시에 담아 완성합니다.
2025-06-29 16:05:36.512 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:05:36.513 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 서브웨이 스타일 샌드위치
2025-06-29 16:05:36.522 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:05:36.526 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 92
2025-06-29 16:06:25.550 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:06:25.556 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:25.562 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:25.565 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:25.570 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 바지락 칼국수 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:06:25.573 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 바지락 칼국수 레시피
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:06:25.575 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:06:25.578 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:25.580 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:06:25.580 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:06:25.580 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 바지락 칼국수 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:06:25.580 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:06:36.491 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:06:36.494 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:36.498 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:36.501 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:36.506 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 찌개류 (된장찌개, 김치찌개 등) 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:06:36.506 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 찌개류 (된장찌개, 김치찌개 등) 레시피
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:06:36.507 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:06:36.510 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:36.511 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:06:36.511 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:06:36.511 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 찌개류 (된장찌개, 김치찌개 등) 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:06:36.511 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:06:36.877 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:06:36.878 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:06:36.878 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. **요리 이름:** 바지락 칼국수  
2. **카테고리:** 한식  
3. **조리 시간:** 약 30분  
4. **조리 방법:**  
   1. 바지락은 이미 해감된 것을 구입했다면, 한 번 더 모래가 남지 않도록 깨끗이 씻어주세요[1][4].
   2. 냄비에 물을 넣고 끓인 다음, 바지락을 넣고 약 5분 정도 삶아주세요. 중간중간 떠오르는 거품 등 불순물을 제거해주세요[1][3].
   3. 바지락이 입을 벌리면 건져내어 따로 둡니다. 국물은 거름망에 걸러 깨끗하게 걸러서 다시 냄비에 담고, 애호박과 감자(또는 당근), 대파(손질), 마늘(다진 것)을 넣고 소프트하게 끓여주세요[1][3].
   4. 재료가 어느 정도 익으면 칼국수면을 넣고 끓여주세요. 칼국수면은 따로 끓여도 됩니다[1][3].
   5. 국간장, 굵은소금(취향에 따라), 다진마늘로 간을 맞춘 뒤, 마지막에 고추(청양고추 등)와 대파, 부추 등을 넣어 마무리합니다[2][3].
   6. 불을 끄기 전에 바지락을 다시 넣고 한 번 더 끓여주면 더욱 맛있습니다.  
5. **필요한 재료와 양:**  
   - 바지락: 1kg (2~3인 기준)  
   - 칼국수면: 2개(2인 기준)  
   - 애호박: 1/2개  
   - 감자 또는 당근: 1개(또는 당근 50g)  
   - 대파: 1개  
   - 마늘: 2알(다진 마늘 1/2스푼)  
   - 청양고추: 1~2개  
   - 부추: 조금(고명용, 선택)  
   - 물: 3~4컵  
   - 국간장: 1큰술  
   - 굵은소금: 취향에 따라  
   - 미원: 선택(약간, 없어도 무방)  
6. **난이도:** 하  
7. **이미지 URL:**  
https://recipe1.ezmember.co.kr/cache/recipe/2020/07/17/2e6a5cb0c5c8d99cbb3d3c987b6e2e9e1.jpg  
8. **요리 팁:**  
   - 바지락은 꼭 모래가 남지 않도록 씻어주세요.  
   - 육수는 바지락, 무, 다시마, 멸치 등으로 내면 더 깊은 맛이 납니다. (단, 새우 알레르기 주의)  
   - 칼국수면은 따로 삶으면 면이 퍼지지 않고 쫄깃하게 즐길 수 있습니다[1][2].  
   - 마지막에 고추와 부추를 넣으면 칼칼하고 향긋한 맛이 살아납니다[3].  

> **알레르기 정보:**  
> **새우 알레르기**가 있으신 분은, 건새우로 육수를 내는 레시피(예: 일부 전문 레시피[2])는 사용하지 마세요.  
> **대체 레시피**: 건새우 대신 다시마, 무, 멸치(멸치도 알레르기가 있다면 생략), 표고버섯 등으로 육수를 내면 됩니다[3].  
> **이 레시피에는 새우 재료가 직접 포함되지 않았으므로 섭취 가능합니다.**  
> **단, 외부 레시피 자료에 새우가 포함된 경우가 있으니 주의하세요.**
2025-06-29 16:06:36.882 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:36.886 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from general pattern: https://recipe1.ezmember.co.kr/cache/recipe/2020/07/17/2e6a5cb0c5c8d99cbb3d3c987b6e2e9e1.jpg
2025-06-29 16:06:36.886 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/07/17/2e6a5cb0c5c8d99cbb3d3c987b6e2e9e1.jpg
2025-06-29 16:06:36.888 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - No ingredients text found in content
2025-06-29 16:06:36.889 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern cooking method): **  
   1. 바지락은 이미 해감된 것을 구입했다면, 한 번 더 모래가 남지 않도록 깨끗이 씻어주세요[1][4].
   2. 냄비에 물을 넣고 끓인 다음, 바지락을 넣고 약 
2025-06-29 16:06:36.893 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:06:36.893 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 조리 방법:
**  
   1. 바지락은 이미 해감된 것을 구입했다면, 한 번 더 모래가 남지 않도록 깨끗이 씻어주세요[1][4].
   2. 냄비에 물을 넣고 끓인 다음, 바지락을 넣고 약 5분 정도 삶아주세요. 중간중간 떠오르는 거품 등 불순물을 제거해주세요[1][3].
   3. 바지락이 입을 벌리면 건져내어 따로 둡니다. 국물은 거름망에 걸러 깨끗하게 걸러서 다시 냄비에 담고, 애호박과 감자(또는 당근), 대파(손질), 마늘(다진 것)을 넣고 소프트하게 끓여주세요[1][3].
   4. 재료가 어느 정도 익으면 칼국수면을 넣고 끓여주세요. 칼국수면은 따로 끓여도 됩니다[1][3].
   5. 국간장, 굵은소금(취향에 따라), 다진마늘로 간을 맞춘 뒤, 마지막에 고추(청양고추 등)와 대파, 부추 등을 넣어 마무리합니다[2][3].
   6. 불을 끄기 전에 바지락을 다시 넣고 한 번 더 끓여주면 더욱 맛있습니다.
2025-06-29 16:06:36.898 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:06:36.899 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: ** 바지락 칼국수
2025-06-29 16:06:36.901 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:06:36.907 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 93
2025-06-29 16:06:44.659 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:06:44.660 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:06:44.660 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 된장찌개

2. 카테고리: 한식

3. 조리 시간: 25분

4. 조리 방법:
   1. 애호박, 양파, 두부를 먹기 좋은 크기로 잘라 준비합니다.
   2. 느타리버섯은 가닥가닥 찢어줍니다.
   3. 대파, 청양고추, 홍고추는 1cm 두께로 송송 썰어줍니다.
   4. 육수용 멸치는 머리와 내장을 제거하고 3등분 정도로 찢어 준비합니다.
   5. 냄비에 손질한 멸치와 물, 양파를 넣고 끓여 멸치 육수를 만듭니다(약 10분).
   6. 육수가 우러나면 느타리버섯, 애호박, 다진 마늘과 된장을 넣고 잘 풀어줍니다.
   7. 된장이 풀어져 끓어오르면 대파, 청양고추, 홍고추를 넣고 한 번 더 끓입니다.
   8. 마지막에 두부를 넣고 1분 정도 더 끓여 완성합니다[2].

5. 필요한 재료와 양:
   - 된장 1/3컵(약 60g)
   - 물 4컵(약 750mL)
   - 다진 마늘 1/2큰술(8g)
   - 육수용 멸치 10마리(20g)
   - 애호박 1/2개(130g)
   - 양파 1/2개(80g)
   - 느타리버섯 1컵(80g)
   - 대파 2/3컵(60g)
   - 청양고추 2개(14g)
   - 홍고추 1/2개(7g)
   - 두부 1/2모(180g)
   - (기호에 따라 쇠고기 또는 돼지고기 50g 추가 가능)
   - (쌀뜨물 혹은 멸치육수 사용 추천)

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/03/06/83aa2827f1b1d6fe8e4fb433da914f8c1.jpg

8. 요리 팁:
   - 된장은 끓이는 중간에 한꺼번에 넣지 말고, 국자로 풀어가며 풀어주는 것이 국물맛이 탁해지지 않고 깔끔합니다.
   - 기호에 따라 감자, 표고버섯, 애호박 대신 다른 채소를 활용할 수 있습니다.
   - 국물 맛을 풍부하게 하고 싶으면 쌀뜨물이나 멸치+다시마 육수를 사용하세요.
   - 새우 알레르기가 있다면 멸치만으로 육수를 내세요(건새우 사용 금지)[2].

※ 새우 알레르기 주의: 본 레시피는 멸치육수를 사용하며, 새우는 포함되지 않았으니 안전하게 드실 수 있습니다. (육수에 건새우를 넣는 버전이 있으나, 새우 알레르기 시 반드시 제외해주세요.)
2025-06-29 16:06:44.666 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:44.670 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2020/03/06/83aa2827f1b1d6fe8e4fb433da914f8c1.jpg
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/03/06/83aa2827f1b1d6fe8e4fb433da914f8c1.jpg
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 된장 1/3컵(약 60g)
   - 물 4컵(약 750mL)
   - 다진 마늘 1/2큰술(8g)
   - 육수용 멸치 10마리(20g)
   - 애호박 1/2개(130g)
   - 양파 1/2개(80g)
   - 느타리버섯 1컵(80g)
   - 대파 2/3컵(60g)
   - 청양고추 2개(14g)
   - 홍고추 1/2개(7g)
   - 두부 1/2모(180g)
   - (기호에 따라 쇠고기 또는 돼지고기 50g 추가 가능)
   - (쌀뜨물 혹은 멸치육수 사용 추천)
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 된장 1/3컵(약 60g)
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 60g
2025-06-29 16:06:44.671 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 60g
2025-06-29 16:06:44.674 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.676 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 16:06:44.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 4컵(약 750mL)
2025-06-29 16:06:44.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 4컵
2025-06-29 16:06:44.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 4컵
2025-06-29 16:06:44.677 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.678 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 16:06:44.678 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1/2큰술(8g)
2025-06-29 16:06:44.679 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 1/2큰술(8g)
2025-06-29 16:06:44.679 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 육수용 멸치 10마리(20g)
2025-06-29 16:06:44.679 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 멸치, Amount: 10마리
2025-06-29 16:06:44.679 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 멸치, Amount: 10마리
2025-06-29 16:06:44.680 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.682 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '멸치' not found in DB. Skipping.
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 1/2개(130g)
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 애호박 1/2개(130g)
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개(80g)
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개(80g)
2025-06-29 16:06:44.683 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 느타리버섯 1컵(80g)
2025-06-29 16:06:44.684 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 느타리버섯, Amount: 1컵
2025-06-29 16:06:44.684 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 느타리버섯, Amount: 1컵
2025-06-29 16:06:44.685 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '느타리버섯' not found in DB. Skipping.
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 2/3컵(60g)
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 2/3컵(60g)
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 2개(14g)
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 청양고추, Amount: 2개
2025-06-29 16:06:44.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 2개
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 홍고추 1/2개(7g)
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 홍고추 1/2개(7g)
2025-06-29 16:06:44.687 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 두부 1/2모(180g)
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 두부 1/2모(180g)
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (기호에 따라 쇠고기 또는 돼지고기 50g 추가 가능)
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 돼지고기, Amount: 50g
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 돼지고기, Amount: 50g
2025-06-29 16:06:44.688 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '돼지고기' not found in DB. Skipping.
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (쌀뜨물 혹은 멸치육수 사용 추천)
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (쌀뜨물 혹은 멸치육수 사용 추천)
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 애호박, 양파, 두부를 먹기 좋은 크기로 잘라 준비합니다.
   2. 느타리버섯은 가닥가닥 찢어줍니다.
   3. 대파, 청양고추, 홍고추는 1cm 두께로 송송 썰어줍니다.

2025-06-29 16:06:44.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:06:44.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 된장 1/3컵(약 60g)
   - 물 4컵(약 750mL)
   - 다진 마늘 1/2큰술(8g)
   - 육수용 멸치 10마리(20g)
   - 애호박 1/2개(130g)
   - 양파 1/2개(80g)
   - 느타리버섯 1컵(80g)
   - 대파 2/3컵(60g)
   - 청양고추 2개(14g)
   - 홍고추 1/2개(7g)
   - 두부 1/2모(180g)
   - (기호에 따라 쇠고기 또는 돼지고기 50g 추가 가능)
   - (쌀뜨물 혹은 멸치육수 사용 추천)

조리 방법:
1. 애호박, 양파, 두부를 먹기 좋은 크기로 잘라 준비합니다.
   2. 느타리버섯은 가닥가닥 찢어줍니다.
   3. 대파, 청양고추, 홍고추는 1cm 두께로 송송 썰어줍니다.
   4. 육수용 멸치는 머리와 내장을 제거하고 3등분 정도로 찢어 준비합니다.
   5. 냄비에 손질한 멸치와 물, 양파를 넣고 끓여 멸치 육수를 만듭니다(약 10분).
   6. 육수가 우러나면 느타리버섯, 애호박, 다진 마늘과 된장을 넣고 잘 풀어줍니다.
   7. 된장이 풀어져 끓어오르면 대파, 청양고추, 홍고추를 넣고 한 번 더 끓입니다.
   8. 마지막에 두부를 넣고 1분 정도 더 끓여 완성합니다[2].
2025-06-29 16:06:44.690 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:06:44.691 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 된장찌개
2025-06-29 16:06:44.692 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:06:44.702 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 94
2025-06-29 16:06:50.923 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:06:50.925 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:50.928 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:50.932 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:06:50.934 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:06:50.935 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:06:50.937 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:06:50.940 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:50.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:06:50.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:06:50.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:06:50.941 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:06:57.116 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:06:57.116 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:06:57.116 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 수제 햄버거

2. 카테고리: 양식

3. 조리 시간: 40분

4. 조리 방법:
   1. 양파는 채 썰어 팬에 식용유를 두르고 갈색이 될 때까지 볶다가, 발사믹 식초 1/4컵과 설탕 1큰술을 넣고 잘 볶아 캐러멜라이즈드 양파를 만듭니다[2].
   2. 소고기 다짐육(200g)과 돼지고기 다짐육(300g)을 섞어 소금, 후추로 간하고 동그랗게 패티 모양을 만듭니다[2][4].
   3. 햄버거 빵(번)을 반으로 자르고, 팬에 버터 10g을 녹여 안쪽 면만 노릇하게 굽습니다[1][2].
   4. 같은 팬에 식용유와 남은 버터를 두른 후, 패티를 올리고 중불에서 한쪽 면이 갈색이 되도록 2분 정도 굽다가 뒤집어 속까지 충분히 익힙니다. 패티 위에 체다 치즈를 올려 뚜껑을 덮고 치즈가 녹게 합니다[2].
   5. 빵 아래쪽에는 마요네즈와 홀그레인 머스타드 또는 케첩을 바릅니다[1][2].
   6. 그 위에 상추, 토마토 슬라이스, 오이 피클, 캐러멜라이즈드 양파를 올립니다[2][3].
   7. 준비된 패티(치즈 올린 상태)를 올리고 빵 윗부분으로 덮어 완성합니다[1][2].

5. 필요한 재료와 양:
   - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 빵(번) 2개
   - 체다 치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 버터 10g
   - 소금, 후추 약간
   - 마요네즈, 홀그레인 머스타드, 케첩 적당량
   - 발사믹 식초 1/4컵
   - 설탕 1큰술

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/11/21/6bb439dc49b0c077de9e1a01bea9c9511.jpg

8. 요리 팁:
   - 패티는 두께가 너무 두껍지 않게 만들어야 익는 시간이 적당해집니다.
   - 번(빵)은 꼭 구워야 질감이 좋아지고 소스나 육즙이 흘러내리지 않아 맛이 더 좋아집니다.
   - 채소는 먹기 직전에 넣으면 아삭한 식감을 더 느낄 수 있습니다.
2025-06-29 16:06:57.120 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2017/11/21/6bb439dc49b0c077de9e1a01bea9c9511.jpg
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/11/21/6bb439dc49b0c077de9e1a01bea9c9511.jpg
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 빵(번) 2개
   - 체다 치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 버터 10g
   - 소금, 후추 약간
   - 마요네즈, 홀그레인 머스타드, 케첩 적당량
   - 발사믹 식초 1/4컵
   - 설탕 1큰술
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 다짐육 200g
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 200g
2025-06-29 16:06:57.122 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 200g
2025-06-29 16:06:57.124 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.126 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-29 16:06:57.126 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기 다짐육 300g
2025-06-29 16:06:57.126 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 300g
2025-06-29 16:06:57.126 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 300g
2025-06-29 16:06:57.127 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거 빵(번) 2개
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄버거 빵(번) 2개
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다 치즈 2장
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 2장
2025-06-29 16:06:57.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 2장
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-29 16:06:57.129 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 16:06:57.130 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.131 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 16:06:57.131 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개
2025-06-29 16:06:57.131 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-29 16:06:57.131 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-29 16:06:57.132 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 상추 약간
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 상추 약간
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 피클 약간
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 피클 약간
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 10g
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 버터, Amount: 10g
2025-06-29 16:06:57.133 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 버터, Amount: 10g
2025-06-29 16:06:57.134 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.134 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '버터' not found in DB. Skipping.
2025-06-29 16:06:57.134 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 16:06:57.134 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈, 홀그레인 머스타드, 케첩 적당량
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마요네즈, 홀그레인 머스타드, 케첩 적당량
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 발사믹 식초 1/4컵
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 발사믹 식초 1/4컵
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 16:06:57.135 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 16:06:57.136 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:06:57.137 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 16:06:57.137 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파는 채 썰어 팬에 식용유를 두르고 갈색이 될 때까지 볶다가, 발사믹 식초 1/4컵과 설탕 1큰술을 넣고 잘 볶아 캐러멜라이즈드 양파를 만듭니다[2].
   2. 소고기 다
2025-06-29 16:06:57.137 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:06:57.137 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 빵(번) 2개
   - 체다 치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 버터 10g
   - 소금, 후추 약간
   - 마요네즈, 홀그레인 머스타드, 케첩 적당량
   - 발사믹 식초 1/4컵
   - 설탕 1큰술

조리 방법:
1. 양파는 채 썰어 팬에 식용유를 두르고 갈색이 될 때까지 볶다가, 발사믹 식초 1/4컵과 설탕 1큰술을 넣고 잘 볶아 캐러멜라이즈드 양파를 만듭니다[2].
   2. 소고기 다짐육(200g)과 돼지고기 다짐육(300g)을 섞어 소금, 후추로 간하고 동그랗게 패티 모양을 만듭니다[2][4].
   3. 햄버거 빵(번)을 반으로 자르고, 팬에 버터 10g을 녹여 안쪽 면만 노릇하게 굽습니다[1][2].
   4. 같은 팬에 식용유와 남은 버터를 두른 후, 패티를 올리고 중불에서 한쪽 면이 갈색이 되도록 2분 정도 굽다가 뒤집어 속까지 충분히 익힙니다. 패티 위에 체다 치즈를 올려 뚜껑을 덮고 치즈가 녹게 합니다[2].
   5. 빵 아래쪽에는 마요네즈와 홀그레인 머스타드 또는 케첩을 바릅니다[1][2].
   6. 그 위에 상추, 토마토 슬라이스, 오이 피클, 캐러멜라이즈드 양파를 올립니다[2][3].
   7. 준비된 패티(치즈 올린 상태)를 올리고 빵 윗부분으로 덮어 완성합니다[1][2].
2025-06-29 16:06:57.138 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:06:57.142 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 수제 햄버거
2025-06-29 16:13:42.954 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:13:42.975 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:13:42.986 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:13:42.989 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:13:43.002 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천해, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:13:43.003 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:13:43.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:13:43.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:13:43.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천해
2025-06-29 16:13:43.016 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:13:43.017 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:13:43.026 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:13:43.028 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:13:43.028 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:13:43.028 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천해
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:13:43.028 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:13:49.735 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:13:49.735 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:13:49.736 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 에그 토스트**
- 카테고리: 한식/브런치
- 추천 이유: 아침에 밥을 먹으면 배가 아프다는 건강상태를 반영해, 소화가 잘되는 빵과 계란으로 만든 에그 토스트를 추천합니다. 준비도 간편하고 한 끼로 든든합니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥 대신 부담 없는 메뉴, 새우가 들어가지 않는 안전한 재료 사용

**2. 순두부찌개**
- 카테고리: 한식
- 추천 이유: 한식을 선호하며, 속이 편안한 메뉴를 원하는 경우 순두부찌개가 좋습니다. 자극적이지 않으면서도 영양가가 높고 속에 부담이 덜 갑니다[3].
- 예상 조리 시간: 20분
- 난이도: 중
- 개인화 고려사항: 새우 제외, 두부와 채소 위주로 건강하게 조리 가능

**3. 두부조림**
- 카테고리: 한식
- 추천 이유: 두부는 소화가 잘되고 담백하여 아침이나 점심에 부담 없이 먹기 좋으며, 알레르기 위험이 없습니다[2][3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물 제외, 소화 부담 적은 메뉴

**4. 감자샐러드**
- 카테고리: 기타/브런치
- 추천 이유: 신선한 감자와 계란, 야채를 이용해 만든 샐러드는 소화가 쉽고 가볍게 먹기 좋은 메뉴로, 아침이나 간편한 한 끼로 적합합니다.
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 없는 메뉴, 아침에 부담 없이 섭취 가능

**5. 어묵탕**
- 카테고리: 한식
- 추천 이유: 따뜻한 국물이 속을 편하게 해주며, 빠르고 쉽게 만들 수 있습니다. 어묵도 소화에 부담이 적은 편이라 추천합니다[1][2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우성분 없는 어묵 선택, 맑은 국물로 부담 줄임

### 전체 추천 요약
- 상황 분석: 사용자는 아침에 밥을 먹으면 소화장애가 있고, 새우 알레르기가 있으며, 한식을 선호하는 25세 남성입니다.
- 추천 기준: 소화가 쉽고 밥이 아닌 재료를 중심으로, 새우가 포함되지 않은 한식 또는 브런치 메뉴를 간단하게 준비할 수 있도록 선정했습니다.
- 개인화 고려사항: 새우와 해산물을 철저히 제외하고, 소화에 부담이 적은 재료(빵, 두부, 계란, 감자 등)를 사용한 메뉴를 골랐습니다.
- 추가 팁: 아침엔 밥 대신 빵이나 감자, 두부류를 활용하면 위에 부담을 줄일 수 있습니다. 선택한 메뉴에 다양한 채소를 추가해 영양 균형을 맞추면 더욱 좋습니다.

특정 메뉴의 레시피가 필요하면 ‘레시피’라는 단어를 포함해 다시 요청해 주세요!
2025-06-29 16:13:49.738 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:13:51.553 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:13:51.555 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:13:51.560 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:13:51.566 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:13:51.569 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그 토스트 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:13:51.570 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그 토스트 레시피
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:13:51.571 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:13:51.573 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:13:51.575 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:13:51.575 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:13:51.575 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그 토스트 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:13:51.575 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:14:04.727 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:14:04.735 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:14:04.742 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:14:04.745 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:14:04.749 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그 토스트 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:14:04.750 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:14:04.751 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:14:04.751 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:14:04.751 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그 토스트 레시피
2025-06-29 16:14:04.752 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:14:04.752 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:14:04.753 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:04.755 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:14:04.755 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:14:04.755 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그 토스트 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:14:04.755 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:14:07.007 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:14:07.007 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:14:07.007 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그 토스트

2. 카테고리: 양식

3. 조리 시간: 15분

4. 조리 방법:
   1. 계란 2개를 볼에 넣고 소금 한 꼬집, 우유 2큰술을 넣어 곱게 풀어줍니다[1][3].
   2. 팬에 버터 1/2큰술을 녹인 후, 계란물을 부어 스크램블 에그를 만들어줍니다(중불에서 천천히 저으면서 부드럽게 익혀주세요)[3].
   3. 식빵 2장을 토스터나 팬에 노릇하게 구워줍니다[3].
   4. 베이컨 2장을 팬에서 바삭하게 구워줍니다(선택).
   5. 식빵 한쪽에는 양상추 1장, 베이컨, 체다 치즈 1장, 그리고 완성된 스크램블 에그를 올립니다[3].
   6. 다른 식빵 한 장으로 덮어 샌드위치 형태로 완성합니다.
   7. 먹기 좋게 반으로 자르고, 취향에 따라 파슬리 가루나 잼을 곁들여도 좋습니다[1].

5. 필요한 재료와 양:
   - 식빵 2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 체다 치즈 1장
   - 식용유 약간

6. 난이도: 하

7. 이미지 URL: https://blogfiles.pstatic.net/MjAyMTA4MzBfMTEz/MDAxNjMwMzEwNjkzNDY5.X1NpNqQZ5l5Gkv8CEt9vBLw5WK2JXaf5m1kAifYECnQg.HvI_X6IqECjae_P-4FkYQ8pUqZCW4UAlOK5yqeJE2Ikg.JPEG.elarpi/IMG_3675.jpg[1]

8. 요리 팁:
   - 계란은 약불에서 천천히 익히면 더 부드러운 식감을 즐길 수 있습니다.
   - 치즈나 베이컨, 양상추 등은 취향에 따라 생략하거나 추가할 수 있습니다.
   - 팬에 버터를 한 번 더 둘러 식빵을 구우면 더 고소한 풍미를 낼 수 있습니다.

알레르기 정보: 새우는 포함되어 있지 않으므로 안전하게 섭취하실 수 있습니다.
2025-06-29 16:14:07.012 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://blogfiles.pstatic.net/MjAyMTA4MzBfMTEz/MDAxNjMwMzEwNjkzNDY5.X1NpNqQZ5l5Gkv8CEt9vBLw5WK2JXaf5m1kAifYECnQg.HvI_X6IqECjae_P-4FkYQ8pUqZCW4UAlOK5yqeJE2Ikg.JPEG.elarpi/IMG_3675.jpg[1]
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://blogfiles.pstatic.net/MjAyMTA4MzBfMTEz/MDAxNjMwMzEwNjkzNDY5.X1NpNqQZ5l5Gkv8CEt9vBLw5WK2JXaf5m1kAifYECnQg.HvI_X6IqECjae_P-4FkYQ8pUqZCW4UAlOK5yqeJE2Ikg.JPEG.elarpi/IMG_3675.jpg[1]
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 체다 치즈 1장
   - 식용유 약간
2025-06-29 16:14:07.019 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 16:14:07.020 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 2장
2025-06-29 16:14:07.021 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 2장
2025-06-29 16:14:07.021 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 2장
2025-06-29 16:14:07.025 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.029 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-29 16:14:07.029 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 2개
2025-06-29 16:14:07.029 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 2개
2025-06-29 16:14:07.029 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 2개
2025-06-29 16:14:07.031 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 우유 2큰술
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 우유, Amount: 2큰술
2025-06-29 16:14:07.032 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 우유, Amount: 2큰술
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '우유' not found in DB. Skipping.
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1/2큰술
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1/2큰술
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 베이컨 2장(선택)
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 베이컨, Amount: 2장
2025-06-29 16:14:07.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 베이컨, Amount: 2장
2025-06-29 16:14:07.036 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.038 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '베이컨' not found in DB. Skipping.
2025-06-29 16:14:07.038 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 1장(선택)
2025-06-29 16:14:07.038 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양상추, Amount: 1장
2025-06-29 16:14:07.038 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양상추, Amount: 1장
2025-06-29 16:14:07.041 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.043 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '양상추' not found in DB. Skipping.
2025-06-29 16:14:07.043 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다 치즈 1장
2025-06-29 16:14:07.043 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 16:14:07.043 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 16:14:07.045 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:07.045 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:14:07.045 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 16:14:07.045 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 16:14:07.046 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란 2개를 볼에 넣고 소금 한 꼬집, 우유 2큰술을 넣어 곱게 풀어줍니다[1][3].
   2. 팬에 버터 1/2큰술을 녹인 후, 계란물을 부어 스크램블 에그를 만들어줍니다
2025-06-29 16:14:07.046 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:14:07.046 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 체다 치즈 1장
   - 식용유 약간

조리 방법:
1. 계란 2개를 볼에 넣고 소금 한 꼬집, 우유 2큰술을 넣어 곱게 풀어줍니다[1][3].
   2. 팬에 버터 1/2큰술을 녹인 후, 계란물을 부어 스크램블 에그를 만들어줍니다(중불에서 천천히 저으면서 부드럽게 익혀주세요)[3].
   3. 식빵 2장을 토스터나 팬에 노릇하게 구워줍니다[3].
   4. 베이컨 2장을 팬에서 바삭하게 구워줍니다(선택).
   5. 식빵 한쪽에는 양상추 1장, 베이컨, 체다 치즈 1장, 그리고 완성된 스크램블 에그를 올립니다[3].
   6. 다른 식빵 한 장으로 덮어 샌드위치 형태로 완성합니다.
   7. 먹기 좋게 반으로 자르고, 취향에 따라 파슬리 가루나 잼을 곁들여도 좋습니다[1].
2025-06-29 16:14:07.047 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:14:07.048 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 에그 토스트
2025-06-29 16:14:07.055 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:14:07.058 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 95
2025-06-29 16:14:12.102 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:14:12.103 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:14:12.103 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그 토스트

2. 카테고리: 기타 (한식 스타일 가미 가능)

3. 조리 시간: 15분

4. 조리 방법:
   1. 볼에 달걀 2개, 소금 약간, 우유 2큰술을 넣고 곱게 풀어 준비합니다[1][3].
   2. 팬에 버터 1/2큰술을 녹이고 달걀물을 붓습니다. 달걀물이 반쯤 익으면 식빵 1장을 그 위에 올립니다[1].
   3. 약불에서 달걀이 거의 익을 때쯤 식빵을 뒤집고, 계란을 식빵 크기에 맞게 접어줍니다[1].
   4. 식빵 위에 슬라이스 치즈 1장과 햄 1장(선택)을 올리고 치즈가 녹을 때까지 구워줍니다[1][3].
   5. 필요하다면 스크램블로 계란을 만들어, 식빵 사이에 넣어줘도 좋습니다[3].
   6. 기호에 따라 잼 또는 소스를 추가하고 식빵을 반으로 접어 마무리합니다[1].
   
5. 필요한 재료와 양:
   - 식빵 1~2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 슬라이스 치즈 1장
   - 햄 1장(생략 가능)
   - (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/06/30/3f719f2d4f8777e7e9ea302b6b6e498a1.jpg

8. 요리 팁:
   - 에그 토스트는 불을 약하게 하여 달걀이 타지 않게 조리하는 것이 중요합니다.
   - 달걀에 우유를 추가하면 더욱 촉촉하고 부드럽게 즐길 수 있습니다.
   - 치즈, 햄, 잼 등 토핑은 기호에 따라 조절하면 됩니다.
   - 한식 스타일로 즐기고 싶다면 슬라이스 햄 대신 구운 김치 또는 볶은 야채를 추가해도 잘 어울립니다.

**알레르기 정보:** 본 레시피에는 새우가 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.
2025-06-29 16:14:12.109 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:12.112 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 기타 (한식 스타일 가미 가능)
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2018/06/30/3f719f2d4f8777e7e9ea302b6b6e498a1.jpg
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2018/06/30/3f719f2d4f8777e7e9ea302b6b6e498a1.jpg
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 1~2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 슬라이스 치즈 1장
   - 햄 1장(생략 가능)
   - (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 8
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 1~2장
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식빵 1~2장
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 2개
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 2개
2025-06-29 16:14:12.113 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 2개
2025-06-29 16:14:12.115 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 우유 2큰술
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 우유, Amount: 2큰술
2025-06-29 16:14:12.117 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 우유, Amount: 2큰술
2025-06-29 16:14:12.118 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '우유' not found in DB. Skipping.
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1/2큰술
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1/2큰술
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 1장
2025-06-29 16:14:12.119 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 16:14:12.120 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 16:14:12.121 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:12.122 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:14:12.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄 1장(생략 가능)
2025-06-29 16:14:12.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 햄, Amount: 1장
2025-06-29 16:14:12.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 햄, Amount: 1장
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '햄' not found in DB. Skipping.
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑
2025-06-29 16:14:12.123 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 볼에 달걀 2개, 소금 약간, 우유 2큰술을 넣고 곱게 풀어 준비합니다[1][3].
   2. 팬에 버터 1/2큰술을 녹이고 달걀물을 붓습니다. 달걀물이 반쯤 익으면 식빵 1
2025-06-29 16:14:12.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:14:12.124 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 1~2장
   - 달걀 2개
   - 소금 약간
   - 우유 2큰술
   - 버터 1/2큰술
   - 슬라이스 치즈 1장
   - 햄 1장(생략 가능)
   - (선택) 잼, 설탕, 파슬리 가루 등 추가 토핑

조리 방법:
1. 볼에 달걀 2개, 소금 약간, 우유 2큰술을 넣고 곱게 풀어 준비합니다[1][3].
   2. 팬에 버터 1/2큰술을 녹이고 달걀물을 붓습니다. 달걀물이 반쯤 익으면 식빵 1장을 그 위에 올립니다[1].
   3. 약불에서 달걀이 거의 익을 때쯤 식빵을 뒤집고, 계란을 식빵 크기에 맞게 접어줍니다[1].
   4. 식빵 위에 슬라이스 치즈 1장과 햄 1장(선택)을 올리고 치즈가 녹을 때까지 구워줍니다[1][3].
   5. 필요하다면 스크램블로 계란을 만들어, 식빵 사이에 넣어줘도 좋습니다[3].
   6. 기호에 따라 잼 또는 소스를 추가하고 식빵을 반으로 접어 마무리합니다[1].
2025-06-29 16:14:12.124 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:14:12.125 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 에그 토스트
2025-06-29 16:14:12.139 [http-nio-8080-exec-4] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy139.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy152.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:486)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:165)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 16:14:12.163 [http-nio-8080-exec-4] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only] with root cause
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:803)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 16:14:27.823 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:14:27.827 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:14:27.830 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:14:27.835 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:14:27.839 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그 토스트 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:14:27.848 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그 토스트 레시피
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:14:27.855 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:14:27.859 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:27.861 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:14:27.861 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:14:27.861 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그 토스트 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:14:27.861 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:14:37.742 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:14:37.742 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:14:37.742 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그 토스트

2. 카테고리: 기타 (양식 기반 간단 토스트 요리)

3. 조리 시간: 약 10~15분

4. 조리 방법:  
   1. 계란에 소금 한 꼬집을 넣고 곱게 풀어 준비한다.  
   2. 팬에 버터를 녹인 후, 약한 불에서 계란물을 부어 익히기 시작한다.  
   3. 계란물이 반 정도 익으면 그 위에 식빵 한 장을 올린다.  
   4. 식빵을 뒤집어 계란이 식빵 크기에 맞게 접히도록 조심스럽게 접는다.  
   5. 계란 위에 슬라이스 치즈와 햄을 올린 후 치즈가 녹을 때까지 구워준다.  
   6. 치즈가 녹으면 뒤집개를 사용해 접기 좋게 자국을 내고, 중앙에 잼 한 숟가락을 올린 뒤 반으로 접어 마무리한다.  

5. 필요한 재료와 양:  
   - 계란 1~2개  
   - 식빵 1장  
   - 버터 적당량 (팬에 녹일 만큼)  
   - 슬라이스 치즈 1장  
   - 슬라이스 햄 1장  
   - 소금 한 꼬집  
   - 잼 (딸기잼 등, 기호에 따라)  

6. 난이도: 하

7. 이미지 URL:  
   https://blog.kakaocdn.net/dn/bFGQqE/btqR8jUdQmD/AHVrKvF7sJIEXY5sxAmXOk/img.jpg  
   (출처: 네이버 블로그 에그토스트 이미지)

8. 요리 팁:  
   - 계란을 풀 때 소금을 조금 넣으면 간이 더 잘 배어 맛있다.  
   - 버터를 충분히 녹여 약한 불에서 조리해야 계란이 부드럽고 촉촉하게 익는다.  
   - 잼 대신 케첩이나 마요네즈를 발라도 맛있다.  
   - 아이 간식으로도 좋으며, 우유 한 잔과 함께하면 영양 듬뿍 아침 식사가 된다.  

본 레시피는 간단하면서도 부드럽고 촉촉한 에그 토스트를 만드는 방법으로, 아이 간식이나 간단한 아침 식사로 적합합니다[1].
2025-06-29 16:14:37.744 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:14:37.747 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 기타 (양식 기반 간단 토스트 요리)
2025-06-29 16:14:37.747 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://blog.kakaocdn.net/dn/bFGQqE/btqR8jUdQmD/AHVrKvF7sJIEXY5sxAmXOk/img.jpg
2025-06-29 16:14:37.747 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://blog.kakaocdn.net/dn/bFGQqE/btqR8jUdQmD/AHVrKvF7sJIEXY5sxAmXOk/img.jpg
2025-06-29 16:14:37.747 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 계란 1~2개  
   - 식빵 1장  
   - 버터 적당량 (팬에 녹일 만큼)  
   - 슬라이스 치즈 1장  
   - 슬라이스 햄 1장  
   - 소금 한 꼬집  
   - 잼 (딸기잼 등, 기호에 따라)
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 7
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1~2개
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 계란 1~2개
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 1장
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 1장
2025-06-29 16:14:37.748 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 1장
2025-06-29 16:14:37.750 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 적당량 (팬에 녹일 만큼)
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 적당량 (팬에 녹일 만큼)
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 치즈 1장
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 16:14:37.751 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 16:14:37.753 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:37.754 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 16:14:37.754 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 햄 1장
2025-06-29 16:14:37.754 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 햄, Amount: 1장
2025-06-29 16:14:37.754 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 햄, Amount: 1장
2025-06-29 16:14:37.755 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '햄' not found in DB. Skipping.
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 한 꼬집
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 한 꼬집
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 잼 (딸기잼 등, 기호에 따라)
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 잼 (딸기잼 등, 기호에 따라)
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란에 소금 한 꼬집을 넣고 곱게 풀어 준비한다.  
   2. 팬에 버터를 녹인 후, 약한 불에서 계란물을 부어 익히기 시작한다.  
   3. 계란물이 반 정도 익으면 그
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:14:37.756 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 계란 1~2개  
   - 식빵 1장  
   - 버터 적당량 (팬에 녹일 만큼)  
   - 슬라이스 치즈 1장  
   - 슬라이스 햄 1장  
   - 소금 한 꼬집  
   - 잼 (딸기잼 등, 기호에 따라)

조리 방법:
1. 계란에 소금 한 꼬집을 넣고 곱게 풀어 준비한다.  
   2. 팬에 버터를 녹인 후, 약한 불에서 계란물을 부어 익히기 시작한다.  
   3. 계란물이 반 정도 익으면 그 위에 식빵 한 장을 올린다.  
   4. 식빵을 뒤집어 계란이 식빵 크기에 맞게 접히도록 조심스럽게 접는다.  
   5. 계란 위에 슬라이스 치즈와 햄을 올린 후 치즈가 녹을 때까지 구워준다.  
   6. 치즈가 녹으면 뒤집개를 사용해 접기 좋게 자국을 내고, 중앙에 잼 한 숟가락을 올린 뒤 반으로 접어 마무리한다.
2025-06-29 16:14:37.757 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:14:37.758 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 에그 토스트
2025-06-29 16:21:57.640 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:21:57.645 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:21:57.649 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:21:57.651 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:21:57.654 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:21:57.655 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:21:57.657 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:21:57.667 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:21:57.684 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:21:57.684 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:21:57.684 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:21:57.684 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:22:06.215 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:22:06.215 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:22:06.215 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 김치전**
- 카테고리: 한식
- 추천 이유: 밀가루와 김치를 활용해 간단하게 만들 수 있고, 밥 없이도 속이 부담스럽지 않아 아침에 밥을 먹으면 배가 아픈 분께 적합합니다. 오징어나 해물을 넣을 수 있으나, 새우 알레르기가 있으므로 오징어 또는 야채 위주로 조리하시면 안전합니다[3].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않고, 새우를 제외한 재료로 조리가 가능합니다.

**2. 에그 샌드위치**
- 카테고리: 양식
- 추천 이유: 속이 예민할 때 아침으로 부담 없이 먹기 좋은 메뉴입니다. 빵과 달걀, 가벼운 야채만 있으면 간편하게 만들 수 있어 바쁜 출근길에도 적합합니다[1].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 해산물(특히 새우) 알레르기와 무관한 재료 사용, 밥을 대체하는 빵 사용.

**3. 컵밥(밥 제외, 곤약 등 대체 곡류 활용도 가능)**
- 카테고리: 한식
- 추천 이유: 간단하게 한 끼를 해결할 수 있지만, 밥 대신 곤약 또는 단백질 위주 토핑을 선택하면 속에 부담이 덜합니다. 일반 컵밥이 부담스러우면 곤약밥이나 오트밀 밥 등으로 응용 가능합니다[1][2].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 속에 부담을 덜 주도록 밥 양을 최소화하거나 대체 곡류로 변경, 새우 등 알레르기 식품 제외.

**4. 우유와 시리얼**
- 카테고리: 양식
- 추천 이유: 아침 식사로 매우 간편하며, 소화가 잘 된다면 빠르고 속을 덜 자극하는 메뉴입니다. 식사 준비 시간이 짧고, 간단하게 영양도 챙길 수 있습니다[1].
- 예상 조리 시간: 2~3분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기와 무관, 밥이 들어가지 않아 위장에 부담이 적음.

**5. 두부구이 또는 두부샐러드**
- 카테고리: 한식/기타
- 추천 이유: 고단백, 저자극 메뉴로 아침에 속이 약할 때 좋으며, 조리도 간단합니다. 소스에만 주의하면 새우 성분이 들어가지 않아 알레르기 걱정이 없습니다.
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 밥이 들어가지 않고, 새우, 해산물 제외.

---

### 전체 추천 요약

- 상황 분석: 아침에 밥을 먹으면 소화가 불편한 25세 남성을 위한, 간단하고 위에 부담이 적은 메뉴를 중심으로 추천했습니다.
- 추천 기준: 밥이 주재료인 메뉴는 배제하거나 대체 곡류로 응용하고, 준비가 쉽고 부담 없는 한식 및 양식 위주로 선택했습니다.
- 개인화 고려사항: 새우 알레르기, 위장 민감성 등 건강상태를 철저히 반영해 밀가루, 달걀, 두부 등 원재료 중심으로 안전하게 추천했습니다.
- 추가 팁: 위장 상태가 특히 예민한 날엔 국물 요리(맑은 두부국, 야채스프 등)도 추천하며, 시리얼이나 샌드위치는 소화를 방해하는 기름진 소스는 피하는 것이 좋습니다.

**원하는 메뉴의 레시피가 필요하다면 '레시피'라는 단어를 포함해 다시 요청해주세요!**
2025-06-29 16:22:06.215 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:25:41.591 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:25:41.602 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:25:41.610 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:25:41.614 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:25:41.619 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 저녁메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:25:41.620 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 저녁메뉴 추천해줘
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:25:41.621 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:25:41.629 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:25:41.630 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:25:41.630 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:25:41.630 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 저녁메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:25:41.630 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:25:53.714 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:25:53.714 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:25:53.714 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 목살구이와 버섯구이, 겉절이**
- 카테고리: 한식
- 추천 이유: 저녁 식사로 든든하면서도 건강하게 즐길 수 있는 고기 메뉴입니다. 버섯과 함께 구우면 기름짐을 줄이고, 겉절이와 곁들여 상큼하게 마무리할 수 있습니다. 25세 남성의 활동적인 에너지 보충에도 적합합니다[1].
- 예상 조리 시간: 30~35분
- 난이도: 중
- 개인화 고려사항: 새우 알레르기를 피했으며, 소화에 무리가 없는 저녁 식단입니다.

**2. 두부조림**
- 카테고리: 한식
- 추천 이유: 간단하게 만들 수 있고, 단백질이 풍부해 부담 없이 먹기 좋습니다. 밥과 함께 먹기에도 적합해 간단한 집밥 저녁 메뉴로 추천합니다[3].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료가 없고, 가볍고 건강한 메뉴입니다.

**3. 닭날개구이**
- 카테고리: 한식
- 추천 이유: 오븐이나 에어프라이어로 간단하게 조리할 수 있으며, 기름기는 적고 고소한 맛을 즐길 수 있어 저녁식사로 부담 없습니다[4].
- 예상 조리 시간: 25~30분
- 난이도: 하
- 개인화 고려사항: 새우 알레르기 걱정이 없고, 과도한 기름짐 없이 단백질을 섭취할 수 있습니다.

**4. 순두부찌개**
- 카테고리: 한식
- 추천 이유: 자극적이지 않고 부드러워 속이 편안하며, 저녁에 먹기 좋은 국물 요리입니다. 간단하게 조리할 수 있어 바쁜 일상에 적합합니다[2].
- 예상 조리 시간: 20~25분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 식재료가 없어 안전하며, 위에 부담이 적습니다.

**5. 참치계란볶음밥**
- 카테고리: 한식
- 추천 이유: 집에 있는 재료로 빠르게 만들 수 있고, 참치와 계란으로 영양을 다양하게 챙길 수 있는 저녁 메뉴입니다[3].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우가 들어가지 않고, 소화에 부담 없는 볶음밥입니다.

### 전체 추천 요약

- 상황 분석: 포만감이 있으면서 건강하고, 너무 기름지지 않은 저녁 메뉴를 찾는 상황입니다. 새우 알레르기를 반드시 피해야 하고, 건강 상태상 아침에만 소화가 예민하니 저녁엔 단백질과 채소 위주로 골랐습니다.
- 추천 기준: 한식 위주로, 조리가 복잡하지 않으면서 다양한 영양을 고르게 섭취할 수 있는 메뉴를 우선 선택했습니다. 새우 등 알레르기 유발 식재료는 완전히 제외했습니다.
- 개인화 고려사항: 새우 알레르기 및 건강 상태(아침에만 소화 문제 있음)를 면밀히 반영했습니다. 기름기를 크게 줄이면서도 맛있게 먹을 수 있는 메뉴로 선정했습니다.
- 추가 팁: 저녁에 과식은 피하시고, 고기 메뉴를 선택하실 땐 채소와 곁들이면 소화에 더 도움이 됩니다. 만약 특정 메뉴의 레시피가 필요하시면 "레시피"라는 단어를 포함해 다시 요청해주세요!
2025-06-29 16:25:53.718 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:35:38.787 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m30s293ms).
2025-06-29 16:36:53.803 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m15s16ms).
2025-06-29 16:40:57.768 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4m3s966ms).
2025-06-29 16:44:52.373 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m54s604ms).
2025-06-29 16:45:45.891 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=53s519ms).
2025-06-29 16:46:37.011 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=51s120ms).
2025-06-29 16:48:41.348 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m4s337ms).
2025-06-29 16:51:49.536 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:51:49.553 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:51:49.576 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:51:49.579 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:51:49.590 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 16:51:49.591 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴추천
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:51:49.592 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 16:51:49.601 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:51:49.603 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 16:51:49.603 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:51:49.603 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 메뉴추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 16:51:49.603 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:52:00.918 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:52:00.918 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 16:52:00.918 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 두부조림**
- 카테고리: 한식
- 추천 이유: 간단하면서도 단백질이 풍부해 건강하게 한 끼를 해결할 수 있는 메뉴입니다. 밥 없이도 반찬처럼 먹기 좋아 아침 공복에 부담을 줄일 수 있습니다[4].
- 예상 조리 시간: 15분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료를 사용하지 않고, 아침 식사 시 배가 아픈 점을 고려해 소화에 부담이 적은 메뉴입니다.

**2. 김치전**
- 카테고리: 한식
- 추천 이유: 밀가루와 김치로 만드는 간단한 한식 메뉴로, 든든하면서도 상대적으로 소화가 잘 되어 아침에 먹기 부담이 적습니다. 밥이 들어가지 않아 속이 편안할 수 있습니다[2].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우 등 해산물이 들어가지 않는 기본 김치전으로 추천합니다.

**3. 오믈렛**
- 카테고리: 양식
- 추천 이유: 달걀을 주재료로 한 오믈렛은 속이 편하고 단백질이 풍부하여 아침에 적합합니다. 간단하면서도 영양을 챙길 수 있습니다[1].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 해산물이 들어가지 않으며, 소화에 부담이 적어 아침에 먹기 좋습니다.

**4. 시리얼 & 요거트**
- 카테고리: 양식
- 추천 이유: 조리가 필요 없고, 부드럽고 가볍게 먹을 수 있어 아침 식사로 부담이 적습니다. 소화에 부담을 주지 않는 메뉴로 아침에 먹기 적합합니다[1].
- 예상 조리 시간: 3분
- 난이도: 하
- 개인화 고려사항: 우유, 요거트 등만 사용되므로 알레르기 및 소화 문제를 최소화할 수 있습니다.

**5. 도토리묵무침**
- 카테고리: 한식
- 추천 이유: 쫄깃한 도토리묵과 각종 채소로 만드는 간단한 무침 메뉴로, 가볍고 건강하게 먹을 수 있습니다. 밥이 들어가지 않아 아침에 속이 편할 수 있습니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 새우, 해산물 없이 채소 위주로 구성하여 안전합니다.

---

### 전체 추천 요약

- 상황 분석: 사용자는 아침에 밥을 먹으면 배가 아픈 25세 남성으로, 간단하고 소화에 부담이 적으며, 알레르기(새우)가 없는 메뉴를 찾고 있습니다.
- 추천 기준: 쌀밥이나 무거운 주식 대신 가볍고 소화가 잘 되는 메뉴, 그리고 알레르기 유발 재료가 들어가지 않은 한식/양식 위주의 간단 메뉴를 우선 선택했습니다.
- 개인화 고려사항: 밥이 들어가지 않거나 소화에 부담이 적은 메뉴, 새우 등 알레르기 원재료가 없는 안전한 메뉴만을 선정했습니다.
- 추가 팁: 아침에 속이 약하다면 소량씩 여러 번, 자극적이지 않게 드시는 것이 좋습니다. 만약 특정 메뉴의 레시피가 필요하면 "레시피"라는 단어를 포함해 다시 요청해 주세요.
2025-06-29 16:52:00.920 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 16:56:05.606 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 16:56:05.615 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:56:05.631 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 16:56:05.639 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 16:56:05.644 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 스테이크 레시피 추천, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 16:56:05.645 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 스테이크 레시피 추천
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 16:56:05.647 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 16:56:05.655 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:56:05.657 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 16:56:05.657 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 16:56:05.657 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 스테이크 레시피 추천
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 16:56:05.657 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 16:56:17.444 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 16:56:17.444 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 16:56:17.444 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 소고기 스테이크

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 소고기(등심 또는 살치살)는 키친타월로 핏물을 제거한 뒤, 소금과 후추로 앞뒤에 골고루 밑간을 해주세요[1][2][4].
   2. 팬을 센 불로 예열한 후 올리브유를 충분히 두릅니다[1][4].
   3. 소고기를 팬에 올려 겉면을 센 불로 빠르게 구워 육즙을 가둡니다(한 면당 약 1~2분). 고기를 뒤집어 반대 면도 같은 방식으로 구워주세요[1][4].
   4. 마늘, 양파 등 곁들임 채소와 버터를 추가해 향을 더합니다. 버터와 마늘을 고기 위에 끼얹어가며 더 풍미있게 구워줍니다[2][4].
   5. 미디엄레어 기준, 고기를 한 면당 2분 내외로 구운 후 불을 끄고 팬 위에서 2분 정도 레스팅(휴지)합니다.
   6. 완성된 스테이크를 도마에 올려 먹기 좋은 크기로 썰고, 파프리카·브로콜리·버섯 등 기호에 따라 구운 채소와 함께 플레이팅합니다[1].
   7. 소스는 시판 스테이크 소스에 진간장, 설탕, 케첩, 물을 더해 간단하게 만들어 곁들입니다[1].

5. 필요한 재료와 양:
   - 소고기 등심 또는 살치살 300~400g
   - 소금 1/2작은술
   - 후추 약간
   - 올리브유 2큰술
   - 마늘 5~7개
   - 양파 1/2개
   - 버터 1~2큰술
   - (선택) 파프리카 1/2개, 브로콜리 1/4개, 양송이버섯 4개
   - 스테이크 소스 3큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 케첩 3큰술
   - 물 1/2큰술

6. 난이도: 중

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/12/11/4be3ae2115934f4e56d602c684dbeeef1.jpg

8. 요리 팁:
   - 고기는 충분히 실온에 두었다가 조리해야 속까지 골고루 익습니다.
   - 팬이 충분히 달궈진 후 고기를 올려야 육즙이 빠지지 않고 겉은 바삭, 속은 촉촉하게 구워집니다.
   - 구운 후 반드시 2~3분간 레스팅해서 육즙이 고기 안에 머물도록 하세요.
   - 소스는 간단하게 만들 수 있지만, 시판 소스나 직접 만든 소스 모두 곁들여도 좋습니다.

*새우 알레르기 정보: 본 레시피에는 새우가 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.*
2025-06-29 16:56:17.452 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2017/12/11/4be3ae2115934f4e56d602c684dbeeef1.jpg
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2017/12/11/4be3ae2115934f4e56d602c684dbeeef1.jpg
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 등심 또는 살치살 300~400g
   - 소금 1/2작은술
   - 후추 약간
   - 올리브유 2큰술
   - 마늘 5~7개
   - 양파 1/2개
   - 버터 1~2큰술
   - (선택) 파프리카 1/2개, 브로콜리 1/4개, 양송이버섯 4개
   - 스테이크 소스 3큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 케첩 3큰술
   - 물 1/2큰술
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 16:56:17.455 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 등심 또는 살치살 300~400g
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소고기 등심 또는 살치살 300~400g
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/2작은술
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 1/2작은술
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브유 2큰술
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브유, Amount: 2큰술
2025-06-29 16:56:17.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브유, Amount: 2큰술
2025-06-29 16:56:17.459 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.462 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브유' not found in DB. Skipping.
2025-06-29 16:56:17.462 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마늘 5~7개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마늘 5~7개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1~2큰술
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1~2큰술
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 파프리카 1/2개, 브로콜리 1/4개, 양송이버섯 4개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양송이버섯, Amount: 4개
2025-06-29 16:56:17.463 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양송이버섯, Amount: 4개
2025-06-29 16:56:17.466 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.466 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '양송이버섯' not found in DB. Skipping.
2025-06-29 16:56:17.466 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 스테이크 소스 3큰술
2025-06-29 16:56:17.467 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소스, Amount: 3큰술
2025-06-29 16:56:17.468 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소스, Amount: 3큰술
2025-06-29 16:56:17.469 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.470 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '소스' not found in DB. Skipping.
2025-06-29 16:56:17.470 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 1큰술
2025-06-29 16:56:17.470 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 진간장, Amount: 1큰술
2025-06-29 16:56:17.470 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 1큰술
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 16:56:17.471 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 16:56:17.472 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.473 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 16:56:17.473 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케첩 3큰술
2025-06-29 16:56:17.473 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 케첩, Amount: 3큰술
2025-06-29 16:56:17.473 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케첩, Amount: 3큰술
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '케첩' not found in DB. Skipping.
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 1/2큰술
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 물 1/2큰술
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소고기(등심 또는 살치살)는 키친타월로 핏물을 제거한 뒤, 소금과 후추로 앞뒤에 골고루 밑간을 해주세요[1][2][4].
   2. 팬을 센 불로 예열한 후 올리브유를 충분히
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 16:56:17.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 등심 또는 살치살 300~400g
   - 소금 1/2작은술
   - 후추 약간
   - 올리브유 2큰술
   - 마늘 5~7개
   - 양파 1/2개
   - 버터 1~2큰술
   - (선택) 파프리카 1/2개, 브로콜리 1/4개, 양송이버섯 4개
   - 스테이크 소스 3큰술
   - 진간장 1큰술
   - 설탕 1큰술
   - 케첩 3큰술
   - 물 1/2큰술

조리 방법:
1. 소고기(등심 또는 살치살)는 키친타월로 핏물을 제거한 뒤, 소금과 후추로 앞뒤에 골고루 밑간을 해주세요[1][2][4].
   2. 팬을 센 불로 예열한 후 올리브유를 충분히 두릅니다[1][4].
   3. 소고기를 팬에 올려 겉면을 센 불로 빠르게 구워 육즙을 가둡니다(한 면당 약 1~2분). 고기를 뒤집어 반대 면도 같은 방식으로 구워주세요[1][4].
   4. 마늘, 양파 등 곁들임 채소와 버터를 추가해 향을 더합니다. 버터와 마늘을 고기 위에 끼얹어가며 더 풍미있게 구워줍니다[2][4].
   5. 미디엄레어 기준, 고기를 한 면당 2분 내외로 구운 후 불을 끄고 팬 위에서 2분 정도 레스팅(휴지)합니다.
   6. 완성된 스테이크를 도마에 올려 먹기 좋은 크기로 썰고, 파프리카·브로콜리·버섯 등 기호에 따라 구운 채소와 함께 플레이팅합니다[1].
   7. 소스는 시판 스테이크 소스에 진간장, 설탕, 케첩, 물을 더해 간단하게 만들어 곁들입니다[1].
2025-06-29 16:56:17.477 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 16:56:17.478 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 소고기 스테이크
2025-06-29 16:56:17.507 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 16:56:17.510 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 96
2025-06-29 17:05:13.536 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:05:13.554 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:05:13.566 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:05:13.569 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:05:13.580 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아침 메뉴 추천해줘 , useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 17:05:13.580 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아침 메뉴 추천해줘 
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 17:05:13.582 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 17:05:13.590 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:05:13.592 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 17:05:13.592 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:05:13.592 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천해줘 
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 17:05:13.592 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:05:21.245 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:05:21.245 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 17:05:21.245 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 야채 스크램블 에그

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 계란을 볼에 풀고 소금, 후추로 간을 합니다.
   2. 양송이버섯, 방울토마토, 브로콜리, 당근 등 준비된 야채를 한입 크기로 썰어줍니다.
   3. 프라이팬에 아보카도 오일이나 식용유를 두르고, 야채를 중불에 2~3분간 볶아줍니다.
   4. 야채가 어느 정도 익으면 풀어둔 계란을 부어줍니다.
   5. 젓가락이나 주걱으로 계란을 천천히 저어 스크램블 하듯 저어주다가, 반숙 상태에서 불을 끕니다.
   6. 그릇에 담고 치즈와 견과류(선택)를 위에 올려 마무리합니다.

5. 필요한 재료와 양:
   - 계란 2개
   - 양송이버섯 2~3개
   - 방울토마토 3~4개
   - 브로콜리 한 줌
   - 당근 1/4개
   - 치즈 한 장 또는 조금 (선택)
   - 견과류 약간 (선택)
   - 소금 약간
   - 후추 약간
   - 아보카도 오일 또는 식용유 1 큰술

6. 난이도: 하

7. 이미지 URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/08/09/05c6ad386878fc1e7e98ecb2f5d1874b1.jpg

8. 요리 팁:
   - 냉장고에 있는 다양한 야채를 활용하면 편하게 만들 수 있습니다.
   - 계란을 너무 익히지 않고 촉촉하게 마무리하면 더욱 부드럽고 소화가 잘 됩니다.
   - 밥이 부담스러운 분들에게 속이 편안한 단백질 위주 아침 식사로 추천합니다.
2025-06-29 17:05:21.249 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:05:21.255 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 17:05:21.255 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://recipe1.ezmember.co.kr/cache/recipe/2020/08/09/05c6ad386878fc1e7e98ecb2f5d1874b1.jpg
2025-06-29 17:05:21.255 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://recipe1.ezmember.co.kr/cache/recipe/2020/08/09/05c6ad386878fc1e7e98ecb2f5d1874b1.jpg
2025-06-29 17:05:21.255 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 계란 2개
   - 양송이버섯 2~3개
   - 방울토마토 3~4개
   - 브로콜리 한 줌
   - 당근 1/4개
   - 치즈 한 장 또는 조금 (선택)
   - 견과류 약간 (선택)
   - 소금 약간
   - 후추 약간
   - 아보카도 오일 또는 식용유 1 큰술
2025-06-29 17:05:21.256 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 10
2025-06-29 17:05:21.256 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 2개
2025-06-29 17:05:21.257 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 2개
2025-06-29 17:05:21.257 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 2개
2025-06-29 17:05:21.259 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양송이버섯 2~3개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양송이버섯 2~3개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 방울토마토 3~4개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 방울토마토 3~4개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 브로콜리 한 줌
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 브로콜리 한 줌
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/4개
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 치즈 한 장 또는 조금 (선택)
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 치즈 한 장 또는 조금 (선택)
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 견과류 약간 (선택)
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 견과류 약간 (선택)
2025-06-29 17:05:21.264 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 아보카도 오일 또는 식용유 1 큰술
2025-06-29 17:05:21.265 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 아보카도 오일 또는 식용유 1 큰술
2025-06-29 17:05:21.266 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란을 볼에 풀고 소금, 후추로 간을 합니다.
   2. 양송이버섯, 방울토마토, 브로콜리, 당근 등 준비된 야채를 한입 크기로 썰어줍니다.
   3. 프라이팬에 아보카도 오
2025-06-29 17:05:21.266 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 17:05:21.266 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 계란 2개
   - 양송이버섯 2~3개
   - 방울토마토 3~4개
   - 브로콜리 한 줌
   - 당근 1/4개
   - 치즈 한 장 또는 조금 (선택)
   - 견과류 약간 (선택)
   - 소금 약간
   - 후추 약간
   - 아보카도 오일 또는 식용유 1 큰술

조리 방법:
1. 계란을 볼에 풀고 소금, 후추로 간을 합니다.
   2. 양송이버섯, 방울토마토, 브로콜리, 당근 등 준비된 야채를 한입 크기로 썰어줍니다.
   3. 프라이팬에 아보카도 오일이나 식용유를 두르고, 야채를 중불에 2~3분간 볶아줍니다.
   4. 야채가 어느 정도 익으면 풀어둔 계란을 부어줍니다.
   5. 젓가락이나 주걱으로 계란을 천천히 저어 스크램블 하듯 저어주다가, 반숙 상태에서 불을 끕니다.
   6. 그릇에 담고 치즈와 견과류(선택)를 위에 올려 마무리합니다.
2025-06-29 17:05:21.268 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 17:05:21.270 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 야채 스크램블 에그
2025-06-29 17:05:21.289 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 17:05:21.294 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 97
2025-06-29 17:05:30.306 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:05:30.310 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:05:30.314 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:05:30.319 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:05:30.321 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아침 메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 17:05:30.322 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:05:30.323 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:05:30.324 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:05:30.324 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아침 메뉴 추천해줘
2025-06-29 17:05:30.324 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 17:05:30.324 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 17:05:30.325 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:05:30.325 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 17:05:30.326 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:05:30.326 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 아침 메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 17:05:30.326 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:05:38.127 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:05:38.127 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 17:05:38.128 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 그릭 요거트 & 과일**
- 카테고리: 기타 (건강식)
- 추천 이유: 속이 불편한 아침에도 부담 없이 먹을 수 있고, 단백질과 비타민이 풍부하여 든든하게 시작할 수 있는 가벼운 건강식입니다. 딸기, 바나나, 블루베리 등 좋아하는 과일을 곁들이면 맛과 포만감 모두 챙길 수 있습니다[1].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 밥 대신 소화가 쉬운 요거트 위주 메뉴, 알레르기 유발 성분(새우) 미포함

**2. 구운 야채와 스크램블 에그**
- 카테고리: 한식/기타
- 추천 이유: 계란과 다양한 야채를 곁들여 영양과 포만감을 주고, 속 부담이 적어 아침에 잘 맞는 메뉴입니다. 기름·조미료를 최소화하면 더 건강하게 즐길 수 있습니다[3].
- 예상 조리 시간: 10분
- 난이도: 하
- 개인화 고려사항: 쌀밥 없이도 충분히 든든, 새우 등 알레르기 성분 없음

**3. 햄치즈계란토스트**
- 카테고리: 한식/분식
- 추천 이유: 한끼 대용으로 간편하고, 빵을 사용해 속을 덜 부담스럽게 할 수 있습니다. 토스트에 계란, 치즈, 햄(취향에 따라 생략·대체 가능)만 있으면 금방 만들 수 있어 바쁜 아침에 적합합니다[2].
- 예상 조리 시간: 7분
- 난이도: 하
- 개인화 고려사항: 쌀밥 생략, 속에 부담 적음, 새우 등 알레르기 성분 없음

**4. 과일 샐러드 & 견과류**
- 카테고리: 기타/건강식
- 추천 이유: 여러 가지 과일과 견과류를 곁들여 속이 편안하고 빠르게 준비할 수 있는 메뉴입니다. 비타민과 섬유질이 풍부해 아침 허기를 가볍게 달래줍니다[1].
- 예상 조리 시간: 5분
- 난이도: 하
- 개인화 고려사항: 소화에 좋은 식단, 알레르기 유발 식재료 배제

**5. 에다마메(풋콩) 스팀**
- 카테고리: 기타/건강식
- 추천 이유: 단백질과 섬유질이 많아 포만감을 주고 소화에 부담이 적습니다. 소금만 뿌려 간단히 즐길 수 있어 바쁜 아침에 적합합니다[1].
- 예상 조리 시간: 7분
- 난이도: 하
- 개인화 고려사항: 밥 대신 가벼운 식사, 새우 등 알레르기 성분 없음

### 전체 추천 요약

- 상황 분석: '아침 메뉴' 요청에 따라 속이 편안하고 간단히 준비할 수 있는 메뉴 위주로 선정했으며, 아침에 밥을 먹으면 배가 아프다는 건강상태를 고려해 쌀밥 없이도 든든하게 먹을 수 있는 메뉴로 구성했습니다.
- 추천 기준: 소화 부담이 적으면서도 포만감, 영양을 챙길 수 있는 메뉴. 조리과정이 간단한 아침 식사 위주로 선정.
- 개인화 고려사항: 쌀밥, 새우 등 속 불편을 유발할 수 있는 식재료 및 알레르기 재료는 모두 배제하였습니다.
- 추가 팁: 요거트 또는 샐러드에 견과류·씨앗을 추가하면 포만감과 영양이 더욱 올라가며, 계절과일이나 삶은 계란 등 취향에 따라 간단히 응용하실 수 있습니다.

※ 만약 위 메뉴들 중에서 '레시피'가 필요하시다면, '레시피'라는 단어를 포함해 다시 요청해 주세요!
2025-06-29 17:05:38.128 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 17:09:28.452 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:09:28.456 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:09:28.462 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:09:28.473 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:09:28.476 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 점심메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 17:09:28.476 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 점심메뉴 추천해줘
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 17:09:28.478 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 17:09:28.482 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:09:28.486 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 17:09:28.486 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:09:28.486 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 점심메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 3-5개의 메뉴를 추천해주세요:**

### 추천 메뉴 목록

**1. [메뉴명 1]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**2. [메뉴명 2]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

**3. [메뉴명 3]**
- 카테고리: [한식/중식/일식/양식/분식/기타]
- 추천 이유: [왜 이 메뉴를 추천하는지 설명 - 사용자 요청과의 연관성]
- 예상 조리 시간: [분]
- 난이도: [상/중/하]
- 개인화 고려사항: [알레르기, 건강상태 등 고려한 점]

### 전체 추천 요약
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴 목록과 추천 이유를 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 17:09:28.486 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:09:36.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:09:36.223 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 17:09:36.223 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

**1. 돌솥비빔밥**
- 카테고리: 한식
- 추천 이유: 다양한 채소와 고기로 균형 잡힌 영양을 챙길 수 있고, 기름기 적으며 든든하게 점심을 먹기에 적합합니다. 조리법이 간단하고 소화에도 부담이 적은 메뉴로 점심 추천에 잘 어울립니다[2][3].
- 예상 조리 시간: 15~20분
- 난이도: 하
- 개인화 고려사항: 새우를 비롯한 해산물이 필요 없고, 아침에 밥을 먹으면 배가 아프다는 점을 고려해 점심에는 충분히 소화가 잘 되는 채소 위주 메뉴를 추천합니다.

**2. 된장찌개 & 밥**
- 카테고리: 한식
- 추천 이유: 한식 선호도를 반영, 따뜻하고 속이 편안한 찌개로 점심시간을 든든하게 보낼 수 있습니다. 고기나 해산물 없이도 두부, 채소 등으로 간단하게 만들 수 있어 건강에 좋으며, 밥과 곁들이면 포만감도 높습니다[1][3].
- 예상 조리 시간: 20분
- 난이도: 하
- 개인화 고려사항: 새우 등 알레르기 유발 식재료를 제외하고, 소화에 부담이 적은 재료(두부, 호박, 버섯 등)를 사용하면 좋습니다.

**3. 샌드위치(서브웨이 스타일)**
- 카테고리: 기타/양식
- 추천 이유: 다양한 신선한 채소와 닭가슴살, 달걀 등 단백질을 추가해 간편하게 영양을 보충할 수 있습니다. 소화가 잘 되며, 칼로리 조절이 쉽고 점심식사로 인기가 높습니다[2].
- 예상 조리 시간: 10~15분
- 난이도: 하
- 개인화 고려사항: 해산물(특히 새우)은 빼고 닭, 달걀, 야채 위주로 선택하면 건강한 점심이 됩니다.

**4. 바지락 칼국수(새우 제외)**
- 카테고리: 한식
- 추천 이유: 국물 요리로 점심에 속을 편안하게 해주며, 부드럽고 든든한 한 끼를 제공합니다. 국물이나 면을 좋아하는 분께 추천드립니다. 새우 대신 바지락만 사용해서 알레르기 위험 없이 즐길 수 있습니다[4].
- 예상 조리 시간: 25분
- 난이도: 중
- 개인화 고려사항: 새우는 절대 넣지 않고, 바지락 등으로 감칠맛을 내며 소화에도 부담을 줄였습니다.

### 전체 추천 요약
- 상황 분석: 점심식사로 든든하면서도 건강에 신경 쓸 필요가 있는 상황입니다.
- 추천 기준: 기름지지 않고, 다양한 영양을 골고루 섭취할 수 있는 한식 및 간편식 위주의 메뉴 중심으로 선정했습니다. 점심시간에 부담 없이 빠르고 쉽게 먹을 수 있는 메뉴를 위주로 추천했습니다.
- 개인화 고려사항: 새우 알레르기를 철저히 배제했으며, 아침에 밥을 먹으면 배가 아프다는 점을 반영해 점심에는 소화에 부담이 적은 채소, 두부 중심의 한식 또는 신선한 양식 메뉴를 포함했습니다.
- 추가 팁: 한식 메뉴를 먹을 때는 국물이나 채소를 충분히 섭취해 소화를 돕고, 양식을 선택한다면 소스는 너무 자극적이지 않은 것으로 고르면 더욱 건강하게 식사할 수 있습니다.

**레시피가 필요하다면 '레시피'라는 단어를 포함해서 다시 요청해주세요!**
2025-06-29 17:09:36.224 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Parsed 1 menu recommendations
2025-06-29 17:19:27.245 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:19:27.255 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:19:27.264 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:19:27.267 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:19:27.311 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 피자, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 17:19:27.319 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:19:27.328 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:19:27.329 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:19:27.329 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 피자
2025-06-29 17:19:27.329 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 17:19:27.329 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 17:19:27.342 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:19:27.344 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 17:19:27.344 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:19:27.344 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 피자
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 17:19:27.344 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:19:47.127 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:19:47.127 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 17:19:47.127 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 기본 치즈 피자

2. 카테고리: 양식

3. 조리 시간: 40분

4. 조리 방법:
   1. 중력분(강력분), 인스턴트 드라이 이스트, 소금, 설탕을 볼에 넣고 섞어주세요.
   2. 따뜻한 물과 올리브 오일을 넣고 5~10분간 손으로 반죽해 주세요.
   3. 볼에 랩을 씌워 따뜻한 곳에서 1시간 정도 1차 발효를 합니다.
   4. 발효가 끝난 반죽을 원형으로 밀어줍니다.
   5. 반죽을 오븐팬이나 피자 스톤에 올립니다.
   6. 올리브 오일 소량을 표면에 바른 뒤, 토마토 소스를 고르게 펴 발라줍니다.
   7. 모짜렐라 치즈를 듬뿍 올립니다.
   8. 기호에 따라 햄, 야채 등 토핑을 추가합니다(새우 제외).
   9. 예열한 오븐(200℃, 390℉)에서 15~18분간 구워줍니다.
   10. 완성된 피자에 바질이나 파슬리 등 향신료를 뿌려 마무리합니다[2][3].

5. 필요한 재료와 양:
   - 중력분(강력분) 2컵 (약 290g)
   - 인스턴트 드라이 이스트 2티스푼 (약 6g)
   - 소금 1/3티스푼 (약 2g)
   - 설탕 1/2큰술 (약 6g)
   - 따뜻한 물 3/4컵 (약 180ml)
   - 올리브 오일 2큰술 (약 30ml), 추가로 1큰술(토핑용)
   - 토마토 소스 1/2컵 (약 120ml)
   - 모짜렐라 치즈 2컵 (약 250g)
   - 햄 50g(기호에 따라 선택)
   - 바질 또는 파슬리 약간(마무리용)

6. 난이도: 중

7. 이미지 URL: https://cdn.pixabay.com/photo/2017/12/09/08/18/pizza-3007395_1280.jpg

8. 요리 팁:
   - 도우는 반드시 따뜻한 곳에서 충분히 발효하세요. 그래야 쫄깃하고 풍부한 맛이 납니다.
   - 오븐을 최대한 높은 온도로 예열하고, 피자 바닥이 바삭해지도록 피자 팬 대신 피자 스톤이나 두꺼운 오븐 팬을 사용하면 더욱 맛있습니다[2][4].
   - 토핑은 기호에 따라 자유롭게 바꿔도 좋지만, 수분이 많은 재료(버섯, 파인애플 등)는 미리 수분을 제거하고 사용하면 도우가 눅눅해지는 걸 막을 수 있습니다.
   - 새우 알레르기가 있으므로 새우 토핑은 절대 사용하지 마세요.
2025-06-29 17:19:47.130 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://cdn.pixabay.com/photo/2017/12/09/08/18/pizza-3007395_1280.jpg
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://cdn.pixabay.com/photo/2017/12/09/08/18/pizza-3007395_1280.jpg
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 중력분(강력분) 2컵 (약 290g)
   - 인스턴트 드라이 이스트 2티스푼 (약 6g)
   - 소금 1/3티스푼 (약 2g)
   - 설탕 1/2큰술 (약 6g)
   - 따뜻한 물 3/4컵 (약 180ml)
   - 올리브 오일 2큰술 (약 30ml), 추가로 1큰술(토핑용)
   - 토마토 소스 1/2컵 (약 120ml)
   - 모짜렐라 치즈 2컵 (약 250g)
   - 햄 50g(기호에 따라 선택)
   - 바질 또는 파슬리 약간(마무리용)
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 10
2025-06-29 17:19:47.137 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 중력분(강력분) 2컵 (약 290g)
2025-06-29 17:19:47.138 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 290g
2025-06-29 17:19:47.138 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 290g
2025-06-29 17:19:47.140 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.143 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.143 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 인스턴트 드라이 이스트 2티스푼 (약 6g)
2025-06-29 17:19:47.143 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 이스트, Amount: 2티스푼
2025-06-29 17:19:47.143 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 이스트, Amount: 2티스푼
2025-06-29 17:19:47.144 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.145 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '이스트' not found in DB. Skipping.
2025-06-29 17:19:47.145 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/3티스푼 (약 2g)
2025-06-29 17:19:47.145 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 2g
2025-06-29 17:19:47.145 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 2g
2025-06-29 17:19:47.147 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.148 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.148 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1/2큰술 (약 6g)
2025-06-29 17:19:47.148 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 6g
2025-06-29 17:19:47.148 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 6g
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 따뜻한 물 3/4컵 (약 180ml)
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 180ml
2025-06-29 17:19:47.151 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 180ml
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브 오일 2큰술 (약 30ml), 추가로 1큰술(토핑용)
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 오일, Amount: 2큰술
2025-06-29 17:19:47.153 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 오일, Amount: 2큰술
2025-06-29 17:19:47.154 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.155 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '오일' not found in DB. Skipping.
2025-06-29 17:19:47.155 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 소스 1/2컵 (약 120ml)
2025-06-29 17:19:47.155 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 120ml
2025-06-29 17:19:47.155 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 120ml
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 모짜렐라 치즈 2컵 (약 250g)
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 2컵
2025-06-29 17:19:47.157 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 2컵
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '치즈' not found in DB. Skipping.
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄 50g(기호에 따라 선택)
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 햄, Amount: 50g
2025-06-29 17:19:47.159 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 햄, Amount: 50g
2025-06-29 17:19:47.160 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:19:47.160 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '햄' not found in DB. Skipping.
2025-06-29 17:19:47.160 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 바질 또는 파슬리 약간(마무리용)
2025-06-29 17:19:47.160 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 바질 또는 파슬리 약간(마무리용)
2025-06-29 17:19:47.161 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 중력분(강력분), 인스턴트 드라이 이스트, 소금, 설탕을 볼에 넣고 섞어주세요.
   2. 따뜻한 물과 올리브 오일을 넣고 5~10분간 손으로 반죽해 주세요.
   3. 볼에
2025-06-29 17:19:47.161 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 17:19:47.161 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 중력분(강력분) 2컵 (약 290g)
   - 인스턴트 드라이 이스트 2티스푼 (약 6g)
   - 소금 1/3티스푼 (약 2g)
   - 설탕 1/2큰술 (약 6g)
   - 따뜻한 물 3/4컵 (약 180ml)
   - 올리브 오일 2큰술 (약 30ml), 추가로 1큰술(토핑용)
   - 토마토 소스 1/2컵 (약 120ml)
   - 모짜렐라 치즈 2컵 (약 250g)
   - 햄 50g(기호에 따라 선택)
   - 바질 또는 파슬리 약간(마무리용)

조리 방법:
1. 중력분(강력분), 인스턴트 드라이 이스트, 소금, 설탕을 볼에 넣고 섞어주세요.
   2. 따뜻한 물과 올리브 오일을 넣고 5~10분간 손으로 반죽해 주세요.
   3. 볼에 랩을 씌워 따뜻한 곳에서 1시간 정도 1차 발효를 합니다.
   4. 발효가 끝난 반죽을 원형으로 밀어줍니다.
   5. 반죽을 오븐팬이나 피자 스톤에 올립니다.
   6. 올리브 오일 소량을 표면에 바른 뒤, 토마토 소스를 고르게 펴 발라줍니다.
   7. 모짜렐라 치즈를 듬뿍 올립니다.
   8. 기호에 따라 햄, 야채 등 토핑을 추가합니다(새우 제외).
   9. 예열한 오븐(200℃, 390℉)에서 15~18분간 구워줍니다.
   10. 완성된 피자에 바질이나 파슬리 등 향신료를 뿌려 마무리합니다[2][3].
2025-06-29 17:19:47.162 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 17:19:47.162 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 기본 치즈 피자
2025-06-29 17:19:47.180 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 17:19:47.183 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 98
2025-06-29 17:22:30.433 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:22:30.440 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:22:30.445 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:22:30.448 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:22:30.453 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내 냉장고 재료를 활용한 피자 레시피 제공해줘, useRefrigerator: true, isSpecificRecipe: true, retry: 0
2025-06-29 17:22:30.454 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내 냉장고 재료를 활용한 피자 레시피 제공해줘
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: true
2025-06-29 17:22:30.455 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 17:22:30.459 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:22:30.459 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 17:22:30.483 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:22:30.490 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 17:22:30.490 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 보유 재료
등록된 보유 재료가 없습니다. 일반적인 재료로 레시피를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내 냉장고 재료를 활용한 피자 레시피 제공해줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: 인터넷에서 해당 요리를 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
   **예시**: https://example.com/recipe-image.jpg
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 17:22:30.490 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 17:22:37.608 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 17:22:37.608 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 17:22:37.609 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 냉장고 재료 활용 밥피자

2. 카테고리: 분식

3. 조리 시간: 20분

4. 조리 방법:
   1. 볼에 밥(찬밥, 식은밥 가능)과 계란을 넣고 충분히 섞어준다.
   2. 후라이팬에 기름을 두르고 밥을 넓게 펴서 약불에 노릇하게 구워 피자 도우를 만든다.
   3. 도우 위에 토마토소스나 케첩을 골고루 바른다.
   4. 냉장고에 남은 자투리 채소(예: 양파, 피망, 양배추 등)와 원하는 토핑(햄, 베이컨, 옥수수 등)을 잘라서 올린다. *새우는 알레르기 때문에 제외*
   5. 피자치즈를 듬뿍 뿌린다.
   6. 뚜껑을 덮고 치즈가 녹을 때까지 중약불에서 5~7분간 익힌다.
   7. 완성된 밥피자를 먹기 좋게 잘라서 접시에 담아낸다.

5. 필요한 재료와 양:
   - 밥(찬밥/식은밥 등) 1공기
   - 계란 1~2개
   - 토마토소스 또는 케첩 2큰술
   - 양파 1/4개
   - 피망 1/4개
   - 옥수수 통조림 2큰술
   - 햄 또는 베이컨 2~3장
   - 피자치즈 1컵
   - 식용유 약간

6. 난이도: 하

7. 이미지 URL: https://mblogthumb-phinf.pstatic.net/MjAyMDA0MjBfMjg0/MDAxNTg3MjczNDkyMTk3.4r9QUMrFXQaIbgw3A_n4yD2eo4mD2jicdoRQlJbXJ10g.GvJjGb13p5vGLu57SU6vF5Eok7a2j1irtKHyAJ9t6jwg.JPEG.choi020115/IMG_2084.JPG?type=w800

8. 요리 팁:
   - 밥이 너무 퍼진 경우, 계란을 한 개 더 넣으면 도우가 잘 뭉쳐져요.
   - 토핑은 냉장고 사정에 맞게 자유롭게 변경하세요. 단, 새우는 알레르기 때문에 절대 넣지 마세요.
   - 치즈는 넉넉히 올릴수록 맛과 식감이 좋아져요.
   - 바닥이 잘 타지 않도록 약불 조리를 추천합니다.
2025-06-29 17:22:37.623 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 분식
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://mblogthumb-phinf.pstatic.net/MjAyMDA0MjBfMjg0/MDAxNTg3MjczNDkyMTk3.4r9QUMrFXQaIbgw3A_n4yD2eo4mD2jicdoRQlJbXJ10g.GvJjGb13p5vGLu57SU6vF5Eok7a2j1irtKHyAJ9t6jwg.JPEG.choi020115/IMG_2084.JPG?type=w800
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://mblogthumb-phinf.pstatic.net/MjAyMDA0MjBfMjg0/MDAxNTg3MjczNDkyMTk3.4r9QUMrFXQaIbgw3A_n4yD2eo4mD2jicdoRQlJbXJ10g.GvJjGb13p5vGLu57SU6vF5Eok7a2j1irtKHyAJ9t6jwg.JPEG.choi020115/IMG_2084.JPG?type=w800
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥(찬밥/식은밥 등) 1공기
   - 계란 1~2개
   - 토마토소스 또는 케첩 2큰술
   - 양파 1/4개
   - 피망 1/4개
   - 옥수수 통조림 2큰술
   - 햄 또는 베이컨 2~3장
   - 피자치즈 1컵
   - 식용유 약간
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥(찬밥/식은밥 등) 1공기
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 밥(찬밥/식은밥 등) 1공기
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1~2개
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 계란 1~2개
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토소스 또는 케첩 2큰술
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 케첩, Amount: 2큰술
2025-06-29 17:22:37.626 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 케첩, Amount: 2큰술
2025-06-29 17:22:37.628 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:22:37.630 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '케첩' not found in DB. Skipping.
2025-06-29 17:22:37.630 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-29 17:22:37.630 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-29 17:22:37.630 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피망 1/4개
2025-06-29 17:22:37.631 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 피망 1/4개
2025-06-29 17:22:37.631 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 옥수수 통조림 2큰술
2025-06-29 17:22:37.631 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통조림, Amount: 2큰술
2025-06-29 17:22:37.631 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통조림, Amount: 2큰술
2025-06-29 17:22:37.632 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '통조림' not found in DB. Skipping.
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄 또는 베이컨 2~3장
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄 또는 베이컨 2~3장
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피자치즈 1컵
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 피자치즈, Amount: 1컵
2025-06-29 17:22:37.633 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 피자치즈, Amount: 1컵
2025-06-29 17:22:37.634 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:22:37.635 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '피자치즈' not found in DB. Skipping.
2025-06-29 17:22:37.635 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 17:22:37.635 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 17:22:37.636 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 볼에 밥(찬밥, 식은밥 가능)과 계란을 넣고 충분히 섞어준다.
   2. 후라이팬에 기름을 두르고 밥을 넓게 펴서 약불에 노릇하게 구워 피자 도우를 만든다.
   3. 도우 
2025-06-29 17:22:37.636 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 17:22:37.636 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥(찬밥/식은밥 등) 1공기
   - 계란 1~2개
   - 토마토소스 또는 케첩 2큰술
   - 양파 1/4개
   - 피망 1/4개
   - 옥수수 통조림 2큰술
   - 햄 또는 베이컨 2~3장
   - 피자치즈 1컵
   - 식용유 약간

조리 방법:
1. 볼에 밥(찬밥, 식은밥 가능)과 계란을 넣고 충분히 섞어준다.
   2. 후라이팬에 기름을 두르고 밥을 넓게 펴서 약불에 노릇하게 구워 피자 도우를 만든다.
   3. 도우 위에 토마토소스나 케첩을 골고루 바른다.
   4. 냉장고에 남은 자투리 채소(예: 양파, 피망, 양배추 등)와 원하는 토핑(햄, 베이컨, 옥수수 등)을 잘라서 올린다. *새우는 알레르기 때문에 제외*
   5. 피자치즈를 듬뿍 뿌린다.
   6. 뚜껑을 덮고 치즈가 녹을 때까지 중약불에서 5~7분간 익힌다.
   7. 완성된 밥피자를 먹기 좋게 잘라서 접시에 담아낸다.
2025-06-29 17:22:37.637 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 17:22:37.639 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 냉장고 재료 활용 밥피자
2025-06-29 17:22:37.642 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 17:22:37.645 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 99
2025-06-29 17:24:52.415 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:24:52.419 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:24:52.422 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:24:52.423 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:24:52.439 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:24:52.441 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:24:52.443 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:24:52.445 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:26:13.562 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:26:13.566 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:26:13.572 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:26:13.574 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:28:17.191 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:28:17.196 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 17:28:17.199 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 17:28:23.670 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 17:28:23.701 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 20512 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 17:28:23.701 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 17:28:23.701 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 17:28:23.748 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 17:28:23.749 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 17:28:24.575 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:28:24.576 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 17:28:24.615 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.617 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.618 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.619 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.620 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.620 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.621 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.622 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:28:24.622 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 JDBC repository interfaces.
2025-06-29 17:28:24.636 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:28:24.637 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 17:28:24.736 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 96 ms. Found 8 JPA repository interfaces.
2025-06-29 17:28:24.766 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:28:24.767 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:28:24.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-29 17:28:25.368 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 17:28:25.377 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 17:28:25.379 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 17:28:25.379 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 17:28:25.416 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 17:28:25.418 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1667 ms
2025-06-29 17:28:25.462 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 17:28:25.593 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@67335650
2025-06-29 17:28:25.596 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 17:28:25.611 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 17:28:25.726 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 17:28:25.758 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 17:28:25.779 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 17:28:25.895 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 17:28:25.948 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 17:28:25.949 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 17:28:26.754 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 17:28:26.867 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:28:27.234 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 17:28:27.445 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 17:28:27.446 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 17:28:28.348 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 17:28:28.419 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 17:28:28.528 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6cd2838b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@44f40829, org.springframework.security.web.context.SecurityContextHolderFilter@517c30bb, org.springframework.security.web.header.HeaderWriterFilter@2beaf491, org.springframework.web.filter.CorsFilter@23303427, org.springframework.security.web.authentication.logout.LogoutFilter@7480d829, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@21e98968, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@120fb6e2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@72e57a87, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@65ffa82f, org.springframework.security.web.session.SessionManagementFilter@3e4f6b1c, org.springframework.security.web.access.ExceptionTranslationFilter@bf4e87a, org.springframework.security.web.access.intercept.AuthorizationFilter@504f1820]
2025-06-29 17:28:28.824 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 17:28:28.841 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 17:28:28.848 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 17:28:28.860 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.498 seconds (process running for 6.117)
2025-06-29 17:31:23.012 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 17:31:23.012 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 17:31:23.015 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-29 17:31:23.068 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:31:23.095 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:31:23.112 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:31:23.117 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:31:23.145 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:31:23.146 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:31:23.151 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:31:23.153 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:07.860 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:34:07.862 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:34:07.867 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:07.869 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:07.884 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:34:07.885 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:34:07.888 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:07.893 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:15.315 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:34:15.318 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 17:34:15.325 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 17:34:19.851 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 17:34:19.881 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 20922 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 17:34:19.882 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 17:34:19.882 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 17:34:19.938 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 17:34:19.938 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 17:34:20.829 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:34:20.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 17:34:20.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.875 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.876 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.876 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:34:20.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46 ms. Found 0 JDBC repository interfaces.
2025-06-29 17:34:20.893 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:34:20.894 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 17:34:20.998 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 8 JPA repository interfaces.
2025-06-29 17:34:21.029 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:34:21.030 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:34:21.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 17:34:21.681 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 17:34:21.689 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 17:34:21.691 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 17:34:21.691 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 17:34:21.729 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 17:34:21.731 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1791 ms
2025-06-29 17:34:21.775 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 17:34:21.909 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@9581e1c
2025-06-29 17:34:21.913 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 17:34:21.928 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 17:34:22.042 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 17:34:22.068 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 17:34:22.086 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 17:34:22.199 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 17:34:22.246 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 17:34:22.247 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 17:34:23.236 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 17:34:23.349 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:34:23.728 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 17:34:23.966 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 17:34:23.967 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 17:34:24.906 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 17:34:24.984 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 17:34:25.099 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@39d1076d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6ea5e97c, org.springframework.security.web.context.SecurityContextHolderFilter@7b6d2433, org.springframework.security.web.header.HeaderWriterFilter@4c04475e, org.springframework.web.filter.CorsFilter@6171a836, org.springframework.security.web.authentication.logout.LogoutFilter@28012bb6, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@390cfbe4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6394beb8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18aec02, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5e8b86a8, org.springframework.security.web.session.SessionManagementFilter@1fe5307e, org.springframework.security.web.access.ExceptionTranslationFilter@42ac6588, org.springframework.security.web.access.intercept.AuthorizationFilter@55b04261]
2025-06-29 17:34:25.404 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 17:34:25.429 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 17:34:25.435 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 17:34:25.445 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.922 seconds (process running for 6.536)
2025-06-29 17:34:26.970 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 17:34:26.970 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 17:34:26.973 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-29 17:34:27.033 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:34:27.059 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:34:27.087 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:27.092 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:34:27.133 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:34:27.179 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name is null
2025-06-29 17:34:27.194 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 17:34:27.206 [http-nio-8080-exec-1] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1048, SQLState: 23000
2025-06-29 17:34:27.206 [http-nio-8080-exec-1] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Column 'name' cannot be null
2025-06-29 17:39:28.218 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:39:28.225 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.237 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.239 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.251 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.276 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:39:28.280 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.285 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.295 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.299 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.307 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:39:28.309 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.313 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.316 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.322 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.339 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:39:28.349 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:39:28.354 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.356 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:39:28.361 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:49:35.888 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m13s826ms).
2025-06-29 17:53:28.484 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:28.487 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:28.490 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:28.493 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:28.500 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:28.510 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:28.512 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:28.514 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:28.515 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:28.518 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:31.587 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:31.590 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:31.593 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:31.596 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:31.604 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:31.614 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:31.616 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:31.619 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:31.623 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:31.630 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:41.120 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:53:41.122 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:41.124 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:41.127 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:53:41.131 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:53:41.149 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name is null
2025-06-29 17:53:41.154 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 17:53:41.156 [http-nio-8080-exec-10] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1048, SQLState: 23000
2025-06-29 17:53:41.156 [http-nio-8080-exec-10] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Column 'name' cannot be null
2025-06-29 17:53:41.183 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4m5s297ms).
2025-06-29 17:55:41.719 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:55:41.722 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 17:55:41.730 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 17:55:46.833 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 17:55:46.860 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 21447 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 17:55:46.861 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 17:55:46.862 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 17:55:46.917 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 17:55:46.917 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 17:55:47.892 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:55:47.895 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 17:55:48.036 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.040 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.041 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.042 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.044 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.045 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:55:48.046 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 0 JDBC repository interfaces.
2025-06-29 17:55:48.085 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:55:48.086 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 17:55:48.175 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 8 JPA repository interfaces.
2025-06-29 17:55:48.204 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:55:48.205 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 17:55:48.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.216 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.217 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:55:48.218 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-29 17:55:49.049 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 17:55:49.056 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 17:55:49.058 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 17:55:49.058 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 17:55:49.099 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 17:55:49.101 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2182 ms
2025-06-29 17:55:49.137 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 17:55:49.279 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4742ef23
2025-06-29 17:55:49.282 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 17:55:49.298 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 17:55:49.417 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 17:55:49.443 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 17:55:49.461 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 17:55:49.592 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 17:55:49.639 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 17:55:49.640 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 17:55:50.467 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 17:55:50.574 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:55:50.980 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 17:55:51.216 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 17:55:51.217 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 17:55:52.149 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 17:55:52.235 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 17:55:52.376 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@56d6ed67, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@605012c8, org.springframework.security.web.context.SecurityContextHolderFilter@33f25560, org.springframework.security.web.header.HeaderWriterFilter@66b10e96, org.springframework.web.filter.CorsFilter@4e87b097, org.springframework.security.web.authentication.logout.LogoutFilter@13f3fc79, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@75de20a5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@74bf8b4c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@64ad01b9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4e082c11, org.springframework.security.web.session.SessionManagementFilter@38e6d3b7, org.springframework.security.web.access.ExceptionTranslationFilter@7ed2ee4, org.springframework.security.web.access.intercept.AuthorizationFilter@7899c530]
2025-06-29 17:55:52.755 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 17:55:52.774 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 17:55:52.780 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 17:55:52.789 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.284 seconds (process running for 7.067)
2025-06-29 17:56:06.680 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 17:56:06.680 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 17:56:06.682 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-29 17:56:06.745 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:56:06.775 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:56:06.790 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:56:06.795 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:56:06.862 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:56:06.915 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:56:06.931 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 17:56:06.947 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 17:56:06.961 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (user_id, weight_in_grams) 
    values
        (?, ?)
2025-06-29 17:56:06.976 [http-nio-8080-exec-1] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1364, SQLState: HY000
2025-06-29 17:56:06.976 [http-nio-8080-exec-1] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Field 'ingredient_id' doesn't have a default value
2025-06-29 17:57:54.252 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:57:54.256 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 17:57:54.265 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 17:57:59.807 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 17:57:59.835 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 21685 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 17:57:59.835 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 17:57:59.836 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 17:57:59.893 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 17:57:59.894 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 17:58:00.777 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:58:00.779 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 17:58:00.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.835 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.839 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 17:58:00.840 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 58 ms. Found 0 JDBC repository interfaces.
2025-06-29 17:58:00.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:58:00.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 17:58:00.950 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 87 ms. Found 8 JPA repository interfaces.
2025-06-29 17:58:00.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 17:58:00.980 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 17:58:00.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 17:58:00.992 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 0 Redis repository interfaces.
2025-06-29 17:58:01.652 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 17:58:01.658 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 17:58:01.661 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 17:58:01.661 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 17:58:01.697 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 17:58:01.699 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1803 ms
2025-06-29 17:58:01.738 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 17:58:01.887 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1a7367b9
2025-06-29 17:58:01.890 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 17:58:01.907 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 17:58:02.034 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 17:58:02.063 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 17:58:02.080 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 17:58:02.190 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 17:58:02.233 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 17:58:02.234 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 17:58:03.096 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 17:58:03.203 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 17:58:03.588 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 17:58:03.843 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 17:58:03.844 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 17:58:04.595 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 17:58:04.681 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 17:58:04.819 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4770fe8b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1aa6d6c1, org.springframework.security.web.context.SecurityContextHolderFilter@2abb2248, org.springframework.security.web.header.HeaderWriterFilter@15e8df45, org.springframework.web.filter.CorsFilter@2809fed, org.springframework.security.web.authentication.logout.LogoutFilter@71e9c161, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@5fa21c9c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@46e1d0ef, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3e3b46b7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1f0d9965, org.springframework.security.web.session.SessionManagementFilter@13f3fc79, org.springframework.security.web.access.ExceptionTranslationFilter@34308ee6, org.springframework.security.web.access.intercept.AuthorizationFilter@4793431f]
2025-06-29 17:58:05.199 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 17:58:05.219 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 17:58:05.224 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 17:58:05.235 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.761 seconds (process running for 6.386)
2025-06-29 17:58:17.674 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 17:58:17.674 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 17:58:17.676 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 17:58:17.734 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:58:17.763 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:58:17.780 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:58:17.784 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:58:17.843 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:58:17.891 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:58:17.904 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 17:58:17.916 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 17:58:17.920 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 17:58:17.934 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?)
2025-06-29 17:58:29.811 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 17:58:29.814 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:58:29.820 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 17:58:29.855 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 17:58:29.869 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 17:58:29.875 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 17:58:29.878 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 17:58:29.880 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 17:58:29.883 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?)
2025-06-29 18:01:35.696 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:01:35.700 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:01:35.706 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:08:42.671 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:08:42.704 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 23046 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:08:42.704 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:08:42.705 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:08:42.760 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:08:42.761 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:08:43.633 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:08:43.634 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:08:43.683 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.684 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.686 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.687 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.688 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.688 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.689 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.690 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:08:43.691 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 54 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:08:43.708 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:08:43.708 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:08:43.801 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 86 ms. Found 8 JPA repository interfaces.
2025-06-29 18:08:43.827 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:08:43.828 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:08:43.838 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 18:08:44.572 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:08:44.578 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:08:44.580 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:08:44.580 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:08:44.617 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:08:44.619 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1856 ms
2025-06-29 18:08:44.648 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:08:44.876 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@233d07c2
2025-06-29 18:08:44.879 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:08:44.896 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:08:45.022 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:08:45.048 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:08:45.063 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:08:45.262 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:08:45.315 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:08:45.315 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:08:46.192 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:08:46.335 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:08:46.737 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:08:46.984 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:08:46.985 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:08:47.927 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:08:48.015 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:08:48.169 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1a539a4b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@54009368, org.springframework.security.web.context.SecurityContextHolderFilter@2b2271ac, org.springframework.security.web.header.HeaderWriterFilter@2f544d62, org.springframework.web.filter.CorsFilter@4d4ab590, org.springframework.security.web.authentication.logout.LogoutFilter@b337aa5, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@a75d5dc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6a2f70a9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@47ac667, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3f6847ef, org.springframework.security.web.session.SessionManagementFilter@daa74ab, org.springframework.security.web.access.ExceptionTranslationFilter@4e87b097, org.springframework.security.web.access.intercept.AuthorizationFilter@7da6776e]
2025-06-29 18:08:48.563 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:08:48.582 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:08:48.588 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:08:48.597 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.222 seconds (process running for 6.796)
2025-06-29 18:09:05.299 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:09:05.300 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:09:05.301 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 18:09:05.357 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:09:05.382 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:09:05.397 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:09:05.402 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:09:05.460 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:09:05.505 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:09:05.518 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:09:05.531 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:09:34.281 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:09:34.308 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 23300 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:09:34.308 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:09:34.308 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:09:34.370 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:09:34.370 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:09:35.288 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:35.289 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:09:35.342 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.345 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.346 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.347 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.348 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.348 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.350 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.350 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:35.351 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 59 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:09:35.369 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:35.370 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:09:35.466 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 90 ms. Found 8 JPA repository interfaces.
2025-06-29 18:09:35.494 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:35.495 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:09:35.513 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.513 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:35.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-29 18:09:36.288 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:09:36.295 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:09:36.297 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:09:36.297 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:09:36.334 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:09:36.337 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1964 ms
2025-06-29 18:09:36.374 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:09:36.526 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@29b8a3b7
2025-06-29 18:09:36.530 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:09:36.546 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:09:36.677 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:09:36.705 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:09:36.724 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:09:36.846 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:09:36.902 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:09:36.903 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:09:37.786 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:09:37.898 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:09:38.305 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:09:38.563 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:09:38.564 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:09:39.558 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:09:39.681 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:09:39.847 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@594b68eb, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@493dc735, org.springframework.security.web.context.SecurityContextHolderFilter@5349fc92, org.springframework.security.web.header.HeaderWriterFilter@4de18a5a, org.springframework.web.filter.CorsFilter@24e29c47, org.springframework.security.web.authentication.logout.LogoutFilter@4c60e61e, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@5eb091c3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@203b7694, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6d65e19f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@146a950e, org.springframework.security.web.session.SessionManagementFilter@671c3891, org.springframework.security.web.access.ExceptionTranslationFilter@46e1d0ef, org.springframework.security.web.access.intercept.AuthorizationFilter@b337aa5]
2025-06-29 18:09:40.243 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2025-06-29 18:09:40.261 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:09:40.273 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-29 18:09:40.279 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:09:40.281 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:09:40.286 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:09:40.301 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-29 18:09:40.312 [restartedMain] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-29 18:09:49.026 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:09:49.029 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:09:49.036 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:09:57.856 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:09:57.882 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 23401 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:09:57.882 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:09:57.883 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:09:57.933 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:09:57.933 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:09:58.722 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:58.723 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:09:58.759 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.761 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.762 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.762 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.763 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.764 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.765 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.765 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:09:58.766 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:09:58.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:58.778 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:09:58.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 90 ms. Found 8 JPA repository interfaces.
2025-06-29 18:09:58.903 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:09:58.904 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:09:58.912 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.913 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.914 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:09:58.914 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 18:09:59.500 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:09:59.506 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:09:59.508 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:09:59.509 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:09:59.542 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:09:59.543 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1609 ms
2025-06-29 18:09:59.576 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:09:59.705 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4bb6e52d
2025-06-29 18:09:59.708 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:09:59.723 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:09:59.833 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:09:59.856 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:09:59.873 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:09:59.972 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:10:00.021 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:10:00.021 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:10:00.790 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:10:00.887 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:10:01.255 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:10:01.489 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:10:01.490 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:10:02.180 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:10:02.256 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:10:02.390 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7da6776e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@47ebd717, org.springframework.security.web.context.SecurityContextHolderFilter@daa74ab, org.springframework.security.web.header.HeaderWriterFilter@605012c8, org.springframework.web.filter.CorsFilter@2ccbd36d, org.springframework.security.web.authentication.logout.LogoutFilter@6323637d, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@2dcaafe2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@147f588b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2b2271ac, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a539a4b, org.springframework.security.web.session.SessionManagementFilter@6328c62a, org.springframework.security.web.access.ExceptionTranslationFilter@4b596adc, org.springframework.security.web.access.intercept.AuthorizationFilter@1f77015]
2025-06-29 18:10:02.741 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:10:02.759 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:10:02.764 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:10:02.775 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.206 seconds (process running for 5.815)
2025-06-29 18:10:14.428 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:10:14.428 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:10:14.430 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-29 18:10:14.493 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:10:14.520 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:10:14.536 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:10:14.541 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:10:14.605 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:10:14.655 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:10:14.682 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:10:14.698 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:10:14.703 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:10:14.715 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:11:22.179 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:11:22.206 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 23651 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:11:22.207 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:11:22.208 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:11:22.262 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:11:22.262 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:11:23.223 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:11:23.225 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:11:23.269 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.272 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.273 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.273 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.274 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.275 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.276 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.277 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:11:23.277 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 49 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:11:23.292 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:11:23.293 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:11:23.382 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 8 JPA repository interfaces.
2025-06-29 18:11:23.410 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:11:23.410 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.420 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.421 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.421 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.421 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:11:23.421 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 18:11:24.076 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:11:24.082 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:11:24.084 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:11:24.084 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:11:24.121 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:11:24.123 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1858 ms
2025-06-29 18:11:24.155 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:11:24.294 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@14c98662
2025-06-29 18:11:24.298 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:11:24.315 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:11:24.442 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:11:24.469 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:11:24.485 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:11:24.593 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:11:24.650 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:11:24.651 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:11:25.535 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:11:25.637 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:11:26.083 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:11:26.452 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:11:26.453 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:11:27.774 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:11:27.863 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:11:28.011 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1a1532ce, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@11353a2d, org.springframework.security.web.context.SecurityContextHolderFilter@3c5f9513, org.springframework.security.web.header.HeaderWriterFilter@4965c55d, org.springframework.web.filter.CorsFilter@70a3e1c, org.springframework.security.web.authentication.logout.LogoutFilter@1d948c59, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@7c2e2c01, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4852542e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@9d35506, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@37d6c6, org.springframework.security.web.session.SessionManagementFilter@5f775a8, org.springframework.security.web.access.ExceptionTranslationFilter@1f7c7d0c, org.springframework.security.web.access.intercept.AuthorizationFilter@76efb891]
2025-06-29 18:11:28.581 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:11:28.601 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:11:28.607 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:11:28.618 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.759 seconds (process running for 7.476)
2025-06-29 18:12:06.008 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:12:06.008 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:12:06.009 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 18:12:06.064 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:12:06.097 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:12:06.111 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:12:06.117 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:12:06.187 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:12:06.298 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:12:06.345 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:12:06.366 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:12:06.372 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:12:06.392 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:13:31.735 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:13:31.743 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:13:31.750 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:13:31.755 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:13:31.766 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:13:31.773 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:13:31.776 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:13:31.779 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:13:31.782 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:13:31.786 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:14:13.034 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:14:13.037 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:14:13.045 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:14:19.759 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:14:19.789 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 24061 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:14:19.790 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:14:19.791 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:14:19.847 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:14:19.847 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:14:20.674 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:14:20.675 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:14:20.713 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.716 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.716 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.717 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.718 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.719 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.720 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:14:20.721 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:14:20.733 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:14:20.733 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:14:20.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 8 JPA repository interfaces.
2025-06-29 18:14:20.862 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:14:20.863 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:14:20.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 18:14:21.474 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:14:21.481 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:14:21.483 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:14:21.484 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:14:21.519 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:14:21.520 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1672 ms
2025-06-29 18:14:21.553 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:14:21.840 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5ffd0992
2025-06-29 18:14:21.843 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:14:21.864 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:14:22.017 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:14:22.044 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:14:22.062 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:14:22.177 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:14:22.227 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:14:22.227 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:14:23.054 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:14:23.152 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:14:23.541 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:14:23.770 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:14:23.771 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:14:24.680 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:14:24.775 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:14:24.915 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@47ebd717, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ccbd36d, org.springframework.security.web.context.SecurityContextHolderFilter@2896eaa2, org.springframework.security.web.header.HeaderWriterFilter@4e87b097, org.springframework.web.filter.CorsFilter@1a539a4b, org.springframework.security.web.authentication.logout.LogoutFilter@5954e9d2, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@98fd313, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2b2271ac, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@75f3474f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@54009368, org.springframework.security.web.session.SessionManagementFilter@2183bac9, org.springframework.security.web.access.ExceptionTranslationFilter@56d6ed67, org.springframework.security.web.access.intercept.AuthorizationFilter@417547c0]
2025-06-29 18:14:25.294 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:14:25.315 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:14:25.321 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:14:25.333 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.899 seconds (process running for 6.603)
2025-06-29 18:14:31.032 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:14:31.032 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:14:31.034 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-29 18:14:31.093 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:14:31.120 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:14:31.135 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:14:31.140 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:14:31.196 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:14:31.275 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:14:31.288 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:14:31.310 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:14:31.317 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:14:31.338 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:14:44.660 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:14:44.662 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:14:44.666 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:14:44.671 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:14:44.680 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:14:44.685 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:14:44.687 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:14:44.692 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:14:44.695 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:14:44.699 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (ingredient_name, weight_in_grams, ingredient_id, user_id) 
    values
        (?, ?, ?, ?)
2025-06-29 18:21:25.116 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:21:25.119 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:21:25.124 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:21:25.127 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:21:25.140 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:21:25.156 [http-nio-8080-exec-3] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:21:25.156 [http-nio-8080-exec-3] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:21:25.165 [http-nio-8080-exec-3] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:21:25.183 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:21:25.185 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:21:25.187 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:21:25.193 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:21:25.199 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:21:25.201 [http-nio-8080-exec-4] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:21:25.202 [http-nio-8080-exec-4] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:21:25.203 [http-nio-8080-exec-4] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:22:58.279 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:22:58.284 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:22:58.289 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:22:58.293 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:22:58.297 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:22:58.298 [http-nio-8080-exec-5] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:22:58.298 [http-nio-8080-exec-5] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:22:58.299 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:23:06.992 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:23:06.996 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:23:07.003 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:23:07.008 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:23:07.015 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:23:07.017 [http-nio-8080-exec-6] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:23:07.018 [http-nio-8080-exec-6] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:23:07.018 [http-nio-8080-exec-6] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:23:07.031 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:23:07.034 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:23:07.038 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:23:07.040 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:23:07.044 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:23:07.045 [http-nio-8080-exec-7] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:23:07.045 [http-nio-8080-exec-7] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:23:07.045 [http-nio-8080-exec-7] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:27:08.599 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:27:08.631 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:27:08.634 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:27:08.640 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:27:08.649 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:27:08.650 [http-nio-8080-exec-8] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:27:08.650 [http-nio-8080-exec-8] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:27:08.651 [http-nio-8080-exec-8] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:27:08.665 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:27:08.666 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:27:08.668 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:27:08.670 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:27:08.676 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.ingredient_name,
        ui1_0.weight_in_grams 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:27:08.677 [http-nio-8080-exec-9] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1054, SQLState: 42S22
2025-06-29 18:27:08.677 [http-nio-8080-exec-9] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unknown column 'ui1_0.weight_in_grams' in 'field list'
2025-06-29 18:27:08.678 [http-nio-8080-exec-9] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [/* <criteria> */ select ui1_0.ingredient_id,ui1_0.user_id,ui1_0.ingredient_name,ui1_0.weight_in_grams from user_ingredient ui1_0 join user u1_0 on u1_0.user_id=ui1_0.user_id where u1_0.user_id=?] [Unknown column 'ui1_0.weight_in_grams' in 'field list'] [n/a]; SQL [n/a]] with root cause
java.sql.SQLSyntaxErrorException: Unknown column 'ui1_0.weight_in_grams' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:912)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:968)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:246)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:167)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advanceNext(JdbcValuesResultSetImpl.java:218)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:98)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:19)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:66)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:202)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:33)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:209)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:83)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:76)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:65)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:137)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy149.findByUser_UserId(Unknown Source)
	at ac.su.kdt.prompttest.controller.IngredientController.getUserIngredients(IngredientController.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.controller.IngredientController$$SpringCGLIB$$0.getUserIngredients(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 18:28:10.147 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:28:10.150 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:28:10.157 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:29:37.582 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:29:37.609 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 25251 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:29:37.610 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:29:37.610 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:29:37.662 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:29:37.662 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:29:38.549 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:29:38.550 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:29:38.599 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.601 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.602 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.603 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.604 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.605 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.606 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.607 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:29:38.608 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 55 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:29:38.626 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:29:38.627 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:29:38.714 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 83 ms. Found 8 JPA repository interfaces.
2025-06-29 18:29:38.741 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:29:38.742 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:29:38.754 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:29:38.755 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-29 18:29:39.384 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:29:39.391 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:29:39.394 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:29:39.394 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:29:39.447 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:29:39.449 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1785 ms
2025-06-29 18:29:39.479 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:29:39.625 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@63533a29
2025-06-29 18:29:39.628 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:29:39.644 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:29:39.761 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:29:39.786 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:29:39.803 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:29:39.914 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:29:39.974 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:29:39.975 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:29:40.831 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:29:40.994 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:29:41.577 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:29:41.841 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:29:41.842 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:29:42.754 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:29:42.837 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:29:42.991 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@47ebd717, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ccbd36d, org.springframework.security.web.context.SecurityContextHolderFilter@2896eaa2, org.springframework.security.web.header.HeaderWriterFilter@4e87b097, org.springframework.web.filter.CorsFilter@1a539a4b, org.springframework.security.web.authentication.logout.LogoutFilter@5954e9d2, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@24bd28b2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2b2271ac, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@75f3474f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@54009368, org.springframework.security.web.session.SessionManagementFilter@2183bac9, org.springframework.security.web.access.ExceptionTranslationFilter@56d6ed67, org.springframework.security.web.access.intercept.AuthorizationFilter@417547c0]
2025-06-29 18:29:43.381 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:29:43.400 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:29:43.411 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:29:43.424 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.165 seconds (process running for 6.773)
2025-06-29 18:30:32.685 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:30:32.688 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:30:32.695 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:30:36.819 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:30:36.847 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 25373 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:30:36.847 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:30:36.848 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:30:36.902 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:30:36.902 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:30:37.785 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:30:37.787 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:30:37.826 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.828 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.829 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.830 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.831 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:30:37.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:30:37.847 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:30:37.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:30:37.953 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 101 ms. Found 8 JPA repository interfaces.
2025-06-29 18:30:37.988 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:30:37.988 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.001 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.002 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.002 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.002 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:30:38.002 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-29 18:30:38.812 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:30:38.820 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:30:38.823 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:30:38.823 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:30:38.870 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:30:38.871 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1968 ms
2025-06-29 18:30:38.912 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:30:39.064 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@402445d1
2025-06-29 18:30:39.067 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:30:39.083 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:30:39.214 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:30:39.239 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:30:39.255 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:30:39.369 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:30:39.421 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:30:39.423 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:30:40.322 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:30:40.426 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:30:40.854 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:30:41.101 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:30:41.102 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:30:42.132 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:30:42.227 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:30:42.379 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@48671590, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@21907dd8, org.springframework.security.web.context.SecurityContextHolderFilter@2f544d62, org.springframework.security.web.header.HeaderWriterFilter@14ef3fdf, org.springframework.web.filter.CorsFilter@6323637d, org.springframework.security.web.authentication.logout.LogoutFilter@1aa6d6c1, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@4df51926, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3c82ce63, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@33e51546, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5954e9d2, org.springframework.security.web.session.SessionManagementFilter@605012c8, org.springframework.security.web.access.ExceptionTranslationFilter@58bbdc1b, org.springframework.security.web.access.intercept.AuthorizationFilter@70a327bb]
2025-06-29 18:30:42.776 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:30:42.794 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:30:42.800 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:30:42.810 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.294 seconds (process running for 6.895)
2025-06-29 18:30:50.554 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:30:50.554 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:30:50.557 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-29 18:30:51.206 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 18:30:51.220 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 18:30:51.734 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:51.743 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.746 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.751 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.759 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.764 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:30:51.811 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:51.813 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.815 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.818 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.820 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.824 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:30:51.841 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:51.857 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.868 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.881 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.895 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.909 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:30:51.967 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:51.969 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:51.972 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:51.983 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:52.015 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:52.043 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:52.045 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:52.049 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:52.051 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:52.060 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:58.763 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:58.766 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:58.771 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:58.774 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:58.780 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:58.801 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:30:58.802 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:30:58.805 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:58.807 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:30:58.811 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:32:06.368 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:32:06.373 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:32:06.382 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:32:06.387 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:32:06.404 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:32:06.409 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:32:06.419 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Ingredient */insert 
    into
        ingredient (calories, creator_user_id, name, nutrition_info, required_amount) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:32:06.430 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    where
        ui1_0.user_id=? 
        and ui1_0.ingredient_id=?
2025-06-29 18:32:06.433 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:32:06.455 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.UserIngredient */insert 
    into
        user_ingredient (amount, ingredient_name, unit, ingredient_id, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-29 18:35:46.258 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:35:46.277 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.288 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.292 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.316 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.361 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:35:46.363 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.367 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.370 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.375 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.388 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:35:46.390 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.392 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.394 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.401 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.413 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:35:46.417 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:35:46.421 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.425 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:35:46.427 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:36:40.617 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:36:40.620 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:36:40.623 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:36:40.626 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:36:40.634 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:36:40.653 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:36:40.656 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:36:40.658 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:36:40.660 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:36:40.665 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.869 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:10.885 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.889 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.892 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.899 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.925 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:10.927 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.929 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.932 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.935 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.945 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:10.947 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.951 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.953 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.955 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.967 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:10.969 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:10.972 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.974 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:10.978 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:16.356 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:16.383 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:16.387 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:16.390 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:16.394 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:16.408 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:16.410 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:16.413 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:16.418 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:16.426 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.086 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:53.086 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:53.086 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:53.089 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:40:53.089 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.089 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.089 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.092 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.093 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.093 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.095 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.096 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.099 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.100 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.102 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.102 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:40:53.111 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.115 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.121 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:40:53.125 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.386 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:15.391 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.394 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.396 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.407 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.421 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:15.424 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.426 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.428 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.433 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.454 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:15.455 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.458 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.459 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.461 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.471 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:15.472 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:15.474 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.475 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:15.481 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:21.787 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:21.790 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:21.792 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:21.797 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:21.801 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.101 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:32.103 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.107 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.110 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.122 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.136 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:32.141 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.143 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.155 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.165 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.682 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:32.684 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.691 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.700 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.710 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.749 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:32.752 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:32.756 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.811 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:32.892 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:33.123 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:33.125 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:33.128 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:33.130 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:33.133 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:33.148 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:42:33.149 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:42:33.151 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:33.152 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:42:33.155 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.598 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:46.598 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:46.598 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:46.598 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:46.609 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.609 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.609 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.614 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.628 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.628 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.627 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.628 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.633 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.634 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.636 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.636 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:46.658 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.658 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.658 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:46.659 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:53.844 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:53.848 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:53.870 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:53.872 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:53.896 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    where
        (
            ui1_0.ingredient_id, ui1_0.user_id
        ) in ((?, ?))
2025-06-29 18:45:53.915 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.UserIngredient */update user_ingredient 
    set
        amount=?,
        ingredient_name=?,
        unit=? 
    where
        ingredient_id=? 
        and user_id=?
2025-06-29 18:45:53.928 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:45:53.932 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:45:53.935 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:53.936 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:45:53.938 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:07.155 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:46:07.157 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:07.159 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:07.161 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:07.165 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:16.435 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:46:16.437 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:16.439 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:16.440 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:16.452 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내 재료를 활용한 레시피 제공해줘, useRefrigerator: true, isSpecificRecipe: true, retry: 0
2025-06-29 18:46:16.452 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:16.453 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 18:46:16.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 18:46:16.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내 재료를 활용한 레시피 제공해줘
2025-06-29 18:46:16.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: true
2025-06-29 18:46:16.454 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 18:46:16.457 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:46:16.458 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 18:46:16.460 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:16.462 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.ingredient_id=?
2025-06-29 18:46:16.464 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 18:46:16.464 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 보유 재료 우선 추천 (1순위)
- 딸기 
**중요**: 위 재료 중 1개 이상을 반드시 포함한 레시피를 우선적으로 추천해주세요.

## 사용자 요청 (2순위)
요청: 내 재료를 활용한 레시피 제공해줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 18:46:16.464 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 18:46:22.622 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 18:46:22.622 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 18:46:22.622 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 딸기 오트밀 죽

2. 카테고리: 한식

3. 조리 시간: 10분

4. 조리 방법:
   1. 오트밀 1컵과 우유 또는 두유 1컵을 냄비에 넣고 중불에서 천천히 저으면서 끓여줍니다.
   2. 오트밀이 부드럽게 퍼지고 걸쭉해지면, 깨끗이 손질한 딸기 5~6개(또는 취향껏)를 작게 썰어 넣습니다.
   3. 잘 저어서 딸기의 단맛과 향이 오트밀에 배도록 1~2분 정도 더 끓입니다.
   4. 기호에 따라 꿀 1스푼 또는 올리고당, 견과류, 씨앗(아몬드, 해바라기씨 등)을 위에 뿌려줍니다.
   5. 따뜻하게 그릇에 담아 바로 제공합니다.

5. 필요한 재료와 양:
   - 딸기 5~6개
   - 오트밀 1컵
   - 우유 또는 두유 1컵
   - 꿀 또는 올리고당 1스푼(선택)
   - 견과류, 씨앗 소량(선택)

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/1Sh0ue4.jpg

8. 요리 팁:
   - 아침에 밥이 부담스러운 분에게 속이 편안한 한 끼 식사로 추천합니다.
   - 딸기를 믹서에 갈아 오트밀과 함께 끓이면 더 부드럽고 진한 맛을 느낄 수 있습니다.
   - 견과류나 씨앗을 추가할 때는 마지막에, 섬유질과 식감을 위해 넣어주세요.
2025-06-29 18:46:22.625 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:46:22.631 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 18:46:22.631 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/1Sh0ue4.jpg
2025-06-29 18:46:22.631 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/1Sh0ue4.jpg
2025-06-29 18:46:22.631 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/1Sh0ue4.jpg
2025-06-29 18:46:22.632 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 딸기 5~6개
   - 오트밀 1컵
   - 우유 또는 두유 1컵
   - 꿀 또는 올리고당 1스푼(선택)
   - 견과류, 씨앗 소량(선택)
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 5
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 딸기 5~6개
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 딸기 5~6개
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오트밀 1컵
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 오트밀, Amount: 1컵
2025-06-29 18:46:22.633 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 오트밀, Amount: 1컵
2025-06-29 18:46:22.637 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:46:22.639 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '오트밀' not found in DB. Skipping.
2025-06-29 18:46:22.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 우유 또는 두유 1컵
2025-06-29 18:46:22.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 두유, Amount: 1컵
2025-06-29 18:46:22.639 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 두유, Amount: 1컵
2025-06-29 18:46:22.642 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:46:22.643 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '두유' not found in DB. Skipping.
2025-06-29 18:46:22.643 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 꿀 또는 올리고당 1스푼(선택)
2025-06-29 18:46:22.643 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리고당, Amount: 1스푼
2025-06-29 18:46:22.643 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 1스푼
2025-06-29 18:46:22.649 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:46:22.651 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-29 18:46:22.651 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 견과류, 씨앗 소량(선택)
2025-06-29 18:46:22.651 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 견과류, 씨앗 소량(선택)
2025-06-29 18:46:22.652 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 오트밀 1컵과 우유 또는 두유 1컵을 냄비에 넣고 중불에서 천천히 저으면서 끓여줍니다.
   2. 오트밀이 부드럽게 퍼지고 걸쭉해지면, 깨끗이 손질한 딸기 5~6개(또는 취향
2025-06-29 18:46:22.653 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 18:46:22.653 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 딸기 5~6개
   - 오트밀 1컵
   - 우유 또는 두유 1컵
   - 꿀 또는 올리고당 1스푼(선택)
   - 견과류, 씨앗 소량(선택)

조리 방법:
1. 오트밀 1컵과 우유 또는 두유 1컵을 냄비에 넣고 중불에서 천천히 저으면서 끓여줍니다.
   2. 오트밀이 부드럽게 퍼지고 걸쭉해지면, 깨끗이 손질한 딸기 5~6개(또는 취향껏)를 작게 썰어 넣습니다.
   3. 잘 저어서 딸기의 단맛과 향이 오트밀에 배도록 1~2분 정도 더 끓입니다.
   4. 기호에 따라 꿀 1스푼 또는 올리고당, 견과류, 씨앗(아몬드, 해바라기씨 등)을 위에 뿌려줍니다.
   5. 따뜻하게 그릇에 담아 바로 제공합니다.
2025-06-29 18:46:22.657 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 18:46:22.660 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 딸기 오트밀 죽
2025-06-29 18:46:22.664 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 18:46:22.666 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 100
2025-06-29 18:46:32.292 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:46:32.295 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:32.302 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:32.303 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:32.306 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:32.315 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:46:32.316 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:46:32.318 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:32.319 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:46:32.322 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:47:16.022 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:47:16.027 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 18:47:16.031 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 18:49:33.084 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 18:49:33.116 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 27584 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 18:49:33.116 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 18:49:33.116 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 18:49:33.169 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 18:49:33.170 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 18:49:34.284 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:49:34.286 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 18:49:34.320 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:49:34.322 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:49:34.323 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:49:34.323 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:49:34.324 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:49:34.325 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:49:34.327 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:49:34.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 18:49:34.328 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40 ms. Found 0 JDBC repository interfaces.
2025-06-29 18:49:34.343 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:49:34.344 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 18:49:34.455 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 107 ms. Found 8 JPA repository interfaces.
2025-06-29 18:49:34.487 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 18:49:34.488 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 18:49:34.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:49:34.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:49:34.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:49:34.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:49:34.501 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:49:34.502 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:49:34.502 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:49:34.502 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 18:49:34.502 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-06-29 18:49:35.373 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 18:49:35.383 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 18:49:35.385 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 18:49:35.386 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 18:49:35.433 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 18:49:35.435 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2263 ms
2025-06-29 18:49:35.482 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 18:49:35.641 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@570ca102
2025-06-29 18:49:35.645 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 18:49:35.662 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 18:49:35.801 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 18:49:35.834 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 18:49:35.855 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 18:49:35.973 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 18:49:36.025 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 18:49:36.026 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 18:49:36.857 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 18:49:36.963 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 18:49:37.365 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 18:49:37.615 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 18:49:37.615 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 18:49:38.518 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 18:49:38.610 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 18:49:38.755 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3147d2de, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1f77015, org.springframework.security.web.context.SecurityContextHolderFilter@185c8c63, org.springframework.security.web.header.HeaderWriterFilter@7899c530, org.springframework.web.filter.CorsFilter@417547c0, org.springframework.security.web.authentication.logout.LogoutFilter@12aa0b7c, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@2f705de5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2183bac9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71e9c161, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@72788add, org.springframework.security.web.session.SessionManagementFilter@203b7694, org.springframework.security.web.access.ExceptionTranslationFilter@7f868a3c, org.springframework.security.web.access.intercept.AuthorizationFilter@24e29c47]
2025-06-29 18:49:39.167 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 18:49:39.188 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 18:49:39.195 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 18:49:39.208 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.463 seconds (process running for 7.08)
2025-06-29 18:49:50.361 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 18:49:50.362 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 18:49:50.363 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 18:49:50.965 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 18:49:50.979 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 18:49:51.484 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:49:51.489 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.513 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.541 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.554 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.560 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:49:51.603 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:49:51.605 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.607 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.609 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.611 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.615 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:49:51.628 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:49:51.631 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.633 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.636 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.639 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.645 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:49:51.699 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:49:51.701 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.703 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.707 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.756 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.808 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:49:51.812 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:49:51.818 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.820 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:49:51.837 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:50:30.369 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:50:30.375 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:50:30.380 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:50:30.384 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:50:30.406 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 18:50:30.407 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:50:30.409 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 18:50:30.409 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 18:50:30.409 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-29 18:50:30.410 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 18:50:30.410 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 18:50:30.416 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:50:30.417 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 18:50:30.418 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 18:50:30.418 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 18:50:30.418 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 18:50:36.520 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 18:50:36.521 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 18:50:36.521 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 수제 햄버거  
2. 카테고리: 양식  
3. 조리 시간: 30분  
4. 조리 방법:
   1. 양파를 채 썰어 팬에 식용유와 함께 중불에서 갈색이 나도록 볶습니다. 볶은 뒤 발사믹 식초(¼컵)와 설탕(1T)을 넣고 잘 섞어 한쪽에 둡니다[3].
   2. 햄버거 번(빵)을 반으로 자른 뒤 팬에 버터를 두르고 안쪽 면이 노릇노릇하게 굽습니다[2][3].
   3. 소고기 다짐육과 돼지고기 다짐육을 고루 섞어 소금, 후추로 간을 한 후 둥글고 평평하게 패티 모양을 만듭니다[2][3].
   4. 팬에 버터와 식용유를 두르고 패티를 앞뒤로 중불에서 2~3분씩 노릇노릇하게 구운 후, 뒤집어서 치즈를 올리고 뚜껑을 덮어 치즈를 녹입니다[2][3].
   5. 구운 번 아래쪽에 마요네즈와(기호에 따라 머스타드) 햄버거 소스를 바릅니다[2].
   6. 번 위에 상추, 햄버거 패티(치즈 올린 상태), 볶은 양파, 토마토, 오이 피클을 순서대로 올립니다[3].
   7. 마지막으로 번 윗부분을 덮어 완성합니다.

5. 필요한 재료와 양:
   - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 번(빵) 2개
   - 체다치즈 2장
   - 상추 약간
   - 토마토 1개
   - 오이 피클 약간
   - 양파 1개
   - 버터 10g
   - 식용유 약간
   - 소금, 후추 약간
   - 발사믹 식초 ¼컵
   - 설탕 1큰술
   - 마요네즈, 케첩, 머스터드(기호에 따라)

6. 난이도: 중  
7. 이미지 URL: https://i.imgur.com/qT5iUqN.jpg  
8. 요리 팁:
   - 패티는 너무 두껍지 않게 만들어야 속까지 골고루 잘 익습니다.
   - 번은 버터를 발라 구우면 풍미가 좋아지고, 수분도 덜 날아갑니다.
   - 토마토, 상추 등 신선한 채소를 준비하면 더 아삭하고 맛있게 즐길 수 있습니다.
   - 볶은 양파에 발사믹 식초를 넣어주면 고기 패티의 느끼함을 잡아주고 풍미가 더해집니다[3].
2025-06-29 18:50:36.524 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:50:36.538 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 18:50:36.539 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/qT5iUqN.jpg
2025-06-29 18:50:36.540 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/qT5iUqN.jpg
2025-06-29 18:50:36.540 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/qT5iUqN.jpg
2025-06-29 18:50:36.540 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 번(빵) 2개
   - 체다치즈 2장
   - 상추 약간
   - 토마토 1개
   - 오이 피클 약간
   - 양파 1개
   - 버터 10g
   - 식용유 약간
   - 소금, 후추 약간
   - 발사믹 식초 ¼컵
   - 설탕 1큰술
   - 마요네즈, 케첩, 머스터드(기호에 따라)
2025-06-29 18:50:36.541 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-29 18:50:36.542 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 다짐육 200g
2025-06-29 18:50:36.542 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 200g
2025-06-29 18:50:36.542 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 200g
2025-06-29 18:50:36.551 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:50:36.554 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-29 18:50:36.554 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기 다짐육 300g
2025-06-29 18:50:36.555 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 300g
2025-06-29 18:50:36.555 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 300g
2025-06-29 18:50:36.556 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:50:36.559 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-29 18:50:36.559 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거 번(빵) 2개
2025-06-29 18:50:36.559 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄버거 번(빵) 2개
2025-06-29 18:50:36.560 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다치즈 2장
2025-06-29 18:50:36.561 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 체다치즈, Amount: 2장
2025-06-29 18:50:36.562 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 체다치즈, Amount: 2장
2025-06-29 18:50:36.564 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:50:36.567 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '체다치즈' not found in DB. Skipping.
2025-06-29 18:50:36.567 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 상추 약간
2025-06-29 18:50:36.567 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 상추 약간
2025-06-29 18:50:36.567 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개
2025-06-29 18:50:36.568 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-29 18:50:36.568 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-29 18:50:36.569 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:50:36.570 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-29 18:50:36.571 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 피클 약간
2025-06-29 18:50:36.571 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 피클 약간
2025-06-29 18:50:36.571 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-29 18:50:36.571 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-29 18:50:36.571 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 18:50:36.572 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:50:36.573 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 18:50:36.573 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 10g
2025-06-29 18:50:36.573 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 버터, Amount: 10g
2025-06-29 18:50:36.574 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 버터, Amount: 10g
2025-06-29 18:50:36.575 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:50:36.575 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '버터' not found in DB. Skipping.
2025-06-29 18:50:36.575 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 18:50:36.575 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 18:50:36.576 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 18:50:36.576 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 18:50:36.576 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 발사믹 식초 ¼컵
2025-06-29 18:50:36.576 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 발사믹 식초 ¼컵
2025-06-29 18:50:36.576 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 18:50:36.576 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 18:50:36.576 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 18:50:36.577 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:50:36.577 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 18:50:36.577 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈, 케첩, 머스터드(기호에 따라)
2025-06-29 18:50:36.578 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마요네즈, 케첩, 머스터드(기호에 따라)
2025-06-29 18:50:36.578 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파를 채 썰어 팬에 식용유와 함께 중불에서 갈색이 나도록 볶습니다. 볶은 뒤 발사믹 식초(¼컵)와 설탕(1T)을 넣고 잘 섞어 한쪽에 둡니다[3].
   2. 햄버거 번(빵
2025-06-29 18:50:36.579 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 18:50:36.579 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 햄버거 번(빵) 2개
   - 체다치즈 2장
   - 상추 약간
   - 토마토 1개
   - 오이 피클 약간
   - 양파 1개
   - 버터 10g
   - 식용유 약간
   - 소금, 후추 약간
   - 발사믹 식초 ¼컵
   - 설탕 1큰술
   - 마요네즈, 케첩, 머스터드(기호에 따라)

조리 방법:
1. 양파를 채 썰어 팬에 식용유와 함께 중불에서 갈색이 나도록 볶습니다. 볶은 뒤 발사믹 식초(¼컵)와 설탕(1T)을 넣고 잘 섞어 한쪽에 둡니다[3].
   2. 햄버거 번(빵)을 반으로 자른 뒤 팬에 버터를 두르고 안쪽 면이 노릇노릇하게 굽습니다[2][3].
   3. 소고기 다짐육과 돼지고기 다짐육을 고루 섞어 소금, 후추로 간을 한 후 둥글고 평평하게 패티 모양을 만듭니다[2][3].
   4. 팬에 버터와 식용유를 두르고 패티를 앞뒤로 중불에서 2~3분씩 노릇노릇하게 구운 후, 뒤집어서 치즈를 올리고 뚜껑을 덮어 치즈를 녹입니다[2][3].
   5. 구운 번 아래쪽에 마요네즈와(기호에 따라 머스타드) 햄버거 소스를 바릅니다[2].
   6. 번 위에 상추, 햄버거 패티(치즈 올린 상태), 볶은 양파, 토마토, 오이 피클을 순서대로 올립니다[3].
   7. 마지막으로 번 윗부분을 덮어 완성합니다.
2025-06-29 18:50:36.582 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 18:50:36.583 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 수제 햄버거
2025-06-29 18:51:00.251 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:51:00.251 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:51:00.254 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:00.256 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:00.259 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:00.263 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:00.265 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:00.268 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:00.273 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:00.277 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:04.605 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:51:04.607 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:04.610 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:04.612 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:04.616 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 18:51:04.618 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:04.622 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 18:51:04.622 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 18:51:04.622 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-29 18:51:04.622 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 18:51:04.622 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 18:51:04.625 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:51:04.630 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 18:51:04.630 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 18:51:04.630 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 18:51:04.630 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 18:51:09.614 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 18:51:09.615 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 18:51:09.615 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 클래식 소고기 치즈버거
2. 불고기 버거
3. 베이컨 머쉬룸 버거
4. 상추 토마토 수제버거
5. 양파 카라멜라이즈드 버거

### 추천 이유

- 상황 분석: 사용자는 햄버거 레시피를 요청하였으며, 아침 식사 시 소화에 민감함(배 아픔)을 겪고 있어 가볍고 자극적이지 않은 메뉴 구성을 고려해야 합니다. 햄버거는 점심이나 저녁, 간식 타임에 적합하며, 부담스럽지 않게 즐길 수 있는 수제 햄버거 스타일로 추천합니다.

- 추천 기준: 
  - 수제 햄버거 패티와 소스를 직접 만들 수 있는 레시피를 반영했습니다[2][3][4].
  - 자극적이거나 너무 기름지지 않은 고기 조리법과, 신선한 채소를 곁들인 메뉴 위주로 선정했습니다.
  - 한식 선호도를 고려해 불고기 스타일과 한국식 소스를 활용한 메뉴도 포함했습니다.

- 개인화 고려사항:
  - 새우(알레르기) 성분이 들어가지 않는 메뉴만 선별하였습니다.
  - 아침에 소화가 약한 점을 고려해, 기름기 과다한 메뉴보다 상대적으로 담백하고 신선한 재료 조합을 우선했습니다.
  - 각 메뉴는 탄수화물·단백질·채소가 적절히 어우러져 균형을 맞췄습니다.

- 추가 팁:
  - 햄버거 번은 프라이팬에 살짝 버터로 구우면 더 고소하고 소화가 잘 됩니다[2][3].
  - 집에 있는 채소(양상추, 토마토, 오이피클 등)를 다양하게 추가하면 아침이나 점심에 산뜻하게 즐길 수 있습니다.
  - 불고기 버거는 한식 스타일 소스 활용, 카라멜라이즈드 양파 버거는 위장 부담을 줄이면서도 풍미를 더할 수 있습니다.
  - 각 메뉴의 상세 레시피가 필요하다면 메뉴명을 포함해 '레시피'를 다시 요청해 주세요.
2025-06-29 18:51:09.616 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 18:51:15.597 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:51:15.602 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:15.605 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:15.607 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:15.610 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 햄버거 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 18:51:15.611 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:15.612 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 18:51:15.613 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 18:51:15.613 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 햄버거 레시피 줘
2025-06-29 18:51:15.613 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 18:51:15.613 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 18:51:15.615 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:51:15.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 18:51:15.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 18:51:15.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 햄버거 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 18:51:15.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 18:51:26.576 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 18:51:26.576 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 18:51:26.576 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 수제 햄버거

2. 카테고리: 양식

3. 조리 시간: 30분

4. 조리 방법:
   1. 양파를 채 썰어 팬에 식용유와 버터(10g)를 두르고 갈색이 될 때까지 볶은 뒤, 발사믹 식초(1/4컵)와 설탕(1T)을 넣고 새콤달콤하게 볶아줍니다.
   2. 햄버거 빵을 반으로 자른 후, 프라이팬에 버터를 녹여 안쪽면을 노릇하게 굽고 식혀둡니다.
   3. 소고기 다짐육(200g)과 돼지고기 다짐육(300g)을 소금, 후추로 간한 뒤 동그랗고 납작하게 모양을 잡아 패티를 만듭니다.
   4. 중불에서 패티를 올려 한쪽 면이 갈색으로 익으면 뒤집어 2분 정도 더 구워주고, 체다치즈 1장을 올려 치즈가 녹을 때까지 뚜껑을 덮어줍니다.
   5. 구운 번의 아래쪽에 마요네즈, 홀그레인머스터드 또는 케첩을 바릅니다.
   6. 구운 패티, 볶은 양파, 토마토(슬라이스), 오이피클, 상추를 순서대로 올리고, 마지막으로 번 윗부분을 덮어 완성합니다[2][3].

5. 필요한 재료와 양:
   - 햄버거빵(번) 2개
   - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 체다치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 발사믹 식초 1/4컵
   - 설탕 1큰술(T)
   - 버터 10g
   - 마요네즈 적당량
   - 케첩 또는 홀그레인머스터드 적당량
   - 소금, 후추 약간
   - 식용유 약간

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/0EJmhz0.jpg

8. 요리 팁:
   - 패티를 구울 때 가운데를 살짝 눌러주면 익을 때 부풀지 않아 모양이 예쁘게 나옵니다.
   - 빵을 반드시 구워야 소스와 수분이 스며들어도 질척해지지 않고 식감이 살아납니다.
   - 재료는 기호에 맞게 베이컨, 구운 버섯 등을 추가해도 좋습니다.
2025-06-29 18:51:26.578 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:51:26.580 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 18:51:26.582 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/0EJmhz0.jpg
2025-06-29 18:51:26.583 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/0EJmhz0.jpg
2025-06-29 18:51:26.583 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/0EJmhz0.jpg
2025-06-29 18:51:26.583 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 햄버거빵(번) 2개
   - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 체다치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 발사믹 식초 1/4컵
   - 설탕 1큰술(T)
   - 버터 10g
   - 마요네즈 적당량
   - 케첩 또는 홀그레인머스터드 적당량
   - 소금, 후추 약간
   - 식용유 약간
2025-06-29 18:51:26.583 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 15
2025-06-29 18:51:26.584 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 햄버거빵(번) 2개
2025-06-29 18:51:26.584 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 햄버거빵(번) 2개
2025-06-29 18:51:26.584 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 다짐육 200g
2025-06-29 18:51:26.584 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 200g
2025-06-29 18:51:26.584 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 200g
2025-06-29 18:51:26.590 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:26.592 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-29 18:51:26.592 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기 다짐육 300g
2025-06-29 18:51:26.592 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다짐육, Amount: 300g
2025-06-29 18:51:26.592 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다짐육, Amount: 300g
2025-06-29 18:51:26.596 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:26.598 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '다짐육' not found in DB. Skipping.
2025-06-29 18:51:26.598 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다치즈 2장
2025-06-29 18:51:26.598 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 체다치즈, Amount: 2장
2025-06-29 18:51:26.598 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 체다치즈, Amount: 2장
2025-06-29 18:51:26.603 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:26.604 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '체다치즈' not found in DB. Skipping.
2025-06-29 18:51:26.605 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-29 18:51:26.605 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-29 18:51:26.605 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 18:51:26.607 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:26.609 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 18:51:26.612 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개
2025-06-29 18:51:26.614 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-29 18:51:26.614 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-29 18:51:26.618 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:26.637 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-29 18:51:26.638 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 상추 약간
2025-06-29 18:51:26.638 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 상추 약간
2025-06-29 18:51:26.638 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 피클 약간
2025-06-29 18:51:26.638 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 피클 약간
2025-06-29 18:51:26.639 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 발사믹 식초 1/4컵
2025-06-29 18:51:26.640 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 발사믹 식초 1/4컵
2025-06-29 18:51:26.640 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술(T)
2025-06-29 18:51:26.640 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 18:51:26.640 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 18:51:26.642 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:26.653 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 18:51:26.654 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 10g
2025-06-29 18:51:26.655 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 버터, Amount: 10g
2025-06-29 18:51:26.655 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 버터, Amount: 10g
2025-06-29 18:51:26.659 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:26.660 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '버터' not found in DB. Skipping.
2025-06-29 18:51:26.660 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 적당량
2025-06-29 18:51:26.661 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마요네즈 적당량
2025-06-29 18:51:26.661 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 케첩 또는 홀그레인머스터드 적당량
2025-06-29 18:51:26.661 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 케첩 또는 홀그레인머스터드 적당량
2025-06-29 18:51:26.661 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 18:51:26.661 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 18:51:26.661 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 18:51:26.661 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 18:51:26.662 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파를 채 썰어 팬에 식용유와 버터(10g)를 두르고 갈색이 될 때까지 볶은 뒤, 발사믹 식초(1/4컵)와 설탕(1T)을 넣고 새콤달콤하게 볶아줍니다.
   2. 햄버거 빵을
2025-06-29 18:51:26.663 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 18:51:26.663 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 햄버거빵(번) 2개
   - 소고기 다짐육 200g
   - 돼지고기 다짐육 300g
   - 체다치즈 2장
   - 양파 1개
   - 토마토 1개
   - 상추 약간
   - 오이 피클 약간
   - 발사믹 식초 1/4컵
   - 설탕 1큰술(T)
   - 버터 10g
   - 마요네즈 적당량
   - 케첩 또는 홀그레인머스터드 적당량
   - 소금, 후추 약간
   - 식용유 약간

조리 방법:
1. 양파를 채 썰어 팬에 식용유와 버터(10g)를 두르고 갈색이 될 때까지 볶은 뒤, 발사믹 식초(1/4컵)와 설탕(1T)을 넣고 새콤달콤하게 볶아줍니다.
   2. 햄버거 빵을 반으로 자른 후, 프라이팬에 버터를 녹여 안쪽면을 노릇하게 굽고 식혀둡니다.
   3. 소고기 다짐육(200g)과 돼지고기 다짐육(300g)을 소금, 후추로 간한 뒤 동그랗고 납작하게 모양을 잡아 패티를 만듭니다.
   4. 중불에서 패티를 올려 한쪽 면이 갈색으로 익으면 뒤집어 2분 정도 더 구워주고, 체다치즈 1장을 올려 치즈가 녹을 때까지 뚜껑을 덮어줍니다.
   5. 구운 번의 아래쪽에 마요네즈, 홀그레인머스터드 또는 케첩을 바릅니다.
   6. 구운 패티, 볶은 양파, 토마토(슬라이스), 오이피클, 상추를 순서대로 올리고, 마지막으로 번 윗부분을 덮어 완성합니다[2][3].
2025-06-29 18:51:26.669 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 18:51:26.672 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 수제 햄버거
2025-06-29 18:51:26.713 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 18:51:26.720 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 101
2025-06-29 18:51:41.341 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:51:41.344 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:41.349 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:41.351 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:51:41.353 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 피자 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 18:51:41.353 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:51:41.357 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 18:51:41.358 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 18:51:41.358 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 피자 레시피 줘
2025-06-29 18:51:41.358 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 18:51:41.358 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 18:51:41.361 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:51:41.363 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 18:51:41.363 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 18:51:41.363 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 피자 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 18:51:41.363 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 18:51:53.102 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 18:51:53.102 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 18:51:53.103 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 콤비네이션 피자

2. 카테고리: 양식

3. 조리 시간: 약 90분 (발효 및 조리 포함)

4. 조리 방법:
   1. 강력분을 체에 곱게 내려 준비합니다.
   2. 반죽기에 물, 강력분, 이스트, 소금, 설탕을 서로 닿지 않게 넣고 반죽합니다(제빵기 또는 손반죽 모두 가능).
   3. 반죽이 한 덩어리가 되면 올리브오일을 넣고 반죽이 매끄럽게 될 때까지 치대줍니다.
   4. 볼에 약간의 기름을 바르고 반죽을 넣어 비닐이나 랩으로 덮어 따뜻한 곳에서 1시간 1차 발효합니다.
   5. 반죽을 꺼내 피자 팬에 맞춰 넓게 펴줍니다.
   6. 반죽 위에 토마토소스를 듬뿍 바릅니다.
   7. 피망, 파프리카, 베이컨, 양파, 옥수수, 블랙올리브 등 토핑 재료를 골고루 올립니다.
   8. 마지막으로 피자치즈를 넉넉하게 올립니다.
   9. 200℃로 예열한 오븐에서 20~25분간 구워줍니다.
   10. 치즈가 노릇노릇하게 녹고 도우가 잘 익으면 완성입니다[3].

5. 필요한 재료와 양:
   - 강력분 200g
   - 드라이이스트 4g
   - 소금 3g
   - 설탕 15g
   - 물 140g
   - 올리브오일 20g
   - 피자치즈(모짜렐라 등) 200g
   - 토마토소스 3큰술
   - 피망 2개
   - 파프리카(주황) 1개
   - 베이컨 10장
   - 양파(소) 1개
   - 캔옥수수 3큰술
   - 블랙올리브 3개
   - 소금 1/2큰술(야채 밑간)
   - 후추 약간
   - 식용유 약간

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/QxPuUxE.jpg

8. 요리 팁:
   - 반죽 발효는 시간이 길수록 도우가 더욱 쫄깃하고 맛있어집니다.
   - 토핑 재료는 취향대로 추가/제거가 가능합니다. 냉장고 속 다양한 야채를 활용해보세요.
   - 오븐마다 구움 온도가 다를 수 있으니 치즈가 충분히 녹고 도우 바닥이 노릇하게 익었는지 확인하세요.

**알레르기 정보**: 이 레시피에는 새우 등 해산물 재료가 포함되어 있지 않으므로 안전하게 섭취하실 수 있습니다.
2025-06-29 18:51:53.120 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 18:51:53.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 18:51:53.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/QxPuUxE.jpg
2025-06-29 18:51:53.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/QxPuUxE.jpg
2025-06-29 18:51:53.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/QxPuUxE.jpg
2025-06-29 18:51:53.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 강력분 200g
   - 드라이이스트 4g
   - 소금 3g
   - 설탕 15g
   - 물 140g
   - 올리브오일 20g
   - 피자치즈(모짜렐라 등) 200g
   - 토마토소스 3큰술
   - 피망 2개
   - 파프리카(주황) 1개
   - 베이컨 10장
   - 양파(소) 1개
   - 캔옥수수 3큰술
   - 블랙올리브 3개
   - 소금 1/2큰술(야채 밑간)
   - 후추 약간
   - 식용유 약간
2025-06-29 18:51:53.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 17
2025-06-29 18:51:53.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 강력분 200g
2025-06-29 18:51:53.123 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 강력분, Amount: 200g
2025-06-29 18:51:53.124 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 강력분, Amount: 200g
2025-06-29 18:51:53.126 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.127 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '강력분' not found in DB. Skipping.
2025-06-29 18:51:53.127 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 드라이이스트 4g
2025-06-29 18:51:53.127 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 드라이이스트, Amount: 4g
2025-06-29 18:51:53.127 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 드라이이스트, Amount: 4g
2025-06-29 18:51:53.129 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.130 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '드라이이스트' not found in DB. Skipping.
2025-06-29 18:51:53.130 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 3g
2025-06-29 18:51:53.132 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소금, Amount: 3g
2025-06-29 18:51:53.132 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 3g
2025-06-29 18:51:53.134 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.135 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-29 18:51:53.135 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 15g
2025-06-29 18:51:53.136 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 15g
2025-06-29 18:51:53.136 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 15g
2025-06-29 18:51:53.138 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.139 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 18:51:53.139 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 140g
2025-06-29 18:51:53.140 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 140g
2025-06-29 18:51:53.140 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 140g
2025-06-29 18:51:53.141 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.142 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 18:51:53.142 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브오일 20g
2025-06-29 18:51:53.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브오일, Amount: 20g
2025-06-29 18:51:53.143 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브오일, Amount: 20g
2025-06-29 18:51:53.148 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.149 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브오일' not found in DB. Skipping.
2025-06-29 18:51:53.149 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피자치즈(모짜렐라 등) 200g
2025-06-29 18:51:53.150 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 피자치즈(모짜렐라 등) 200g
2025-06-29 18:51:53.150 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토소스 3큰술
2025-06-29 18:51:53.150 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토소스, Amount: 3큰술
2025-06-29 18:51:53.150 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토소스, Amount: 3큰술
2025-06-29 18:51:53.151 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.152 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토소스' not found in DB. Skipping.
2025-06-29 18:51:53.152 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피망 2개
2025-06-29 18:51:53.152 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 피망, Amount: 2개
2025-06-29 18:51:53.152 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 피망, Amount: 2개
2025-06-29 18:51:53.154 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.154 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '피망' not found in DB. Skipping.
2025-06-29 18:51:53.154 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파프리카(주황) 1개
2025-06-29 18:51:53.154 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 파프리카(주황) 1개
2025-06-29 18:51:53.154 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 베이컨 10장
2025-06-29 18:51:53.154 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 베이컨, Amount: 10장
2025-06-29 18:51:53.155 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 베이컨, Amount: 10장
2025-06-29 18:51:53.155 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.156 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '베이컨' not found in DB. Skipping.
2025-06-29 18:51:53.156 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파(소) 1개
2025-06-29 18:51:53.156 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파(소) 1개
2025-06-29 18:51:53.156 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 캔옥수수 3큰술
2025-06-29 18:51:53.157 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 캔옥수수, Amount: 3큰술
2025-06-29 18:51:53.157 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 캔옥수수, Amount: 3큰술
2025-06-29 18:51:53.157 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.158 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '캔옥수수' not found in DB. Skipping.
2025-06-29 18:51:53.158 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 블랙올리브 3개
2025-06-29 18:51:53.160 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 블랙올리브, Amount: 3개
2025-06-29 18:51:53.161 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 블랙올리브, Amount: 3개
2025-06-29 18:51:53.162 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 18:51:53.163 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '블랙올리브' not found in DB. Skipping.
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/2큰술(야채 밑간)
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 1/2큰술(야채 밑간)
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 강력분을 체에 곱게 내려 준비합니다.
   2. 반죽기에 물, 강력분, 이스트, 소금, 설탕을 서로 닿지 않게 넣고 반죽합니다(제빵기 또는 손반죽 모두 가능).
   3. 반
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 18:51:53.164 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 강력분 200g
   - 드라이이스트 4g
   - 소금 3g
   - 설탕 15g
   - 물 140g
   - 올리브오일 20g
   - 피자치즈(모짜렐라 등) 200g
   - 토마토소스 3큰술
   - 피망 2개
   - 파프리카(주황) 1개
   - 베이컨 10장
   - 양파(소) 1개
   - 캔옥수수 3큰술
   - 블랙올리브 3개
   - 소금 1/2큰술(야채 밑간)
   - 후추 약간
   - 식용유 약간

조리 방법:
1. 강력분을 체에 곱게 내려 준비합니다.
   2. 반죽기에 물, 강력분, 이스트, 소금, 설탕을 서로 닿지 않게 넣고 반죽합니다(제빵기 또는 손반죽 모두 가능).
   3. 반죽이 한 덩어리가 되면 올리브오일을 넣고 반죽이 매끄럽게 될 때까지 치대줍니다.
   4. 볼에 약간의 기름을 바르고 반죽을 넣어 비닐이나 랩으로 덮어 따뜻한 곳에서 1시간 1차 발효합니다.
   5. 반죽을 꺼내 피자 팬에 맞춰 넓게 펴줍니다.
   6. 반죽 위에 토마토소스를 듬뿍 바릅니다.
   7. 피망, 파프리카, 베이컨, 양파, 옥수수, 블랙올리브 등 토핑 재료를 골고루 올립니다.
   8. 마지막으로 피자치즈를 넉넉하게 올립니다.
   9. 200℃로 예열한 오븐에서 20~25분간 구워줍니다.
   10. 치즈가 노릇노릇하게 녹고 도우가 잘 익으면 완성입니다[3].
2025-06-29 18:51:53.166 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 18:51:53.167 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 콤비네이션 피자
2025-06-29 18:51:53.168 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 18:51:53.169 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 102
2025-06-29 18:53:57.321 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:53:57.328 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:53:57.332 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:53:57.334 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:53:57.342 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 18:53:59.493 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 18:53:59.495 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 18:53:59.497 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 18:53:59.502 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 18:53:59.506 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:12.999 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:13.006 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:13.012 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:13.016 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:13.023 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:13.034 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:13.035 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:13.037 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:13.038 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:13.041 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:28.518 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 19:05:28.520 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 19:05:28.922 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:28.924 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:28.926 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:28.929 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:28.931 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:28.936 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:05:28.969 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:28.971 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:28.976 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:28.977 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:28.986 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:28.991 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:05:29.000 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:29.002 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:29.005 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:29.011 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:29.014 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:29.020 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:05:29.061 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:29.063 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:29.065 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:29.067 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:29.071 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:29.083 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:29.084 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:29.086 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:29.088 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:29.092 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:30.279 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:30.284 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:30.288 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.290 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.294 [http-nio-8080-exec-3] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-29 19:05:30.295 [http-nio-8080-exec-3] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-29 19:05:30.296 [http-nio-8080-exec-3] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.296 [http-nio-8080-exec-3] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-29 19:05:30.309 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:30.309 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:30.310 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:30.310 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:30.312 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.312 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.315 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.315 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.317 [http-nio-8080-exec-4] INFO  a.s.k.p.controller.UserController - === /api/users/me GET 요청 수신 ===
2025-06-29 19:05:30.317 [http-nio-8080-exec-4] INFO  a.s.k.p.controller.UserController - SecurityContext principal 타입: User
2025-06-29 19:05:30.317 [http-nio-8080-exec-4] INFO  a.s.k.p.controller.UserController - SecurityContext에서 User 객체 직접 조회: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.317 [http-nio-8080-exec-4] INFO  a.s.k.p.controller.UserController - 현재 사용자 조회 성공: userId=8, username=이형준, provider=kakao, profileImage=http://k.kakaocdn.net/dn/bXIkPh/btsOSdjohJ1/94vQTd8YSuITOtCz4DQ6tK/img_640x640.jpg
2025-06-29 19:05:30.318 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:30.324 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:05:30.336 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:30.337 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:30.339 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.341 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:30.345 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:30.347 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:05:34.063 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:34.067 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:34.069 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:34.073 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:34.078 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:34.087 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:34.091 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:34.094 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:34.095 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:34.102 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:42.875 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:05:42.876 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:42.879 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:42.879 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:05:42.885 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 피자 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:05:42.888 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:05:42.889 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:05:42.889 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:05:42.889 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 피자 레시피 줘
2025-06-29 19:05:42.889 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:05:42.889 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:05:42.890 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:05:42.891 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:05:42.891 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:05:42.891 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 피자 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:05:42.891 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:05:51.671 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:05:51.671 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:05:51.671 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 콤비네이션 피자

2. 카테고리: 양식

3. 조리 시간: 90분

4. 조리 방법:
   1. 강력분, 이스트, 소금, 설탕, 물, 올리브오일을 각각 계량하여 큰 볼에 담아줍니다.
   2. 반죽기를 사용하거나 손으로 10분 정도 치대어 매끄럽게 반죽합니다.
   3. 반죽을 볼에 담고 표면에 기름을 살짝 바른 후 비닐을 덮어 따뜻한 곳에서 1시간 발효합니다.
   4. 발효된 반죽을 적당히 손으로 펴고, 오븐 팬에 식용유를 살짝 바른 뒤 반죽을 넓게 펴줍니다.
   5. 반죽 위에 토마토소스를 넉넉히 바르고 피자치즈의 1/2을 올립니다.
   6. 피망, 파프리카, 양파, 베이컨, 옥수수, 블랙올리브를 고루 올려줍니다.
   7. 남은 피자치즈를 전체 위에 다시 뿌립니다.
   8. 소금과 후추를 약간 뿌리고, 예열된 오븐(200℃)에서 15~20분간 구워줍니다.
   9. 피자가 노릇해지고 치즈가 잘 녹았다면 꺼내서 썰어줍니다.

5. 필요한 재료와 양:
   - 강력분 200g
   - 드라이 이스트 4g
   - 소금 3g
   - 설탕 15g
   - 물 140g
   - 올리브오일 20g
   - 피자치즈 200g
   - 토마토소스 3큰술
   - 피망 2개
   - 파프리카(주황) 1개
   - 베이컨 10장
   - 양파(소) 1개
   - 캔 옥수수 3큰술
   - 블랙올리브 3개
   - 소금 1/2큰술
   - 후추 약간
   - 식용유 약간

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/uyBHLCl.jpg

8. 요리 팁:
   - 반죽 발효는 온도가 낮으면 시간이 더 오래 걸릴 수 있으니, 온도가 높아지면 1시간 이내로도 충분히 부풀 수 있습니다.
   - 취향에 따라 토핑(피망, 양파, 베이컨 등)을 자유롭게 추가하거나 빼도 좋습니다.
   - 도우가 너무 두꺼워지지 않게 골고루 펴는 것이 바삭함을 살리는 포인트입니다.
2025-06-29 19:05:51.674 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:05:51.676 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 19:05:51.676 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/uyBHLCl.jpg
2025-06-29 19:05:51.677 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/uyBHLCl.jpg
2025-06-29 19:05:51.677 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/uyBHLCl.jpg
2025-06-29 19:05:51.677 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 강력분 200g
   - 드라이 이스트 4g
   - 소금 3g
   - 설탕 15g
   - 물 140g
   - 올리브오일 20g
   - 피자치즈 200g
   - 토마토소스 3큰술
   - 피망 2개
   - 파프리카(주황) 1개
   - 베이컨 10장
   - 양파(소) 1개
   - 캔 옥수수 3큰술
   - 블랙올리브 3개
   - 소금 1/2큰술
   - 후추 약간
   - 식용유 약간
2025-06-29 19:05:51.678 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 17
2025-06-29 19:05:51.678 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 강력분 200g
2025-06-29 19:05:51.678 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 강력분, Amount: 200g
2025-06-29 19:05:51.678 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 강력분, Amount: 200g
2025-06-29 19:05:51.681 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.683 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '강력분' not found in DB. Skipping.
2025-06-29 19:05:51.683 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 드라이 이스트 4g
2025-06-29 19:05:51.683 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 이스트, Amount: 4g
2025-06-29 19:05:51.683 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 이스트, Amount: 4g
2025-06-29 19:05:51.684 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.685 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '이스트' not found in DB. Skipping.
2025-06-29 19:05:51.685 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 3g
2025-06-29 19:05:51.685 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소금, Amount: 3g
2025-06-29 19:05:51.685 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 3g
2025-06-29 19:05:51.688 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.689 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-29 19:05:51.689 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 15g
2025-06-29 19:05:51.689 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 15g
2025-06-29 19:05:51.689 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 15g
2025-06-29 19:05:51.690 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.691 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 19:05:51.691 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 140g
2025-06-29 19:05:51.692 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 140g
2025-06-29 19:05:51.692 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 140g
2025-06-29 19:05:51.693 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.695 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 19:05:51.695 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브오일 20g
2025-06-29 19:05:51.695 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브오일, Amount: 20g
2025-06-29 19:05:51.695 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브오일, Amount: 20g
2025-06-29 19:05:51.696 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.697 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브오일' not found in DB. Skipping.
2025-06-29 19:05:51.697 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피자치즈 200g
2025-06-29 19:05:51.697 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 피자치즈, Amount: 200g
2025-06-29 19:05:51.697 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 피자치즈, Amount: 200g
2025-06-29 19:05:51.698 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.700 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '피자치즈' not found in DB. Skipping.
2025-06-29 19:05:51.700 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토소스 3큰술
2025-06-29 19:05:51.700 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토소스, Amount: 3큰술
2025-06-29 19:05:51.700 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토소스, Amount: 3큰술
2025-06-29 19:05:51.701 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.702 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토소스' not found in DB. Skipping.
2025-06-29 19:05:51.702 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 피망 2개
2025-06-29 19:05:51.702 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 피망, Amount: 2개
2025-06-29 19:05:51.702 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 피망, Amount: 2개
2025-06-29 19:05:51.703 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.704 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '피망' not found in DB. Skipping.
2025-06-29 19:05:51.704 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파프리카(주황) 1개
2025-06-29 19:05:51.704 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 파프리카(주황) 1개
2025-06-29 19:05:51.704 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 베이컨 10장
2025-06-29 19:05:51.704 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 베이컨, Amount: 10장
2025-06-29 19:05:51.704 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 베이컨, Amount: 10장
2025-06-29 19:05:51.705 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.707 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '베이컨' not found in DB. Skipping.
2025-06-29 19:05:51.707 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파(소) 1개
2025-06-29 19:05:51.707 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파(소) 1개
2025-06-29 19:05:51.707 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 캔 옥수수 3큰술
2025-06-29 19:05:51.707 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 옥수수, Amount: 3큰술
2025-06-29 19:05:51.707 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 옥수수, Amount: 3큰술
2025-06-29 19:05:51.708 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.709 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '옥수수' not found in DB. Skipping.
2025-06-29 19:05:51.710 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 블랙올리브 3개
2025-06-29 19:05:51.710 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 블랙올리브, Amount: 3개
2025-06-29 19:05:51.710 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 블랙올리브, Amount: 3개
2025-06-29 19:05:51.710 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '블랙올리브' not found in DB. Skipping.
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1/2큰술
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 1/2큰술
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 강력분, 이스트, 소금, 설탕, 물, 올리브오일을 각각 계량하여 큰 볼에 담아줍니다.
   2. 반죽기를 사용하거나 손으로 10분 정도 치대어 매끄럽게 반죽합니다.
   3.
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:05:51.711 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 강력분 200g
   - 드라이 이스트 4g
   - 소금 3g
   - 설탕 15g
   - 물 140g
   - 올리브오일 20g
   - 피자치즈 200g
   - 토마토소스 3큰술
   - 피망 2개
   - 파프리카(주황) 1개
   - 베이컨 10장
   - 양파(소) 1개
   - 캔 옥수수 3큰술
   - 블랙올리브 3개
   - 소금 1/2큰술
   - 후추 약간
   - 식용유 약간

조리 방법:
1. 강력분, 이스트, 소금, 설탕, 물, 올리브오일을 각각 계량하여 큰 볼에 담아줍니다.
   2. 반죽기를 사용하거나 손으로 10분 정도 치대어 매끄럽게 반죽합니다.
   3. 반죽을 볼에 담고 표면에 기름을 살짝 바른 후 비닐을 덮어 따뜻한 곳에서 1시간 발효합니다.
   4. 발효된 반죽을 적당히 손으로 펴고, 오븐 팬에 식용유를 살짝 바른 뒤 반죽을 넓게 펴줍니다.
   5. 반죽 위에 토마토소스를 넉넉히 바르고 피자치즈의 1/2을 올립니다.
   6. 피망, 파프리카, 양파, 베이컨, 옥수수, 블랙올리브를 고루 올려줍니다.
   7. 남은 피자치즈를 전체 위에 다시 뿌립니다.
   8. 소금과 후추를 약간 뿌리고, 예열된 오븐(200℃)에서 15~20분간 구워줍니다.
   9. 피자가 노릇해지고 치즈가 잘 녹았다면 꺼내서 썰어줍니다.
2025-06-29 19:05:51.712 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:05:51.713 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 콤비네이션 피자
2025-06-29 19:10:22.655 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:10:22.659 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:10:22.665 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:10:22.667 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:10:22.670 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 여자 따먹는 레시피 줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:10:22.670 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:10:22.673 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:10:22.673 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:10:22.673 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 여자 따먹는 레시피 줘
2025-06-29 19:10:22.673 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:10:22.673 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:10:22.682 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:10:22.683 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:10:22.683 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:10:22.684 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 여자 따먹는 레시피 줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:10:22.684 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:10:32.012 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:10:32.012 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:10:32.012 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 죄송합니다. 요청하신 "여자 따먹는 레시피"는 부적절한 표현이며, 요리명으로 인식되는 일반적인 레시피가 없습니다.

대신, 사용자님의 선호도와 정보를 참고하여 한식 인기 메뉴 중 여성분들에게도 인기가 많은 건강하고 맛있는 요리 레시피(예: 오이소박이)를 아래와 같이 추천드립니다.

1. 요리 이름: 오이소박이
2. 카테고리: 한식
3. 조리 시간: 40분
4. 조리 방법:
   1. 오이를 깨끗이 씻어 3~4등분으로 자르고, 길이 방향으로 4등분 하되 밑동은 자르지 않게 남겨둡니다.
   2. 오이에 굵은소금을 뿌리고 20분간 절여줍니다.
   3. 절인 오이를 찬물에 헹군 뒤, 체에 받쳐 물기를 빼줍니다.
   4. 부추(또는 쪽파), 당근, 양파 등 채소를 얇게 썰어 준비합니다.
   5. 고춧가루, 다진마늘, 다진생강, 멸치액젓, 새우젓(새우 알레르기가 있으므로 생략하거나 소금으로 대체), 설탕, 깨소금을 넣어 양념을 만듭니다.
   6. 준비한 채소와 양념을 골고루 섞어 속재료를 완성합니다.
   7. 물기가 빠진 오이에 속재료를 채워 넣습니다.
   8. 밀폐용기에 담아 반나절 정도 실온에서 익힌 후, 냉장 보관합니다.
5. 필요한 재료와 양:
   - 오이 8개
   - 굵은 소금 1/2컵
   - 부추 1줌 (또는 쪽파 대체 가능)
   - 당근 1/3개
   - 양파 1/2개
   - 고춧가루 6큰술
   - 다진 마늘 1큰술
   - 다진 생강 1작은술
   - 멸치액젓 2큰술
   - (알레르기 대체) 새우젓 대신 소금 1작은술
   - 설탕 1큰술
   - 깨소금 1큰술
6. 난이도: 중
7. 이미지 URL: https://i.imgur.com/jE4m2CW.jpg
8. 요리 팁:
   - 오이를 너무 오래 절이거나, 물기를 제대로 빼지 않으면 아삭함이 줄어들 수 있습니다.
   - 새우젓 대신 소금이나 멸치액젓만 사용하면 새우 알레르기 없이도 깔끔하게 즐길 수 있습니다.
2025-06-29 19:10:32.024 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:10:32.027 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:10:32.027 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/jE4m2CW.jpg
2025-06-29 19:10:32.028 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/jE4m2CW.jpg
2025-06-29 19:10:32.028 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/jE4m2CW.jpg
2025-06-29 19:10:32.028 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 오이 8개
   - 굵은 소금 1/2컵
   - 부추 1줌 (또는 쪽파 대체 가능)
   - 당근 1/3개
   - 양파 1/2개
   - 고춧가루 6큰술
   - 다진 마늘 1큰술
   - 다진 생강 1작은술
   - 멸치액젓 2큰술
   - (알레르기 대체) 새우젓 대신 소금 1작은술
   - 설탕 1큰술
   - 깨소금 1큰술
2025-06-29 19:10:32.028 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 12
2025-06-29 19:10:32.028 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 8개
2025-06-29 19:10:32.029 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 오이, Amount: 8개
2025-06-29 19:10:32.029 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 오이, Amount: 8개
2025-06-29 19:10:32.031 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.032 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '오이' not found in DB. Skipping.
2025-06-29 19:10:32.032 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굵은 소금 1/2컵
2025-06-29 19:10:32.032 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 굵은 소금 1/2컵
2025-06-29 19:10:32.032 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 부추 1줌 (또는 쪽파 대체 가능)
2025-06-29 19:10:32.032 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 부추, Amount: 1줌
2025-06-29 19:10:32.032 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 부추, Amount: 1줌
2025-06-29 19:10:32.034 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.035 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '부추' not found in DB. Skipping.
2025-06-29 19:10:32.035 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/3개
2025-06-29 19:10:32.035 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/3개
2025-06-29 19:10:32.035 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-29 19:10:32.035 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-29 19:10:32.035 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 6큰술
2025-06-29 19:10:32.035 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 6큰술
2025-06-29 19:10:32.035 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 6큰술
2025-06-29 19:10:32.036 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.037 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 19:10:32.037 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-29 19:10:32.037 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-29 19:10:32.038 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-29 19:10:32.039 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.040 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 19:10:32.040 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 생강 1작은술
2025-06-29 19:10:32.041 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 생강, Amount: 1작은술
2025-06-29 19:10:32.041 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 생강, Amount: 1작은술
2025-06-29 19:10:32.042 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.043 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '생강' not found in DB. Skipping.
2025-06-29 19:10:32.043 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 멸치액젓 2큰술
2025-06-29 19:10:32.043 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 멸치액젓, Amount: 2큰술
2025-06-29 19:10:32.043 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 멸치액젓, Amount: 2큰술
2025-06-29 19:10:32.044 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.044 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '멸치액젓' not found in DB. Skipping.
2025-06-29 19:10:32.044 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (알레르기 대체) 새우젓 대신 소금 1작은술
2025-06-29 19:10:32.044 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소금, Amount: 1작은술
2025-06-29 19:10:32.044 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 1작은술
2025-06-29 19:10:32.046 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.047 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-29 19:10:32.047 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 19:10:32.047 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 19:10:32.047 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 19:10:32.048 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.049 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 19:10:32.049 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 깨소금 1큰술
2025-06-29 19:10:32.049 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 깨소금, Amount: 1큰술
2025-06-29 19:10:32.049 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 깨소금, Amount: 1큰술
2025-06-29 19:10:32.050 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:10:32.050 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '깨소금' not found in DB. Skipping.
2025-06-29 19:10:32.050 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 오이를 깨끗이 씻어 3~4등분으로 자르고, 길이 방향으로 4등분 하되 밑동은 자르지 않게 남겨둡니다.
   2. 오이에 굵은소금을 뿌리고 20분간 절여줍니다.
   3. 절인
2025-06-29 19:10:32.050 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:10:32.050 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 오이 8개
   - 굵은 소금 1/2컵
   - 부추 1줌 (또는 쪽파 대체 가능)
   - 당근 1/3개
   - 양파 1/2개
   - 고춧가루 6큰술
   - 다진 마늘 1큰술
   - 다진 생강 1작은술
   - 멸치액젓 2큰술
   - (알레르기 대체) 새우젓 대신 소금 1작은술
   - 설탕 1큰술
   - 깨소금 1큰술

조리 방법:
1. 오이를 깨끗이 씻어 3~4등분으로 자르고, 길이 방향으로 4등분 하되 밑동은 자르지 않게 남겨둡니다.
   2. 오이에 굵은소금을 뿌리고 20분간 절여줍니다.
   3. 절인 오이를 찬물에 헹군 뒤, 체에 받쳐 물기를 빼줍니다.
   4. 부추(또는 쪽파), 당근, 양파 등 채소를 얇게 썰어 준비합니다.
   5. 고춧가루, 다진마늘, 다진생강, 멸치액젓, 새우젓(새우 알레르기가 있으므로 생략하거나 소금으로 대체), 설탕, 깨소금을 넣어 양념을 만듭니다.
   6. 준비한 채소와 양념을 골고루 섞어 속재료를 완성합니다.
   7. 물기가 빠진 오이에 속재료를 채워 넣습니다.
   8. 밀폐용기에 담아 반나절 정도 실온에서 익힌 후, 냉장 보관합니다.
2025-06-29 19:10:32.052 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:10:32.053 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 오이소박이
2025-06-29 19:10:32.072 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 19:10:32.075 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 103
2025-06-29 19:13:59.379 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:13:59.385 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:13:59.389 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:13:59.391 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:13:59.396 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 19:13:59.397 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:13:59.398 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:13:59.398 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:13:59.398 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천해줘
2025-06-29 19:13:59.398 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:13:59.398 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 19:13:59.401 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:13:59.404 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 19:13:59.404 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:13:59.404 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 19:13:59.404 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:14:11.027 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:14:11.027 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 19:14:11.027 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 비빔밥
2. 제육볶음
3. 김치찌개
4. 불고기덮밥
5. 치킨샐러드

### 추천 이유

- 상황 분석: 사용자께서는 내일 점심 메뉴를 요청하셨기 때문에 점심시간에 든든하고 영양이 균형 잡힌 한끼를 드시기 좋은 메뉴를 중심으로 선정했습니다.
- 추천 기준: 한식을 선호하신다는 참고사항을 반영했고, 직장인들이 점심시간에 선호하는 대표 한식 메뉴와 건강을 고려한 샐러드 메뉴를 함께 골랐습니다. 메뉴는 빠르고 간편하게 먹을 수 있는 음식과 든든한 식사 메뉴 위주로 구성했습니다[1][2][3][4].
- 개인화 고려사항: 아침에 밥을 먹으면 배가 아프시다는 정보를 참고해 점심에는 부담스럽지 않으면서도 영양이 높은 메뉴를 선정했고, 새우 알레르기가 있어 새우 등 해산물이 포함되지 않은 메뉴만 추천했습니다.
- 추가 팁: 매운 음식이 부담스러우시면 비빔밥이나 불고기덮밥을, 단백질이 필요하거나 가볍게 드시고 싶으면 치킨샐러드를 선택해 보세요. 만약 메뉴 중 궁금한 레시피가 있다면 해당 메뉴명을 말씀하시거나 '레시피'라는 단어를 포함해 다시 요청해 주세요.
2025-06-29 19:14:11.029 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 19:17:55.719 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:17:55.750 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:17:55.758 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:17:55.761 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:17:55.771 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 비빔밥 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:17:55.771 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:17:55.772 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:17:55.772 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:17:55.773 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 비빔밥 레시피
2025-06-29 19:17:55.773 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:17:55.773 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:17:55.781 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:17:55.783 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:17:55.783 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:17:55.783 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 비빔밥 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:17:55.784 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:18:03.060 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:18:03.061 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:18:03.061 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 비빔밥

2. 카테고리: 한식

3. 조리 시간: 30~35분

4. 조리 방법:
   1. 쌀을 깨끗이 씻어 밥을 짓습니다.
   2. 각종 야채(애호박, 당근, 표고버섯, 시금치, 숙주나물)를 깨끗이 손질해 준비합니다.
   3. 애호박, 당근, 표고버섯은 채썰어 각각 팬에 식용유를 약간 두르고 소금(또는 간장)으로 살짝 볶아둡니다.
   4. 시금치는 끓는 물에 살짝 데쳐 찬물에 헹군 후 물기를 짜고, 다진 마늘, 간장, 참기름으로 조물조물 무칩니다.
   5. 숙주나물도 끓는 물에 데친 뒤, 소금, 참기름, 다진 마늘로 무칩니다.
   6. 양파는 채썰어 기름에 살짝 볶거나 생으로 준비할 수 있습니다.
   7. 계란은 기호에 따라 프라이(반숙 또는 완숙)로 준비합니다.
   8. 고추장 양념은 고추장, 올리고당(또는 조청), 참기름, 다진 마늘을 고루 섞어 만듭니다.
   9. 그릇에 밥을 담고 준비한 야채와 계란프라이를 보기 좋게 얹은 뒤, 고추장 양념과 통깨, 참기름을 곁들여 냅니다.

5. 필요한 재료와 양:
   - 흰쌀밥 1공기 (약 200g)
   - 애호박 1/4개 (약 80g)
   - 당근 1/4개 (약 80g)
   - 표고버섯 2개 (약 50g)
   - 시금치 1/4단 (약 80g)
   - 숙주나물 1/4봉지 (약 50g)
   - 양파 1/4개 (약 80g)
   - 계란 1개
   - 식용유 1큰술
   - 다진 마늘 0.5작은술
   - 진간장 0.5큰술
   - 소금, 후추 약간
   - 참기름 1큰술 + 약간(마무리용)
   - 통깨 1큰술
   - 고추장 1.5큰술 (또는 입맛에 맞게)
   - 올리고당(또는 조청) 1큰술
   - (※ 불고기, 돼지고기 등은 선택. 새우는 포함하지 않음)[1][3][4]

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/fA3TDgO.jpg

8. 요리 팁:
   - 재료는 냉장고 상황에 맞게 자유롭게 추가하거나 생략해도 무방합니다.
   - 밥은 너무 뜨겁지 않게 식혀서 사용하면 재료가 물러지지 않고 고슬고슬해집니다.
   - 비빔밥 소스는 미리 만들어두면 맛이 더 잘 어우러집니다.
   - 계란 프라이는 반숙으로 하면 고소함이 더해집니다.
   - 취향에 따라 불고기, 돼지고기 볶음, 나물류를 추가해 영양과 풍미를 더해도 좋습니다.
2025-06-29 19:18:03.067 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:18:03.069 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:18:03.069 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/fA3TDgO.jpg
2025-06-29 19:18:03.070 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/fA3TDgO.jpg
2025-06-29 19:18:03.070 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/fA3TDgO.jpg
2025-06-29 19:18:03.070 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 흰쌀밥 1공기 (약 200g)
   - 애호박 1/4개 (약 80g)
   - 당근 1/4개 (약 80g)
   - 표고버섯 2개 (약 50g)
   - 시금치 1/4단 (약 80g)
   - 숙주나물 1/4봉지 (약 50g)
   - 양파 1/4개 (약 80g)
   - 계란 1개
   - 식용유 1큰술
   - 다진 마늘 0.5작은술
   - 진간장 0.5큰술
   - 소금, 후추 약간
   - 참기름 1큰술 + 약간(마무리용)
   - 통깨 1큰술
   - 고추장 1.5큰술 (또는 입맛에 맞게)
   - 올리고당(또는 조청) 1큰술
   - (※ 불고기, 돼지고기 등은 선택. 새우는 포함하지 않음)[1][3][4]
2025-06-29 19:18:03.070 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 17
2025-06-29 19:18:03.070 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 흰쌀밥 1공기 (약 200g)
2025-06-29 19:18:03.070 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 흰쌀밥, Amount: 1공기
2025-06-29 19:18:03.070 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 흰쌀밥, Amount: 1공기
2025-06-29 19:18:03.073 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.076 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '흰쌀밥' not found in DB. Skipping.
2025-06-29 19:18:03.076 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 1/4개 (약 80g)
2025-06-29 19:18:03.076 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 80g
2025-06-29 19:18:03.076 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 80g
2025-06-29 19:18:03.077 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.078 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:18:03.078 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개 (약 80g)
2025-06-29 19:18:03.078 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 80g
2025-06-29 19:18:03.078 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 80g
2025-06-29 19:18:03.080 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.080 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:18:03.080 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 2개 (약 50g)
2025-06-29 19:18:03.080 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 표고버섯, Amount: 2개
2025-06-29 19:18:03.080 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 표고버섯, Amount: 2개
2025-06-29 19:18:03.081 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.082 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '표고버섯' not found in DB. Skipping.
2025-06-29 19:18:03.082 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 시금치 1/4단 (약 80g)
2025-06-29 19:18:03.082 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 80g
2025-06-29 19:18:03.082 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 80g
2025-06-29 19:18:03.082 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.083 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:18:03.083 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 숙주나물 1/4봉지 (약 50g)
2025-06-29 19:18:03.083 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 50g
2025-06-29 19:18:03.083 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 50g
2025-06-29 19:18:03.083 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.084 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:18:03.084 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개 (약 80g)
2025-06-29 19:18:03.084 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 80g
2025-06-29 19:18:03.084 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 80g
2025-06-29 19:18:03.084 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.085 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:18:03.085 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1개
2025-06-29 19:18:03.085 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 1개
2025-06-29 19:18:03.085 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 1개
2025-06-29 19:18:03.085 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.086 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 19:18:03.086 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1큰술
2025-06-29 19:18:03.086 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 1큰술
2025-06-29 19:18:03.086 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-29 19:18:03.086 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 0.5작은술
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 0.5작은술
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 0.5큰술
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 진간장 0.5큰술
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술 + 약간(마무리용)
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 19:18:03.087 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 19:18:03.089 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.089 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:18:03.089 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 1큰술
2025-06-29 19:18:03.089 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통깨, Amount: 1큰술
2025-06-29 19:18:03.089 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통깨, Amount: 1큰술
2025-06-29 19:18:03.090 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:18:03.090 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '통깨' not found in DB. Skipping.
2025-06-29 19:18:03.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 1.5큰술 (또는 입맛에 맞게)
2025-06-29 19:18:03.090 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추장 1.5큰술 (또는 입맛에 맞게)
2025-06-29 19:18:03.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당(또는 조청) 1큰술
2025-06-29 19:18:03.090 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 올리고당(또는 조청) 1큰술
2025-06-29 19:18:03.090 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (※ 불고기, 돼지고기 등은 선택. 새우는 포함하지 않음)[1][3][4]
2025-06-29 19:18:03.090 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (※ 불고기, 돼지고기 등은 선택. 새우는 포함하지 않음)[1][3][4]
2025-06-29 19:18:03.091 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 쌀을 깨끗이 씻어 밥을 짓습니다.
   2. 각종 야채(애호박, 당근, 표고버섯, 시금치, 숙주나물)를 깨끗이 손질해 준비합니다.
   3. 애호박, 당근, 표고버섯은 채썰어
2025-06-29 19:18:03.091 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:18:03.091 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 흰쌀밥 1공기 (약 200g)
   - 애호박 1/4개 (약 80g)
   - 당근 1/4개 (약 80g)
   - 표고버섯 2개 (약 50g)
   - 시금치 1/4단 (약 80g)
   - 숙주나물 1/4봉지 (약 50g)
   - 양파 1/4개 (약 80g)
   - 계란 1개
   - 식용유 1큰술
   - 다진 마늘 0.5작은술
   - 진간장 0.5큰술
   - 소금, 후추 약간
   - 참기름 1큰술 + 약간(마무리용)
   - 통깨 1큰술
   - 고추장 1.5큰술 (또는 입맛에 맞게)
   - 올리고당(또는 조청) 1큰술
   - (※ 불고기, 돼지고기 등은 선택. 새우는 포함하지 않음)[1][3][4]

조리 방법:
1. 쌀을 깨끗이 씻어 밥을 짓습니다.
   2. 각종 야채(애호박, 당근, 표고버섯, 시금치, 숙주나물)를 깨끗이 손질해 준비합니다.
   3. 애호박, 당근, 표고버섯은 채썰어 각각 팬에 식용유를 약간 두르고 소금(또는 간장)으로 살짝 볶아둡니다.
   4. 시금치는 끓는 물에 살짝 데쳐 찬물에 헹군 후 물기를 짜고, 다진 마늘, 간장, 참기름으로 조물조물 무칩니다.
   5. 숙주나물도 끓는 물에 데친 뒤, 소금, 참기름, 다진 마늘로 무칩니다.
   6. 양파는 채썰어 기름에 살짝 볶거나 생으로 준비할 수 있습니다.
   7. 계란은 기호에 따라 프라이(반숙 또는 완숙)로 준비합니다.
   8. 고추장 양념은 고추장, 올리고당(또는 조청), 참기름, 다진 마늘을 고루 섞어 만듭니다.
   9. 그릇에 밥을 담고 준비한 야채와 계란프라이를 보기 좋게 얹은 뒤, 고추장 양념과 통깨, 참기름을 곁들여 냅니다.
2025-06-29 19:18:03.091 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:18:03.092 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 비빔밥
2025-06-29 19:18:03.094 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 19:18:03.096 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 104
2025-06-29 19:18:53.395 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:18:53.397 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:18:53.399 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:18:53.405 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:18:53.407 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 비빔밥 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:18:53.408 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:18:53.409 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:18:53.409 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:18:53.409 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 비빔밥 레시피
2025-06-29 19:18:53.409 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:18:53.409 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:18:53.412 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:18:53.413 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:18:53.413 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:18:53.413 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 비빔밥 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:18:53.413 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:19:09.504 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:19:09.505 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:19:09.505 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 비빔밥

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 밥은 따뜻하게 준비합니다.
   2. 시금치와 숙주나물은 각각 데쳐서 찬물에 헹군 뒤, 물기를 꼭 짠 다음 소금·참기름·다진마늘로 무쳐주세요.
   3. 애호박, 당근, 양파는 채 썰어 각각 팬에 식용유를 살짝 두르고 소금으로 간해 볶아주세요.
   4. 표고버섯은 기름에 볶다가 간장·다진마늘로 간을 맞춰주세요.
   5. 계란은 달걀 프라이(반숙 또는 완숙)로 준비합니다.
   6. 각종 나물, 채소, 볶은 버섯을 밥 위에 예쁘게 돌려가며 얹고, 계란 프라이를 중앙에 올립니다.
   7. 비빔밥 양념장(고추장·참기름·다진마늘·설탕·참깨 등)을 곁들여 내면 완성입니다.

5. 필요한 재료와 양:
   - 흰쌀밥 1공기 (200g)
   - 시금치 1/4단 (80g)
   - 숙주나물 1/4봉지 (50g)
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 양파 1/4개 (80g)
   - 표고버섯 2개 (50g)
   - 계란 1개
   - 고추장 1.5~3큰술 (취향에 따라 조절)
   - 참기름 1큰술
   - 식용유 1큰술(볶음용)
   - 진간장 0.5큰술(버섯 볶음용)
   - 다진 마늘 0.5~1작은술(각종 나물·버섯)
   - 소금 약간
   - 통깨 1큰술

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/WUq1ofk.jpg

8. 요리 팁:
   - 나물류는 각각 따로 조리해야 신선하고 선명한 색감과 맛을 살릴 수 있습니다.
   - 양념장은 미리 만들어 숙성하면 맛이 더 깊어집니다.
   - 고기 토핑(소고기볶음 등)을 추가하면 더 든든하게 즐길 수 있습니다.
   - 계란 프라이는 반숙으로 하면 비빌 때 고소함이 더 살아납니다.

※ 새우 등 해산물 재료는 본 레시피에 포함되어 있지 않으며, 알레르기 걱정 없이 즐기실 수 있습니다.
2025-06-29 19:19:09.509 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:19:09.511 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:19:09.511 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/WUq1ofk.jpg
2025-06-29 19:19:09.512 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/WUq1ofk.jpg
2025-06-29 19:19:09.512 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/WUq1ofk.jpg
2025-06-29 19:19:09.512 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 흰쌀밥 1공기 (200g)
   - 시금치 1/4단 (80g)
   - 숙주나물 1/4봉지 (50g)
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 양파 1/4개 (80g)
   - 표고버섯 2개 (50g)
   - 계란 1개
   - 고추장 1.5~3큰술 (취향에 따라 조절)
   - 참기름 1큰술
   - 식용유 1큰술(볶음용)
   - 진간장 0.5큰술(버섯 볶음용)
   - 다진 마늘 0.5~1작은술(각종 나물·버섯)
   - 소금 약간
   - 통깨 1큰술
2025-06-29 19:19:09.512 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 15
2025-06-29 19:19:09.512 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 흰쌀밥 1공기 (200g)
2025-06-29 19:19:09.512 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 흰쌀밥, Amount: 1공기
2025-06-29 19:19:09.512 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 흰쌀밥, Amount: 1공기
2025-06-29 19:19:09.514 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '흰쌀밥' not found in DB. Skipping.
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 시금치 1/4단 (80g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 시금치 1/4단 (80g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 숙주나물 1/4봉지 (50g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 숙주나물 1/4봉지 (50g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 1/4개 (80g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 애호박 1/4개 (80g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개 (80g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/4개 (80g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개 (80g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개 (80g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 2개 (50g)
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 표고버섯, Amount: 2개
2025-06-29 19:19:09.516 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 표고버섯, Amount: 2개
2025-06-29 19:19:09.518 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:19:09.519 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '표고버섯' not found in DB. Skipping.
2025-06-29 19:19:09.519 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1개
2025-06-29 19:19:09.519 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 1개
2025-06-29 19:19:09.519 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 1개
2025-06-29 19:19:09.520 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:19:09.521 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 19:19:09.521 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 1.5~3큰술 (취향에 따라 조절)
2025-06-29 19:19:09.521 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추장 1.5~3큰술 (취향에 따라 조절)
2025-06-29 19:19:09.521 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-29 19:19:09.522 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 19:19:09.522 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 19:19:09.523 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:19:09.524 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:19:09.524 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1큰술(볶음용)
2025-06-29 19:19:09.524 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 1큰술
2025-06-29 19:19:09.524 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-29 19:19:09.525 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 0.5큰술(버섯 볶음용)
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 진간장 0.5큰술(버섯 볶음용)
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 0.5~1작은술(각종 나물·버섯)
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 0.5~1작은술(각종 나물·버섯)
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 약간
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 약간
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 1큰술
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통깨, Amount: 1큰술
2025-06-29 19:19:09.526 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통깨, Amount: 1큰술
2025-06-29 19:19:09.528 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:19:09.528 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '통깨' not found in DB. Skipping.
2025-06-29 19:19:09.528 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 밥은 따뜻하게 준비합니다.
   2. 시금치와 숙주나물은 각각 데쳐서 찬물에 헹군 뒤, 물기를 꼭 짠 다음 소금·참기름·다진마늘로 무쳐주세요.
   3. 애호박, 당근, 양파
2025-06-29 19:19:09.528 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:19:09.528 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 흰쌀밥 1공기 (200g)
   - 시금치 1/4단 (80g)
   - 숙주나물 1/4봉지 (50g)
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 양파 1/4개 (80g)
   - 표고버섯 2개 (50g)
   - 계란 1개
   - 고추장 1.5~3큰술 (취향에 따라 조절)
   - 참기름 1큰술
   - 식용유 1큰술(볶음용)
   - 진간장 0.5큰술(버섯 볶음용)
   - 다진 마늘 0.5~1작은술(각종 나물·버섯)
   - 소금 약간
   - 통깨 1큰술

조리 방법:
1. 밥은 따뜻하게 준비합니다.
   2. 시금치와 숙주나물은 각각 데쳐서 찬물에 헹군 뒤, 물기를 꼭 짠 다음 소금·참기름·다진마늘로 무쳐주세요.
   3. 애호박, 당근, 양파는 채 썰어 각각 팬에 식용유를 살짝 두르고 소금으로 간해 볶아주세요.
   4. 표고버섯은 기름에 볶다가 간장·다진마늘로 간을 맞춰주세요.
   5. 계란은 달걀 프라이(반숙 또는 완숙)로 준비합니다.
   6. 각종 나물, 채소, 볶은 버섯을 밥 위에 예쁘게 돌려가며 얹고, 계란 프라이를 중앙에 올립니다.
   7. 비빔밥 양념장(고추장·참기름·다진마늘·설탕·참깨 등)을 곁들여 내면 완성입니다.
2025-06-29 19:19:09.529 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:19:09.530 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 비빔밥
2025-06-29 19:20:42.940 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:20:42.946 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:20:42.949 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:20:42.953 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:20:42.955 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 비빔밥 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:20:42.956 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:20:42.968 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:20:42.968 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:20:42.968 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 비빔밥 레시피
2025-06-29 19:20:42.968 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:20:42.968 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:20:42.973 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:20:42.974 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:20:42.974 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:20:42.974 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 비빔밥 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:20:42.974 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:20:44.528 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:20:44.530 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:20:44.532 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:20:44.533 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:20:44.534 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 비빔밥 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:20:44.534 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:20:44.536 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:20:44.536 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:20:44.536 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 비빔밥 레시피
2025-06-29 19:20:44.536 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:20:44.536 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:20:44.537 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:20:44.538 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:20:44.538 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:20:44.538 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 비빔밥 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:20:44.538 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:20:49.365 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:20:49.365 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:20:49.365 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 비빔밥

2. 카테고리: 한식

3. 조리 시간: 30~35분

4. 조리 방법:
   1. 쌀을 깨끗이 씻어 밥을 짓고 준비합니다.
   2. 애호박, 당근, 양파, 표고버섯 등 각종 채소는 길게 채썰어줍니다.
   3. 시금치와 숙주나물은 끓는 소금물에 데친 후 찬물에 헹궈서, 각각 참기름·소금·다진 마늘로 살짝 무칩니다.
   4. 팬에 식용유를 두르고 애호박, 당근, 표고버섯을 각각 따로 소금 또는 간장, 다진 마늘로 간하여 살짝 볶아줍니다.
   5. 계란은 반숙 프라이 또는 달걀후라이로 준비합니다.
   6. 밥 위에 준비한 채소들을 보기 좋게 둘러 담고, 가운데 계란프라이를 올립니다.
   7. 비빔밥 양념장(비빔 고추장, 참기름, 통깨)을 기호에 맞게 올려줍니다.

5. 필요한 재료와 양:
   - 밥 1공기 (200g)
   - 애호박 1/4개 (약 80g)
   - 당근 1/4개 (약 80g)
   - 표고버섯 2~3개 (약 50g)
   - 양파 1/4개 (약 80g)
   - 시금치 1/4단 (약 80g)
   - 숙주나물 1/4봉지 (약 50g)
   - 계란 1개
   - 식용유 1큰술
   - 다진 마늘 0.5작은술
   - 다진 파 0.5작은술
   - 진간장 0.5작은술
   - 참기름 1큰술
   - 통깨 1큰술
   - 소금, 후추 약간
   - [비빔 양념장] 고추장 1.5~3큰술, 쌀조청(또는 올리고당) 1큰술, 매실청 1작은술, 참기름 0.5큰술

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/1ZKE6yW.jpg

8. 요리 팁:
   - 각 채소는 따로 볶아야 색이 선명하고 식감도 살아 있습니다.
   - 나물류는 데친 후 물기를 꼭 짜서 양념하는 것이 더욱 맛있고 비빔밥이 질척해지지 않습니다.
   - 기호에 따라 고기나 불고기, 취나물, 콩나물 등을 추가하거나 계란 대신 달걀노른자만 올릴 수도 있습니다.
   - 양념장을 미리 만들어 숙성시키면 감칠맛이 더해집니다.

**알레르기 정보**: 비빔밥 기본 레시피에는 새우가 포함되지 않으므로 안전하게 드실 수 있습니다.
2025-06-29 19:20:49.371 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:20:49.373 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:20:49.373 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/1ZKE6yW.jpg
2025-06-29 19:20:49.374 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/1ZKE6yW.jpg
2025-06-29 19:20:49.374 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/1ZKE6yW.jpg
2025-06-29 19:20:49.374 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 1공기 (200g)
   - 애호박 1/4개 (약 80g)
   - 당근 1/4개 (약 80g)
   - 표고버섯 2~3개 (약 50g)
   - 양파 1/4개 (약 80g)
   - 시금치 1/4단 (약 80g)
   - 숙주나물 1/4봉지 (약 50g)
   - 계란 1개
   - 식용유 1큰술
   - 다진 마늘 0.5작은술
   - 다진 파 0.5작은술
   - 진간장 0.5작은술
   - 참기름 1큰술
   - 통깨 1큰술
   - 소금, 후추 약간
   - [비빔 양념장] 고추장 1.5~3큰술, 쌀조청(또는 올리고당) 1큰술, 매실청 1작은술, 참기름 0.5큰술
2025-06-29 19:20:49.374 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 16
2025-06-29 19:20:49.374 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기 (200g)
2025-06-29 19:20:49.375 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 19:20:49.375 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 19:20:49.378 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.379 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 19:20:49.379 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 1/4개 (약 80g)
2025-06-29 19:20:49.380 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 80g
2025-06-29 19:20:49.380 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 80g
2025-06-29 19:20:49.381 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.382 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:20:49.382 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개 (약 80g)
2025-06-29 19:20:49.382 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 80g
2025-06-29 19:20:49.382 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 80g
2025-06-29 19:20:49.383 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.384 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:20:49.384 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 2~3개 (약 50g)
2025-06-29 19:20:49.384 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 50g
2025-06-29 19:20:49.384 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 50g
2025-06-29 19:20:49.385 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.386 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:20:49.386 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개 (약 80g)
2025-06-29 19:20:49.386 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 80g
2025-06-29 19:20:49.386 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 80g
2025-06-29 19:20:49.387 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.388 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:20:49.388 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 시금치 1/4단 (약 80g)
2025-06-29 19:20:49.388 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 80g
2025-06-29 19:20:49.388 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 80g
2025-06-29 19:20:49.390 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.391 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:20:49.391 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 숙주나물 1/4봉지 (약 50g)
2025-06-29 19:20:49.391 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 50g
2025-06-29 19:20:49.391 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 50g
2025-06-29 19:20:49.392 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.393 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:20:49.393 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1개
2025-06-29 19:20:49.393 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 1개
2025-06-29 19:20:49.393 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 1개
2025-06-29 19:20:49.394 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.395 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 19:20:49.395 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 1큰술
2025-06-29 19:20:49.395 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식용유, Amount: 1큰술
2025-06-29 19:20:49.395 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-29 19:20:49.396 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 0.5작은술
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 0.5작은술
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 파 0.5작은술
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 파 0.5작은술
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 0.5작은술
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 진간장 0.5작은술
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 19:20:49.397 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 19:20:49.398 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.398 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:20:49.398 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 1큰술
2025-06-29 19:20:49.399 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통깨, Amount: 1큰술
2025-06-29 19:20:49.399 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통깨, Amount: 1큰술
2025-06-29 19:20:49.401 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.401 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '통깨' not found in DB. Skipping.
2025-06-29 19:20:49.401 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 19:20:49.401 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 19:20:49.401 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: [비빔 양념장] 고추장 1.5~3큰술, 쌀조청(또는 올리고당) 1큰술, 매실청 1작은술, 참기름 0.5큰술
2025-06-29 19:20:49.402 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 매실청, Amount: 1작은술
2025-06-29 19:20:49.402 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 매실청, Amount: 1작은술
2025-06-29 19:20:49.403 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:20:49.403 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '매실청' not found in DB. Skipping.
2025-06-29 19:20:49.403 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 쌀을 깨끗이 씻어 밥을 짓고 준비합니다.
   2. 애호박, 당근, 양파, 표고버섯 등 각종 채소는 길게 채썰어줍니다.
   3. 시금치와 숙주나물은 끓는 소금물에 데친 후 
2025-06-29 19:20:49.403 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:20:49.403 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 1공기 (200g)
   - 애호박 1/4개 (약 80g)
   - 당근 1/4개 (약 80g)
   - 표고버섯 2~3개 (약 50g)
   - 양파 1/4개 (약 80g)
   - 시금치 1/4단 (약 80g)
   - 숙주나물 1/4봉지 (약 50g)
   - 계란 1개
   - 식용유 1큰술
   - 다진 마늘 0.5작은술
   - 다진 파 0.5작은술
   - 진간장 0.5작은술
   - 참기름 1큰술
   - 통깨 1큰술
   - 소금, 후추 약간
   - [비빔 양념장] 고추장 1.5~3큰술, 쌀조청(또는 올리고당) 1큰술, 매실청 1작은술, 참기름 0.5큰술

조리 방법:
1. 쌀을 깨끗이 씻어 밥을 짓고 준비합니다.
   2. 애호박, 당근, 양파, 표고버섯 등 각종 채소는 길게 채썰어줍니다.
   3. 시금치와 숙주나물은 끓는 소금물에 데친 후 찬물에 헹궈서, 각각 참기름·소금·다진 마늘로 살짝 무칩니다.
   4. 팬에 식용유를 두르고 애호박, 당근, 표고버섯을 각각 따로 소금 또는 간장, 다진 마늘로 간하여 살짝 볶아줍니다.
   5. 계란은 반숙 프라이 또는 달걀후라이로 준비합니다.
   6. 밥 위에 준비한 채소들을 보기 좋게 둘러 담고, 가운데 계란프라이를 올립니다.
   7. 비빔밥 양념장(비빔 고추장, 참기름, 통깨)을 기호에 맞게 올려줍니다.
2025-06-29 19:20:49.404 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:20:49.405 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 비빔밥
2025-06-29 19:20:53.367 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:20:53.374 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:20:53.378 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:20:53.384 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:20:53.386 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 비빔밥, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:20:53.386 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:20:53.389 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:20:53.389 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:20:53.389 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 비빔밥
2025-06-29 19:20:53.389 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:20:53.389 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:20:53.392 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:20:53.392 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:20:53.392 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:20:53.393 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 비빔밥
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:20:53.393 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:21:00.646 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:21:00.646 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:21:00.646 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 비빔밥

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 준비된 모든 야채(애호박, 당근, 표고버섯, 시금치, 콩나물 등)를 깨끗이 씻고 먹기 좋게 채 썬다[1][2][3].
   2. 시금치와 콩나물은 각각 소금 약간을 넣고 끓는 물에 데친 뒤 찬물에 헹구어 물기를 꼭 짠다. 시금치는 참기름, 소금, 다진 마늘로 무치고 콩나물은 소금, 참기름으로 무친다[1][2][3].
   3. 표고버섯, 애호박, 당근은 각각 팬에 식용유를 둘러 중불에서 소금간을 약간 해가며 볶는다[1][3].
   4. 그릇에 흰쌀밥을 담고 볶은 채소, 무친 채소, 기타 준비한 토핑(돼지고기볶음, 취나물 등)을 예쁘게 돌려 담는다[1][2][3].
   5. 계란 프라이(혹은 반숙)를 중앙에 올린다[2][3].
   6. 고추장 양념장 또는 시판 고추장을 취향에 맞게 올린 후, 참기름과 통깨를 뿌린다[1][3][4].
   7. 먹기 직전에 재료와 양념을 골고루 비벼서 즐긴다.

5. 필요한 재료와 양:
   - 흰쌀밥 1공기 (약 200g)
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 표고버섯 2~3개 (50g)
   - 시금치 1/4단 (80g)
   - 콩나물 100g
   - 양파 1/4개 (80g) (선택)
   - 계란 1개
   - 식용유, 참기름, 통깨, 소금, 후추
   - 다진 마늘 0.5작은술
   - 다진 파 0.5작은술 (선택)
   - 진간장 0.5작은술
   - 고추장 1.5~3큰술 (취향에 따라)
   - 설탕 1작은술 (양념장에 추가 가능)
   - 기타: 돼지고기 또는 불고기(선택, 50g), 취나물(100g, 선택)

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/JA2Z4om.jpg

8. 요리 팁:
   - 각 나물과 채소는 물기를 잘 짠 후 무치거나 볶아야 비빔밥이 질어지지 않습니다.
   - 고추장 양념장은 고추장, 설탕 또는 쌀조청, 매실청, 다진 마늘, 참기름, 참깨를 섞어 만들면 풍미가 좋습니다[2][4].
   - 계란 프라이를 반숙으로 하면 비빈 후 고소함이 더해집니다[3].
   - 야채나 토핑은 집에 있는 재료로 자유롭게 변경할 수 있습니다.

**알레르기 정보:**  
새우 등 해산물 재료는 포함되어 있지 않아, 해당 알레르기와 관련 없이 안전하게 드실 수 있습니다.
2025-06-29 19:21:00.648 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:21:00.649 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:21:00.649 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/JA2Z4om.jpg
2025-06-29 19:21:00.649 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/JA2Z4om.jpg
2025-06-29 19:21:00.649 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/JA2Z4om.jpg
2025-06-29 19:21:00.650 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 흰쌀밥 1공기 (약 200g)
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 표고버섯 2~3개 (50g)
   - 시금치 1/4단 (80g)
   - 콩나물 100g
   - 양파 1/4개 (80g) (선택)
   - 계란 1개
   - 식용유, 참기름, 통깨, 소금, 후추
   - 다진 마늘 0.5작은술
   - 다진 파 0.5작은술 (선택)
   - 진간장 0.5작은술
   - 고추장 1.5~3큰술 (취향에 따라)
   - 설탕 1작은술 (양념장에 추가 가능)
   - 기타: 돼지고기 또는 불고기(선택, 50g), 취나물(100g, 선택)
2025-06-29 19:21:00.650 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 15
2025-06-29 19:21:00.650 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 흰쌀밥 1공기 (약 200g)
2025-06-29 19:21:00.650 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 흰쌀밥, Amount: 1공기
2025-06-29 19:21:00.650 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 흰쌀밥, Amount: 1공기
2025-06-29 19:21:00.652 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:00.653 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '흰쌀밥' not found in DB. Skipping.
2025-06-29 19:21:00.653 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 1/4개 (80g)
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 애호박 1/4개 (80g)
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개 (80g)
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/4개 (80g)
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 2~3개 (50g)
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 표고버섯 2~3개 (50g)
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 시금치 1/4단 (80g)
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 시금치 1/4단 (80g)
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 콩나물 100g
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 콩나물, Amount: 100g
2025-06-29 19:21:00.654 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 콩나물, Amount: 100g
2025-06-29 19:21:00.655 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:00.656 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '콩나물' not found in DB. Skipping.
2025-06-29 19:21:00.656 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개 (80g) (선택)
2025-06-29 19:21:00.657 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개 (80g) (선택)
2025-06-29 19:21:00.657 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1개
2025-06-29 19:21:00.657 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 1개
2025-06-29 19:21:00.657 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 1개
2025-06-29 19:21:00.659 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유, 참기름, 통깨, 소금, 후추
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유, 참기름, 통깨, 소금, 후추
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 0.5작은술
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 0.5작은술
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 파 0.5작은술 (선택)
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 파 0.5작은술 (선택)
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장 0.5작은술
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 진간장 0.5작은술
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 1.5~3큰술 (취향에 따라)
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추장 1.5~3큰술 (취향에 따라)
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1작은술 (양념장에 추가 가능)
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1작은술
2025-06-29 19:21:00.660 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1작은술
2025-06-29 19:21:00.661 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:00.662 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 19:21:00.662 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 기타: 돼지고기 또는 불고기(선택, 50g), 취나물(100g, 선택)
2025-06-29 19:21:00.662 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 기타, Amount: 돼지고기 또는 불고기(선택, 50g), 취나물(100g, 선택)
2025-06-29 19:21:00.662 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 기타, Amount: 돼지고기 또는 불고기(선택, 50g), 취나물(100g, 선택)
2025-06-29 19:21:00.662 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:00.663 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '기타' not found in DB. Skipping.
2025-06-29 19:21:00.663 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 준비된 모든 야채(애호박, 당근, 표고버섯, 시금치, 콩나물 등)를 깨끗이 씻고 먹기 좋게 채 썬다[1][2][3].
   2. 시금치와 콩나물은 각각 소금 약간을 넣고 끓는
2025-06-29 19:21:00.663 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:21:00.663 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 흰쌀밥 1공기 (약 200g)
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 표고버섯 2~3개 (50g)
   - 시금치 1/4단 (80g)
   - 콩나물 100g
   - 양파 1/4개 (80g) (선택)
   - 계란 1개
   - 식용유, 참기름, 통깨, 소금, 후추
   - 다진 마늘 0.5작은술
   - 다진 파 0.5작은술 (선택)
   - 진간장 0.5작은술
   - 고추장 1.5~3큰술 (취향에 따라)
   - 설탕 1작은술 (양념장에 추가 가능)
   - 기타: 돼지고기 또는 불고기(선택, 50g), 취나물(100g, 선택)

조리 방법:
1. 준비된 모든 야채(애호박, 당근, 표고버섯, 시금치, 콩나물 등)를 깨끗이 씻고 먹기 좋게 채 썬다[1][2][3].
   2. 시금치와 콩나물은 각각 소금 약간을 넣고 끓는 물에 데친 뒤 찬물에 헹구어 물기를 꼭 짠다. 시금치는 참기름, 소금, 다진 마늘로 무치고 콩나물은 소금, 참기름으로 무친다[1][2][3].
   3. 표고버섯, 애호박, 당근은 각각 팬에 식용유를 둘러 중불에서 소금간을 약간 해가며 볶는다[1][3].
   4. 그릇에 흰쌀밥을 담고 볶은 채소, 무친 채소, 기타 준비한 토핑(돼지고기볶음, 취나물 등)을 예쁘게 돌려 담는다[1][2][3].
   5. 계란 프라이(혹은 반숙)를 중앙에 올린다[2][3].
   6. 고추장 양념장 또는 시판 고추장을 취향에 맞게 올린 후, 참기름과 통깨를 뿌린다[1][3][4].
   7. 먹기 직전에 재료와 양념을 골고루 비벼서 즐긴다.
2025-06-29 19:21:00.663 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:21:00.664 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 비빔밥
2025-06-29 19:21:02.141 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:21:02.142 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:21:02.142 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 비빔밥

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 밥은 고슬고슬하게 지어 한 김 식힙니다.
   2. 애호박, 당근, 무, 표고 버섯은 채 썰고 각각 소금 약간과 식용유에 볶습니다.
   3. 콩나물은 깨끗이 씻어 끓는 물에 소금 넣고 4~5분간 데친 후 찬물에 헹궈 물기를 빼고 무칩니다[1][3].
   4. 소고기는 키친타월로 핏물을 제거한 뒤 간장·다진 마늘·참기름·후추로 밑간하여 볶습니다[1].
   5. 각 재료를 준비된 밥 위에 보기 좋게 색깔별로 올립니다.
   6. 달걀후라이는 반숙 또는 완숙으로 구워 곁들입니다.
   7. 양념장은 고추장, 다진 마늘, 참기름, 깨, 설탕, 식초, 간장 등을 섞어 만듭니다[1].
   8. 먹기 직전 양념장과 재료를 모두 비벼서 맛있게 즐깁니다.

5. 필요한 재료와 양:
   - 밥 1공기 (200g)
   - 애호박 40g
   - 당근 14g
   - 무 30g
   - 표고버섯 1개(12g)
   - 콩나물 40g
   - 소고기(다짐육) 30g
   - 계란 1개
   - 김가루 약간
   - 통깨 약간
   - 고추장 1큰술
   - 참기름 1큰술
   - 설탕 1작은술
   - 다진 마늘 1/2작은술
   - 국간장 1/2큰술
   - 식초 1작은술
   - 식용유, 소금, 후추 약간

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/AfQ135l.jpg

8. 요리 팁:
   - 나물 재료는 입맛과 계절에 따라 시금치, 미나리, 고사리 등 다양하게 응용하실 수 있습니다.
   - 밥을 너무 뜨겁지 않게 식힌 후 재료를 올려야 나물의 숨이 죽지 않고 식감이 살아요.
   - 새우 등 알레르기 유발 식재료가 포함되어 있지 않으므로 안심하고 드실 수 있습니다. 

*아침에 밥을 먹으면 속이 불편하다면, 밥의 양을 줄이고 나물과 계란, 고명을 더해 드셔도 좋습니다.
2025-06-29 19:21:02.144 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/AfQ135l.jpg
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/AfQ135l.jpg
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/AfQ135l.jpg
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 1공기 (200g)
   - 애호박 40g
   - 당근 14g
   - 무 30g
   - 표고버섯 1개(12g)
   - 콩나물 40g
   - 소고기(다짐육) 30g
   - 계란 1개
   - 김가루 약간
   - 통깨 약간
   - 고추장 1큰술
   - 참기름 1큰술
   - 설탕 1작은술
   - 다진 마늘 1/2작은술
   - 국간장 1/2큰술
   - 식초 1작은술
   - 식용유, 소금, 후추 약간
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 17
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기 (200g)
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 19:21:02.146 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 19:21:02.148 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.148 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 19:21:02.149 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 40g
2025-06-29 19:21:02.149 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 애호박, Amount: 40g
2025-06-29 19:21:02.149 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 애호박, Amount: 40g
2025-06-29 19:21:02.150 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.151 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '애호박' not found in DB. Skipping.
2025-06-29 19:21:02.151 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 14g
2025-06-29 19:21:02.151 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 당근, Amount: 14g
2025-06-29 19:21:02.151 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 당근, Amount: 14g
2025-06-29 19:21:02.152 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.153 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '당근' not found in DB. Skipping.
2025-06-29 19:21:02.153 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 무 30g
2025-06-29 19:21:02.153 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 무, Amount: 30g
2025-06-29 19:21:02.153 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 무, Amount: 30g
2025-06-29 19:21:02.154 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.155 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '무' not found in DB. Skipping.
2025-06-29 19:21:02.155 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 1개(12g)
2025-06-29 19:21:02.155 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 표고버섯, Amount: 1개
2025-06-29 19:21:02.155 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 표고버섯, Amount: 1개
2025-06-29 19:21:02.157 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.158 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '표고버섯' not found in DB. Skipping.
2025-06-29 19:21:02.158 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 콩나물 40g
2025-06-29 19:21:02.158 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 콩나물, Amount: 40g
2025-06-29 19:21:02.158 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 콩나물, Amount: 40g
2025-06-29 19:21:02.158 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.159 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '콩나물' not found in DB. Skipping.
2025-06-29 19:21:02.159 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기(다짐육) 30g
2025-06-29 19:21:02.159 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소고기(다짐육) 30g
2025-06-29 19:21:02.159 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1개
2025-06-29 19:21:02.159 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 1개
2025-06-29 19:21:02.159 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 1개
2025-06-29 19:21:02.160 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.161 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 19:21:02.161 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 김가루 약간
2025-06-29 19:21:02.161 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 김가루 약간
2025-06-29 19:21:02.161 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 약간
2025-06-29 19:21:02.161 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 통깨 약간
2025-06-29 19:21:02.161 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 1큰술
2025-06-29 19:21:02.161 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 1큰술
2025-06-29 19:21:02.161 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 1큰술
2025-06-29 19:21:02.162 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.162 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 19:21:02.162 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-29 19:21:02.163 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 19:21:02.163 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 19:21:02.165 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.165 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:21:02.165 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1작은술
2025-06-29 19:21:02.165 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1작은술
2025-06-29 19:21:02.165 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1작은술
2025-06-29 19:21:02.166 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1/2작은술
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 1/2작은술
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 국간장 1/2큰술
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 국간장 1/2큰술
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식초 1작은술
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식초, Amount: 1작은술
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식초, Amount: 1작은술
2025-06-29 19:21:02.167 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:02.168 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '식초' not found in DB. Skipping.
2025-06-29 19:21:02.168 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유, 소금, 후추 약간
2025-06-29 19:21:02.168 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유, 소금, 후추 약간
2025-06-29 19:21:02.168 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 밥은 고슬고슬하게 지어 한 김 식힙니다.
   2. 애호박, 당근, 무, 표고 버섯은 채 썰고 각각 소금 약간과 식용유에 볶습니다.
   3. 콩나물은 깨끗이 씻어 끓는 물에
2025-06-29 19:21:02.168 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:21:02.168 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 1공기 (200g)
   - 애호박 40g
   - 당근 14g
   - 무 30g
   - 표고버섯 1개(12g)
   - 콩나물 40g
   - 소고기(다짐육) 30g
   - 계란 1개
   - 김가루 약간
   - 통깨 약간
   - 고추장 1큰술
   - 참기름 1큰술
   - 설탕 1작은술
   - 다진 마늘 1/2작은술
   - 국간장 1/2큰술
   - 식초 1작은술
   - 식용유, 소금, 후추 약간

조리 방법:
1. 밥은 고슬고슬하게 지어 한 김 식힙니다.
   2. 애호박, 당근, 무, 표고 버섯은 채 썰고 각각 소금 약간과 식용유에 볶습니다.
   3. 콩나물은 깨끗이 씻어 끓는 물에 소금 넣고 4~5분간 데친 후 찬물에 헹궈 물기를 빼고 무칩니다[1][3].
   4. 소고기는 키친타월로 핏물을 제거한 뒤 간장·다진 마늘·참기름·후추로 밑간하여 볶습니다[1].
   5. 각 재료를 준비된 밥 위에 보기 좋게 색깔별로 올립니다.
   6. 달걀후라이는 반숙 또는 완숙으로 구워 곁들입니다.
   7. 양념장은 고추장, 다진 마늘, 참기름, 깨, 설탕, 식초, 간장 등을 섞어 만듭니다[1].
   8. 먹기 직전 양념장과 재료를 모두 비벼서 맛있게 즐깁니다.
2025-06-29 19:21:02.169 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:21:02.169 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 비빔밥
2025-06-29 19:21:34.705 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:21:34.710 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:21:34.713 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:21:34.714 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:21:34.719 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 비빔밥 레시피, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:21:34.720 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:21:34.725 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:21:34.727 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:21:34.727 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 비빔밥 레시피
2025-06-29 19:21:34.727 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:21:34.727 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:21:34.748 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:21:34.750 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:21:34.750 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:21:34.750 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 비빔밥 레시피
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:21:34.750 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:21:43.115 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:21:43.115 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:21:43.115 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 비빔밥

2. 카테고리: 한식

3. 조리 시간: 30~35분

4. 조리 방법:
   1. 쌀을 깨끗이 씻어 밥을 지어 준비합니다.
   2. 시금치는 끓는 물에 소금을 살짝 넣고 데친 후 찬물에 헹궈 물기를 꼭 짜고, 간장 0.5작은술, 다진 마늘 0.5작은술, 참기름 약간으로 무쳐줍니다[1].
   3. 콩나물도 데치고 물기를 빼서 소금과 참기름으로 무칩니다[3].
   4. 애호박, 당근, 양파, 표고버섯은 각각 채썰어 식용유를 두른 팬에 소금 약간 넣어 볶아줍니다[1][3].
   5. 계란은 반숙이나 완숙 프라이로 준비합니다[2][3].
   6. 고추장 양념은 고추장 2큰술, 쌀조청 2숟갈(또는 올리고당), 참기름 1/2큰술, 다진마늘 약간, 매실청 1숟갈(선택), 통깨를 섞어 만듭니다[2][3].
   7. 그릇에 밥을 담고, 준비한 나물과 채소를 예쁘게 얹은 뒤 가운데 계란을 올립니다.
   8. 고추장 양념과 참기름을 곁들여 비벼 먹습니다.

5. 필요한 재료와 양:
   - 밥 1공기 (약 200g)
   - 시금치 80g
   - 콩나물 50~100g
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 양파 1/4개 (80g)
   - 표고버섯 2~3개 (50g)
   - 계란 1개
   - 고추장 2큰술
   - 쌀조청(또는 올리고당) 2숟갈
   - 참기름 1큰술 + 약간
   - 다진 마늘 0.5~1작은술
   - 간장 0.5작은술 (시금치무침)
   - 소금, 후추 약간
   - 통깨 1큰술

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/7nF5Lgz.jpg

8. 요리 팁:
   - 채소는 집에 남은 재료로 대체해도 무방합니다. 취나물, 미나리, 오이, 무나물도 잘 어울립니다.
   - 계란프라이는 너무 익히지 않고 반숙으로 하면 비빌 때 고소함이 더합니다.
   - 고추장 대신 간장 양념을 곁들여도 위에 부담이 적습니다.
   - 아침에 밥이 부담스럽다면 밥 양을 줄이고 야채와 나물을 넉넉히 사용해보세요.
2025-06-29 19:21:43.117 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:21:43.118 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:21:43.118 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/7nF5Lgz.jpg
2025-06-29 19:21:43.118 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/7nF5Lgz.jpg
2025-06-29 19:21:43.118 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/7nF5Lgz.jpg
2025-06-29 19:21:43.118 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 1공기 (약 200g)
   - 시금치 80g
   - 콩나물 50~100g
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 양파 1/4개 (80g)
   - 표고버섯 2~3개 (50g)
   - 계란 1개
   - 고추장 2큰술
   - 쌀조청(또는 올리고당) 2숟갈
   - 참기름 1큰술 + 약간
   - 다진 마늘 0.5~1작은술
   - 간장 0.5작은술 (시금치무침)
   - 소금, 후추 약간
   - 통깨 1큰술
2025-06-29 19:21:43.118 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 15
2025-06-29 19:21:43.118 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기 (약 200g)
2025-06-29 19:21:43.119 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 19:21:43.119 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 19:21:43.120 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:43.120 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 19:21:43.120 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 시금치 80g
2025-06-29 19:21:43.121 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 시금치, Amount: 80g
2025-06-29 19:21:43.121 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 시금치, Amount: 80g
2025-06-29 19:21:43.121 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '시금치' not found in DB. Skipping.
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 콩나물 50~100g
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 콩나물 50~100g
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 1/4개 (80g)
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 애호박 1/4개 (80g)
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개 (80g)
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/4개 (80g)
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개 (80g)
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개 (80g)
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 2~3개 (50g)
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 표고버섯 2~3개 (50g)
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1개
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 1개
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 1개
2025-06-29 19:21:43.122 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:43.123 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 19:21:43.123 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 2큰술
2025-06-29 19:21:43.123 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 2큰술
2025-06-29 19:21:43.123 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 2큰술
2025-06-29 19:21:43.123 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:43.124 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 19:21:43.124 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 쌀조청(또는 올리고당) 2숟갈
2025-06-29 19:21:43.124 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 쌀조청(또는 올리고당) 2숟갈
2025-06-29 19:21:43.124 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술 + 약간
2025-06-29 19:21:43.124 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 19:21:43.124 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 19:21:43.124 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 0.5~1작은술
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 마늘 0.5~1작은술
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 0.5작은술 (시금치무침)
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 간장 0.5작은술 (시금치무침)
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 1큰술
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 통깨, Amount: 1큰술
2025-06-29 19:21:43.125 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 통깨, Amount: 1큰술
2025-06-29 19:21:43.127 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:21:43.127 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '통깨' not found in DB. Skipping.
2025-06-29 19:21:43.128 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 쌀을 깨끗이 씻어 밥을 지어 준비합니다.
   2. 시금치는 끓는 물에 소금을 살짝 넣고 데친 후 찬물에 헹궈 물기를 꼭 짜고, 간장 0.5작은술, 다진 마늘 0.5작은술, 
2025-06-29 19:21:43.128 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:21:43.128 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 1공기 (약 200g)
   - 시금치 80g
   - 콩나물 50~100g
   - 애호박 1/4개 (80g)
   - 당근 1/4개 (80g)
   - 양파 1/4개 (80g)
   - 표고버섯 2~3개 (50g)
   - 계란 1개
   - 고추장 2큰술
   - 쌀조청(또는 올리고당) 2숟갈
   - 참기름 1큰술 + 약간
   - 다진 마늘 0.5~1작은술
   - 간장 0.5작은술 (시금치무침)
   - 소금, 후추 약간
   - 통깨 1큰술

조리 방법:
1. 쌀을 깨끗이 씻어 밥을 지어 준비합니다.
   2. 시금치는 끓는 물에 소금을 살짝 넣고 데친 후 찬물에 헹궈 물기를 꼭 짜고, 간장 0.5작은술, 다진 마늘 0.5작은술, 참기름 약간으로 무쳐줍니다[1].
   3. 콩나물도 데치고 물기를 빼서 소금과 참기름으로 무칩니다[3].
   4. 애호박, 당근, 양파, 표고버섯은 각각 채썰어 식용유를 두른 팬에 소금 약간 넣어 볶아줍니다[1][3].
   5. 계란은 반숙이나 완숙 프라이로 준비합니다[2][3].
   6. 고추장 양념은 고추장 2큰술, 쌀조청 2숟갈(또는 올리고당), 참기름 1/2큰술, 다진마늘 약간, 매실청 1숟갈(선택), 통깨를 섞어 만듭니다[2][3].
   7. 그릇에 밥을 담고, 준비한 나물과 채소를 예쁘게 얹은 뒤 가운데 계란을 올립니다.
   8. 고추장 양념과 참기름을 곁들여 비벼 먹습니다.
2025-06-29 19:21:43.128 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:21:43.129 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 비빔밥
2025-06-29 19:22:35.734 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Retrograde clock change detected (housekeeper delta=29s722ms), soft-evicting connections from pool.
2025-06-29 19:22:46.538 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:22:46.549 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:22:46.572 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:22:46.579 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:22:46.584 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 불고기덮밥, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:22:46.585 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:22:46.590 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:22:46.590 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:22:46.590 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 불고기덮밥
2025-06-29 19:22:46.590 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:22:46.590 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:22:46.597 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:22:46.609 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:22:46.609 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:22:46.609 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 불고기덮밥
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:22:46.609 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:22:56.945 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:22:56.945 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:22:56.945 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 불고기덮밥

2. 카테고리: 한식

3. 조리 시간: 약 20분

4. 조리 방법:
   1. 양파는 얇게 채를 썰고, 대파는 송송 썹니다.
   2. 채 썬 양파와 대파를 찬물에 담가 매운맛을 뺍니다.
   3. 예열한 팬에 식용유를 두르고 양념불고기를 넣어 익힙니다.
   4. 고기를 볶은 뒤 팬에 양념 재료(간장, 올리고당, 맛술, 물)를 넣고 살짝 졸입니다.
   5. 그릇에 밥을 담고, 위에 양파, 익힌 불고기, 대파를 올린 뒤 양념을 한 숟가락 끼얹어 완성합니다[1].

5. 필요한 재료와 양:
   - 불고기용 소고기 100g (양념 불고기 또는 직접 양념)
   - 양파 1/4개
   - 대파 1/4대
   - 밥 1공기
   - 간장 2숟가락
   - 올리고당 2숟가락
   - 맛술 2숟가락
   - 물 2숟가락
   - 식용유 약간

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/jHnL0GB.jpg

8. 요리 팁:
   - 시판 양념불고기도 활용 가능하며, 직접 양념할 때는 설탕 대신 올리고당을 사용하면 더 윤기 있고 부드럽습니다.
   - 불고기는 미리 재워 두면 감칠맛이 더 깊어집니다.
   - 양념은 기호에 따라 가감하세요[1].
2025-06-29 19:22:56.948 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/jHnL0GB.jpg
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/jHnL0GB.jpg
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/jHnL0GB.jpg
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 불고기용 소고기 100g (양념 불고기 또는 직접 양념)
   - 양파 1/4개
   - 대파 1/4대
   - 밥 1공기
   - 간장 2숟가락
   - 올리고당 2숟가락
   - 맛술 2숟가락
   - 물 2숟가락
   - 식용유 약간
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 불고기용 소고기 100g (양념 불고기 또는 직접 양념)
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소고기, Amount: 100g
2025-06-29 19:22:56.950 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기, Amount: 100g
2025-06-29 19:22:56.951 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:22:56.953 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기' not found in DB. Skipping.
2025-06-29 19:22:56.953 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-29 19:22:56.953 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-29 19:22:56.953 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/4대
2025-06-29 19:22:56.953 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/4대
2025-06-29 19:22:56.953 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기
2025-06-29 19:22:56.953 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 19:22:56.953 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 19:22:56.954 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:22:56.955 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 19:22:56.955 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2숟가락
2025-06-29 19:22:56.955 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2숟가락
2025-06-29 19:22:56.955 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2숟가락
2025-06-29 19:22:56.955 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:22:56.956 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 19:22:56.956 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당 2숟가락
2025-06-29 19:22:56.956 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리고당, Amount: 2숟가락
2025-06-29 19:22:56.956 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 2숟가락
2025-06-29 19:22:56.956 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:22:56.957 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-29 19:22:56.957 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 2숟가락
2025-06-29 19:22:56.957 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 2숟가락
2025-06-29 19:22:56.957 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 2숟가락
2025-06-29 19:22:56.958 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:22:56.959 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 19:22:56.959 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 2숟가락
2025-06-29 19:22:56.959 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 2숟가락
2025-06-29 19:22:56.959 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 2숟가락
2025-06-29 19:22:56.960 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:22:56.963 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 19:22:56.963 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 19:22:56.963 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 19:22:56.963 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파는 얇게 채를 썰고, 대파는 송송 썹니다.
   2. 채 썬 양파와 대파를 찬물에 담가 매운맛을 뺍니다.
   3. 예열한 팬에 식용유를 두르고 양념불고기를 넣어 익힙니다
2025-06-29 19:22:56.963 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:22:56.963 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 불고기용 소고기 100g (양념 불고기 또는 직접 양념)
   - 양파 1/4개
   - 대파 1/4대
   - 밥 1공기
   - 간장 2숟가락
   - 올리고당 2숟가락
   - 맛술 2숟가락
   - 물 2숟가락
   - 식용유 약간

조리 방법:
1. 양파는 얇게 채를 썰고, 대파는 송송 썹니다.
   2. 채 썬 양파와 대파를 찬물에 담가 매운맛을 뺍니다.
   3. 예열한 팬에 식용유를 두르고 양념불고기를 넣어 익힙니다.
   4. 고기를 볶은 뒤 팬에 양념 재료(간장, 올리고당, 맛술, 물)를 넣고 살짝 졸입니다.
   5. 그릇에 밥을 담고, 위에 양파, 익힌 불고기, 대파를 올린 뒤 양념을 한 숟가락 끼얹어 완성합니다[1].
2025-06-29 19:22:56.964 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:22:56.967 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 불고기덮밥
2025-06-29 19:22:56.971 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 19:22:56.976 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 105
2025-06-29 19:26:13.188 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:26:13.196 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:13.200 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:13.202 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:13.242 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 불고기덮밥, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:26:13.243 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:13.245 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:26:13.245 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:26:13.245 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 불고기덮밥
2025-06-29 19:26:13.245 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:26:13.245 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:26:13.260 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:26:13.262 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:26:13.262 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:26:13.262 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 불고기덮밥
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:26:13.262 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:26:18.056 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:26:18.056 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:26:18.057 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 불고기덮밥

2. 카테고리: 한식

3. 조리 시간: 20분

4. 조리 방법:
   1. 양파는 얇게 채 썰고, 대파는 송송 썰어 준비합니다.
   2. 채 썬 양파와 대파는 찬물에 담가 매운맛을 뺍니다.
   3. 예열된 팬에 식용유를 두르고, 양념된 불고기(시판 불고기 가능)를 중불에서 익힙니다.
   4. 고기를 볶아낸 팬에 간장 2스푼, 올리고당 2스푼, 맛술 2스푼, 물 2스푼을 넣어 양념을 살짝 졸입니다.
   5. 밥 위에 양파, 고기, 대파 순으로 올리고, 졸인 양념을 한 스푼 더해 완성합니다[1].

5. 필요한 재료와 양:
   - 밥 1공기
   - 양념불고기 100g (불고기용 소고기 사용 가능)
   - 대파 1/4대
   - 양파 1/4개
   - 간장 2스푼
   - 올리고당 2스푼
   - 맛술 2스푼
   - 물 2스푼
   - 식용유 약간

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/qzVfmY6.jpg

8. 요리 팁:
   - 불고기 양념이 너무 짜면 물이나 맛술을 조금 더 추가해 간을 조절하세요.
   - 양파를 찬물에 담갔다 사용하면 더욱 아삭하고 매운맛이 줄어듭니다.
   - 기호에 따라 쪽파, 깨소금, 참기름을 추가로 올리면 풍미가 더해집니다.

※ 새우 알레르기와 무관하게, 불고기덮밥에는 새우 성분이 일반적으로 들어가지 않으니 안심하고 즐기셔도 됩니다.
2025-06-29 19:26:18.061 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:26:18.063 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:26:18.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/qzVfmY6.jpg
2025-06-29 19:26:18.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/qzVfmY6.jpg
2025-06-29 19:26:18.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/qzVfmY6.jpg
2025-06-29 19:26:18.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 1공기
   - 양념불고기 100g (불고기용 소고기 사용 가능)
   - 대파 1/4대
   - 양파 1/4개
   - 간장 2스푼
   - 올리고당 2스푼
   - 맛술 2스푼
   - 물 2스푼
   - 식용유 약간
2025-06-29 19:26:18.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 19:26:18.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기
2025-06-29 19:26:18.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 19:26:18.064 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 19:26:18.066 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:18.069 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 19:26:18.069 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양념불고기 100g (불고기용 소고기 사용 가능)
2025-06-29 19:26:18.069 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양념불고기, Amount: 100g
2025-06-29 19:26:18.069 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양념불고기, Amount: 100g
2025-06-29 19:26:18.071 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:18.072 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '양념불고기' not found in DB. Skipping.
2025-06-29 19:26:18.072 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/4대
2025-06-29 19:26:18.072 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/4대
2025-06-29 19:26:18.072 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-29 19:26:18.072 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-29 19:26:18.072 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2스푼
2025-06-29 19:26:18.072 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2스푼
2025-06-29 19:26:18.072 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2스푼
2025-06-29 19:26:18.073 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:18.074 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 19:26:18.074 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당 2스푼
2025-06-29 19:26:18.074 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리고당, Amount: 2스푼
2025-06-29 19:26:18.074 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 2스푼
2025-06-29 19:26:18.075 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:18.075 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-29 19:26:18.076 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 2스푼
2025-06-29 19:26:18.076 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 2스푼
2025-06-29 19:26:18.076 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 2스푼
2025-06-29 19:26:18.076 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:18.077 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 19:26:18.077 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 2스푼
2025-06-29 19:26:18.077 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 2스푼
2025-06-29 19:26:18.077 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 2스푼
2025-06-29 19:26:18.078 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:18.079 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 19:26:18.079 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 19:26:18.079 [http-nio-8080-exec-8] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 19:26:18.079 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파는 얇게 채 썰고, 대파는 송송 썰어 준비합니다.
   2. 채 썬 양파와 대파는 찬물에 담가 매운맛을 뺍니다.
   3. 예열된 팬에 식용유를 두르고, 양념된 불고기(시
2025-06-29 19:26:18.079 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:26:18.079 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 1공기
   - 양념불고기 100g (불고기용 소고기 사용 가능)
   - 대파 1/4대
   - 양파 1/4개
   - 간장 2스푼
   - 올리고당 2스푼
   - 맛술 2스푼
   - 물 2스푼
   - 식용유 약간

조리 방법:
1. 양파는 얇게 채 썰고, 대파는 송송 썰어 준비합니다.
   2. 채 썬 양파와 대파는 찬물에 담가 매운맛을 뺍니다.
   3. 예열된 팬에 식용유를 두르고, 양념된 불고기(시판 불고기 가능)를 중불에서 익힙니다.
   4. 고기를 볶아낸 팬에 간장 2스푼, 올리고당 2스푼, 맛술 2스푼, 물 2스푼을 넣어 양념을 살짝 졸입니다.
   5. 밥 위에 양파, 고기, 대파 순으로 올리고, 졸인 양념을 한 스푼 더해 완성합니다[1].
2025-06-29 19:26:18.080 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:26:18.082 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 불고기덮밥
2025-06-29 19:26:49.649 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:26:49.653 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:49.668 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:49.670 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:49.685 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 불고기덮밥, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:26:49.685 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:49.692 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:26:49.692 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:26:49.692 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 불고기덮밥
2025-06-29 19:26:49.692 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:26:49.692 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:26:49.699 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:26:49.734 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:26:49.735 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:26:49.735 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 불고기덮밥
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:26:49.735 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:26:53.673 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:26:53.677 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:53.681 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:53.684 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:53.687 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 불고기덮밥, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:26:53.688 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:53.689 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:26:53.689 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:26:53.689 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 불고기덮밥
2025-06-29 19:26:53.689 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:26:53.689 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:26:53.690 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:26:53.691 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:26:53.691 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:26:53.691 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 불고기덮밥
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:26:53.692 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:26:54.020 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:26:54.026 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:54.037 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:54.039 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:54.041 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 불고기덮밥, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:26:54.042 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:54.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:26:54.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:26:54.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 불고기덮밥
2025-06-29 19:26:54.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:26:54.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:26:54.045 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:26:54.061 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:26:54.062 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:26:54.062 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 불고기덮밥
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:26:54.062 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:26:54.333 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:26:54.359 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:54.361 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:54.363 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:26:54.365 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 불고기덮밥, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:26:54.366 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:26:54.367 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:26:54.367 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:26:54.367 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 불고기덮밥
2025-06-29 19:26:54.367 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:26:54.367 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:26:54.370 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:26:54.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:26:54.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:26:54.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 불고기덮밥
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:26:54.371 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:26:58.137 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:26:58.138 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:26:58.138 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 불고기덮밥

2. 카테고리: 한식

3. 조리 시간: 25분

4. 조리 방법:
   1. 불고기용 소고기는 키친타월로 핏물을 제거해 준비합니다.
   2. 양파, 대파, 당근, 표고버섯, 파프리카는 채 썰고, 대파와 쪽파는 송송 썰어둡니다[1][4].
   3. 불고기 양념(간장, 맛술, 설탕, 다진마늘 등)을 섞어 고기에 넣고 조물조물 재워둡니다(약 10분)[3][4].
   4. 팬에 식용유를 두르고 중불에서 양념한 소고기를 먼저 볶다가, 준비한 채소(양파, 대파, 당근, 표고버섯, 파프리카)를 넣고 함께 볶아줍니다[1][4].
   5. 고기와 채소가 익으면 양념을 추가로 소량 넣어 약불에서 양념이 자작하게 졸아들 때까지 볶아줍니다.
   6. 밥 위에 불고기를 올리고, 남은 양념을 한 숟가락 뿌려줍니다[1].
   7. 쪽파 또는 대파, 참깨를 고명으로 올려 마무리합니다.
   
5. 필요한 재료와 양:
   - 불고기용 소고기 300~400g
   - 밥 1~2공기
   - 양파 1/2개
   - 대파 1/2대
   - 당근 1/6~1/5개
   - 표고버섯 1~2개(선택)
   - 미니 파프리카 1개(선택)
   - 다진마늘 1큰술
   - 간장 3~4큰술
   - 올리고당 또는 설탕 2큰술
   - 맛술 2큰술
   - 생강술(또는 청주) 1큰술
   - 참기름 1큰술
   - 후추, 깨 약간
   - 식용유 약간

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/9YOnGBi.jpg

8. 요리 팁:
   - 고기를 재울 때 양념이 잘 스며들도록 10분 정도 숙성시키면 더 부드럽고 맛있습니다.
   - 양념은 기호에 맞게 간장, 설탕, 맛술의 비율을 조절하세요.
   - 남은 불고기는 반찬으로 따로 즐기거나, 김가루, 계란프라이를 추가해도 좋습니다.

(새우는 사용되지 않는 레시피입니다. 안심하고 드셔도 됩니다.)
2025-06-29 19:26:58.144 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:26:58.147 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:26:58.147 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/9YOnGBi.jpg
2025-06-29 19:26:58.147 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/9YOnGBi.jpg
2025-06-29 19:26:58.147 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/9YOnGBi.jpg
2025-06-29 19:26:58.147 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 불고기용 소고기 300~400g
   - 밥 1~2공기
   - 양파 1/2개
   - 대파 1/2대
   - 당근 1/6~1/5개
   - 표고버섯 1~2개(선택)
   - 미니 파프리카 1개(선택)
   - 다진마늘 1큰술
   - 간장 3~4큰술
   - 올리고당 또는 설탕 2큰술
   - 맛술 2큰술
   - 생강술(또는 청주) 1큰술
   - 참기름 1큰술
   - 후추, 깨 약간
   - 식용유 약간
2025-06-29 19:26:58.147 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 15
2025-06-29 19:26:58.147 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 불고기용 소고기 300~400g
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 불고기용 소고기 300~400g
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1~2공기
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 밥 1~2공기
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/2대
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/2대
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/6~1/5개
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/6~1/5개
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 1~2개(선택)
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 표고버섯 1~2개(선택)
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미니 파프리카 1개(선택)
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 파프리카, Amount: 1개
2025-06-29 19:26:58.148 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 파프리카, Amount: 1개
2025-06-29 19:26:58.150 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:58.153 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '파프리카' not found in DB. Skipping.
2025-06-29 19:26:58.153 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진마늘 1큰술
2025-06-29 19:26:58.153 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 다진마늘, Amount: 1큰술
2025-06-29 19:26:58.153 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진마늘, Amount: 1큰술
2025-06-29 19:26:58.155 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:58.156 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진마늘' not found in DB. Skipping.
2025-06-29 19:26:58.156 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 3~4큰술
2025-06-29 19:26:58.156 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 간장 3~4큰술
2025-06-29 19:26:58.156 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당 또는 설탕 2큰술
2025-06-29 19:26:58.156 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 2큰술
2025-06-29 19:26:58.156 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 2큰술
2025-06-29 19:26:58.157 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:58.158 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 19:26:58.158 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 2큰술
2025-06-29 19:26:58.158 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 2큰술
2025-06-29 19:26:58.158 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 2큰술
2025-06-29 19:26:58.159 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:58.160 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 19:26:58.160 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 생강술(또는 청주) 1큰술
2025-06-29 19:26:58.160 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 생강술(또는 청주) 1큰술
2025-06-29 19:26:58.160 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-29 19:26:58.160 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 19:26:58.160 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 19:26:58.162 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:58.164 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:26:58.165 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추, 깨 약간
2025-06-29 19:26:58.165 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추, 깨 약간
2025-06-29 19:26:58.165 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 19:26:58.165 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 19:26:58.165 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 불고기용 소고기는 키친타월로 핏물을 제거해 준비합니다.
   2. 양파, 대파, 당근, 표고버섯, 파프리카는 채 썰고, 대파와 쪽파는 송송 썰어둡니다[1][4].
   3. 
2025-06-29 19:26:58.165 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:26:58.165 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 불고기용 소고기 300~400g
   - 밥 1~2공기
   - 양파 1/2개
   - 대파 1/2대
   - 당근 1/6~1/5개
   - 표고버섯 1~2개(선택)
   - 미니 파프리카 1개(선택)
   - 다진마늘 1큰술
   - 간장 3~4큰술
   - 올리고당 또는 설탕 2큰술
   - 맛술 2큰술
   - 생강술(또는 청주) 1큰술
   - 참기름 1큰술
   - 후추, 깨 약간
   - 식용유 약간

조리 방법:
1. 불고기용 소고기는 키친타월로 핏물을 제거해 준비합니다.
   2. 양파, 대파, 당근, 표고버섯, 파프리카는 채 썰고, 대파와 쪽파는 송송 썰어둡니다[1][4].
   3. 불고기 양념(간장, 맛술, 설탕, 다진마늘 등)을 섞어 고기에 넣고 조물조물 재워둡니다(약 10분)[3][4].
   4. 팬에 식용유를 두르고 중불에서 양념한 소고기를 먼저 볶다가, 준비한 채소(양파, 대파, 당근, 표고버섯, 파프리카)를 넣고 함께 볶아줍니다[1][4].
   5. 고기와 채소가 익으면 양념을 추가로 소량 넣어 약불에서 양념이 자작하게 졸아들 때까지 볶아줍니다.
   6. 밥 위에 불고기를 올리고, 남은 양념을 한 숟가락 뿌려줍니다[1].
   7. 쪽파 또는 대파, 참깨를 고명으로 올려 마무리합니다.
2025-06-29 19:26:58.166 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:26:58.168 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 불고기덮밥
2025-06-29 19:26:59.863 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:26:59.863 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:26:59.863 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 불고기덮밥

2. 카테고리: 한식

3. 조리 시간: 25분

4. 조리 방법:
   1. 양파는 얇게 채 썰고, 대파는 송송 썰어 준비합니다.
   2. 채 썬 양파와 대파를 찬물에 담가 매운맛을 뺍니다.
   3. 예열된 팬에 기름을 두르고 양념에 재운 소고기를 넣고 볶아 익힙니다. (시판 양념 불고기 또는 직접 양념한 고기 사용 가능)
   4. 고기를 건져내고, 같은 팬에 간장, 올리고당, 맛술, 물을 넣어 양념을 살짝 졸입니다.
   5. 그릇에 밥을 담고, 양파, 볶은 불고기, 대파를 차례로 올린 후, 졸인 양념을 한 숟가락씩 뿌려 마무리합니다[1].

5. 필요한 재료와 양:
   - 소고기(불고기용) 100g
   - 밥 1공기
   - 대파 1/4대
   - 양파 1/4개
   - 식용유 약간
   - 간장 2큰술
   - 올리고당 2큰술
   - 맛술 2큰술
   - 물 2큰술

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/Vr0rQgU.jpg

8. 요리 팁:
   - 불고기는 얇게 썬 소고기를 사용해야 양념이 잘 배고 빠르게 익어 식감이 부드럽습니다.
   - 양파와 대파를 찬물에 담갔다가 사용하면 매운맛이 줄어들고, 더 깔끔한 맛을 냅니다.
   - 졸인 양념은 기호에 따라 양을 조절하세요. 너무 짜지 않게 조금씩 맛을 보며 추가하는 것이 좋습니다.
   - 남은 불고기나 시판 양념불고기를 사용해도 간편하게 만들 수 있습니다.
2025-06-29 19:26:59.868 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/Vr0rQgU.jpg
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/Vr0rQgU.jpg
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/Vr0rQgU.jpg
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기(불고기용) 100g
   - 밥 1공기
   - 대파 1/4대
   - 양파 1/4개
   - 식용유 약간
   - 간장 2큰술
   - 올리고당 2큰술
   - 맛술 2큰술
   - 물 2큰술
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기(불고기용) 100g
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소고기(불고기용) 100g
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 19:26:59.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 19:26:59.874 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/4대
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/4대
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2큰술
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2큰술
2025-06-29 19:26:59.876 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2큰술
2025-06-29 19:26:59.878 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:59.879 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 19:26:59.879 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당 2큰술
2025-06-29 19:26:59.879 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리고당, Amount: 2큰술
2025-06-29 19:26:59.879 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 2큰술
2025-06-29 19:26:59.881 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:59.882 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-29 19:26:59.882 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 2큰술
2025-06-29 19:26:59.882 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 2큰술
2025-06-29 19:26:59.882 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 2큰술
2025-06-29 19:26:59.883 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:59.884 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 19:26:59.884 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 2큰술
2025-06-29 19:26:59.884 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 2큰술
2025-06-29 19:26:59.884 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 2큰술
2025-06-29 19:26:59.885 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:26:59.887 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 19:26:59.887 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파는 얇게 채 썰고, 대파는 송송 썰어 준비합니다.
   2. 채 썬 양파와 대파를 찬물에 담가 매운맛을 뺍니다.
   3. 예열된 팬에 기름을 두르고 양념에 재운 소고기를
2025-06-29 19:26:59.887 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:26:59.887 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기(불고기용) 100g
   - 밥 1공기
   - 대파 1/4대
   - 양파 1/4개
   - 식용유 약간
   - 간장 2큰술
   - 올리고당 2큰술
   - 맛술 2큰술
   - 물 2큰술

조리 방법:
1. 양파는 얇게 채 썰고, 대파는 송송 썰어 준비합니다.
   2. 채 썬 양파와 대파를 찬물에 담가 매운맛을 뺍니다.
   3. 예열된 팬에 기름을 두르고 양념에 재운 소고기를 넣고 볶아 익힙니다. (시판 양념 불고기 또는 직접 양념한 고기 사용 가능)
   4. 고기를 건져내고, 같은 팬에 간장, 올리고당, 맛술, 물을 넣어 양념을 살짝 졸입니다.
   5. 그릇에 밥을 담고, 양파, 볶은 불고기, 대파를 차례로 올린 후, 졸인 양념을 한 숟가락씩 뿌려 마무리합니다[1].
2025-06-29 19:26:59.887 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:26:59.888 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 불고기덮밥
2025-06-29 19:27:03.942 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:27:03.942 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:27:03.942 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 불고기덮밥

2. 카테고리: 한식

3. 조리 시간: 25분

4. 조리 방법:
   1. 양파(1/2개)는 얇게 채 썰고, 대파(1/2대)와 당근(1/5개)은 먹기 좋게 썰어 준비합니다[3][1].
   2. 볼에 불고기용 소고기(약 200g)를 넣고, 간장(2큰술), 설탕(1큰술), 다진 마늘(1작은술), 맛술(1큰술), 올리고당(1큰술), 참기름(1/2큰술), 후추 소량을 넣고 잘 무쳐 10분간 재워둡니다[3].
   3. 예열된 팬에 식용유(적당량)를 두르고 대파를 넣어 강불에서 파기름을 내줍니다[1][3].
   4. 재운 불고기와 양파, 당근을 함께 넣고 센 불로 볶아줍니다. 고기가 어느 정도 익으면 불을 중불로 줄여 양념이 자작하게 남도록 볶아주세요[1].
   5. 밥(1~2공기)을 그릇에 담고, 볶은 불고기를 위에 넉넉히 올린 후 볶음국물을 조금 뿌려줍니다[1][3].
   6. 남은 대파 송송 썰기나 통깨, 쪽파 등 고명 재료를 위에 올려 마무리합니다.

5. 필요한 재료와 양:
   - 불고기용 소고기 200g
   - 밥 1~2공기
   - 대파 1/2대
   - 양파 1/2개
   - 당근 1/5개
   - 식용유 적당량
   - 간장 2큰술
   - 설탕 1큰술
   - 다진 마늘 1작은술
   - 맛술 1큰술
   - 올리고당 1큰술
   - 참기름 1/2큰술
   - 후추 약간

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/2v3gJWA.jpg

8. 요리 팁:
   - 소고기는 얇게 썬 불고기용을 사용하면 양념이 잘 배고 식감이 부드럽습니다.
   - 양념에 배즙이나 사과즙 1큰술을 추가하면 고기가 더 연해지고 감칠맛이 살아납니다.
   - 볶는 시간은 너무 길지 않게 하여 고기 육즙이 빠지지 않게 해주세요.
2025-06-29 19:27:03.947 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:27:03.949 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:27:03.949 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/2v3gJWA.jpg
2025-06-29 19:27:03.949 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/2v3gJWA.jpg
2025-06-29 19:27:03.949 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/2v3gJWA.jpg
2025-06-29 19:27:03.949 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 불고기용 소고기 200g
   - 밥 1~2공기
   - 대파 1/2대
   - 양파 1/2개
   - 당근 1/5개
   - 식용유 적당량
   - 간장 2큰술
   - 설탕 1큰술
   - 다진 마늘 1작은술
   - 맛술 1큰술
   - 올리고당 1큰술
   - 참기름 1/2큰술
   - 후추 약간
2025-06-29 19:27:03.949 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 19:27:03.949 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 불고기용 소고기 200g
2025-06-29 19:27:03.949 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소고기, Amount: 200g
2025-06-29 19:27:03.950 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기, Amount: 200g
2025-06-29 19:27:03.953 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기' not found in DB. Skipping.
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1~2공기
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 밥 1~2공기
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/2대
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/2대
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/5개
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/5개
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 적당량
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 적당량
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2큰술
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2큰술
2025-06-29 19:27:03.956 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2큰술
2025-06-29 19:27:03.963 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:03.965 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 19:27:03.965 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 19:27:03.965 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 19:27:03.965 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 19:27:03.967 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:03.967 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 19:27:03.967 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1작은술
2025-06-29 19:27:03.968 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1작은술
2025-06-29 19:27:03.968 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1작은술
2025-06-29 19:27:03.969 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:03.969 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 19:27:03.969 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 1큰술
2025-06-29 19:27:03.969 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 1큰술
2025-06-29 19:27:03.969 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 1큰술
2025-06-29 19:27:03.971 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:03.971 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 19:27:03.971 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당 1큰술
2025-06-29 19:27:03.971 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리고당, Amount: 1큰술
2025-06-29 19:27:03.971 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 1큰술
2025-06-29 19:27:03.973 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:03.974 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-29 19:27:03.974 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1/2큰술
2025-06-29 19:27:03.974 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 참기름 1/2큰술
2025-06-29 19:27:03.974 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 19:27:03.974 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 19:27:03.974 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 양파(1/2개)는 얇게 채 썰고, 대파(1/2대)와 당근(1/5개)은 먹기 좋게 썰어 준비합니다[3][1].
   2. 볼에 불고기용 소고기(약 200g)를 넣고, 간장(2큰
2025-06-29 19:27:03.974 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:27:03.974 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 불고기용 소고기 200g
   - 밥 1~2공기
   - 대파 1/2대
   - 양파 1/2개
   - 당근 1/5개
   - 식용유 적당량
   - 간장 2큰술
   - 설탕 1큰술
   - 다진 마늘 1작은술
   - 맛술 1큰술
   - 올리고당 1큰술
   - 참기름 1/2큰술
   - 후추 약간

조리 방법:
1. 양파(1/2개)는 얇게 채 썰고, 대파(1/2대)와 당근(1/5개)은 먹기 좋게 썰어 준비합니다[3][1].
   2. 볼에 불고기용 소고기(약 200g)를 넣고, 간장(2큰술), 설탕(1큰술), 다진 마늘(1작은술), 맛술(1큰술), 올리고당(1큰술), 참기름(1/2큰술), 후추 소량을 넣고 잘 무쳐 10분간 재워둡니다[3].
   3. 예열된 팬에 식용유(적당량)를 두르고 대파를 넣어 강불에서 파기름을 내줍니다[1][3].
   4. 재운 불고기와 양파, 당근을 함께 넣고 센 불로 볶아줍니다. 고기가 어느 정도 익으면 불을 중불로 줄여 양념이 자작하게 남도록 볶아주세요[1].
   5. 밥(1~2공기)을 그릇에 담고, 볶은 불고기를 위에 넉넉히 올린 후 볶음국물을 조금 뿌려줍니다[1][3].
   6. 남은 대파 송송 썰기나 통깨, 쪽파 등 고명 재료를 위에 올려 마무리합니다.
2025-06-29 19:27:03.978 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:27:03.978 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 불고기덮밥
2025-06-29 19:27:08.493 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:27:08.494 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:27:08.494 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 불고기덮밥

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 소고기는 키친타월로 핏물을 제거한 후 한 입 크기로 썰어 준비합니다[4].
   2. 양파, 대파, 당근, 표고버섯, 미니 파프리카를 먹기 좋은 크기로 채 썹니다[4][3].
   3. 불고기 양념장(간장 4T, 맛술 2T, 생강술 2T, 다진 마늘 1T, 설탕 또는 황설탕 2T, 참기름 1T, 후춧가루 약간)을 골고루 섞어줍니다[4].
   4. 손질한 소고기에 양념장을 부어 조물조물 버무려 15분간 재워둡니다[3][4].
   5. 팬에 식용유를 두르고 센 불에서 양파, 대파, 당근, 표고버섯, 파프리카를 먼저 볶아 향을 내줍니다[4].
   6. 여기에 재운 소고기를 넣고 중불에서 부드럽게 볶아줍니다[4].
   7. 고기가 익으면 불을 끄고, 밥 위에 채소와 고기를 골고루 올려 덮밥을 만듭니다[1][4].
   8. 기호에 따라 쪽파나 통깨, 계란 노른자 등을 고명으로 얹어 마무리합니다.

5. 필요한 재료와 양:
   - 불고기용 소고기 400g
   - 밥 1~2공기
   - 양파 1/2개
   - 대파 1/2대
   - 당근 1/6개
   - 표고버섯 2개
   - 미니 파프리카 1개(선택)
   - 식용유 적당량
   - 간장 4큰술
   - 맛술 2큰술
   - 생강술 2큰술(없으면 생강즙 약간)
   - 설탕(또는 황설탕) 2큰술
   - 다진 마늘 1큰술
   - 참기름 1큰술
   - 후춧가루 약간
   - 쪽파, 계란 노른자, 통깨(선택 고명용)

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/hGVwNwU.jpg

8. 요리 팁:
   - 소고기는 너무 오래 익히면 질겨지니 중불에서 빠르게 익혀주세요.
   - 양념은 간을 먼저 보고, 개인 기호에 따라 설탕과 간장을 가감하세요.
   - 미리 밥을 지어 두면 조리 시간을 단축할 수 있습니다.
   - 채소는 기호에 따라 변경하거나 생략해도 무방합니다.

**알레르기 안내:** 본 불고기덮밥 레시피에는 새우 등 갑각류가 포함되어 있지 않으므로 안심하고 드실 수 있습니다.
2025-06-29 19:27:08.497 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/hGVwNwU.jpg
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/hGVwNwU.jpg
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/hGVwNwU.jpg
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 불고기용 소고기 400g
   - 밥 1~2공기
   - 양파 1/2개
   - 대파 1/2대
   - 당근 1/6개
   - 표고버섯 2개
   - 미니 파프리카 1개(선택)
   - 식용유 적당량
   - 간장 4큰술
   - 맛술 2큰술
   - 생강술 2큰술(없으면 생강즙 약간)
   - 설탕(또는 황설탕) 2큰술
   - 다진 마늘 1큰술
   - 참기름 1큰술
   - 후춧가루 약간
   - 쪽파, 계란 노른자, 통깨(선택 고명용)
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 16
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 불고기용 소고기 400g
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소고기, Amount: 400g
2025-06-29 19:27:08.498 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소고기, Amount: 400g
2025-06-29 19:27:08.499 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:08.499 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '소고기' not found in DB. Skipping.
2025-06-29 19:27:08.499 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1~2공기
2025-06-29 19:27:08.499 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 밥 1~2공기
2025-06-29 19:27:08.499 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/2대
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/2대
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/6개
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/6개
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 2개
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 표고버섯, Amount: 2개
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 표고버섯, Amount: 2개
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '표고버섯' not found in DB. Skipping.
2025-06-29 19:27:08.500 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미니 파프리카 1개(선택)
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 파프리카, Amount: 1개
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 파프리카, Amount: 1개
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '파프리카' not found in DB. Skipping.
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 적당량
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 적당량
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 4큰술
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 4큰술
2025-06-29 19:27:08.501 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 4큰술
2025-06-29 19:27:08.502 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:08.502 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 19:27:08.502 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 2큰술
2025-06-29 19:27:08.502 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 2큰술
2025-06-29 19:27:08.502 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 2큰술
2025-06-29 19:27:08.503 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:08.503 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 19:27:08.503 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 생강술 2큰술(없으면 생강즙 약간)
2025-06-29 19:27:08.503 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 생강술, Amount: 2큰술
2025-06-29 19:27:08.503 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 생강술, Amount: 2큰술
2025-06-29 19:27:08.503 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:08.504 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '생강술' not found in DB. Skipping.
2025-06-29 19:27:08.504 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕(또는 황설탕) 2큰술
2025-06-29 19:27:08.504 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 설탕(또는 황설탕) 2큰술
2025-06-29 19:27:08.504 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-29 19:27:08.504 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-29 19:27:08.504 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-29 19:27:08.504 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:08.505 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 19:27:08.505 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-29 19:27:08.505 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 19:27:08.505 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 19:27:08.505 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:08.505 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:27:08.505 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후춧가루 약간
2025-06-29 19:27:08.506 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후춧가루 약간
2025-06-29 19:27:08.506 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 쪽파, 계란 노른자, 통깨(선택 고명용)
2025-06-29 19:27:08.506 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 쪽파, 계란 노른자, 통깨(선택 고명용)
2025-06-29 19:27:08.506 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소고기는 키친타월로 핏물을 제거한 후 한 입 크기로 썰어 준비합니다[4].
   2. 양파, 대파, 당근, 표고버섯, 미니 파프리카를 먹기 좋은 크기로 채 썹니다[4][3].
2025-06-29 19:27:08.506 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:27:08.506 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 불고기용 소고기 400g
   - 밥 1~2공기
   - 양파 1/2개
   - 대파 1/2대
   - 당근 1/6개
   - 표고버섯 2개
   - 미니 파프리카 1개(선택)
   - 식용유 적당량
   - 간장 4큰술
   - 맛술 2큰술
   - 생강술 2큰술(없으면 생강즙 약간)
   - 설탕(또는 황설탕) 2큰술
   - 다진 마늘 1큰술
   - 참기름 1큰술
   - 후춧가루 약간
   - 쪽파, 계란 노른자, 통깨(선택 고명용)

조리 방법:
1. 소고기는 키친타월로 핏물을 제거한 후 한 입 크기로 썰어 준비합니다[4].
   2. 양파, 대파, 당근, 표고버섯, 미니 파프리카를 먹기 좋은 크기로 채 썹니다[4][3].
   3. 불고기 양념장(간장 4T, 맛술 2T, 생강술 2T, 다진 마늘 1T, 설탕 또는 황설탕 2T, 참기름 1T, 후춧가루 약간)을 골고루 섞어줍니다[4].
   4. 손질한 소고기에 양념장을 부어 조물조물 버무려 15분간 재워둡니다[3][4].
   5. 팬에 식용유를 두르고 센 불에서 양파, 대파, 당근, 표고버섯, 파프리카를 먼저 볶아 향을 내줍니다[4].
   6. 여기에 재운 소고기를 넣고 중불에서 부드럽게 볶아줍니다[4].
   7. 고기가 익으면 불을 끄고, 밥 위에 채소와 고기를 골고루 올려 덮밥을 만듭니다[1][4].
   8. 기호에 따라 쪽파나 통깨, 계란 노른자 등을 고명으로 얹어 마무리합니다.
2025-06-29 19:27:08.506 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:27:08.507 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 불고기덮밥
2025-06-29 19:27:48.534 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:27:48.552 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:27:48.557 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:27:48.559 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:27:48.563 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 치킨샐러드, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:27:48.563 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:27:48.564 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:27:48.564 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:27:48.564 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 치킨샐러드
2025-06-29 19:27:48.564 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:27:48.564 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:27:48.568 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:27:48.569 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:27:48.570 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:27:48.570 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 치킨샐러드
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:27:48.570 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:27:49.151 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:27:49.152 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:27:49.154 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:27:49.158 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:27:49.159 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 치킨샐러드, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:27:49.160 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:27:49.161 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:27:49.161 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:27:49.161 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 치킨샐러드
2025-06-29 19:27:49.161 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:27:49.161 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:27:49.167 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:27:49.169 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:27:49.169 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:27:49.169 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 치킨샐러드
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:27:49.169 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:27:54.920 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:27:54.920 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:27:54.920 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 치킨샐러드

2. 카테고리: 기타

3. 조리 시간: 20분

4. 조리 방법:
   1. 닭가슴살(또는 닭고기)을 먹기 좋은 크기로 손질한 후, 올리브오일 1큰술, 파프리카 가루 1티스푼, 큐민 가루 1/4티스푼, 오레가노 1/4티스푼, 소금과 후추를 넣고 고루 버무립니다[1].
   2. 180도로 예열된 오븐에 양념한 닭가슴살을 넣고 약 20분간 구워줍니다(또는 에어프라이어 사용 가능)[1].
   3. 샐러드 야채(배추, 양배추, 토마토, 양파, 오이 등)와 사과, 셀러리, 파를 잘게 썰어 큰 볼에 넣습니다[1][2].
   4. 구운 닭가슴살을 식혀서 먹기 좋은 크기로 썰어 야채와 함께 섞습니다[2].
   5. 마요네즈 1/4컵과 레몬즙 1~2티스푼, 소금과 후추를 섞어 드레싱을 만듭니다[2].
   6. 드레싱을 준비된 샐러드 위에 얹어 가볍게 버무립니다[2].
   7. 기호에 따라 다진 견과류(호두, 아몬드, 피칸 등)나 크랜베리, 건포도 등도 올려 곁들여도 좋습니다[2].

5. 필요한 재료와 양:
   - 닭가슴살 1쪽(또는 익힌 닭고기 2컵)
   - 올리브오일 1큰술
   - 파프리카 가루 1티스푼
   - 큐민 가루 1/4티스푼
   - 오레가노 1/4티스푼
   - 소금, 후추 약간
   - 배추잎 2장
   - 양배추 1컵
   - 토마토 1개(또는 방울토마토 5~6알)
   - 양파 1/4개
   - 오이 1/3개
   - 셀러리 1/4컵
   - 사과 1/2개
   - 대파 1큰술
   - 마요네즈 1/4컵
   - 레몬즙 1~2티스푼
   - 다진 견과류(선택) 1/4컵
   - 크랜베리 또는 건포도(선택) 한줌

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/26LH4Fk.jpg

8. 요리 팁:
   - 닭가슴살을 구울 때 오븐이 없으면 에어프라이어나 프라이팬을 활용해도 됩니다.
   - 샐러드는 바로 먹는 것이 가장 맛있으며, 드레싱은 먹기 직전에 넣어야 아삭한 식감을 유지할 수 있습니다[1].
   - 과일, 견과류 등 다양한 재료를 넣어 풍미를 더해도 좋습니다[2].
2025-06-29 19:27:54.925 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:27:54.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 기타
2025-06-29 19:27:54.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/26LH4Fk.jpg
2025-06-29 19:27:54.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/26LH4Fk.jpg
2025-06-29 19:27:54.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/26LH4Fk.jpg
2025-06-29 19:27:54.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 닭가슴살 1쪽(또는 익힌 닭고기 2컵)
   - 올리브오일 1큰술
   - 파프리카 가루 1티스푼
   - 큐민 가루 1/4티스푼
   - 오레가노 1/4티스푼
   - 소금, 후추 약간
   - 배추잎 2장
   - 양배추 1컵
   - 토마토 1개(또는 방울토마토 5~6알)
   - 양파 1/4개
   - 오이 1/3개
   - 셀러리 1/4컵
   - 사과 1/2개
   - 대파 1큰술
   - 마요네즈 1/4컵
   - 레몬즙 1~2티스푼
   - 다진 견과류(선택) 1/4컵
   - 크랜베리 또는 건포도(선택) 한줌
2025-06-29 19:27:54.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 18
2025-06-29 19:27:54.927 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 닭가슴살 1쪽(또는 익힌 닭고기 2컵)
2025-06-29 19:27:54.927 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 닭가슴살, Amount: 1쪽
2025-06-29 19:27:54.927 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 닭가슴살, Amount: 1쪽
2025-06-29 19:27:54.934 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:54.935 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '닭가슴살' not found in DB. Skipping.
2025-06-29 19:27:54.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브오일 1큰술
2025-06-29 19:27:54.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브오일, Amount: 1큰술
2025-06-29 19:27:54.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브오일, Amount: 1큰술
2025-06-29 19:27:54.937 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:54.938 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브오일' not found in DB. Skipping.
2025-06-29 19:27:54.938 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파프리카 가루 1티스푼
2025-06-29 19:27:54.938 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 가루, Amount: 1티스푼
2025-06-29 19:27:54.938 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 가루, Amount: 1티스푼
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '가루' not found in DB. Skipping.
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 큐민 가루 1/4티스푼
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 큐민 가루 1/4티스푼
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오레가노 1/4티스푼
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오레가노 1/4티스푼
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 배추잎 2장
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 배추잎, Amount: 2장
2025-06-29 19:27:54.939 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 배추잎, Amount: 2장
2025-06-29 19:27:54.940 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:54.940 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '배추잎' not found in DB. Skipping.
2025-06-29 19:27:54.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양배추 1컵
2025-06-29 19:27:54.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양배추, Amount: 1컵
2025-06-29 19:27:54.940 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양배추, Amount: 1컵
2025-06-29 19:27:54.941 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:54.941 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '양배추' not found in DB. Skipping.
2025-06-29 19:27:54.941 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개(또는 방울토마토 5~6알)
2025-06-29 19:27:54.941 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-29 19:27:54.941 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-29 19:27:54.942 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:54.942 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-29 19:27:54.942 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-29 19:27:54.942 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-29 19:27:54.942 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 1/3개
2025-06-29 19:27:54.942 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 1/3개
2025-06-29 19:27:54.943 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 셀러리 1/4컵
2025-06-29 19:27:54.943 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 셀러리 1/4컵
2025-06-29 19:27:54.943 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 사과 1/2개
2025-06-29 19:27:54.943 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 사과 1/2개
2025-06-29 19:27:54.943 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1큰술
2025-06-29 19:27:54.943 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1큰술
2025-06-29 19:27:54.943 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1큰술
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 1/4컵
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마요네즈 1/4컵
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 레몬즙 1~2티스푼
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 레몬즙 1~2티스푼
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 견과류(선택) 1/4컵
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진 견과류(선택) 1/4컵
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 크랜베리 또는 건포도(선택) 한줌
2025-06-29 19:27:54.944 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 크랜베리 또는 건포도(선택) 한줌
2025-06-29 19:27:54.945 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 닭가슴살(또는 닭고기)을 먹기 좋은 크기로 손질한 후, 올리브오일 1큰술, 파프리카 가루 1티스푼, 큐민 가루 1/4티스푼, 오레가노 1/4티스푼, 소금과 후추를 넣고 고루 
2025-06-29 19:27:54.945 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:27:54.945 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 닭가슴살 1쪽(또는 익힌 닭고기 2컵)
   - 올리브오일 1큰술
   - 파프리카 가루 1티스푼
   - 큐민 가루 1/4티스푼
   - 오레가노 1/4티스푼
   - 소금, 후추 약간
   - 배추잎 2장
   - 양배추 1컵
   - 토마토 1개(또는 방울토마토 5~6알)
   - 양파 1/4개
   - 오이 1/3개
   - 셀러리 1/4컵
   - 사과 1/2개
   - 대파 1큰술
   - 마요네즈 1/4컵
   - 레몬즙 1~2티스푼
   - 다진 견과류(선택) 1/4컵
   - 크랜베리 또는 건포도(선택) 한줌

조리 방법:
1. 닭가슴살(또는 닭고기)을 먹기 좋은 크기로 손질한 후, 올리브오일 1큰술, 파프리카 가루 1티스푼, 큐민 가루 1/4티스푼, 오레가노 1/4티스푼, 소금과 후추를 넣고 고루 버무립니다[1].
   2. 180도로 예열된 오븐에 양념한 닭가슴살을 넣고 약 20분간 구워줍니다(또는 에어프라이어 사용 가능)[1].
   3. 샐러드 야채(배추, 양배추, 토마토, 양파, 오이 등)와 사과, 셀러리, 파를 잘게 썰어 큰 볼에 넣습니다[1][2].
   4. 구운 닭가슴살을 식혀서 먹기 좋은 크기로 썰어 야채와 함께 섞습니다[2].
   5. 마요네즈 1/4컵과 레몬즙 1~2티스푼, 소금과 후추를 섞어 드레싱을 만듭니다[2].
   6. 드레싱을 준비된 샐러드 위에 얹어 가볍게 버무립니다[2].
   7. 기호에 따라 다진 견과류(호두, 아몬드, 피칸 등)나 크랜베리, 건포도 등도 올려 곁들여도 좋습니다[2].
2025-06-29 19:27:54.945 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:27:54.946 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 치킨샐러드
2025-06-29 19:27:54.987 [http-nio-8080-exec-4] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy143.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy143.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy156.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:487)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeResponse(PerplexityService.java:165)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:108)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:28)
	at jdk.internal.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at jdk.internal.reflect.GeneratedMethodAccessor59.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 19:27:55.002 [http-nio-8080-exec-4] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only] with root cause
org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:803)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at jdk.internal.reflect.GeneratedMethodAccessor59.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 19:27:58.062 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:27:58.063 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:27:58.064 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 치킨샐러드

2. 카테고리: 양식

3. 조리 시간: 20분

4. 조리 방법:
   1. 닭가슴살 반쪽을 준비해 올리브오일 1밥숟가락, 파프리카 가루 1티스푼, 큐민 가루 1/4티스푼, 오레가노 1/4티스푼, 소금과 후추를 뿌려 잘 버무려줍니다[1].
   2. 오븐을 180도로 예열하고 양념한 닭가슴살을 오븐에 넣어 약 15~20분간 구워줍니다(혹은 에어프라이어나 팬에서 구워도 됩니다)[1].
   3. 구운 닭가슴살을 식혀 한 입 크기로 썰어줍니다.
   4. 볼에 배추, 양배추, 토마토, 오이, 양파 등 좋아하는 채소를 한입 크기로 썰어 넣습니다.
   5. 준비한 닭가슴살과 채소를 섞고, 취향에 따라 견과류(아몬드, 호두 등)를 더해줍니다.
   6. 올리브오일 드레싱(올리브오일 1스푼, 레몬즙 1티스푼, 소금·후추, 꿀 약간)을 곁들여 섞어 완성합니다.

5. 필요한 재료와 양:
   - 닭가슴살 1/2쪽(약 100g)
   - 배추 2~3장
   - 양배추 2~3장
   - 오이 1/3개
   - 토마토 1개
   - 양파 1/4개
   - 올리브오일 1밥숟가락(양념용), 1스푼(드레싱용)
   - 파프리카 가루 1티스푼
   - 큐민 가루 1/4티스푼
   - 오레가노 1/4티스푼
   - 소금, 후추 약간
   - 레몬즙 1티스푼
   - 견과류(아몬드, 호두 등) 약간(선택사항)
   - 꿀 약간(선택사항)

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/6c3he0t.jpg

8. 요리 팁:
   - 닭가슴살은 미리 양념해 재워두면 더욱 풍미가 좋아집니다.
   - 샐러드 채소는 얼음물에 담가두었다가 사용하면 더욱 아삭하고 신선한 식감을 즐길 수 있습니다.
   - 취향에 따라 삶은 달걀, 치즈, 고구마, 아보카도 등 추가 재료를 곁들여도 좋습니다.
2025-06-29 19:27:58.075 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/6c3he0t.jpg
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/6c3he0t.jpg
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/6c3he0t.jpg
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 닭가슴살 1/2쪽(약 100g)
   - 배추 2~3장
   - 양배추 2~3장
   - 오이 1/3개
   - 토마토 1개
   - 양파 1/4개
   - 올리브오일 1밥숟가락(양념용), 1스푼(드레싱용)
   - 파프리카 가루 1티스푼
   - 큐민 가루 1/4티스푼
   - 오레가노 1/4티스푼
   - 소금, 후추 약간
   - 레몬즙 1티스푼
   - 견과류(아몬드, 호두 등) 약간(선택사항)
   - 꿀 약간(선택사항)
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 닭가슴살 1/2쪽(약 100g)
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 약, Amount: 100g
2025-06-29 19:27:58.080 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 약, Amount: 100g
2025-06-29 19:27:58.084 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '약' not found in DB. Skipping.
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 배추 2~3장
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 배추 2~3장
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양배추 2~3장
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양배추 2~3장
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 1/3개
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 1/3개
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1개
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 토마토, Amount: 1개
2025-06-29 19:27:58.086 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 토마토, Amount: 1개
2025-06-29 19:27:58.088 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:58.089 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '토마토' not found in DB. Skipping.
2025-06-29 19:27:58.089 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-29 19:27:58.089 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-29 19:27:58.089 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브오일 1밥숟가락(양념용), 1스푼(드레싱용)
2025-06-29 19:27:58.089 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브오일, Amount: 1밥숟가락
2025-06-29 19:27:58.089 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브오일, Amount: 1밥숟가락
2025-06-29 19:27:58.090 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:58.090 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브오일' not found in DB. Skipping.
2025-06-29 19:27:58.090 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파프리카 가루 1티스푼
2025-06-29 19:27:58.090 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 가루, Amount: 1티스푼
2025-06-29 19:27:58.090 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 가루, Amount: 1티스푼
2025-06-29 19:27:58.091 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '가루' not found in DB. Skipping.
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 큐민 가루 1/4티스푼
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 큐민 가루 1/4티스푼
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오레가노 1/4티스푼
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오레가노 1/4티스푼
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 레몬즙 1티스푼
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 레몬즙, Amount: 1티스푼
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 레몬즙, Amount: 1티스푼
2025-06-29 19:27:58.092 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:27:58.093 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '레몬즙' not found in DB. Skipping.
2025-06-29 19:27:58.093 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 견과류(아몬드, 호두 등) 약간(선택사항)
2025-06-29 19:27:58.093 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 견과류(아몬드, 호두 등) 약간(선택사항)
2025-06-29 19:27:58.093 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 꿀 약간(선택사항)
2025-06-29 19:27:58.093 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 꿀 약간(선택사항)
2025-06-29 19:27:58.093 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 닭가슴살 반쪽을 준비해 올리브오일 1밥숟가락, 파프리카 가루 1티스푼, 큐민 가루 1/4티스푼, 오레가노 1/4티스푼, 소금과 후추를 뿌려 잘 버무려줍니다[1].
   2. 
2025-06-29 19:27:58.093 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:27:58.093 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 닭가슴살 1/2쪽(약 100g)
   - 배추 2~3장
   - 양배추 2~3장
   - 오이 1/3개
   - 토마토 1개
   - 양파 1/4개
   - 올리브오일 1밥숟가락(양념용), 1스푼(드레싱용)
   - 파프리카 가루 1티스푼
   - 큐민 가루 1/4티스푼
   - 오레가노 1/4티스푼
   - 소금, 후추 약간
   - 레몬즙 1티스푼
   - 견과류(아몬드, 호두 등) 약간(선택사항)
   - 꿀 약간(선택사항)

조리 방법:
1. 닭가슴살 반쪽을 준비해 올리브오일 1밥숟가락, 파프리카 가루 1티스푼, 큐민 가루 1/4티스푼, 오레가노 1/4티스푼, 소금과 후추를 뿌려 잘 버무려줍니다[1].
   2. 오븐을 180도로 예열하고 양념한 닭가슴살을 오븐에 넣어 약 15~20분간 구워줍니다(혹은 에어프라이어나 팬에서 구워도 됩니다)[1].
   3. 구운 닭가슴살을 식혀 한 입 크기로 썰어줍니다.
   4. 볼에 배추, 양배추, 토마토, 오이, 양파 등 좋아하는 채소를 한입 크기로 썰어 넣습니다.
   5. 준비한 닭가슴살과 채소를 섞고, 취향에 따라 견과류(아몬드, 호두 등)를 더해줍니다.
   6. 올리브오일 드레싱(올리브오일 1스푼, 레몬즙 1티스푼, 소금·후추, 꿀 약간)을 곁들여 섞어 완성합니다.
2025-06-29 19:27:58.094 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:27:58.095 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 치킨샐러드
2025-06-29 19:27:58.096 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 19:27:58.097 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 106
2025-06-29 19:32:42.794 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:32:42.825 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:32:42.832 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:32:42.834 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:32:42.838 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 비빔밥 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:32:42.839 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:32:42.840 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:32:42.840 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:32:42.840 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 사용자 요청: 비빔밥 레시피 알려줘
2025-06-29 19:32:42.840 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:32:42.840 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:32:42.845 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:32:42.846 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:32:42.846 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:32:42.846 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 비빔밥 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:32:42.846 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:32:52.746 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:32:52.747 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:32:52.747 [http-nio-8080-exec-6] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 비빔밥

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 시금치, 콩나물, 고사리는 각각 끓는 물에 소금 약간 넣어 30초~1분간 데친 뒤 찬물에 헹구고, 물기를 꼭 짜서 준비합니다. 시금치는 참기름과 소금, 고사리는 간장·참기름·다진 마늘, 콩나물은 소금·참기름으로 각각 무쳐줍니다[1][3].
   2. 도라지는 껍질을 벗기고 채 썬 뒤, 소금에 살짝 주물러 쓴맛을 뺀 후, 살짝 데치거나 볶아서 양념해 무쳐줍니다[1].
   3. 당근, 애호박, 표고버섯은 각각 채를 썰어 소금 약간과 함께 팬에 기름을 살짝 두르고 볶아줍니다[2][3].
   4. 갓 지은 밥을 그릇에 담고, 위에 각종 나물과 볶은 채소, 김가루, 깨소금을 예쁘게 올립니다[1][3].
   5. 계란을 프라이(반숙 추천) 또는 생달걀 노른자를 올립니다[1][3].
   6. 고추장 2~3큰술, 참기름을 한 바퀴 둘러준 뒤, 기호에 따라 깨소금을 더 뿌려줍니다[1][2].
   7. 먹기 직전, 잘 비벼서 즐깁니다.

5. 필요한 재료와 양:
   - 밥 1공기
   - 시금치나물 1컵 (or 시금치 50g)
   - 고사리나물 1컵 (or 고사리 50g)
   - 콩나물 1컵 (or 콩나물 100g)
   - 도라지나물 1컵
   - 당근 1/3개 (채 썬 것)
   - 애호박 1/3개 (채 썬 것)
   - 표고버섯 2~3개 (선택)
   - 계란 1개
   - 김가루 약간
   - 참기름 2큰술
   - 고추장 2~3큰술
   - 깨소금 약간
   - (각 나물 양념: 참기름, 소금, 간장, 다진 마늘 등)[1][2][3]

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/0oWJw2m.jpg

8. 요리 팁:
   - 나물은 데친 뒤 꼭 찬물에 헹구고 물기를 꼭 짜야 비빔밥이 질척해지지 않습니다.
   - 각 나물마다 양념을 살짝 다르게 해주면 풍미가 더 좋습니다.
   - 고추장은 한 번에 다 넣지 말고, 취향에 맞게 조금씩 추가해 비운 후 비비세요.
   - 각종 나물 대신 집에 있는 채소(오이, 상추 등)로도 충분히 응용 가능합니다.
   - 아침에 밥을 먹고 속이 불편하다면 밥 양을 조금 줄이고 야채와 계란을 중심으로 드셔도 좋습니다.

**주의: 비빔밥에는 새우가 들어가지 않으므로 새우 알레르기가 있는 분도 안심하고 드실 수 있습니다.**
2025-06-29 19:32:52.752 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:32:52.754 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:32:52.754 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/0oWJw2m.jpg
2025-06-29 19:32:52.754 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/0oWJw2m.jpg
2025-06-29 19:32:52.754 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/0oWJw2m.jpg
2025-06-29 19:32:52.754 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 1공기
   - 시금치나물 1컵 (or 시금치 50g)
   - 고사리나물 1컵 (or 고사리 50g)
   - 콩나물 1컵 (or 콩나물 100g)
   - 도라지나물 1컵
   - 당근 1/3개 (채 썬 것)
   - 애호박 1/3개 (채 썬 것)
   - 표고버섯 2~3개 (선택)
   - 계란 1개
   - 김가루 약간
   - 참기름 2큰술
   - 고추장 2~3큰술
   - 깨소금 약간
   - (각 나물 양념: 참기름, 소금, 간장, 다진 마늘 등)[1][2][3]
2025-06-29 19:32:52.754 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-29 19:32:52.754 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기
2025-06-29 19:32:52.754 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 19:32:52.755 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 19:32:52.756 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:32:52.758 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 19:32:52.758 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 시금치나물 1컵 (or 시금치 50g)
2025-06-29 19:32:52.759 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 시금치나물, Amount: 1컵
2025-06-29 19:32:52.759 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 시금치나물, Amount: 1컵
2025-06-29 19:32:52.760 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:32:52.761 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '시금치나물' not found in DB. Skipping.
2025-06-29 19:32:52.761 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고사리나물 1컵 (or 고사리 50g)
2025-06-29 19:32:52.761 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고사리나물, Amount: 1컵
2025-06-29 19:32:52.761 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고사리나물, Amount: 1컵
2025-06-29 19:32:52.769 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:32:52.770 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '고사리나물' not found in DB. Skipping.
2025-06-29 19:32:52.771 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 콩나물 1컵 (or 콩나물 100g)
2025-06-29 19:32:52.771 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 콩나물, Amount: 1컵
2025-06-29 19:32:52.771 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 콩나물, Amount: 1컵
2025-06-29 19:32:52.776 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:32:52.778 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '콩나물' not found in DB. Skipping.
2025-06-29 19:32:52.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 도라지나물 1컵
2025-06-29 19:32:52.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 도라지나물, Amount: 1컵
2025-06-29 19:32:52.778 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 도라지나물, Amount: 1컵
2025-06-29 19:32:52.783 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '도라지나물' not found in DB. Skipping.
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/3개 (채 썬 것)
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/3개 (채 썬 것)
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 애호박 1/3개 (채 썬 것)
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 애호박 1/3개 (채 썬 것)
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 2~3개 (선택)
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 표고버섯 2~3개 (선택)
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 1개
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 1개
2025-06-29 19:32:52.784 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 1개
2025-06-29 19:32:52.786 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:32:52.786 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 19:32:52.786 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 김가루 약간
2025-06-29 19:32:52.786 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 김가루 약간
2025-06-29 19:32:52.786 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 2큰술
2025-06-29 19:32:52.787 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 2큰술
2025-06-29 19:32:52.787 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 2큰술
2025-06-29 19:32:52.788 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:32:52.795 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:32:52.796 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 2~3큰술
2025-06-29 19:32:52.796 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추장 2~3큰술
2025-06-29 19:32:52.796 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 깨소금 약간
2025-06-29 19:32:52.796 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 깨소금 약간
2025-06-29 19:32:52.796 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (각 나물 양념: 참기름, 소금, 간장, 다진 마늘 등)[1][2][3]
2025-06-29 19:32:52.796 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: (각 나물 양념, Amount: 참기름, 소금, 간장, 다진 마늘 등)[1][2][3]
2025-06-29 19:32:52.796 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: (각 나물 양념, Amount: 참기름, 소금, 간장, 다진 마늘 등)[1][2][3]
2025-06-29 19:32:52.818 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:32:52.822 [http-nio-8080-exec-6] WARN  a.s.k.p.service.PerplexityService - Ingredient '(각 나물 양념' not found in DB. Skipping.
2025-06-29 19:32:52.822 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 시금치, 콩나물, 고사리는 각각 끓는 물에 소금 약간 넣어 30초~1분간 데친 뒤 찬물에 헹구고, 물기를 꼭 짜서 준비합니다. 시금치는 참기름과 소금, 고사리는 간장·참기름·
2025-06-29 19:32:52.823 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:32:52.823 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 1공기
   - 시금치나물 1컵 (or 시금치 50g)
   - 고사리나물 1컵 (or 고사리 50g)
   - 콩나물 1컵 (or 콩나물 100g)
   - 도라지나물 1컵
   - 당근 1/3개 (채 썬 것)
   - 애호박 1/3개 (채 썬 것)
   - 표고버섯 2~3개 (선택)
   - 계란 1개
   - 김가루 약간
   - 참기름 2큰술
   - 고추장 2~3큰술
   - 깨소금 약간
   - (각 나물 양념: 참기름, 소금, 간장, 다진 마늘 등)[1][2][3]

조리 방법:
1. 시금치, 콩나물, 고사리는 각각 끓는 물에 소금 약간 넣어 30초~1분간 데친 뒤 찬물에 헹구고, 물기를 꼭 짜서 준비합니다. 시금치는 참기름과 소금, 고사리는 간장·참기름·다진 마늘, 콩나물은 소금·참기름으로 각각 무쳐줍니다[1][3].
   2. 도라지는 껍질을 벗기고 채 썬 뒤, 소금에 살짝 주물러 쓴맛을 뺀 후, 살짝 데치거나 볶아서 양념해 무쳐줍니다[1].
   3. 당근, 애호박, 표고버섯은 각각 채를 썰어 소금 약간과 함께 팬에 기름을 살짝 두르고 볶아줍니다[2][3].
   4. 갓 지은 밥을 그릇에 담고, 위에 각종 나물과 볶은 채소, 김가루, 깨소금을 예쁘게 올립니다[1][3].
   5. 계란을 프라이(반숙 추천) 또는 생달걀 노른자를 올립니다[1][3].
   6. 고추장 2~3큰술, 참기름을 한 바퀴 둘러준 뒤, 기호에 따라 깨소금을 더 뿌려줍니다[1][2].
   7. 먹기 직전, 잘 비벼서 즐깁니다.
2025-06-29 19:32:52.825 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:32:52.867 [http-nio-8080-exec-6] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 비빔밥
2025-06-29 19:33:02.473 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:33:02.477 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:33:02.479 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:33:02.481 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:33:02.489 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 치킨샐러드 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:33:02.490 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:33:02.491 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:33:02.491 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:33:02.491 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 사용자 요청: 치킨샐러드 레시피 알려줘
2025-06-29 19:33:02.491 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:33:02.491 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:33:02.493 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:33:02.494 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:33:02.494 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:33:02.494 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 치킨샐러드 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:33:02.494 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:33:08.297 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:33:08.297 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:33:08.297 [http-nio-8080-exec-7] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 치킨샐러드

2. 카테고리: 양식

3. 조리 시간: 25분

4. 조리 방법:
   1. 닭가슴살(또는 시판 닭가슴살, 가라아게 등)을 준비해 소금, 후추, 올리브오일, 파프리카가루, 큐민가루, 오레가노로 고루 버무린다[1].
   2. 오븐(180℃에서 20분)이나 에어프라이어(200℃에서 10분)로 닭가슴살을 구워 식힌다[1][2].
   3. 양상추, 배추, 양배추, 오이 등 원하는 채소를 얼음물에 담갔다가 물기를 빼고 먹기 좋은 크기로 썬다[1][2].
   4. 양파와 토마토도 얇게 썬다.
   5. 샐러드 볼에 채소와 닭가슴살을 담고, 고추 등 색감이 나는 재료를 고명으로 올린다[2].
   6. 오리엔탈 드레싱(올리브유, 간장, 식초, 설탕, 참깨 등 혼합)이나 원하는 드레싱을 먹기 직전에 뿌린다[2].
   7. 잘 섞어 먹는다.

5. 필요한 재료와 양:
   - 닭가슴살 1개(약 150g)
   - 양상추 4장
   - 배추 또는 양배추 한 줌
   - 오이 1/2개
   - 토마토 1/2개
   - 양파 1/4개
   - 올리브오일 1큰술
   - 파프리카가루 1작은술
   - 큐민가루 1/4작은술
   - 오레가노 1/4작은술
   - 소금, 후추 약간
   - (선택) 고추, 파프리카 등 고명용 채소 약간
   - 오리엔탈 드레싱: 올리브유 2큰술, 간장 1큰술, 식초 1큰술, 설탕 1작은술, 참깨 약간

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/7Bj9v2n.jpg

8. 요리 팁:
   - 닭가슴살은 미리 양념해두면 더 촉촉하고 풍미가 좋아집니다.
   - 채소의 물기를 최대한 빼야 아삭한 식감이 살아납니다.
   - 샐러드 드레싱은 먹기 직전에 뿌려야 채소가 눅눅해지지 않습니다.
2025-06-29 19:33:08.301 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:33:08.303 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 19:33:08.303 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/7Bj9v2n.jpg
2025-06-29 19:33:08.303 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/7Bj9v2n.jpg
2025-06-29 19:33:08.304 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/7Bj9v2n.jpg
2025-06-29 19:33:08.304 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 닭가슴살 1개(약 150g)
   - 양상추 4장
   - 배추 또는 양배추 한 줌
   - 오이 1/2개
   - 토마토 1/2개
   - 양파 1/4개
   - 올리브오일 1큰술
   - 파프리카가루 1작은술
   - 큐민가루 1/4작은술
   - 오레가노 1/4작은술
   - 소금, 후추 약간
   - (선택) 고추, 파프리카 등 고명용 채소 약간
   - 오리엔탈 드레싱: 올리브유 2큰술, 간장 1큰술, 식초 1큰술, 설탕 1작은술, 참깨 약간
2025-06-29 19:33:08.304 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 19:33:08.304 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 닭가슴살 1개(약 150g)
2025-06-29 19:33:08.304 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 닭가슴살, Amount: 1개
2025-06-29 19:33:08.304 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 닭가슴살, Amount: 1개
2025-06-29 19:33:08.306 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:33:08.308 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '닭가슴살' not found in DB. Skipping.
2025-06-29 19:33:08.308 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 4장
2025-06-29 19:33:08.308 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양상추, Amount: 4장
2025-06-29 19:33:08.308 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양상추, Amount: 4장
2025-06-29 19:33:08.310 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:33:08.311 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '양상추' not found in DB. Skipping.
2025-06-29 19:33:08.311 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 배추 또는 양배추 한 줌
2025-06-29 19:33:08.311 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 배추 또는 양배추 한 줌
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오이 1/2개
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오이 1/2개
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 토마토 1/2개
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 토마토 1/2개
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/4개
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/4개
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리브오일 1큰술
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 올리브오일, Amount: 1큰술
2025-06-29 19:33:08.312 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리브오일, Amount: 1큰술
2025-06-29 19:33:08.315 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:33:08.316 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리브오일' not found in DB. Skipping.
2025-06-29 19:33:08.316 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파프리카가루 1작은술
2025-06-29 19:33:08.316 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 파프리카가루, Amount: 1작은술
2025-06-29 19:33:08.316 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 파프리카가루, Amount: 1작은술
2025-06-29 19:33:08.318 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '파프리카가루' not found in DB. Skipping.
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 큐민가루 1/4작은술
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 큐민가루 1/4작은술
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오레가노 1/4작은술
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 오레가노 1/4작은술
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금, 후추 약간
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금, 후추 약간
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 고추, 파프리카 등 고명용 채소 약간
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (선택) 고추, 파프리카 등 고명용 채소 약간
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 오리엔탈 드레싱: 올리브유 2큰술, 간장 1큰술, 식초 1큰술, 설탕 1작은술, 참깨 약간
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 오리엔탈 드레싱, Amount: 올리브유 2큰술, 간장 1큰술, 식초 1큰술, 설탕 1작은술, 참깨 약간
2025-06-29 19:33:08.319 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 오리엔탈 드레싱, Amount: 올리브유 2큰술, 간장 1큰술, 식초 1큰술, 설탕 1작은술, 참깨 약간
2025-06-29 19:33:08.321 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:33:08.322 [http-nio-8080-exec-7] WARN  a.s.k.p.service.PerplexityService - Ingredient '오리엔탈 드레싱' not found in DB. Skipping.
2025-06-29 19:33:08.323 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 닭가슴살(또는 시판 닭가슴살, 가라아게 등)을 준비해 소금, 후추, 올리브오일, 파프리카가루, 큐민가루, 오레가노로 고루 버무린다[1].
   2. 오븐(180℃에서 20분)
2025-06-29 19:33:08.323 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:33:08.323 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 닭가슴살 1개(약 150g)
   - 양상추 4장
   - 배추 또는 양배추 한 줌
   - 오이 1/2개
   - 토마토 1/2개
   - 양파 1/4개
   - 올리브오일 1큰술
   - 파프리카가루 1작은술
   - 큐민가루 1/4작은술
   - 오레가노 1/4작은술
   - 소금, 후추 약간
   - (선택) 고추, 파프리카 등 고명용 채소 약간
   - 오리엔탈 드레싱: 올리브유 2큰술, 간장 1큰술, 식초 1큰술, 설탕 1작은술, 참깨 약간

조리 방법:
1. 닭가슴살(또는 시판 닭가슴살, 가라아게 등)을 준비해 소금, 후추, 올리브오일, 파프리카가루, 큐민가루, 오레가노로 고루 버무린다[1].
   2. 오븐(180℃에서 20분)이나 에어프라이어(200℃에서 10분)로 닭가슴살을 구워 식힌다[1][2].
   3. 양상추, 배추, 양배추, 오이 등 원하는 채소를 얼음물에 담갔다가 물기를 빼고 먹기 좋은 크기로 썬다[1][2].
   4. 양파와 토마토도 얇게 썬다.
   5. 샐러드 볼에 채소와 닭가슴살을 담고, 고추 등 색감이 나는 재료를 고명으로 올린다[2].
   6. 오리엔탈 드레싱(올리브유, 간장, 식초, 설탕, 참깨 등 혼합)이나 원하는 드레싱을 먹기 직전에 뿌린다[2].
   7. 잘 섞어 먹는다.
2025-06-29 19:33:08.327 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:33:08.328 [http-nio-8080-exec-7] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 치킨샐러드
2025-06-29 19:36:37.858 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 19:36:37.951 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 19:36:38.298 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:36:38.301 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.303 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.305 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.310 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.316 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:36:38.348 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:36:38.354 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.361 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.365 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.373 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.377 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:36:38.385 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:36:38.386 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.389 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.391 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.396 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.412 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:36:38.568 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:36:38.571 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.574 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.575 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.586 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.595 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:36:38.597 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:38.599 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.600 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:38.609 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:47.529 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:36:47.534 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:47.536 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:47.540 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:47.542 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심 메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 19:36:47.543 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:47.544 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:36:47.544 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:36:47.544 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심 메뉴 추천해줘
2025-06-29 19:36:47.544 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:36:47.544 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 19:36:47.546 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:36:47.547 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 19:36:47.547 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:36:47.547 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심 메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 19:36:47.547 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:36:53.984 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:36:53.984 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 19:36:53.984 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 제육볶음
2. 불고기덮밥
3. 김치찌개
4. 비빔밥
5. 닭가슴살 샐러드

### 추천 이유

- 상황 분석: 사용자는 "내일 점심" 메뉴를 요청하셨으므로, 든든하게 한 끼를 채울 수 있는 점심 식사로 적합한 메뉴를 선정했습니다. 또한 점심은 오전 활동으로 소화가 어느 정도 된 이후이기 때문에 비교적 다양한 메뉴 선택이 가능합니다.

- 추천 기준: 한식 위주로 직장인들이 선호하는 인기 점심 메뉴를 중심으로, 영양 균형과 맛, 든든함을 고려하여 선정했습니다. 국물, 덮밥, 샐러드 등 다양한 식사 타입을 포함했습니다[1][2][3][4].

- 개인화 고려사항: 사용자의 건강 상태와 알레르리 정보를 반영해 새우 등 해산물을 배제했습니다. 아침에 소화불량이 있다고 하셨지만 점심이므로 소화에 크게 무리가 없는 고기나 채소 위주의 메뉴로 구성했습니다.

- 추가 팁: 
  - 메뉴 선정 시 국물 요리는 너무 기름지지 않게, 덮밥은 소스를 덜어내거나 야채 비율을 높이면 건강하게 즐길 수 있습니다.
  - 만약 해당 메뉴의 구체적인 레시피가 필요하다면, 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해 다시 요청해 주세요!
2025-06-29 19:36:53.987 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 19:36:56.411 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 19:36:56.413 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:56.415 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:56.419 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 19:36:56.421 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 제육볶음 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 19:36:56.421 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 19:36:56.423 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 19:36:56.423 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 19:36:56.423 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육볶음 레시피 알려줘
2025-06-29 19:36:56.423 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 19:36:56.423 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 19:36:56.425 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:36:56.425 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 19:36:56.425 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 19:36:56.425 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 제육볶음 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 19:36:56.425 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 19:37:01.573 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 19:37:01.573 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 19:37:01.573 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육볶음

2. 카테고리: 한식

3. 조리 시간: 30~40분

4. 조리 방법:
   1. 돼지고기는 얇게 썰어 기름이 많은 부분을 정리해 준비합니다.
   2. 큰 그릇에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추, 청주(또는 맛술), 배즙을 섞어 양념장을 만듭니다.
   3. 준비한 돼지고기에 양념장을 고루 버무려 30분~1시간 재워둡니다.
   4. 양파, 대파, 당근을 채 썰어 준비하고, 청양고추는 원한다면 송송 썰어둡니다.
   5. 팬에 식용유를 두르고 중불에서 재운 고기를 먼저 볶다가, 고기가 익기 시작하면 야채(양파, 대파, 당근, 청양고추)를 넣고 함께 볶습니다.
   6. 물 1/4컵을 넣어 자작하게 더 볶다가, 고기와 야채가 모두 익으면 불을 끄고 깨소금을 뿌려 마무리합니다[1][2].

5. 필요한 재료와 양:
   - 돼지고기(앞다리살 또는 목살): 600g
   - 고추장: 2큰술
   - 고춧가루: 2큰술
   - 진간장: 2큰술
   - 설탕: 1큰술
   - 올리고당: 2큰술 (또는 물엿)
   - 다진 마늘: 2큰술
   - 다진 생강: 0.5큰술
   - 참기름: 1큰술
   - 후추: 약간
   - 청주 또는 맛술: 2큰술
   - 배즙(없으면 생략 가능): 2큰술
   - 양파: 1개
   - 대파: 1대
   - 당근: 1/2개
   - 청양고추: 1~2개(선택)
   - 식용유: 약간
   - 깨소금: 약간
   - 물: 1/4컵

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/7n4z6AV.jpg

8. 요리 팁:
   - 고기는 미리 양념에 재우면 감칠맛과 부드러움이 더해집니다.
   - 취향에 따라 고추장, 고춧가루 양을 늘려 매운맛을 조절할 수 있습니다.
   - 배즙은 고기를 연하게 하고 단맛을 더해주므로 가능하다면 넣어주세요[1][2].
2025-06-29 19:37:01.581 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 19:37:01.585 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 19:37:01.585 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/7n4z6AV.jpg
2025-06-29 19:37:01.585 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/7n4z6AV.jpg
2025-06-29 19:37:01.585 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/7n4z6AV.jpg
2025-06-29 19:37:01.585 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살 또는 목살): 600g
   - 고추장: 2큰술
   - 고춧가루: 2큰술
   - 진간장: 2큰술
   - 설탕: 1큰술
   - 올리고당: 2큰술 (또는 물엿)
   - 다진 마늘: 2큰술
   - 다진 생강: 0.5큰술
   - 참기름: 1큰술
   - 후추: 약간
   - 청주 또는 맛술: 2큰술
   - 배즙(없으면 생략 가능): 2큰술
   - 양파: 1개
   - 대파: 1대
   - 당근: 1/2개
   - 청양고추: 1~2개(선택)
   - 식용유: 약간
   - 깨소금: 약간
   - 물: 1/4컵
2025-06-29 19:37:01.585 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 19
2025-06-29 19:37:01.585 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살 또는 목살): 600g
2025-06-29 19:37:01.586 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 돼지고기(앞다리살 또는 목살), Amount: 600g
2025-06-29 19:37:01.586 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 돼지고기(앞다리살 또는 목살), Amount: 600g
2025-06-29 19:37:01.592 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.594 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '돼지고기(앞다리살 또는 목살)' not found in DB. Skipping.
2025-06-29 19:37:01.594 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장: 2큰술
2025-06-29 19:37:01.594 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고추장, Amount: 2큰술
2025-06-29 19:37:01.594 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 2큰술
2025-06-29 19:37:01.596 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.597 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 19:37:01.597 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루: 2큰술
2025-06-29 19:37:01.597 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고춧가루, Amount: 2큰술
2025-06-29 19:37:01.597 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 2큰술
2025-06-29 19:37:01.600 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.601 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 19:37:01.601 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장: 2큰술
2025-06-29 19:37:01.601 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 진간장, Amount: 2큰술
2025-06-29 19:37:01.601 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 2큰술
2025-06-29 19:37:01.604 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.605 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-29 19:37:01.605 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕: 1큰술
2025-06-29 19:37:01.605 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 설탕, Amount: 1큰술
2025-06-29 19:37:01.605 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 19:37:01.609 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.610 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 19:37:01.610 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당: 2큰술 (또는 물엿)
2025-06-29 19:37:01.610 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 올리고당, Amount: 2큰술 (또는 물엿)
2025-06-29 19:37:01.610 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 2큰술 (또는 물엿)
2025-06-29 19:37:01.611 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.612 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-29 19:37:01.612 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘: 2큰술
2025-06-29 19:37:01.612 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 마늘, Amount: 2큰술
2025-06-29 19:37:01.612 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 마늘, Amount: 2큰술
2025-06-29 19:37:01.613 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.613 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 마늘' not found in DB. Skipping.
2025-06-29 19:37:01.613 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 생강: 0.5큰술
2025-06-29 19:37:01.613 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 생강, Amount: 0.5큰술
2025-06-29 19:37:01.613 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 생강, Amount: 0.5큰술
2025-06-29 19:37:01.615 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.615 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 생강' not found in DB. Skipping.
2025-06-29 19:37:01.615 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름: 1큰술
2025-06-29 19:37:01.615 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 참기름, Amount: 1큰술
2025-06-29 19:37:01.615 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 19:37:01.617 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.618 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 19:37:01.618 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추: 약간
2025-06-29 19:37:01.618 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 후추, Amount: 약간
2025-06-29 19:37:01.618 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 후추, Amount: 약간
2025-06-29 19:37:01.619 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.620 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '후추' not found in DB. Skipping.
2025-06-29 19:37:01.620 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청주 또는 맛술: 2큰술
2025-06-29 19:37:01.620 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 청주 또는 맛술, Amount: 2큰술
2025-06-29 19:37:01.620 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청주 또는 맛술, Amount: 2큰술
2025-06-29 19:37:01.623 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.624 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '청주 또는 맛술' not found in DB. Skipping.
2025-06-29 19:37:01.624 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 배즙(없으면 생략 가능): 2큰술
2025-06-29 19:37:01.624 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 배즙(없으면 생략 가능), Amount: 2큰술
2025-06-29 19:37:01.624 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 배즙(없으면 생략 가능), Amount: 2큰술
2025-06-29 19:37:01.625 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.625 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '배즙(없으면 생략 가능)' not found in DB. Skipping.
2025-06-29 19:37:01.625 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파: 1개
2025-06-29 19:37:01.625 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 양파, Amount: 1개
2025-06-29 19:37:01.625 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 19:37:01.626 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.626 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 19:37:01.626 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파: 1대
2025-06-29 19:37:01.626 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 대파, Amount: 1대
2025-06-29 19:37:01.626 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-29 19:37:01.627 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.628 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 19:37:01.628 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근: 1/2개
2025-06-29 19:37:01.628 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 당근, Amount: 1/2개
2025-06-29 19:37:01.628 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 당근, Amount: 1/2개
2025-06-29 19:37:01.629 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.629 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '당근' not found in DB. Skipping.
2025-06-29 19:37:01.629 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추: 1~2개(선택)
2025-06-29 19:37:01.629 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 청양고추, Amount: 1~2개(선택)
2025-06-29 19:37:01.629 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 1~2개(선택)
2025-06-29 19:37:01.630 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.630 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-29 19:37:01.630 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유: 약간
2025-06-29 19:37:01.630 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 식용유, Amount: 약간
2025-06-29 19:37:01.630 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 약간
2025-06-29 19:37:01.632 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.633 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 19:37:01.633 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 깨소금: 약간
2025-06-29 19:37:01.633 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 깨소금, Amount: 약간
2025-06-29 19:37:01.633 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 깨소금, Amount: 약간
2025-06-29 19:37:01.634 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.636 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '깨소금' not found in DB. Skipping.
2025-06-29 19:37:01.636 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물: 1/4컵
2025-06-29 19:37:01.636 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 물, Amount: 1/4컵
2025-06-29 19:37:01.636 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 1/4컵
2025-06-29 19:37:01.637 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 19:37:01.648 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 19:37:01.648 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기는 얇게 썰어 기름이 많은 부분을 정리해 준비합니다.
   2. 큰 그릇에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추, 청주(또는 맛술)
2025-06-29 19:37:01.648 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 19:37:01.648 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살 또는 목살): 600g
   - 고추장: 2큰술
   - 고춧가루: 2큰술
   - 진간장: 2큰술
   - 설탕: 1큰술
   - 올리고당: 2큰술 (또는 물엿)
   - 다진 마늘: 2큰술
   - 다진 생강: 0.5큰술
   - 참기름: 1큰술
   - 후추: 약간
   - 청주 또는 맛술: 2큰술
   - 배즙(없으면 생략 가능): 2큰술
   - 양파: 1개
   - 대파: 1대
   - 당근: 1/2개
   - 청양고추: 1~2개(선택)
   - 식용유: 약간
   - 깨소금: 약간
   - 물: 1/4컵

조리 방법:
1. 돼지고기는 얇게 썰어 기름이 많은 부분을 정리해 준비합니다.
   2. 큰 그릇에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추, 청주(또는 맛술), 배즙을 섞어 양념장을 만듭니다.
   3. 준비한 돼지고기에 양념장을 고루 버무려 30분~1시간 재워둡니다.
   4. 양파, 대파, 당근을 채 썰어 준비하고, 청양고추는 원한다면 송송 썰어둡니다.
   5. 팬에 식용유를 두르고 중불에서 재운 고기를 먼저 볶다가, 고기가 익기 시작하면 야채(양파, 대파, 당근, 청양고추)를 넣고 함께 볶습니다.
   6. 물 1/4컵을 넣어 자작하게 더 볶다가, 고기와 야채가 모두 익으면 불을 끄고 깨소금을 뿌려 마무리합니다[1][2].
2025-06-29 19:37:01.649 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 19:37:01.653 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 제육볶음
2025-06-29 19:37:01.655 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 19:37:01.657 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 107
2025-06-29 19:37:34.116 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Retrograde clock change detected (housekeeper delta=28s267ms), soft-evicting connections from pool.
2025-06-29 19:58:47.076 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 19:58:47.084 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 19:58:47.089 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 19:58:51.812 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 19:58:51.842 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 32948 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 19:58:51.842 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 19:58:51.843 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 19:58:51.899 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 19:58:51.899 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 19:58:52.745 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 19:58:52.746 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 19:58:52.794 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 19:58:52.795 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 19:58:52.796 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 19:58:52.797 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 19:58:52.798 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 19:58:52.798 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 19:58:52.799 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 19:58:52.813 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 19:58:52.814 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 0 JDBC repository interfaces.
2025-06-29 19:58:52.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 19:58:52.837 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 19:58:52.923 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 8 JPA repository interfaces.
2025-06-29 19:58:52.950 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 19:58:52.950 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 19:58:52.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 19:58:52.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 19:58:52.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 19:58:52.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 19:58:52.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 19:58:52.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 19:58:52.961 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 19:58:52.962 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 19:58:52.962 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-29 19:58:53.620 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 19:58:53.627 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 19:58:53.630 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 19:58:53.630 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 19:58:53.668 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 19:58:53.670 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1768 ms
2025-06-29 19:58:53.700 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 19:58:53.845 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@52e35a22
2025-06-29 19:58:53.849 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 19:58:53.865 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 19:58:53.983 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 19:58:54.010 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 19:58:54.027 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 19:58:54.136 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 19:58:54.196 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 19:58:54.197 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 19:58:55.806 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 19:58:55.960 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 19:58:56.361 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 19:58:56.615 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 19:58:56.616 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 19:58:57.657 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 19:58:57.762 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 19:58:57.941 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@24e29c47, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@146a950e, org.springframework.security.web.context.SecurityContextHolderFilter@203b7694, org.springframework.security.web.header.HeaderWriterFilter@1b6c7918, org.springframework.web.filter.CorsFilter@16e4ab58, org.springframework.security.web.authentication.logout.LogoutFilter@1446cbf2, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@1f118a33, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@71d43dcd, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@185c8c63, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3147d2de, org.springframework.security.web.session.SessionManagementFilter@5693600c, org.springframework.security.web.access.ExceptionTranslationFilter@4de18a5a, org.springframework.security.web.access.intercept.AuthorizationFilter@d17a5f0]
2025-06-29 19:58:58.334 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 19:58:58.367 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 19:58:58.377 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 19:58:58.393 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.89 seconds (process running for 7.508)
2025-06-29 20:00:29.204 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:00:29.205 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:00:29.209 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-06-29 20:00:29.282 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:00:29.329 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:00:29.349 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:00:29.355 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:00:29.410 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatRoom */insert 
    into
        chat_room (created_at, is_active, message_count, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:00:34.992 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:00:34.997 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:00:35.001 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:00:35.004 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:00:35.012 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:00:35.014 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:00:35.018 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:00:35.020 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:00:35.030 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:00:35.028 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천해줘, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 20:00:35.032 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:00:35.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:00:35.033 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:00:35.034 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천해줘
2025-06-29 20:00:35.034 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:00:35.034 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 20:00:35.045 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:00:35.100 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:00:35.102 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 20:00:35.102 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:00:35.102 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천해줘
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 20:00:35.103 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:00:41.566 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:00:41.566 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 20:00:41.566 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 제육볶음
2. 김치찌개
3. 불고기덮밥
4. 비빔밥
5. 닭가슴살 샐러드

### 추천 이유

- 상황 분석: 사용자는 '내일 점심메뉴'를 요청하셨고, 직장인 또는 학생에게 적합한 점심 식사로 든든하면서도 일반적으로 구하기 쉬운 메뉴를 선호할 확률이 높습니다.
- 추천 기준: 대표적인 한식 위주로, 한 끼 식사로 든든하며 영양소가 균형 잡힌 메뉴를 선정했습니다. 점심엔 배에 부담이 적으면서도 포만감을 주는 메뉴가 필요하다는 점을 반영했습니다[1][2][3][4].
- 개인화 고려사항: 새우 알레르기를 반드시 배제하고, 아침에 밥을 먹으면 배가 아프다고 하셨으나 점심은 크게 제한이 없어 일반적인 한식 식사를 제안했습니다. 지나치게 기름지지 않으며 소화에 부담이 덜한 메뉴(예: 샐러드, 비빔밥 등)도 포함했습니다.
- 추가 팁: 각 메뉴는 대부분 배달, 식당 방문, 집밥 등 다양한 방식으로 쉽게 접하실 수 있습니다. 소화가 약하다면 고춧가루 양을 줄이거나 너무 매운 양념을 피하는 것도 한 방법입니다. 만약 위 메뉴 중 흥미로운 요리가 있다면, '레시피'라는 단어를 포함해 다시 요청하시면 상세한 조리법도 안내드릴 수 있습니다.
2025-06-29 20:00:41.567 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 20:00:44.096 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:00:44.101 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:00:44.107 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:00:44.119 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:00:44.122 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 제육볶음 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 20:00:44.124 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:00:44.126 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:00:44.126 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:00:44.126 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육볶음 레시피 알려줘
2025-06-29 20:00:44.126 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:00:44.126 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 20:00:44.128 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:00:44.130 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 20:00:44.130 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:00:44.130 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 제육볶음 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 20:00:44.131 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:00:49.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:00:49.807 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 20:00:49.807 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육볶음

2. 카테고리: 한식

3. 조리 시간: 약 30~40분

4. 조리 방법:
   1. 돼지고기는 기름이 많이 붙은 부분을 제거하고, 결을 따라 얇게 썰어 준비합니다[1].
   2. 볼에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추, 청주, 배즙을 넣고 잘 섞어 양념장을 만듭니다[1].
   3. 준비한 돼지고기에 양념장을 넣고 고루 버무려 30분~1시간 재워둡니다[1].
   4. 양파, 대파, 당근은 채 썰고, 청양고추는 송송 썰어둡니다[1].
   5. 팬에 식용유를 두르고 중불에서 재운 고기를 먼저 볶습니다. 고기가 익기 시작하면 준비한 야채(양파, 대파, 당근, 청양고추)를 넣고 함께 볶아줍니다[1].
   6. 야채가 적당히 익으면 물 1/4컵을 넣고 자작하게 한 번 더 볶습니다[1].
   7. 고기와 야채가 모두 익으면 불을 끄고 깨소금을 뿌려 마무리합니다. 맵기를 원하면 고추장, 고춧가루를 추가해도 좋습니다[1].

5. 필요한 재료와 양:
   - 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/3개
   - 청양고추 1~2개 (선택)
   - 식용유 약간
   - 물 1/4컵
   - [양념장]
     - 고추장 2큰술
     - 고춧가루 2큰술
     - 간장 2큰술
     - 설탕 1큰술
     - 다진 마늘 2큰술
     - 다진 생강 1작은술
     - 참기름 1큰술
     - 후추 약간
     - 청주 1큰술
     - 배즙 1큰술(없으면 생략 가능)[1][2]

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/1vBl9yT.jpg

8. 요리 팁:
   - 고기는 반드시 결대로 얇게 썰어야 육질이 부드러워집니다.
   - 양념에 미리 재워둘수록 깊은 맛이 나고, 배즙을 넣으면 고기가 더욱 연해집니다[1].
   - 당근, 양파 등 채소는 너무 늦게 넣지 말고 고기와 함께 볶아야 숨이 죽지 않고 아삭한 식감을 살릴 수 있습니다.

(새우 알레르기 정보: 본 레시피에는 새우가 포함되어 있지 않습니다. 안심하고 드셔도 됩니다.)
2025-06-29 20:00:49.811 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:00:49.815 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:00:49.815 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/1vBl9yT.jpg
2025-06-29 20:00:49.816 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/1vBl9yT.jpg
2025-06-29 20:00:49.816 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/1vBl9yT.jpg
2025-06-29 20:00:49.817 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/3개
   - 청양고추 1~2개 (선택)
   - 식용유 약간
   - 물 1/4컵
   - [양념장]
     - 고추장 2큰술
     - 고춧가루 2큰술
     - 간장 2큰술
     - 설탕 1큰술
     - 다진 마늘 2큰술
     - 다진 생강 1작은술
     - 참기름 1큰술
     - 후추 약간
     - 청주 1큰술
     - 배즙 1큰술(없으면 생략 가능)[1][2]
2025-06-29 20:00:49.818 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 18
2025-06-29 20:00:49.818 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살 또는 목살) 600g
2025-06-29 20:00:49.818 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 돼지고기(앞다리살 또는 목살) 600g
2025-06-29 20:00:49.818 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1개
2025-06-29 20:00:49.818 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양파, Amount: 1개
2025-06-29 20:00:49.819 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 20:00:49.827 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.834 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 20:00:49.836 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대
2025-06-29 20:00:49.836 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-29 20:00:49.836 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-29 20:00:49.838 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.840 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 20:00:49.840 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/3개
2025-06-29 20:00:49.840 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/3개
2025-06-29 20:00:49.840 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추 1~2개 (선택)
2025-06-29 20:00:49.840 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 청양고추 1~2개 (선택)
2025-06-29 20:00:49.840 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 20:00:49.841 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 20:00:49.841 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 1/4컵
2025-06-29 20:00:49.841 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 물 1/4컵
2025-06-29 20:00:49.841 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: [양념장]
2025-06-29 20:00:49.841 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: [양념장]
2025-06-29 20:00:49.841 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 2큰술
2025-06-29 20:00:49.841 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 2큰술
2025-06-29 20:00:49.841 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 2큰술
2025-06-29 20:00:49.842 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.843 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 20:00:49.844 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 2큰술
2025-06-29 20:00:49.845 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 2큰술
2025-06-29 20:00:49.845 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 2큰술
2025-06-29 20:00:49.847 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.848 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 20:00:49.850 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2큰술
2025-06-29 20:00:49.851 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2큰술
2025-06-29 20:00:49.851 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2큰술
2025-06-29 20:00:49.853 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.855 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 20:00:49.855 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 20:00:49.855 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 20:00:49.855 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 20:00:49.856 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.858 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 20:00:49.858 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 2큰술
2025-06-29 20:00:49.858 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 2큰술
2025-06-29 20:00:49.858 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 2큰술
2025-06-29 20:00:49.860 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.861 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 20:00:49.861 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 생강 1작은술
2025-06-29 20:00:49.861 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 생강, Amount: 1작은술
2025-06-29 20:00:49.861 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 생강, Amount: 1작은술
2025-06-29 20:00:49.862 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.862 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '생강' not found in DB. Skipping.
2025-06-29 20:00:49.862 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 1큰술
2025-06-29 20:00:49.862 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 1큰술
2025-06-29 20:00:49.862 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 20:00:49.865 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.865 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 20:00:49.865 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 20:00:49.866 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 20:00:49.866 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청주 1큰술
2025-06-29 20:00:49.866 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 청주, Amount: 1큰술
2025-06-29 20:00:49.866 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청주, Amount: 1큰술
2025-06-29 20:00:49.867 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.868 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '청주' not found in DB. Skipping.
2025-06-29 20:00:49.868 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 배즙 1큰술(없으면 생략 가능)[1][2]
2025-06-29 20:00:49.868 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 배즙, Amount: 1큰술
2025-06-29 20:00:49.868 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 배즙, Amount: 1큰술
2025-06-29 20:00:49.869 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:00:49.870 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '배즙' not found in DB. Skipping.
2025-06-29 20:00:49.871 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기는 기름이 많이 붙은 부분을 제거하고, 결을 따라 얇게 썰어 준비합니다[1].
   2. 볼에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추
2025-06-29 20:00:49.872 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 20:00:49.872 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살 또는 목살) 600g
   - 양파 1개
   - 대파 1대
   - 당근 1/3개
   - 청양고추 1~2개 (선택)
   - 식용유 약간
   - 물 1/4컵
   - [양념장]
     - 고추장 2큰술
     - 고춧가루 2큰술
     - 간장 2큰술
     - 설탕 1큰술
     - 다진 마늘 2큰술
     - 다진 생강 1작은술
     - 참기름 1큰술
     - 후추 약간
     - 청주 1큰술
     - 배즙 1큰술(없으면 생략 가능)[1][2]

조리 방법:
1. 돼지고기는 기름이 많이 붙은 부분을 제거하고, 결을 따라 얇게 썰어 준비합니다[1].
   2. 볼에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추, 청주, 배즙을 넣고 잘 섞어 양념장을 만듭니다[1].
   3. 준비한 돼지고기에 양념장을 넣고 고루 버무려 30분~1시간 재워둡니다[1].
   4. 양파, 대파, 당근은 채 썰고, 청양고추는 송송 썰어둡니다[1].
   5. 팬에 식용유를 두르고 중불에서 재운 고기를 먼저 볶습니다. 고기가 익기 시작하면 준비한 야채(양파, 대파, 당근, 청양고추)를 넣고 함께 볶아줍니다[1].
   6. 야채가 적당히 익으면 물 1/4컵을 넣고 자작하게 한 번 더 볶습니다[1].
   7. 고기와 야채가 모두 익으면 불을 끄고 깨소금을 뿌려 마무리합니다. 맵기를 원하면 고추장, 고춧가루를 추가해도 좋습니다[1].
2025-06-29 20:00:49.874 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:00:49.877 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 제육볶음
2025-06-29 20:01:20.594 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:20.599 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:20.602 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:20.603 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:20.625 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.625 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.628 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.628 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.642 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:01:20.691 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:20.697 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:20.703 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.711 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.725 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:01:20.768 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:20.804 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:20.813 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:20.833 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.858 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.874 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:01:20.901 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:20.905 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:20.907 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:20.911 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:20.912 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.916 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.922 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.922 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:20.935 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:01:20.935 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:26.537 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:26.549 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:26.556 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:26.559 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:26.566 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatRoom */insert 
    into
        chat_room (created_at, is_active, message_count, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:01:37.553 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:37.553 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:37.554 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:37.554 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:37.562 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:37.562 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:37.565 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:37.565 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:37.592 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 내일 점심메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 20:01:37.593 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:37.593 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:01:37.609 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:01:37.611 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:01:37.611 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 내일 점심메뉴 추천
2025-06-29 20:01:37.611 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:01:37.611 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 20:01:37.614 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:01:37.620 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:01:37.626 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 20:01:37.626 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:01:37.626 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 내일 점심메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 20:01:37.626 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:01:41.320 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:01:41.321 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 20:01:41.322 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 제육볶음
2. 비빔밥
3. 김치찌개
4. 순두부찌개
5. 불고기덮밥

### 추천 이유
- 상황 분석: 사용자는 내일 점심 메뉴를 찾고 있으며, 나이(25세)와 건강상 아침 공복 시 소화 문제, 새우 알레르기가 있음을 고려했습니다. 점심은 보통 든든하면서 다양한 영양소를 섭취할 수 있는 메뉴가 적합합니다.
- 추천 기준: 한식 위주로, 영양 균형과 든든함을 고려해 대표적인 점심 인기 메뉴 및 직장인들이 선호하는 메뉴를 선정했습니다. 조리나 외식 모두 쉽게 접근 가능합니다[1][2][4].
- 개인화 고려사항: 새우를 비롯한 해산물이 포함되지 않고, 자극적이거나 너무 기름지지 않은 메뉴를 선정했습니다. 아침에 불편함을 느낄 경우가 있어 점심엔 소화에 부담이 적으면서도 든든한 한식을 중심으로 골랐습니다.
- 추가 팁: 각 메뉴는 일반 백반집, 분식집, 또는 배달로도 쉽게 주문할 수 있어 직장 점심이나 혼밥 모두 적합합니다. 궁금한 메뉴의 레시피가 필요하다면 메뉴명을 클릭하거나 ‘레시피’라는 단어를 포함해 다시 요청해 주세요.
2025-06-29 20:01:41.325 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 20:01:44.693 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:01:44.695 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:44.698 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:44.702 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:01:44.706 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 제육볶음 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 20:01:44.707 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:01:44.708 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:01:44.708 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:01:44.708 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 제육볶음 레시피 알려줘
2025-06-29 20:01:44.708 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:01:44.708 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 20:01:44.710 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:01:44.711 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 20:01:44.712 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:01:44.712 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 제육볶음 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 20:01:44.712 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:01:50.925 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:01:50.926 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 20:01:50.926 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 제육볶음

2. 카테고리: 한식

3. 조리 시간: 30~40분

4. 조리 방법:
   1. 돼지고기는 기름기가 너무 많은 부분을 제거하고 얇게 썰어 준비합니다[1].
   2. 큰 그릇에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추, 청주(또는 맛술), 배즙을 넣고 잘 섞어 양념장을 만듭니다[1].
   3. 준비한 돼지고기에 양념장을 넣고 골고루 버무린 뒤 30분~1시간 정도 재워둡니다(더 깊은 맛을 원한다면 냉장 숙성도 괜찮습니다)[1][2].
   4. 양파, 대파, 당근, 청양고추는 먹기 좋게 채 썰어 준비합니다[1].
   5. 팬에 식용유를 두르고 중불에서 재운 고기를 볶다가 고기 겉면이 익으면 준비한 채소를 넣고 함께 볶아줍니다[1].
   6. 모든 재료가 고루 익고 윤기가 돌면 물 1/4컵을 넣어 자작하게 볶아줍니다[1].
   7. 마무리로 불을 끄기 전에 깨소금을 뿌려줍니다[1].

5. 필요한 재료와 양:
   - 돼지고기(앞다리살, 목살 등): 600g
   - 양파: 1개
   - 대파: 1대
   - 당근: 1/3개
   - 청양고추: 1~2개(취향대로)
   - 고추장: 2큰술
   - 고춧가루: 2큰술
   - 진간장: 2큰술
   - 설탕: 1큰술
   - 올리고당: 2큰술(또는 물엿)[2]
   - 다진 마늘: 2큰술
   - 다진 생강: 0.5큰술
   - 참기름: 1큰술
   - 후추: 약간
   - 청주 또는 맛술: 1큰술
   - 배즙: 1큰술(선택)
   - 식용유: 1큰술
   - 물: 1/4컵
   - 깨소금: 0.5큰술

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/0SNLvcz.jpg

8. 요리 팁:
   - 고기는 되도록 얇게 썰어야 양념이 잘 배고 식감이 부드러워집니다[1].
   - 야채의 식감을 살리고 싶다면 고기가 80% 익었을 때 야채를 넣어 볶으세요.
   - 매운맛을 원할 경우 청양고추와 고춧가루 양을 늘리면 됩니다.
   - 양념에 배즙이나 사과즙을 넣으면 고기가 더 부드럽고 감칠맛이 납니다.

알레르기 정보: 본 레시피에는 새우(갑각류) 관련 재료가 포함되어 있지 않습니다. 안심하고 섭취하셔도 됩니다.
2025-06-29 20:01:50.932 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:01:50.934 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:01:50.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/0SNLvcz.jpg
2025-06-29 20:01:50.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/0SNLvcz.jpg
2025-06-29 20:01:50.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/0SNLvcz.jpg
2025-06-29 20:01:50.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 돼지고기(앞다리살, 목살 등): 600g
   - 양파: 1개
   - 대파: 1대
   - 당근: 1/3개
   - 청양고추: 1~2개(취향대로)
   - 고추장: 2큰술
   - 고춧가루: 2큰술
   - 진간장: 2큰술
   - 설탕: 1큰술
   - 올리고당: 2큰술(또는 물엿)[2]
   - 다진 마늘: 2큰술
   - 다진 생강: 0.5큰술
   - 참기름: 1큰술
   - 후추: 약간
   - 청주 또는 맛술: 1큰술
   - 배즙: 1큰술(선택)
   - 식용유: 1큰술
   - 물: 1/4컵
   - 깨소금: 0.5큰술
2025-06-29 20:01:50.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 19
2025-06-29 20:01:50.935 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 돼지고기(앞다리살, 목살 등): 600g
2025-06-29 20:01:50.936 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 돼지고기(앞다리살, 목살 등), Amount: 600g
2025-06-29 20:01:50.936 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 돼지고기(앞다리살, 목살 등), Amount: 600g
2025-06-29 20:01:50.940 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.942 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '돼지고기(앞다리살, 목살 등)' not found in DB. Skipping.
2025-06-29 20:01:50.942 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파: 1개
2025-06-29 20:01:50.942 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 양파, Amount: 1개
2025-06-29 20:01:50.943 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양파, Amount: 1개
2025-06-29 20:01:50.947 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.948 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '양파' not found in DB. Skipping.
2025-06-29 20:01:50.948 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파: 1대
2025-06-29 20:01:50.948 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 대파, Amount: 1대
2025-06-29 20:01:50.948 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-29 20:01:50.950 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.951 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 20:01:50.951 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근: 1/3개
2025-06-29 20:01:50.951 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 당근, Amount: 1/3개
2025-06-29 20:01:50.951 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 당근, Amount: 1/3개
2025-06-29 20:01:50.952 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.953 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '당근' not found in DB. Skipping.
2025-06-29 20:01:50.953 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청양고추: 1~2개(취향대로)
2025-06-29 20:01:50.953 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 청양고추, Amount: 1~2개(취향대로)
2025-06-29 20:01:50.953 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청양고추, Amount: 1~2개(취향대로)
2025-06-29 20:01:50.955 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.956 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '청양고추' not found in DB. Skipping.
2025-06-29 20:01:50.956 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장: 2큰술
2025-06-29 20:01:50.956 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고추장, Amount: 2큰술
2025-06-29 20:01:50.956 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 2큰술
2025-06-29 20:01:50.958 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.958 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 20:01:50.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루: 2큰술
2025-06-29 20:01:50.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 고춧가루, Amount: 2큰술
2025-06-29 20:01:50.959 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 2큰술
2025-06-29 20:01:50.959 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.960 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 20:01:50.960 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 진간장: 2큰술
2025-06-29 20:01:50.960 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 진간장, Amount: 2큰술
2025-06-29 20:01:50.960 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 진간장, Amount: 2큰술
2025-06-29 20:01:50.961 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.962 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '진간장' not found in DB. Skipping.
2025-06-29 20:01:50.962 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕: 1큰술
2025-06-29 20:01:50.962 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 설탕, Amount: 1큰술
2025-06-29 20:01:50.962 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 20:01:50.963 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.963 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 20:01:50.963 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 올리고당: 2큰술(또는 물엿)[2]
2025-06-29 20:01:50.963 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 올리고당, Amount: 2큰술(또는 물엿)[2]
2025-06-29 20:01:50.963 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 올리고당, Amount: 2큰술(또는 물엿)[2]
2025-06-29 20:01:50.968 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.969 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '올리고당' not found in DB. Skipping.
2025-06-29 20:01:50.969 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘: 2큰술
2025-06-29 20:01:50.969 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 마늘, Amount: 2큰술
2025-06-29 20:01:50.969 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 마늘, Amount: 2큰술
2025-06-29 20:01:50.970 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.970 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 마늘' not found in DB. Skipping.
2025-06-29 20:01:50.970 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 생강: 0.5큰술
2025-06-29 20:01:50.970 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 다진 생강, Amount: 0.5큰술
2025-06-29 20:01:50.970 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 다진 생강, Amount: 0.5큰술
2025-06-29 20:01:50.971 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.972 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '다진 생강' not found in DB. Skipping.
2025-06-29 20:01:50.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름: 1큰술
2025-06-29 20:01:50.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 참기름, Amount: 1큰술
2025-06-29 20:01:50.972 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 1큰술
2025-06-29 20:01:50.973 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.973 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 20:01:50.973 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추: 약간
2025-06-29 20:01:50.973 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 후추, Amount: 약간
2025-06-29 20:01:50.973 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 후추, Amount: 약간
2025-06-29 20:01:50.974 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.975 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '후추' not found in DB. Skipping.
2025-06-29 20:01:50.975 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 청주 또는 맛술: 1큰술
2025-06-29 20:01:50.975 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 청주 또는 맛술, Amount: 1큰술
2025-06-29 20:01:50.975 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 청주 또는 맛술, Amount: 1큰술
2025-06-29 20:01:50.976 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.976 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '청주 또는 맛술' not found in DB. Skipping.
2025-06-29 20:01:50.976 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 배즙: 1큰술(선택)
2025-06-29 20:01:50.977 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 배즙, Amount: 1큰술(선택)
2025-06-29 20:01:50.977 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 배즙, Amount: 1큰술(선택)
2025-06-29 20:01:50.977 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.978 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '배즙' not found in DB. Skipping.
2025-06-29 20:01:50.978 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유: 1큰술
2025-06-29 20:01:50.978 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 식용유, Amount: 1큰술
2025-06-29 20:01:50.978 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식용유, Amount: 1큰술
2025-06-29 20:01:50.979 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.979 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '식용유' not found in DB. Skipping.
2025-06-29 20:01:50.979 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물: 1/4컵
2025-06-29 20:01:50.979 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 물, Amount: 1/4컵
2025-06-29 20:01:50.979 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 1/4컵
2025-06-29 20:01:50.979 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.980 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 20:01:50.981 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 깨소금: 0.5큰술
2025-06-29 20:01:50.981 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: 깨소금, Amount: 0.5큰술
2025-06-29 20:01:50.981 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 깨소금, Amount: 0.5큰술
2025-06-29 20:01:50.983 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:01:50.983 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '깨소금' not found in DB. Skipping.
2025-06-29 20:01:50.985 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기는 기름기가 너무 많은 부분을 제거하고 얇게 썰어 준비합니다[1].
   2. 큰 그릇에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추, 청
2025-06-29 20:01:50.985 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 20:01:50.985 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 돼지고기(앞다리살, 목살 등): 600g
   - 양파: 1개
   - 대파: 1대
   - 당근: 1/3개
   - 청양고추: 1~2개(취향대로)
   - 고추장: 2큰술
   - 고춧가루: 2큰술
   - 진간장: 2큰술
   - 설탕: 1큰술
   - 올리고당: 2큰술(또는 물엿)[2]
   - 다진 마늘: 2큰술
   - 다진 생강: 0.5큰술
   - 참기름: 1큰술
   - 후추: 약간
   - 청주 또는 맛술: 1큰술
   - 배즙: 1큰술(선택)
   - 식용유: 1큰술
   - 물: 1/4컵
   - 깨소금: 0.5큰술

조리 방법:
1. 돼지고기는 기름기가 너무 많은 부분을 제거하고 얇게 썰어 준비합니다[1].
   2. 큰 그릇에 고추장, 고춧가루, 간장, 설탕, 다진 마늘, 다진 생강, 참기름, 후추, 청주(또는 맛술), 배즙을 넣고 잘 섞어 양념장을 만듭니다[1].
   3. 준비한 돼지고기에 양념장을 넣고 골고루 버무린 뒤 30분~1시간 정도 재워둡니다(더 깊은 맛을 원한다면 냉장 숙성도 괜찮습니다)[1][2].
   4. 양파, 대파, 당근, 청양고추는 먹기 좋게 채 썰어 준비합니다[1].
   5. 팬에 식용유를 두르고 중불에서 재운 고기를 볶다가 고기 겉면이 익으면 준비한 채소를 넣고 함께 볶아줍니다[1].
   6. 모든 재료가 고루 익고 윤기가 돌면 물 1/4컵을 넣어 자작하게 볶아줍니다[1].
   7. 마무리로 불을 끄기 전에 깨소금을 뿌려줍니다[1].
2025-06-29 20:01:50.986 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:01:50.987 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 제육볶음
2025-06-29 20:02:37.735 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:37.736 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:37.736 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:37.735 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:37.738 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:37.738 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:37.769 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:37.769 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:37.769 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:37.769 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:37.769 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:37.806 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.811 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.811 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.811 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.810 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.831 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.831 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.831 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.831 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.832 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:37.834 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.915 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:02:37.920 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:02:37.928 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.934 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:02:37.948 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:37.958 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:37.958 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:37.966 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:02:47.798 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:47.803 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:47.807 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:47.810 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:47.818 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:47.826 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:48.091 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:48.093 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:48.110 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.117 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.120 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:48.129 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:48.202 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:48.203 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:48.206 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.208 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.210 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:48.212 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:48.707 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:48.709 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:48.711 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.713 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.715 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:48.718 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:48.789 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:48.791 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:48.793 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.795 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.798 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:48.800 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:48.868 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:48.870 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:48.873 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.875 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.876 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:48.879 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:48.962 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:48.964 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:48.966 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.967 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:48.972 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:48.975 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:49.037 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:49.039 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:49.041 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.043 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.045 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:49.190 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:49.193 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:49.195 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.196 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.203 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:49.205 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:49.279 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:49.281 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:49.283 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.286 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.292 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:49.295 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:49.349 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:49.350 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:49.353 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.356 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.360 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:49.364 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:49.501 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:49.503 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:49.507 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.511 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.514 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:49.516 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:49.576 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:49.578 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:49.583 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.585 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.587 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:49.591 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:49.841 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:49.843 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:49.846 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.847 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.850 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:49.853 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:49.969 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:49.970 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:49.974 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.976 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:49.982 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:49.987 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:50.106 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:50.111 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:50.113 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.115 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.117 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:50.120 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:50.253 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:50.255 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:50.259 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.261 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.265 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:50.269 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:50.386 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:50.390 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:50.393 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.395 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.396 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:50.571 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:50.574 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:50.577 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.603 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.612 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:50.617 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:50.646 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:50.648 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:50.650 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.651 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.653 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:50.656 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:50.811 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:50.812 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:50.814 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.815 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.820 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:50.823 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:50.934 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:50.936 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:50.938 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.940 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:50.943 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:50.945 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:51.201 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:51.204 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:51.208 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.210 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.213 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:51.215 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:51.336 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:51.339 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:51.341 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.343 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.346 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:51.350 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:51.479 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:51.480 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:51.482 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.483 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.486 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:51.716 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:51.717 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:51.722 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.724 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.727 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:51.730 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:51.970 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:51.974 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:51.977 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.982 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:51.984 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:51.988 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:52.156 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:52.158 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:52.160 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.161 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.163 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:52.166 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:52.261 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:52.262 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:52.264 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.265 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.267 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:52.271 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:52.400 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:52.401 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:52.403 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.405 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.408 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:52.412 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:52.503 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:52.505 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:52.508 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.510 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.512 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:52.515 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:52.655 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:52.657 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:52.660 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.665 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.667 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:52.669 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:52.846 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:52.848 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:52.850 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.853 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:52.858 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:52.862 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:53.000 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:53.003 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:53.008 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.010 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.013 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:53.018 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:53.151 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:53.156 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:53.159 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.161 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.164 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:53.167 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:53.297 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:53.298 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:53.300 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.301 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.303 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:53.306 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:53.443 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:53.444 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:53.446 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.447 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.449 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:53.453 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:53.582 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:53.584 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:53.586 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.587 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.590 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:53.593 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:02:53.726 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:53.727 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:53.729 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.730 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:53.732 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:58.233 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:02:58.236 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:02:58.239 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:58.243 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:02:58.245 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:02:58.251 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:03:04.343 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:03:04.343 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:03:04.345 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:03:04.345 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:03:04.350 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:03:04.350 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:03:04.354 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:03:04.354 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:03:04.358 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 점심메뉴 , useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 20:03:04.358 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:03:04.358 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:03:04.359 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:03:04.359 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:03:04.359 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 점심메뉴 
2025-06-29 20:03:04.359 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:03:04.359 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 20:03:04.361 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:03:04.371 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:03:04.374 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 20:03:04.374 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:03:04.374 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 점심메뉴 
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 20:03:04.374 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:03:08.044 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:03:08.045 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 20:03:08.045 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. **삼겹살 덮밥**
2. **소고기가지 덮밥**
3. **김치찌개**
4. **븡어빵**
5. **소고기볶음 덮밥**

### 추천 이유

- **상황 분석**: 점심 메뉴를 선택할 때는 간단하면서도 영양이 풍부한 음식을 선호하는 경향이 있습니다. 또한, 건강 상태와 알레르기 등을 고려해야 합니다.
  
- **추천 기준**: 사용자는 새우 알레르기가 있으며, 아침에 밥을 먹으면 배가 아프다는 것을 고려하여, 간단하고 전통적인 한식을 기본으로 선택했습니다. 또한, 건강에 좋은 식단을 제공하기 위해 소고기와 김치 같은 영양가가 높은 재료를 포함했습니다.

- **개인화 고려사항**: 새우 알레르기 때문에 새우를 포함하지 않았고, 아침에 밥을 먹으면 배가 아프다는 건강 상태를 고려해 가벼운 한식을 우선으로 선택했습니다.

- **추가 팁**: 사용자가 특정 메뉴의 레시피를 원한다면 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청해 주시기 바랍니다. 주로 덮밥류를 선택한 이유는 간편하게 먹을 수 있으며, 소고기와 같은 고기 요리로 영양을 보충할 수 있기 때문입니다. 김치찌개는 김치의 장점을 최대한 활용한 건강한 메뉴입니다.
2025-06-29 20:03:08.045 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 20:03:26.627 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:03:26.631 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:03:26.635 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:03:26.639 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:03:26.642 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: **븡어빵** 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 20:03:26.643 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:03:26.675 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:03:26.675 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:03:26.675 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: **븡어빵** 레시피 알려줘
2025-06-29 20:03:26.675 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:03:26.675 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 20:03:26.678 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:03:26.681 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 20:03:26.681 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:03:26.681 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: **븡어빵** 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 20:03:26.681 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:03:32.928 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:03:32.929 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 20:03:32.929 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 붕어빵

2. 카테고리: 분식

3. 조리 시간: 30분

4. 조리 방법:
   1. 볼에 박력분 200g, 베이킹파우더 1과 1/2큰술, 설탕 20g, 소금 2g을 넣고 고루 섞습니다.
   2. 여기에 물 140g과 우유 180g을 넣고, 덩어리 없이 부드럽게 풀어 반죽을 만듭니다. (계란 1개를 추가해도 좋습니다.)
   3. 붕어빵 틀은 약불에서 앞뒤로 3분 정도 예열해줍니다. 기름이나 녹인 버터를 붓에 묻혀 틀 안쪽에 골고루 바릅니다.
   4. 예열된 틀에 반죽을 반쯤 붓고, 가운데에 시판용 팥앙금이나 직접 만든 팥앙금을 1스푼 올립니다.
   5. 팥앙금 위에 다시 반죽을 덮어줍니다. (너무 넘치지 않게 주의)
   6. 틀을 닫고 약불에서 3~4분 정도 한 쪽을 굽다가, 뒤집어서 3~4분 더 노릇하게 구워줍니다.
   7. 완성된 붕어빵을 꺼내 식힘망에 올려 식혀줍니다.

5. 필요한 재료와 양:
   - 박력분 200g
   - 베이킹파우더 1과 1/2큰술
   - 설탕 20g
   - 소금 2g
   - 물 140g
   - 우유 180g
   - (선택) 계란 1개
   - 팥앙금 적당량 (시판용 또는 직접 만든 것)
   - 식용유 또는 녹인 버터 약간

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/3pYOQ1u.jpg

8. 요리 팁:
   - 반죽이 너무 되직하면 붕어빵 식감이 퍽퍽해질 수 있으니, 묽다고 느껴질 정도의 농도가 적당합니다.
   - 시판용 팥앙금이 너무 달면 설탕 양을 줄이거나, 집에서 직접 팥앙금을 만들어 간을 조절해보세요.
   - 남은 반죽은 냉장보관 후 바로 사용 가능하며, 앙금 대신 슈크림·초콜릿 등 다양한 속을 넣어도 좋습니다.

(알레르기 정보: 붕어빵에 새우는 포함되어 있지 않습니다. 안심하고 드실 수 있습니다.)
2025-06-29 20:03:32.935 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 분식
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/3pYOQ1u.jpg
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/3pYOQ1u.jpg
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/3pYOQ1u.jpg
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 박력분 200g
   - 베이킹파우더 1과 1/2큰술
   - 설탕 20g
   - 소금 2g
   - 물 140g
   - 우유 180g
   - (선택) 계란 1개
   - 팥앙금 적당량 (시판용 또는 직접 만든 것)
   - 식용유 또는 녹인 버터 약간
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 박력분 200g
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 박력분, Amount: 200g
2025-06-29 20:03:32.938 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 박력분, Amount: 200g
2025-06-29 20:03:32.942 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:03:32.943 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '박력분' not found in DB. Skipping.
2025-06-29 20:03:32.943 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 베이킹파우더 1과 1/2큰술
2025-06-29 20:03:32.943 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 베이킹파우더, Amount: 1과
2025-06-29 20:03:32.943 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 베이킹파우더, Amount: 1과
2025-06-29 20:03:32.948 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:03:32.949 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '베이킹파우더' not found in DB. Skipping.
2025-06-29 20:03:32.949 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 20g
2025-06-29 20:03:32.949 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 20g
2025-06-29 20:03:32.949 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 20g
2025-06-29 20:03:32.954 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:03:32.956 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 20:03:32.956 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 2g
2025-06-29 20:03:32.956 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소금, Amount: 2g
2025-06-29 20:03:32.957 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 2g
2025-06-29 20:03:32.959 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:03:32.960 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-29 20:03:32.960 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 140g
2025-06-29 20:03:32.960 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 140g
2025-06-29 20:03:32.960 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 140g
2025-06-29 20:03:32.962 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:03:32.962 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 20:03:32.962 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 우유 180g
2025-06-29 20:03:32.962 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 우유, Amount: 180g
2025-06-29 20:03:32.962 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 우유, Amount: 180g
2025-06-29 20:03:32.963 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:03:32.964 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '우유' not found in DB. Skipping.
2025-06-29 20:03:32.964 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 계란 1개
2025-06-29 20:03:32.965 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 1개
2025-06-29 20:03:32.965 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 1개
2025-06-29 20:03:32.965 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:03:32.966 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 20:03:32.966 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 팥앙금 적당량 (시판용 또는 직접 만든 것)
2025-06-29 20:03:32.966 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 팥앙금 적당량 (시판용 또는 직접 만든 것)
2025-06-29 20:03:32.967 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 또는 녹인 버터 약간
2025-06-29 20:03:32.967 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 또는 녹인 버터 약간
2025-06-29 20:03:32.967 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 볼에 박력분 200g, 베이킹파우더 1과 1/2큰술, 설탕 20g, 소금 2g을 넣고 고루 섞습니다.
   2. 여기에 물 140g과 우유 180g을 넣고, 덩어리 없이 부드
2025-06-29 20:03:32.967 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 20:03:32.967 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 박력분 200g
   - 베이킹파우더 1과 1/2큰술
   - 설탕 20g
   - 소금 2g
   - 물 140g
   - 우유 180g
   - (선택) 계란 1개
   - 팥앙금 적당량 (시판용 또는 직접 만든 것)
   - 식용유 또는 녹인 버터 약간

조리 방법:
1. 볼에 박력분 200g, 베이킹파우더 1과 1/2큰술, 설탕 20g, 소금 2g을 넣고 고루 섞습니다.
   2. 여기에 물 140g과 우유 180g을 넣고, 덩어리 없이 부드럽게 풀어 반죽을 만듭니다. (계란 1개를 추가해도 좋습니다.)
   3. 붕어빵 틀은 약불에서 앞뒤로 3분 정도 예열해줍니다. 기름이나 녹인 버터를 붓에 묻혀 틀 안쪽에 골고루 바릅니다.
   4. 예열된 틀에 반죽을 반쯤 붓고, 가운데에 시판용 팥앙금이나 직접 만든 팥앙금을 1스푼 올립니다.
   5. 팥앙금 위에 다시 반죽을 덮어줍니다. (너무 넘치지 않게 주의)
   6. 틀을 닫고 약불에서 3~4분 정도 한 쪽을 굽다가, 뒤집어서 3~4분 더 노릇하게 구워줍니다.
   7. 완성된 붕어빵을 꺼내 식힘망에 올려 식혀줍니다.
2025-06-29 20:03:32.968 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:03:32.969 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 붕어빵
2025-06-29 20:03:33.011 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:03:33.016 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 108
2025-06-29 20:04:32.767 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:04:32.781 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:04:32.796 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:32.799 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:32.804 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:04:33.838 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:04:33.840 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:04:33.842 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:33.849 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:33.854 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:04:33.859 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:04:38.200 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:04:38.208 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:04:38.212 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:38.214 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:38.218 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatRoom */insert 
    into
        chat_room (created_at, is_active, message_count, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:04:40.179 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:04:40.182 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:04:40.185 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:40.187 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:40.190 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:04:40.193 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:04:42.597 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:04:42.599 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:04:42.601 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:42.603 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:42.609 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 점메추, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 20:04:42.612 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:04:42.644 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:04:42.644 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:04:42.644 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 점메추
2025-06-29 20:04:42.644 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:04:42.645 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 20:04:42.649 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:04:42.652 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 20:04:42.652 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:04:42.652 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 점메추
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 20:04:42.653 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:04:48.190 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:04:48.190 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 20:04:48.190 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 닭가슴살 비빔밥
2. 제육볶음 쌈밥
3. 김치찌개
4. 불고기정식
5. 냉모밀

### 추천 이유
- 상황 분석: 사용자의 요청은 "점메추"로, 점심 메뉴 추천을 의미합니다[1][2][3]. 일반적인 점심시간에 어울리고, 25세 남성 직장인 또는 학생이 간편하게 즐길 수 있으면서 든든함을 제공하는 메뉴를 선정했습니다.
- 추천 기준: 한식을 선호하는 경향을 반영해 구성했고, 점심식사로 흔히 찾는 메뉴를 중심으로 건강, 포만감, 조리의 간편함을 고려했습니다.
- 개인화 고려사항: 아침 식사 시 복통이 있음을 반영해, 점심에는 부담스럽지 않으면서도 소화에 무리가 적은(맵고 자극적인 음식은 최소화) 한식 위주로 구성했습니다. 새우 알레르기가 있으므로 모든 메뉴에서 새우가 포함되지 않도록 주의했습니다.
- 추가 팁: 비빔밥이나 냉모밀은 간편하게 혼밥도 가능하고, 쌈밥이나 불고기정식은 동료와 외식하기에도 좋으며, 김치찌개는 한식당 어디서나 쉽게 즐길 수 있는 국민 메뉴입니다. 특정 메뉴의 레시피가 궁금하다면 해당 메뉴명을 클릭하거나 ‘레시피’라는 단어를 포함해서 다시 요청해 주세요.
2025-06-29 20:04:48.191 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 20:04:50.446 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:04:50.448 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:04:50.451 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:50.453 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:04:50.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 불고기정식 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 20:04:50.456 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:04:50.457 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:04:50.457 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:04:50.457 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 불고기정식 레시피 알려줘
2025-06-29 20:04:50.457 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:04:50.457 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 20:04:50.460 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:04:50.462 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 20:04:50.462 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:04:50.462 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 불고기정식 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 20:04:50.462 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:04:58.729 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:04:58.730 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 20:04:58.730 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 불고기정식

2. 카테고리: 한식

3. 조리 시간: 40분

4. 조리 방법:
   1. 소고기 불고기감 600g은 키친타월로 핏기를 제거한 후 준비합니다[1].
   2. 불고기 양념장(간장 14스푼, 굴소스 2스푼, 설탕 6스푼, 맛술 4스푼, 갈아 만든 배 음료 170ml, 다진 마늘 2스푼, 후추, 참기름)을 잘 혼합합니다[1].
   3. 양파(1/2개), 대파(1대), 당근(1/4개), 표고버섯(3개)을 채 썰어 준비합니다[1].
   4. 팬에 식용유를 두르고 달군 뒤 소고기를 넣고 중불에서 살짝 볶아줍니다.
   5. 고기가 60% 정도 익었을 때 채 썬 채소를 모두 넣고, 채소 숨이 살짝 죽을 때까지 볶아줍니다.
   6. 준비한 양념장을 부어 중불에서 국물 자작하게 졸아들 때까지 끓입니다.
   7. 마지막에 참기름을 2스푼 넣고 불을 끕니다[1].
   8. 완성된 불고기를 밥, 쌈 채소, 김치 등과 함께 정식으로 차려냅니다.

5. 필요한 재료와 양:
   - 소고기 불고기감 600g
   - 양파 1/2개
   - 대파 1대
   - 당근 1/4개
   - 표고버섯 3개
   - 간장 14스푼
   - 굴소스 2스푼
   - 설탕 6스푼
   - 맛술 4스푼
   - 갈아 만든 배 음료 170ml (또는 배즙/배 갈아 넣어도 무방)
   - 다진 마늘 2스푼
   - 후추 약간
   - 참기름 2스푼 (마무리용)
   - 식용유 약간

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/5KLjzQe.jpg

8. 요리 팁:
   - 소고기는 핏물을 최대한 제거하면 잡내 없이 깔끔한 맛을 즐길 수 있습니다.
   - 배 음료가 없을 경우, 배를 갈아 넣거나 사과를 갈아 넣어도 단맛과 풍미가 더해집니다.
   - 채소는 취향에 따라 팽이버섯, 느타리버섯, 알배추 등을 추가해도 좋습니다[2].
   - 양념은 미리 숙성해두면 더욱 깊은 맛을 낼 수 있습니다.
2025-06-29 20:04:58.732 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:04:58.733 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:04:58.733 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/5KLjzQe.jpg
2025-06-29 20:04:58.733 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/5KLjzQe.jpg
2025-06-29 20:04:58.733 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/5KLjzQe.jpg
2025-06-29 20:04:58.733 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 불고기감 600g
   - 양파 1/2개
   - 대파 1대
   - 당근 1/4개
   - 표고버섯 3개
   - 간장 14스푼
   - 굴소스 2스푼
   - 설탕 6스푼
   - 맛술 4스푼
   - 갈아 만든 배 음료 170ml (또는 배즙/배 갈아 넣어도 무방)
   - 다진 마늘 2스푼
   - 후추 약간
   - 참기름 2스푼 (마무리용)
   - 식용유 약간
2025-06-29 20:04:58.733 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 14
2025-06-29 20:04:58.734 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 불고기감 600g
2025-06-29 20:04:58.734 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 불고기감, Amount: 600g
2025-06-29 20:04:58.734 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 불고기감, Amount: 600g
2025-06-29 20:04:58.735 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.737 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '불고기감' not found in DB. Skipping.
2025-06-29 20:04:58.737 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-29 20:04:58.737 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-29 20:04:58.737 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대
2025-06-29 20:04:58.737 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-29 20:04:58.737 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-29 20:04:58.738 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.739 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 20:04:58.739 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개
2025-06-29 20:04:58.739 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/4개
2025-06-29 20:04:58.739 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 3개
2025-06-29 20:04:58.739 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 표고버섯, Amount: 3개
2025-06-29 20:04:58.739 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 표고버섯, Amount: 3개
2025-06-29 20:04:58.740 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.741 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '표고버섯' not found in DB. Skipping.
2025-06-29 20:04:58.741 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 14스푼
2025-06-29 20:04:58.741 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 14스푼
2025-06-29 20:04:58.741 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 14스푼
2025-06-29 20:04:58.744 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.744 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 20:04:58.744 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굴소스 2스푼
2025-06-29 20:04:58.744 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 굴소스, Amount: 2스푼
2025-06-29 20:04:58.744 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 굴소스, Amount: 2스푼
2025-06-29 20:04:58.745 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.746 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '굴소스' not found in DB. Skipping.
2025-06-29 20:04:58.746 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 6스푼
2025-06-29 20:04:58.746 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 6스푼
2025-06-29 20:04:58.746 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 6스푼
2025-06-29 20:04:58.747 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.747 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 20:04:58.747 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 4스푼
2025-06-29 20:04:58.747 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 4스푼
2025-06-29 20:04:58.747 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 4스푼
2025-06-29 20:04:58.748 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.749 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 20:04:58.749 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 갈아 만든 배 음료 170ml (또는 배즙/배 갈아 넣어도 무방)
2025-06-29 20:04:58.749 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 음료, Amount: 170ml
2025-06-29 20:04:58.749 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 음료, Amount: 170ml
2025-06-29 20:04:58.750 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.752 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '음료' not found in DB. Skipping.
2025-06-29 20:04:58.752 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 2스푼
2025-06-29 20:04:58.752 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 2스푼
2025-06-29 20:04:58.752 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 2스푼
2025-06-29 20:04:58.753 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.755 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 20:04:58.755 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 20:04:58.755 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 20:04:58.755 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 2스푼 (마무리용)
2025-06-29 20:04:58.755 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 2스푼
2025-06-29 20:04:58.755 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 2스푼
2025-06-29 20:04:58.756 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:04:58.758 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 20:04:58.758 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 20:04:58.758 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 20:04:58.758 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소고기 불고기감 600g은 키친타월로 핏기를 제거한 후 준비합니다[1].
   2. 불고기 양념장(간장 14스푼, 굴소스 2스푼, 설탕 6스푼, 맛술 4스푼, 갈아 만든 배 
2025-06-29 20:04:58.758 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 20:04:58.758 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 불고기감 600g
   - 양파 1/2개
   - 대파 1대
   - 당근 1/4개
   - 표고버섯 3개
   - 간장 14스푼
   - 굴소스 2스푼
   - 설탕 6스푼
   - 맛술 4스푼
   - 갈아 만든 배 음료 170ml (또는 배즙/배 갈아 넣어도 무방)
   - 다진 마늘 2스푼
   - 후추 약간
   - 참기름 2스푼 (마무리용)
   - 식용유 약간

조리 방법:
1. 소고기 불고기감 600g은 키친타월로 핏기를 제거한 후 준비합니다[1].
   2. 불고기 양념장(간장 14스푼, 굴소스 2스푼, 설탕 6스푼, 맛술 4스푼, 갈아 만든 배 음료 170ml, 다진 마늘 2스푼, 후추, 참기름)을 잘 혼합합니다[1].
   3. 양파(1/2개), 대파(1대), 당근(1/4개), 표고버섯(3개)을 채 썰어 준비합니다[1].
   4. 팬에 식용유를 두르고 달군 뒤 소고기를 넣고 중불에서 살짝 볶아줍니다.
   5. 고기가 60% 정도 익었을 때 채 썬 채소를 모두 넣고, 채소 숨이 살짝 죽을 때까지 볶아줍니다.
   6. 준비한 양념장을 부어 중불에서 국물 자작하게 졸아들 때까지 끓입니다.
   7. 마지막에 참기름을 2스푼 넣고 불을 끕니다[1].
   8. 완성된 불고기를 밥, 쌈 채소, 김치 등과 함께 정식으로 차려냅니다.
2025-06-29 20:04:58.759 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:04:58.762 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 불고기정식
2025-06-29 20:04:58.763 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:04:58.776 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 109
2025-06-29 20:05:05.311 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:05:05.315 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:05:05.318 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:05:05.322 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:05:05.323 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 불고기정식 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 20:05:05.324 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:05:05.326 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:05:05.326 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:05:05.326 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 불고기정식 레시피 알려줘
2025-06-29 20:05:05.326 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:05:05.326 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 20:05:05.328 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:05:05.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 20:05:05.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:05:05.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 불고기정식 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 20:05:05.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:05:11.326 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:05:11.326 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 20:05:11.326 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 불고기정식

2. 카테고리: 한식

3. 조리 시간: 30분

4. 조리 방법:
   1. 소고기 불고기감(600g)은 키친타월로 핏기를 제거해 준비합니다[1][3].
   2. 불고기 양념을 만듭니다. (간장 14스푼, 굴소스 2스푼, 설탕 6스푼, 맛술 4스푼, 갈아 만든 배 음료 170ml, 다진 마늘 2스푼, 후추 약간)[1].
   3. 양파(1/2개), 대파(1대), 당근(1/4개), 표고버섯(3개)을 먹기 좋은 크기로 썰어 준비합니다[1].
   4. 팬에 기름을 둘러 달군 후 소고기를 살짝 볶습니다[1].
   5. 고기가 익기 시작하면 썰어둔 채소를 넣고 채소 숨이 죽을 정도로 볶아줍니다[1][2].
   6. 미리 만들어둔 불고기 양념장을 고기와 채소에 부어 골고루 섞이도록 볶아줍니다. 국물이 자박자박해질 때까지 중불에서 끓입니다[1][2].
   7. 마지막에 참기름 2스푼을 넣고 불을 끕니다[1].
   8. 완성된 불고기와 함께 밥, 나물, 김치, 계란찜, 국 등과 곁들여 불고기정식으로 차려냅니다.

5. 필요한 재료와 양:
   - 소고기 불고기감 600g
   - 양파 1/2개
   - 대파 1대
   - 당근 1/4개
   - 표고버섯 3개
   - 간장 14스푼
   - 굴소스 2스푼
   - 설탕 6스푼
   - 맛술 4스푼
   - 갈아 만든 배 음료 170ml (또는 배 1/2개 간 것)
   - 다진 마늘 2스푼
   - 후추 약간
   - 참기름 2스푼
   - 식용유 약간
   - (정식 구성: 밥, 나물, 김치, 계란찜 등 추가 반찬은 취향에 따라 준비)

6. 난이도: 중

7. 이미지 URL: https://i.imgur.com/N5nxBIV.jpg

8. 요리 팁:
   - 고기 양념에 배 음료(또는 배 간 것)를 넣으면 고기가 더 부드럽고 단맛이 살아납니다[1].
   - 채소는 취향에 따라 버섯, 팽이버섯, 당근, 애호박 등을 추가하셔도 좋습니다.
   - 양념을 미리 만들어 30분 이상 재워두면 고기에 간이 잘 배어 더 맛있어집니다[1].
   - 자박하게 국물이 있을 때까지 볶아내면 밥과 함께 먹기에 딱 좋습니다[2].

알레르기 정보: 본 레시피에는 새우가 포함되어 있지 않으므로 안심하고 드실 수 있습니다.
2025-06-29 20:05:11.328 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:05:11.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:05:11.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/N5nxBIV.jpg
2025-06-29 20:05:11.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/N5nxBIV.jpg
2025-06-29 20:05:11.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/N5nxBIV.jpg
2025-06-29 20:05:11.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 소고기 불고기감 600g
   - 양파 1/2개
   - 대파 1대
   - 당근 1/4개
   - 표고버섯 3개
   - 간장 14스푼
   - 굴소스 2스푼
   - 설탕 6스푼
   - 맛술 4스푼
   - 갈아 만든 배 음료 170ml (또는 배 1/2개 간 것)
   - 다진 마늘 2스푼
   - 후추 약간
   - 참기름 2스푼
   - 식용유 약간
   - (정식 구성: 밥, 나물, 김치, 계란찜 등 추가 반찬은 취향에 따라 준비)
2025-06-29 20:05:11.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 15
2025-06-29 20:05:11.330 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소고기 불고기감 600g
2025-06-29 20:05:11.331 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 불고기감, Amount: 600g
2025-06-29 20:05:11.331 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 불고기감, Amount: 600g
2025-06-29 20:05:11.331 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.337 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '불고기감' not found in DB. Skipping.
2025-06-29 20:05:11.337 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양파 1/2개
2025-06-29 20:05:11.337 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 양파 1/2개
2025-06-29 20:05:11.337 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1대
2025-06-29 20:05:11.337 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 대파, Amount: 1대
2025-06-29 20:05:11.337 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 대파, Amount: 1대
2025-06-29 20:05:11.339 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.340 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '대파' not found in DB. Skipping.
2025-06-29 20:05:11.340 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 당근 1/4개
2025-06-29 20:05:11.340 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 당근 1/4개
2025-06-29 20:05:11.340 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 표고버섯 3개
2025-06-29 20:05:11.340 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 표고버섯, Amount: 3개
2025-06-29 20:05:11.340 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 표고버섯, Amount: 3개
2025-06-29 20:05:11.342 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.344 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '표고버섯' not found in DB. Skipping.
2025-06-29 20:05:11.344 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 14스푼
2025-06-29 20:05:11.344 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 14스푼
2025-06-29 20:05:11.344 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 14스푼
2025-06-29 20:05:11.346 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.348 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 20:05:11.348 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굴소스 2스푼
2025-06-29 20:05:11.348 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 굴소스, Amount: 2스푼
2025-06-29 20:05:11.348 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 굴소스, Amount: 2스푼
2025-06-29 20:05:11.349 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.351 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '굴소스' not found in DB. Skipping.
2025-06-29 20:05:11.351 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 6스푼
2025-06-29 20:05:11.351 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 6스푼
2025-06-29 20:05:11.351 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 6스푼
2025-06-29 20:05:11.352 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.353 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 20:05:11.353 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 4스푼
2025-06-29 20:05:11.353 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 4스푼
2025-06-29 20:05:11.353 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 4스푼
2025-06-29 20:05:11.354 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.354 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 20:05:11.354 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 갈아 만든 배 음료 170ml (또는 배 1/2개 간 것)
2025-06-29 20:05:11.354 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 음료, Amount: 170ml
2025-06-29 20:05:11.354 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 음료, Amount: 170ml
2025-06-29 20:05:11.355 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.356 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '음료' not found in DB. Skipping.
2025-06-29 20:05:11.356 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 2스푼
2025-06-29 20:05:11.356 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 2스푼
2025-06-29 20:05:11.356 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 2스푼
2025-06-29 20:05:11.357 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.358 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 20:05:11.358 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 20:05:11.358 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 20:05:11.358 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 2스푼
2025-06-29 20:05:11.358 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 참기름, Amount: 2스푼
2025-06-29 20:05:11.358 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 참기름, Amount: 2스푼
2025-06-29 20:05:11.359 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.360 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '참기름' not found in DB. Skipping.
2025-06-29 20:05:11.361 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 약간
2025-06-29 20:05:11.361 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 약간
2025-06-29 20:05:11.361 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (정식 구성: 밥, 나물, 김치, 계란찜 등 추가 반찬은 취향에 따라 준비)
2025-06-29 20:05:11.361 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 1 matched - Name: (정식 구성, Amount: 밥, 나물, 김치, 계란찜 등 추가 반찬은 취향에 따라 준비)
2025-06-29 20:05:11.361 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: (정식 구성, Amount: 밥, 나물, 김치, 계란찜 등 추가 반찬은 취향에 따라 준비)
2025-06-29 20:05:11.364 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:05:11.365 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '(정식 구성' not found in DB. Skipping.
2025-06-29 20:05:11.365 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 소고기 불고기감(600g)은 키친타월로 핏기를 제거해 준비합니다[1][3].
   2. 불고기 양념을 만듭니다. (간장 14스푼, 굴소스 2스푼, 설탕 6스푼, 맛술 4스푼,
2025-06-29 20:05:11.365 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 20:05:11.365 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 소고기 불고기감 600g
   - 양파 1/2개
   - 대파 1대
   - 당근 1/4개
   - 표고버섯 3개
   - 간장 14스푼
   - 굴소스 2스푼
   - 설탕 6스푼
   - 맛술 4스푼
   - 갈아 만든 배 음료 170ml (또는 배 1/2개 간 것)
   - 다진 마늘 2스푼
   - 후추 약간
   - 참기름 2스푼
   - 식용유 약간
   - (정식 구성: 밥, 나물, 김치, 계란찜 등 추가 반찬은 취향에 따라 준비)

조리 방법:
1. 소고기 불고기감(600g)은 키친타월로 핏기를 제거해 준비합니다[1][3].
   2. 불고기 양념을 만듭니다. (간장 14스푼, 굴소스 2스푼, 설탕 6스푼, 맛술 4스푼, 갈아 만든 배 음료 170ml, 다진 마늘 2스푼, 후추 약간)[1].
   3. 양파(1/2개), 대파(1대), 당근(1/4개), 표고버섯(3개)을 먹기 좋은 크기로 썰어 준비합니다[1].
   4. 팬에 기름을 둘러 달군 후 소고기를 살짝 볶습니다[1].
   5. 고기가 익기 시작하면 썰어둔 채소를 넣고 채소 숨이 죽을 정도로 볶아줍니다[1][2].
   6. 미리 만들어둔 불고기 양념장을 고기와 채소에 부어 골고루 섞이도록 볶아줍니다. 국물이 자박자박해질 때까지 중불에서 끓입니다[1][2].
   7. 마지막에 참기름 2스푼을 넣고 불을 끕니다[1].
   8. 완성된 불고기와 함께 밥, 나물, 김치, 계란찜, 국 등과 곁들여 불고기정식으로 차려냅니다.
2025-06-29 20:05:11.366 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:05:11.367 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 불고기정식
2025-06-29 20:06:33.225 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:06:33.225 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:06:33.253 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:33.253 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:33.258 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.258 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.260 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.260 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.302 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:06:33.319 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:33.350 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:06:33.350 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:06:33.355 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:33.355 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:33.358 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.358 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.359 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.359 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.362 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:06:33.363 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:33.371 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:06:33.374 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:33.375 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.376 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.378 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:06:33.386 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:06:33.387 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:33.389 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.390 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:33.391 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:06:42.262 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:06:42.264 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:42.267 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:42.269 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:06:42.273 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 20:06:42.273 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:06:42.275 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:06:42.275 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:06:42.276 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천
2025-06-29 20:06:42.276 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:06:42.276 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 20:06:42.278 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:06:42.280 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 20:06:42.280 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:06:42.280 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 20:06:42.280 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:06:53.624 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:06:53.625 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 20:06:53.625 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 김치전
2. 마파두부
3. 닭날개구이
4. 비빔밥
5. 칼국수

### 추천 이유

- 상황 분석: 특별한 제한 없이 **일반적인 메뉴 추천** 요청으로 판단했습니다. 아침에 밥을 먹으면 배가 아프다는 건강 상태와 25세 남성, 새우 알레르기를 반드시 고려해야 합니다.

- 추천 기준:  
  - 밥 위주의 무거운 메뉴(특히 아침을 위한 메뉴)는 피했습니다.
  - 새우가 들어가지 않는, 부담 없고 속에 덜 자극적인 메뉴 위주로 골랐습니다.
  - 한식 선호를 참고해 다양한 한식 위주로 추천했으며, 간단하면서도 영양 밸런스를 맞출 수 있는 메뉴로 선정했습니다.

- 개인화 고려사항:  
  - **새우 알레르기**를 명확히 피하고, 알레르기 가능성이 있는 해산물류도 제외했습니다.  
  - 아침에 밥을 먹으면 배가 아픈 점을 고려하여, 밥이 주가 되는 메뉴는 가능한 점심·저녁에 추천하거나, 밥 외의 주메뉴도 포함했습니다.

- 추가 팁:  
  - 김치전, 마파두부, 닭날개구이 등은 간단하게 만들 수 있으면서도 부담이 적고, 비빔밥과 칼국수는 야채와 곡류를 활용해 영양 균형을 맞추기 좋습니다.
  - 특정 메뉴의 조리법(레시피)이 궁금하다면, 해당 메뉴와 ‘레시피’라는 단어를 함께 다시 요청하시면 상세하게 안내해드릴 수 있습니다.
2025-06-29 20:06:53.627 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 20:13:44.860 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:13:44.894 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:13:44.900 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:13:44.902 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:13:44.908 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 20:13:44.910 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:13:44.912 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:13:44.912 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:13:44.912 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천
2025-06-29 20:13:44.912 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:13:44.912 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 20:13:44.920 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:13:44.921 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 20:13:44.921 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:13:44.921 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴명만 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 메뉴 추천이므로 상세한 레시피가 아닌 메뉴명 목록과 추천 이유만 제공해주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**중요**: 사용자가 특정 메뉴의 레시피를 원한다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어를 포함해서 다시 요청하라고 안내해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 20:13:44.921 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:13:49.974 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:13:49.974 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 20:13:49.974 [http-nio-8080-exec-8] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 아보카도 명란 덮밥
2. 두부조림
3. 에그 토스트
4. 어묵탕
5. 닭날개구이

### 추천 이유
- 상황 분석: 별도의 시간대나 상황이 없으나, 아침에 밥을 먹으면 배가 아프다는 건강정보를 바탕으로 소화에 부담이 적은 메뉴와 한식을 선호하는 25세 남성에게 어울리는 메뉴를 선정했습니다.  
- 추천 기준: 아침에 밥이 부담스러운 점을 고려해 빵, 달걀, 두부 등 소화가 잘되고 간단하게 먹을 수 있는 메뉴를 우선 추천했습니다. 한식 선호도를 참고해, 한식 기반의 메뉴 또는 익숙한 재료 위주의 메뉴를 채택했습니다.  
- 개인화 고려사항: 새우 알레르기가 있어 새우가 들어가는 메뉴(예: 감바스, 새우파스타 등)는 제외했습니다. 또한, 위장에 부담을 줄 수 있는 무거운 고기류나 밀가루 위주의 음식(짜장면, 라멘 등)은 배제하고 부드럽고 소화에 용이한 재료를 중점적으로 골랐습니다.  
- 추가 팁: 아침엔 에그 토스트나 두부조림, 어묵탕 등 간단하게 먹을 수 있는 메뉴를 추천하며, 점심·저녁엔 아보카도 명란 덮밥과 닭날개구이처럼 든든하면서도 비교적 소화에 부담이 적은 메뉴를 고려해보세요. 특정 메뉴의 레시피가 궁금하다면 해당 메뉴명을 클릭하거나 '레시피'라는 단어와 함께 다시 요청해 주세요.
2025-06-29 20:13:49.974 [http-nio-8080-exec-8] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 20:14:03.436 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:14:03.439 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:14:03.445 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:14:03.447 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:14:03.452 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아보카도 명란 덮밥 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 20:14:03.452 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:14:03.454 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:14:03.454 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:14:03.454 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아보카도 명란 덮밥 레시피 알려줘
2025-06-29 20:14:03.454 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:14:03.454 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 20:14:03.455 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:14:03.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 20:14:03.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:14:03.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 아보카도 명란 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 20:14:03.456 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:14:08.972 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:14:08.972 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 20:14:08.972 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 아보카도 명란 덮밥

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 아보카도 1/2개는 반으로 갈라 씨와 껍질을 제거한 후 얇게 슬라이스합니다[1].
   2. 명란 1개의 껍질에 칼집을 내어 수저로 알만 긁어내 준비합니다[1][3].
   3. 명란에 마요네즈 1숟가락과 고추냉이 약간을 넣고 섞어 명란마요 소스를 만듭니다[3].
   4. 달걀 1개로 반숙 또는 취향에 맞게 프라이를 합니다[1][3].
   5. 밥 1공기를 그릇에 담고 슬라이스한 아보카도와 명란마요 소스를 얹습니다[1][3].
   6. 달걀 프라이, 김가루 약간, 쪽파 조금, 통깨, 참기름 약간을 올려 마무리합니다[1][3].
   7. 기호에 따라 상추와 방울토마토, 새싹채소 등을 곁들여도 좋습니다[3][4].

5. 필요한 재료와 양:
   - 밥 1공기 (210g)
   - 아보카도 1/2개
   - 명란 1개 (저염 추천)
   - 마요네즈 1숟가락
   - 고추냉이 약간
   - 달걀 1개
   - 김가루 약간
   - 쪽파 조금
   - 참기름 약간
   - 통깨 약간
   - (선택) 상추 2~3장, 방울토마토 2개, 새싹채소 약간

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/n8ZQEn5.jpg

8. 요리 팁:
   - 아보카도는 너무 익기 전에 사용해야 예쁘게 썰어져 모양이 흐트러지지 않습니다.
   - 명란은 저염 명란을 사용하면 더 깔끔한 맛을 즐길 수 있습니다.
   - 달걀은 반숙으로 하면 명란마요와 어우러져 더 고소하게 즐길 수 있습니다.
   - 고추냉이는 생략 가능하며, 명란의 짠맛이 강할 경우 양을 조절하세요.
2025-06-29 20:14:08.974 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:14:08.983 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:14:08.983 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/n8ZQEn5.jpg
2025-06-29 20:14:08.983 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/n8ZQEn5.jpg
2025-06-29 20:14:08.983 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/n8ZQEn5.jpg
2025-06-29 20:14:08.983 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 1공기 (210g)
   - 아보카도 1/2개
   - 명란 1개 (저염 추천)
   - 마요네즈 1숟가락
   - 고추냉이 약간
   - 달걀 1개
   - 김가루 약간
   - 쪽파 조금
   - 참기름 약간
   - 통깨 약간
   - (선택) 상추 2~3장, 방울토마토 2개, 새싹채소 약간
2025-06-29 20:14:08.984 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 11
2025-06-29 20:14:08.984 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기 (210g)
2025-06-29 20:14:08.984 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 20:14:08.984 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 20:14:08.985 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:08.988 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 20:14:08.988 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 아보카도 1/2개
2025-06-29 20:14:08.988 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 아보카도 1/2개
2025-06-29 20:14:08.988 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 명란 1개 (저염 추천)
2025-06-29 20:14:08.988 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 명란, Amount: 1개
2025-06-29 20:14:08.988 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 명란, Amount: 1개
2025-06-29 20:14:08.989 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:08.990 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '명란' not found in DB. Skipping.
2025-06-29 20:14:08.990 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 1숟가락
2025-06-29 20:14:08.991 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마요네즈, Amount: 1숟가락
2025-06-29 20:14:08.991 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마요네즈, Amount: 1숟가락
2025-06-29 20:14:08.992 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:08.993 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '마요네즈' not found in DB. Skipping.
2025-06-29 20:14:08.993 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추냉이 약간
2025-06-29 20:14:08.993 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추냉이 약간
2025-06-29 20:14:08.993 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 1개
2025-06-29 20:14:08.993 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 1개
2025-06-29 20:14:08.993 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 1개
2025-06-29 20:14:08.994 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 김가루 약간
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 김가루 약간
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 쪽파 조금
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 쪽파 조금
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 약간
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 참기름 약간
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 약간
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 통깨 약간
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 상추 2~3장, 방울토마토 2개, 새싹채소 약간
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 방울토마토, Amount: 2개
2025-06-29 20:14:08.995 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 방울토마토, Amount: 2개
2025-06-29 20:14:08.996 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:08.997 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '방울토마토' not found in DB. Skipping.
2025-06-29 20:14:08.997 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 아보카도 1/2개는 반으로 갈라 씨와 껍질을 제거한 후 얇게 슬라이스합니다[1].
   2. 명란 1개의 껍질에 칼집을 내어 수저로 알만 긁어내 준비합니다[1][3].
   
2025-06-29 20:14:08.997 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 20:14:08.997 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 1공기 (210g)
   - 아보카도 1/2개
   - 명란 1개 (저염 추천)
   - 마요네즈 1숟가락
   - 고추냉이 약간
   - 달걀 1개
   - 김가루 약간
   - 쪽파 조금
   - 참기름 약간
   - 통깨 약간
   - (선택) 상추 2~3장, 방울토마토 2개, 새싹채소 약간

조리 방법:
1. 아보카도 1/2개는 반으로 갈라 씨와 껍질을 제거한 후 얇게 슬라이스합니다[1].
   2. 명란 1개의 껍질에 칼집을 내어 수저로 알만 긁어내 준비합니다[1][3].
   3. 명란에 마요네즈 1숟가락과 고추냉이 약간을 넣고 섞어 명란마요 소스를 만듭니다[3].
   4. 달걀 1개로 반숙 또는 취향에 맞게 프라이를 합니다[1][3].
   5. 밥 1공기를 그릇에 담고 슬라이스한 아보카도와 명란마요 소스를 얹습니다[1][3].
   6. 달걀 프라이, 김가루 약간, 쪽파 조금, 통깨, 참기름 약간을 올려 마무리합니다[1][3].
   7. 기호에 따라 상추와 방울토마토, 새싹채소 등을 곁들여도 좋습니다[3][4].
2025-06-29 20:14:08.998 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:14:09.001 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 아보카도 명란 덮밥
2025-06-29 20:14:09.003 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:14:09.020 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 110
2025-06-29 20:14:12.869 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:14:12.870 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:14:12.872 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:14:12.874 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:14:12.876 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 아보카도 명란 덮밥 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 20:14:12.877 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:14:12.883 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:14:12.883 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:14:12.883 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 사용자 요청: 아보카도 명란 덮밥 레시피 알려줘
2025-06-29 20:14:12.883 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:14:12.883 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 20:14:12.887 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:14:12.889 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 20:14:12.889 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:14:12.889 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 아보카도 명란 덮밥 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 20:14:12.889 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:14:19.270 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:14:19.270 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 20:14:19.270 [http-nio-8080-exec-5] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 아보카도 명란 덮밥

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 아보카도는 반으로 잘라 씨와 껍질을 제거한 뒤, 먹기 좋은 크기로 슬라이스합니다[3].
   2. 명란은 껍질을 벗기고, 속 알만 숟가락으로 긁어냅니다[1][3].
   3. 명란에 마요네즈 1큰술, 고추냉이(옵션) 약간을 넣어 섞어 명란마요 소스를 만듭니다[3].
   4. 달걀은 후라이로 반숙 또는 완숙으로 구워줍니다[1][3].
   5. 따뜻한 밥 한 공기를 그릇에 담고, 그 위에 명란마요소스, 아보카도 슬라이스, 달걀프라이를 올립니다.
   6. 김가루, 쪽파 등 기호에 맞게 토핑을 얹고, 마지막으로 간장·맛술·설탕을 섞은 간장 소스를 한 바퀴 두릅니다[1].
   7. 통깨와 참기름을 약간 뿌려 마무리합니다[1].

5. 필요한 재료와 양:
   - 밥 1공기(210g)
   - 아보카도 1/2개
   - 명란젓 1개 (저염 추천)
   - 마요네즈 1큰술
   - 달걀 1개
   - 김가루 약간
   - 참기름 약간
   - 쪽파 약간(옵션)
   - 간장 1큰술
   - 맛술 1큰술
   - 설탕 0.1큰술
   - 고추냉이 약간(옵션)
   - 통깨 약간

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/ysNW5qv.jpg

8. 요리 팁:
   - 아보카도는 너무 무르지 않은 상태를 사용해야 모양이 잘 살아납니다.
   - 명란젓의 짠맛이 강하다면 마요네즈 양을 조금 늘려 부드럽게 만들어 주세요.
   - 소스는 밥 전체에 고루 뿌려 감칠맛을 높일 수 있습니다.
   - 쪽파, 김가루, 방울토마토 등 기호에 맞는 토핑을 추가하면 더욱 풍성하게 즐길 수 있습니다.

알레르기 안내: 본 요리는 명란(명태알)이 기본 재료이며, 새우는 사용되지 않아 새우 알레르기가 있으셔도 안전하게 즐기실 수 있습니다.
2025-06-29 20:14:19.275 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:14:19.277 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:14:19.277 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/ysNW5qv.jpg
2025-06-29 20:14:19.277 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/ysNW5qv.jpg
2025-06-29 20:14:19.277 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/ysNW5qv.jpg
2025-06-29 20:14:19.277 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 밥 1공기(210g)
   - 아보카도 1/2개
   - 명란젓 1개 (저염 추천)
   - 마요네즈 1큰술
   - 달걀 1개
   - 김가루 약간
   - 참기름 약간
   - 쪽파 약간(옵션)
   - 간장 1큰술
   - 맛술 1큰술
   - 설탕 0.1큰술
   - 고추냉이 약간(옵션)
   - 통깨 약간
2025-06-29 20:14:19.278 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 20:14:19.278 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 밥 1공기(210g)
2025-06-29 20:14:19.278 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 밥, Amount: 1공기
2025-06-29 20:14:19.278 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 밥, Amount: 1공기
2025-06-29 20:14:19.281 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:19.283 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '밥' not found in DB. Skipping.
2025-06-29 20:14:19.283 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 아보카도 1/2개
2025-06-29 20:14:19.283 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 아보카도 1/2개
2025-06-29 20:14:19.283 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 명란젓 1개 (저염 추천)
2025-06-29 20:14:19.283 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 명란젓, Amount: 1개
2025-06-29 20:14:19.283 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 명란젓, Amount: 1개
2025-06-29 20:14:19.284 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:19.285 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '명란젓' not found in DB. Skipping.
2025-06-29 20:14:19.285 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마요네즈 1큰술
2025-06-29 20:14:19.285 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마요네즈, Amount: 1큰술
2025-06-29 20:14:19.286 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마요네즈, Amount: 1큰술
2025-06-29 20:14:19.287 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:19.287 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '마요네즈' not found in DB. Skipping.
2025-06-29 20:14:19.287 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 1개
2025-06-29 20:14:19.287 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 1개
2025-06-29 20:14:19.287 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 1개
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 김가루 약간
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 김가루 약간
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 참기름 약간
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 참기름 약간
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 쪽파 약간(옵션)
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 쪽파 약간(옵션)
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 1큰술
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 1큰술
2025-06-29 20:14:19.289 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 1큰술
2025-06-29 20:14:19.291 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:19.292 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 20:14:19.292 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술 1큰술
2025-06-29 20:14:19.292 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 맛술, Amount: 1큰술
2025-06-29 20:14:19.292 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 맛술, Amount: 1큰술
2025-06-29 20:14:19.293 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Ingredient '맛술' not found in DB. Skipping.
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 0.1큰술
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 설탕 0.1큰술
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추냉이 약간(옵션)
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 고추냉이 약간(옵션)
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 통깨 약간
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 통깨 약간
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 아보카도는 반으로 잘라 씨와 껍질을 제거한 뒤, 먹기 좋은 크기로 슬라이스합니다[3].
   2. 명란은 껍질을 벗기고, 속 알만 숟가락으로 긁어냅니다[1][3].
   3.
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 20:14:19.294 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 밥 1공기(210g)
   - 아보카도 1/2개
   - 명란젓 1개 (저염 추천)
   - 마요네즈 1큰술
   - 달걀 1개
   - 김가루 약간
   - 참기름 약간
   - 쪽파 약간(옵션)
   - 간장 1큰술
   - 맛술 1큰술
   - 설탕 0.1큰술
   - 고추냉이 약간(옵션)
   - 통깨 약간

조리 방법:
1. 아보카도는 반으로 잘라 씨와 껍질을 제거한 뒤, 먹기 좋은 크기로 슬라이스합니다[3].
   2. 명란은 껍질을 벗기고, 속 알만 숟가락으로 긁어냅니다[1][3].
   3. 명란에 마요네즈 1큰술, 고추냉이(옵션) 약간을 넣어 섞어 명란마요 소스를 만듭니다[3].
   4. 달걀은 후라이로 반숙 또는 완숙으로 구워줍니다[1][3].
   5. 따뜻한 밥 한 공기를 그릇에 담고, 그 위에 명란마요소스, 아보카도 슬라이스, 달걀프라이를 올립니다.
   6. 김가루, 쪽파 등 기호에 맞게 토핑을 얹고, 마지막으로 간장·맛술·설탕을 섞은 간장 소스를 한 바퀴 두릅니다[1].
   7. 통깨와 참기름을 약간 뿌려 마무리합니다[1].
2025-06-29 20:14:19.297 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:14:19.298 [http-nio-8080-exec-5] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 아보카도 명란 덮밥
2025-06-29 20:17:10.072 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:17:10.072 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:17:10.084 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:17:10.084 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:17:10.109 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.109 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.111 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.112 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.119 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:17:10.119 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:17:10.139 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:17:10.139 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:17:10.146 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:17:10.146 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:17:10.149 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.149 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.151 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.151 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.156 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:17:10.156 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:17:10.171 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:17:10.184 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:17:10.186 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.187 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.189 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:17:10.200 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:17:10.201 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:17:10.203 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.204 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:17:10.209 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:20:41.716 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:20:41.716 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:20:41.778 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:20:41.778 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:20:41.793 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:20:41.793 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:20:41.795 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:20:41.795 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:20:41.802 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:20:41.802 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:20:41.836 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:20:41.841 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:20:41.847 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:20:41.850 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:20:41.857 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:21:31.964 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 8 class path changes (0 additions, 8 deletions, 0 modifications)
2025-06-29 20:21:31.978 [Thread-5] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:21:32.028 [Thread-5] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:21:32.033 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 20:21:32.038 [Thread-5] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 20:21:32.500 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 32948 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 20:21:32.502 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 20:21:32.502 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 20:21:32.821 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:32.821 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 20:21:32.832 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:32.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:32.833 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:32.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:32.834 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:32.835 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:32.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:32.836 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 JDBC repository interfaces.
2025-06-29 20:21:32.846 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:32.846 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 20:21:32.863 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 7 JPA repository interfaces.
2025-06-29 20:21:32.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:32.872 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:21:32.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:32.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:32.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:32.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:32.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:32.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:32.877 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:32.878 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-06-29 20:21:33.142 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 20:21:33.144 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:21:33.145 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:21:33.145 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 20:21:33.162 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:21:33.162 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 654 ms
2025-06-29 20:21:33.184 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Starting...
2025-06-29 20:21:33.199 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Added connection com.mysql.cj.jdbc.ConnectionImpl@66a10a8f
2025-06-29 20:21:33.199 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Start completed.
2025-06-29 20:21:33.200 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 20:21:33.251 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 20:21:33.254 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 20:21:33.259 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 20:21:33.261 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 20:21:33.261 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 20:21:33.666 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 20:21:33.740 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:21:33.968 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 20:21:34.146 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 20:21:34.147 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 20:21:34.250 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 20:21:34.284 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 20:21:34.379 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5ca5b7d5, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@773271b6, org.springframework.security.web.context.SecurityContextHolderFilter@1965494a, org.springframework.security.web.header.HeaderWriterFilter@76612403, org.springframework.web.filter.CorsFilter@7dc57793, org.springframework.security.web.authentication.logout.LogoutFilter@29b04186, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@9217844, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3f6344d2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@405d2e01, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7e6a5327, org.springframework.security.web.session.SessionManagementFilter@59207173, org.springframework.security.web.access.ExceptionTranslationFilter@5546e8a, org.springframework.security.web.access.intercept.AuthorizationFilter@2554cf1b]
2025-06-29 20:21:34.603 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 20:21:34.613 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:21:34.615 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 20:21:34.622 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 2.291 seconds (process running for 1363.757)
2025-06-29 20:21:34.625 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-06-29 20:21:36.015 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 8 class path changes (8 additions, 0 deletions, 0 modifications)
2025-06-29 20:21:36.017 [Thread-7] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8080"]
2025-06-29 20:21:36.025 [Thread-7] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:21:36.026 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown initiated...
2025-06-29 20:21:36.027 [Thread-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-2 - Shutdown completed.
2025-06-29 20:21:36.209 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 32948 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 20:21:36.211 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 20:21:36.211 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 20:21:36.387 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:36.387 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 20:21:36.395 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:36.396 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:36.396 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:36.397 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:36.398 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:36.399 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:36.399 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:36.399 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:36.400 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 JDBC repository interfaces.
2025-06-29 20:21:36.402 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:36.402 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 20:21:36.412 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 8 JPA repository interfaces.
2025-06-29 20:21:36.414 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:36.414 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:21:36.416 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:36.416 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:36.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:36.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:36.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:36.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:36.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:36.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:36.417 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2025-06-29 20:21:36.575 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 20:21:36.576 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:21:36.577 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:21:36.577 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 20:21:36.588 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:21:36.588 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 371 ms
2025-06-29 20:21:36.600 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2025-06-29 20:21:36.611 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@55229694
2025-06-29 20:21:36.612 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2025-06-29 20:21:36.613 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 20:21:36.644 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 20:21:36.645 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 20:21:36.649 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 20:21:36.650 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 20:21:36.650 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 20:21:36.800 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 20:21:36.832 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 35050 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 20:21:36.832 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 20:21:36.832 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 20:21:36.891 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 20:21:36.893 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 20:21:36.894 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 20:21:36.928 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table chat_history 
       add column chat_room_id integer
2025-06-29 20:21:36.959 [restartedMain] DEBUG org.hibernate.SQL - 
    create index idx_chat_room 
       on chat_history (chat_room_id)
2025-06-29 20:21:36.998 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:21:37.129 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 20:21:37.257 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 20:21:37.257 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 20:21:37.391 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 20:21:37.413 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 20:21:37.489 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@46679a7c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2bfad9c2, org.springframework.security.web.context.SecurityContextHolderFilter@134875cd, org.springframework.security.web.header.HeaderWriterFilter@324c1dc4, org.springframework.web.filter.CorsFilter@78264fa1, org.springframework.security.web.authentication.logout.LogoutFilter@1a6ef3c9, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@53e2123b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@8f3bc78, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5a83229f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4a2aee9d, org.springframework.security.web.session.SessionManagementFilter@1050137e, org.springframework.security.web.access.ExceptionTranslationFilter@5539c327, org.springframework.security.web.access.intercept.AuthorizationFilter@4cbfc038]
2025-06-29 20:21:37.643 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 20:21:37.650 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:21:37.652 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 20:21:37.656 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 1.531 seconds (process running for 1366.791)
2025-06-29 20:21:37.657 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-06-29 20:21:37.798 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:37.801 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 20:21:37.844 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:37.846 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:37.847 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:37.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:37.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:37.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:37.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:37.867 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:21:37.867 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 0 JDBC repository interfaces.
2025-06-29 20:21:37.889 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:37.890 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 20:21:37.979 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 8 JPA repository interfaces.
2025-06-29 20:21:38.006 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:21:38.007 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:21:38.017 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:38.017 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:38.017 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:38.017 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:38.017 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:38.017 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:38.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:38.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:21:38.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-06-29 20:21:38.670 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 20:21:38.678 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:21:38.680 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:21:38.680 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 20:21:38.724 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:21:38.725 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1830 ms
2025-06-29 20:21:38.758 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 20:21:38.908 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@63533a29
2025-06-29 20:21:38.911 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 20:21:38.926 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 20:21:39.073 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 20:21:39.103 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 20:21:39.123 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 20:21:39.239 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 20:21:39.291 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 20:21:39.292 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 20:21:40.193 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 20:21:40.336 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:21:40.696 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 20:21:40.947 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 20:21:40.948 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 20:21:41.859 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 20:21:41.943 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 20:21:42.077 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@f782b30, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@57c0490c, org.springframework.security.web.context.SecurityContextHolderFilter@1f0d9965, org.springframework.security.web.header.HeaderWriterFilter@6328c62a, org.springframework.web.filter.CorsFilter@550bbab7, org.springframework.security.web.authentication.logout.LogoutFilter@2ccbd36d, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@1982499b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@73757d4f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@750ceb3b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@53182, org.springframework.security.web.session.SessionManagementFilter@4770fe8b, org.springframework.security.web.access.ExceptionTranslationFilter@71d43dcd, org.springframework.security.web.access.intercept.AuthorizationFilter@28fe13c0]
2025-06-29 20:21:42.446 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2025-06-29 20:21:42.464 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:21:42.475 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-29 20:21:42.481 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:21:42.483 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 20:21:42.487 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 20:21:42.511 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-29 20:21:42.523 [restartedMain] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-29 20:21:44.716 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:21:44.717 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2025-06-29 20:21:44.721 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2025-06-29 20:22:02.848 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 20:22:02.875 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 35153 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 20:22:02.876 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 20:22:02.876 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 20:22:02.933 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 20:22:02.933 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 20:22:03.795 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:22:03.796 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 20:22:03.845 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:22:03.848 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:22:03.849 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:22:03.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:22:03.850 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:22:03.851 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:22:03.864 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:22:03.869 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:22:03.870 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71 ms. Found 0 JDBC repository interfaces.
2025-06-29 20:22:03.893 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:22:03.893 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 20:22:03.982 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 8 JPA repository interfaces.
2025-06-29 20:22:04.008 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:22:04.008 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:22:04.018 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:22:04.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:22:04.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:22:04.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:22:04.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:22:04.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:22:04.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:22:04.019 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:22:04.020 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-29 20:22:04.685 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 20:22:04.693 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:22:04.695 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:22:04.696 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 20:22:04.739 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:22:04.741 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1805 ms
2025-06-29 20:22:04.776 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 20:22:04.934 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@740f2f7
2025-06-29 20:22:04.938 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 20:22:04.954 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 20:22:05.075 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 20:22:05.103 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 20:22:05.129 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 20:22:05.249 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 20:22:05.297 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 20:22:05.297 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 20:22:06.111 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 20:22:06.257 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:22:06.648 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 20:22:06.886 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 20:22:06.887 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 20:22:07.636 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 20:22:07.719 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 20:22:07.874 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@c70e477, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4dc2dd39, org.springframework.security.web.context.SecurityContextHolderFilter@10ebbe97, org.springframework.security.web.header.HeaderWriterFilter@5693600c, org.springframework.web.filter.CorsFilter@64d24a8, org.springframework.security.web.authentication.logout.LogoutFilter@16e4ab58, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@58e8de6e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@489a049c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@aa2e64e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2326088f, org.springframework.security.web.session.SessionManagementFilter@3c6d6855, org.springframework.security.web.access.ExceptionTranslationFilter@671c3891, org.springframework.security.web.access.intercept.AuthorizationFilter@39ef138b]
2025-06-29 20:22:08.234 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 20:22:08.253 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:22:08.258 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 20:22:08.272 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.735 seconds (process running for 6.345)
2025-06-29 20:22:44.349 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:22:44.350 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:22:44.368 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 18 ms
2025-06-29 20:22:44.448 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:22:44.498 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:22:44.518 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:22:44.524 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:22:44.601 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:22:49.754 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:22:49.756 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:22:49.774 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:22:49.779 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:22:49.785 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:23:39.980 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:23:39.982 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:23:40.013 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:23:40.013 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:23:40.031 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:23:40.031 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:23:40.035 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:23:40.043 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:23:40.057 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:23:40.098 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:23:40.112 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:23:40.124 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:23:40.143 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:23:40.149 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:23:40.153 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:23:54.329 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:23:54.356 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:23:54.374 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:23:54.377 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:23:54.392 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:24:40.271 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:24:40.311 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:24:40.318 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:24:40.321 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:24:40.329 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:24:40.833 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:24:40.836 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:24:40.839 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:24:40.846 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:24:40.851 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:24:41.396 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:24:41.399 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:24:41.404 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:24:41.408 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:24:41.415 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:25:44.775 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:25:44.820 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:25:44.825 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:25:44.827 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:25:44.834 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 20:25:44.877 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 20:25:44.907 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:25:44.909 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:25:44.910 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:25:44.914 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:25:44.921 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:28:44.569 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:28:44.589 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:28:44.596 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:28:44.599 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:28:45.127 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis] with root cause
java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:337)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:29:27.196 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:29:27.196 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:29:27.196 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:29:27.196 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:29:27.197 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:29:27.201 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:29:27.233 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:27.236 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:27.233 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:27.234 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:27.233 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:27.257 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.257 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.257 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.257 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.257 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.263 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:27.265 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.265 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.266 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.266 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.266 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.276 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.286 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:27.291 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:29:27.291 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:29:27.291 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:27.291 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:27.291 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:29:27.307 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:29:28.619 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:29:28.624 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:28.628 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:28.631 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:28.637 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:29:29.461 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:29:29.465 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:29:29.468 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:29.473 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:29:29.479 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:33:21.797 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:33:21.804 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 20:33:21.809 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 20:33:29.599 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 20:33:29.626 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 36081 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 20:33:29.626 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 20:33:29.627 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 20:33:29.677 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 20:33:29.677 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 20:33:30.558 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:33:30.560 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 20:33:30.601 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:33:30.604 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:33:30.604 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:33:30.605 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:33:30.606 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:33:30.606 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:33:30.607 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:33:30.608 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:33:30.609 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 46 ms. Found 0 JDBC repository interfaces.
2025-06-29 20:33:30.621 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:33:30.621 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 20:33:30.721 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97 ms. Found 8 JPA repository interfaces.
2025-06-29 20:33:30.757 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:33:30.758 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:33:30.771 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:33:30.772 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:33:30.772 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:33:30.772 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:33:30.772 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:33:30.772 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:33:30.772 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:33:30.772 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:33:30.773 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-29 20:33:31.405 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 20:33:31.412 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:33:31.414 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:33:31.415 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 20:33:31.452 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:33:31.453 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1775 ms
2025-06-29 20:33:31.487 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 20:33:31.631 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@740f2f7
2025-06-29 20:33:31.634 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 20:33:31.650 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 20:33:31.772 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 20:33:31.805 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 20:33:31.827 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 20:33:31.944 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 20:33:31.989 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 20:33:31.989 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 20:33:32.830 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 20:33:32.944 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:33:33.328 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 20:33:33.559 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 20:33:33.560 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 20:33:34.486 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 20:33:34.563 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 20:33:34.697 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@c70e477, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4dc2dd39, org.springframework.security.web.context.SecurityContextHolderFilter@10ebbe97, org.springframework.security.web.header.HeaderWriterFilter@5693600c, org.springframework.web.filter.CorsFilter@64d24a8, org.springframework.security.web.authentication.logout.LogoutFilter@16e4ab58, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@58e8de6e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@489a049c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@aa2e64e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2326088f, org.springframework.security.web.session.SessionManagementFilter@3c6d6855, org.springframework.security.web.access.ExceptionTranslationFilter@671c3891, org.springframework.security.web.access.intercept.AuthorizationFilter@39ef138b]
2025-06-29 20:33:35.057 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 20:33:35.078 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:33:35.083 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 20:33:35.094 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 5.81 seconds (process running for 6.423)
2025-06-29 20:34:12.920 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:34:12.921 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:34:12.933 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 11 ms
2025-06-29 20:34:13.009 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:34:13.045 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:34:13.077 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:34:13.083 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:34:13.427 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis] with root cause
java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:337)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:39:13.403 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:39:13.409 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 20:39:13.417 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 20:39:18.173 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 20:39:18.202 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 36590 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 20:39:18.204 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 20:39:18.204 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 20:39:18.255 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 20:39:18.256 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 20:39:19.675 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:39:19.676 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 20:39:19.736 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:39:19.739 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:39:19.740 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:39:19.740 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:39:19.741 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:39:19.741 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:39:19.743 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:39:19.744 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:39:19.744 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65 ms. Found 0 JDBC repository interfaces.
2025-06-29 20:39:19.764 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:39:19.764 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 20:39:19.986 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 217 ms. Found 8 JPA repository interfaces.
2025-06-29 20:39:20.035 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:39:20.037 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:39:20.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:39:20.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:39:20.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:39:20.053 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:39:20.054 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:39:20.054 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:39:20.054 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:39:20.055 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:39:20.055 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-06-29 20:39:20.988 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 20:39:20.995 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:39:20.998 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:39:20.998 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 20:39:21.042 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:39:21.043 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2786 ms
2025-06-29 20:39:21.076 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 20:39:21.235 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@50f6db9c
2025-06-29 20:39:21.239 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 20:39:21.255 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 20:39:21.388 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 20:39:21.415 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 20:39:21.433 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 20:39:21.551 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 20:39:21.602 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 20:39:21.603 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 20:39:22.536 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 20:39:22.676 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:39:23.218 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 20:39:23.491 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 20:39:23.492 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 20:39:24.626 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 20:39:24.727 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 20:39:24.886 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@69a44c0d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@71da929c, org.springframework.security.web.context.SecurityContextHolderFilter@534b99a8, org.springframework.security.web.header.HeaderWriterFilter@671c3891, org.springframework.web.filter.CorsFilter@c70e477, org.springframework.security.web.authentication.logout.LogoutFilter@24e29c47, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@48edcc61, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@10ebbe97, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4793431f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4dc2dd39, org.springframework.security.web.session.SessionManagementFilter@6a2f70a9, org.springframework.security.web.access.ExceptionTranslationFilter@33e51546, org.springframework.security.web.access.intercept.AuthorizationFilter@4d4ab590]
2025-06-29 20:39:25.297 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 20:39:25.318 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:39:25.324 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 20:39:25.334 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 7.497 seconds (process running for 8.182)
2025-06-29 20:40:12.855 [http-nio-8080-exec-6] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:40:12.857 [http-nio-8080-exec-6] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:40:12.864 [http-nio-8080-exec-6] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 7 ms
2025-06-29 20:40:12.971 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:12.971 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:12.974 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:12.976 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:12.976 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:12.977 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:13.028 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:13.029 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:13.029 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:13.029 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:13.028 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:13.028 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:13.061 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.061 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.061 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.061 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.064 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.064 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.076 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.077 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.076 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.076 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.076 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.076 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:13.224 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:40:13.223 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:40:13.223 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:40:13.226 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:13.226 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:13.230 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:40:18.680 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:18.684 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:18.687 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:18.690 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:18.758 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:18.764 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:18.767 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:18.770 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:19.130 [http-nio-8080-exec-8] ERROR a.s.k.p.c.ChatHistoryController - 사용자 메시지 저장 실패: Unable to connect to Redis
org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.translateException(LettuceConnectionFactory.java:1795)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1726)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1528)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.lambda$getConnection$0(LettuceConnectionFactory.java:1508)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.doInLock(LettuceConnectionFactory.java:1469)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1505)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:1191)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:997)
	at org.springframework.data.redis.core.RedisConnectionUtils.fetchConnection(RedisConnectionUtils.java:194)
	at org.springframework.data.redis.core.RedisConnectionUtils.doGetConnection(RedisConnectionUtils.java:143)
	at org.springframework.data.redis.core.RedisConnectionUtils.getConnection(RedisConnectionUtils.java:104)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:383)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:363)
	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:97)
	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:50)
	at ac.su.kdt.prompttest.service.ChatService.getCurrentSessionId(ChatService.java:66)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.saveUserMessage(ChatHistoryController.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.data.redis.connection.PoolException: Could not get a resource from the pool
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.getConnection(LettucePoolingConnectionProvider.java:104)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1724)
	... 134 common frames omitted
Caused by: io.lettuce.core.RedisConnectionException: Unable to connect to localhost/<unresolved>:6379
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:78)
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:56)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:350)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:215)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:112)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:112)
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.lambda$getConnection$0(LettucePoolingConnectionProvider.java:93)
	at io.lettuce.core.support.ConnectionPoolSupport$RedisPooledObjectFactory.create(ConnectionPoolSupport.java:211)
	at io.lettuce.core.support.ConnectionPoolSupport$RedisPooledObjectFactory.create(ConnectionPoolSupport.java:201)
	at org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:70)
	at org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:571)
	at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:298)
	at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:223)
	at io.lettuce.core.support.ConnectionPoolSupport$1.borrowObject(ConnectionPoolSupport.java:122)
	at io.lettuce.core.support.ConnectionPoolSupport$1.borrowObject(ConnectionPoolSupport.java:117)
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.getConnection(LettucePoolingConnectionProvider.java:99)
	... 135 common frames omitted
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:6379
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:337)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:40:19.133 [http-nio-8080-exec-7] ERROR a.s.k.p.c.ChatHistoryController - 사용자 메시지 저장 실패: Unable to connect to Redis
org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.translateException(LettuceConnectionFactory.java:1795)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1726)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1528)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.lambda$getConnection$0(LettuceConnectionFactory.java:1508)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.doInLock(LettuceConnectionFactory.java:1469)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1505)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:1191)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:997)
	at org.springframework.data.redis.core.RedisConnectionUtils.fetchConnection(RedisConnectionUtils.java:194)
	at org.springframework.data.redis.core.RedisConnectionUtils.doGetConnection(RedisConnectionUtils.java:143)
	at org.springframework.data.redis.core.RedisConnectionUtils.getConnection(RedisConnectionUtils.java:104)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:383)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:363)
	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:97)
	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:50)
	at ac.su.kdt.prompttest.service.ChatService.getCurrentSessionId(ChatService.java:66)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.saveUserMessage(ChatHistoryController.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.data.redis.connection.PoolException: Could not get a resource from the pool
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.getConnection(LettucePoolingConnectionProvider.java:104)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1724)
	... 134 common frames omitted
Caused by: io.lettuce.core.RedisConnectionException: Unable to connect to localhost/<unresolved>:6379
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:78)
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:56)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:350)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:215)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:112)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:112)
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.lambda$getConnection$0(LettucePoolingConnectionProvider.java:93)
	at io.lettuce.core.support.ConnectionPoolSupport$RedisPooledObjectFactory.create(ConnectionPoolSupport.java:211)
	at io.lettuce.core.support.ConnectionPoolSupport$RedisPooledObjectFactory.create(ConnectionPoolSupport.java:201)
	at org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:70)
	at org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:571)
	at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:298)
	at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:223)
	at io.lettuce.core.support.ConnectionPoolSupport$1.borrowObject(ConnectionPoolSupport.java:122)
	at io.lettuce.core.support.ConnectionPoolSupport$1.borrowObject(ConnectionPoolSupport.java:117)
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.getConnection(LettucePoolingConnectionProvider.java:99)
	... 135 common frames omitted
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:6379
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:337)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:40:19.171 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:19.171 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:19.173 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:19.173 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:19.174 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:19.174 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:19.186 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:19.186 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:19.220 [http-nio-8080-exec-10] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis] with root cause
java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:337)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:40:19.220 [http-nio-8080-exec-9] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis] with root cause
java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:337)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:40:26.033 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:26.036 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:26.039 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:26.042 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:26.051 [http-nio-8080-exec-5] ERROR a.s.k.p.c.ChatHistoryController - 사용자 메시지 저장 실패: Unable to connect to Redis
org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.translateException(LettuceConnectionFactory.java:1795)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1726)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1528)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.lambda$getConnection$0(LettuceConnectionFactory.java:1508)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.doInLock(LettuceConnectionFactory.java:1469)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1505)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:1191)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:997)
	at org.springframework.data.redis.core.RedisConnectionUtils.fetchConnection(RedisConnectionUtils.java:194)
	at org.springframework.data.redis.core.RedisConnectionUtils.doGetConnection(RedisConnectionUtils.java:143)
	at org.springframework.data.redis.core.RedisConnectionUtils.getConnection(RedisConnectionUtils.java:104)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:383)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:363)
	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:97)
	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:50)
	at ac.su.kdt.prompttest.service.ChatService.getCurrentSessionId(ChatService.java:66)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.controller.ChatHistoryController.saveUserMessage(ChatHistoryController.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.springframework.data.redis.connection.PoolException: Could not get a resource from the pool
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.getConnection(LettucePoolingConnectionProvider.java:104)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1724)
	... 134 common frames omitted
Caused by: io.lettuce.core.RedisConnectionException: Unable to connect to localhost/<unresolved>:6379
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:78)
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:56)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:350)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:215)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:112)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:112)
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.lambda$getConnection$0(LettucePoolingConnectionProvider.java:93)
	at io.lettuce.core.support.ConnectionPoolSupport$RedisPooledObjectFactory.create(ConnectionPoolSupport.java:211)
	at io.lettuce.core.support.ConnectionPoolSupport$RedisPooledObjectFactory.create(ConnectionPoolSupport.java:201)
	at org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:70)
	at org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:571)
	at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:298)
	at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:223)
	at io.lettuce.core.support.ConnectionPoolSupport$1.borrowObject(ConnectionPoolSupport.java:122)
	at io.lettuce.core.support.ConnectionPoolSupport$1.borrowObject(ConnectionPoolSupport.java:117)
	at org.springframework.data.redis.connection.lettuce.LettucePoolingConnectionProvider.getConnection(LettucePoolingConnectionProvider.java:99)
	... 135 common frames omitted
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:6379
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:337)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:40:26.067 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:40:26.068 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:40:26.071 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:26.073 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:40:26.084 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis] with root cause
java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:946)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:337)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:776)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:43:04.030 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:43:04.039 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 20:43:04.050 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 20:46:53.827 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 20:46:53.859 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 37445 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 20:46:53.859 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 20:46:53.859 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 20:46:53.913 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 20:46:53.914 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 20:46:54.804 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:46:54.805 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 20:46:54.852 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:46:54.855 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:46:54.856 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:46:54.856 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:46:54.857 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:46:54.858 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:46:54.859 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:46:54.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 20:46:54.860 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 JDBC repository interfaces.
2025-06-29 20:46:54.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:46:54.873 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 20:46:54.991 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 114 ms. Found 8 JPA repository interfaces.
2025-06-29 20:46:55.023 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 20:46:55.024 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 20:46:55.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:46:55.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:46:55.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:46:55.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:46:55.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:46:55.038 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:46:55.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:46:55.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 20:46:55.039 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-06-29 20:46:55.669 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 20:46:55.676 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 20:46:55.678 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 20:46:55.679 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 20:46:55.715 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 20:46:55.717 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1802 ms
2025-06-29 20:46:55.894 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 20:46:56.043 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7652fab
2025-06-29 20:46:56.046 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 20:46:56.064 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 20:46:56.197 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 20:46:56.234 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 20:46:56.257 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 20:46:56.385 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 20:46:56.440 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 20:46:56.440 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 20:46:57.355 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 20:46:57.462 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 20:46:57.893 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 20:46:58.083 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - JSqlParser is in classpath; If applicable, JSqlParser will be used
2025-06-29 20:46:58.084 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-29 20:46:58.430 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 20:46:58.431 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 20:46:59.395 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 20:46:59.686 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 20:47:00.001 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@709e95a0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3a5356a4, org.springframework.security.web.context.SecurityContextHolderFilter@17d0af10, org.springframework.security.web.header.HeaderWriterFilter@45f45291, org.springframework.web.filter.CorsFilter@2334ec3d, org.springframework.security.web.authentication.logout.LogoutFilter@5247abef, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@582cf7e4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5dce528, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@d54841c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@42a8538a, org.springframework.security.web.session.SessionManagementFilter@7e638b52, org.springframework.security.web.access.ExceptionTranslationFilter@89e507, org.springframework.security.web.access.intercept.AuthorizationFilter@6315324d]
2025-06-29 20:47:00.462 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 20:47:00.481 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 20:47:00.486 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 20:47:00.498 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 7.319 seconds (process running for 8.029)
2025-06-29 20:47:01.173 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 20:47:01.173 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 20:47:01.174 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-29 20:47:01.227 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:47:01.257 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:47:01.273 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:47:01.278 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:47:01.338 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:47:30.358 [http-nio-8080-exec-2] ERROR a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰 검증 실패: JWT strings must contain exactly 2 period characters. Found: 0
io.jsonwebtoken.MalformedJwtException: JWT strings must contain exactly 2 period characters. Found: 0
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:275)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at ac.su.kdt.prompttest.service.JwtService.extractAllClaims(JwtService.java:126)
	at ac.su.kdt.prompttest.service.JwtService.extractClaim(JwtService.java:56)
	at ac.su.kdt.prompttest.service.JwtService.extractUsername(JwtService.java:37)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:47:34.295 [http-nio-8080-exec-4] ERROR a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰 검증 실패: JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.
io.jsonwebtoken.security.SignatureException: JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:399)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at ac.su.kdt.prompttest.service.JwtService.extractAllClaims(JwtService.java:126)
	at ac.su.kdt.prompttest.service.JwtService.extractClaim(JwtService.java:56)
	at ac.su.kdt.prompttest.service.JwtService.extractUsername(JwtService.java:37)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:47:51.591 [http-nio-8080-exec-6] ERROR a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰 검증 실패: JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.
io.jsonwebtoken.security.SignatureException: JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:399)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at ac.su.kdt.prompttest.service.JwtService.extractAllClaims(JwtService.java:126)
	at ac.su.kdt.prompttest.service.JwtService.extractClaim(JwtService.java:56)
	at ac.su.kdt.prompttest.service.JwtService.extractUsername(JwtService.java:37)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:48:28.818 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 20:48:28.833 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 20:48:29.348 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.352 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.355 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.363 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.369 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.376 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:48:29.420 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.423 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.427 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.432 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.437 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.441 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:48:29.473 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.475 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.489 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.492 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.516 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.538 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:48:29.616 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.618 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.630 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.640 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.642 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.645 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.646 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.647 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.655 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:48:29.735 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.742 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.748 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.756 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.765 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:48:29.773 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.803 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.811 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.832 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.840 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.840 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.849 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.849 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:48:29.854 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.874 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.877 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:29.887 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.897 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:29.899 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.909 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:29.916 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:48:34.290 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:34.295 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:34.301 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:34.304 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:34.313 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:48:34.335 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 20:48:34.355 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:34.355 [http-nio-8080-exec-8] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=1, sessionId=ce26c452-4456-4e61-8f90-5b1177dd6d14, isUserMessage=true
2025-06-29 20:48:34.357 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:34.359 [http-nio-8080-exec-8] INFO  a.s.k.p.c.ChatHistoryController - 사용자 메시지 저장 성공: userId=8, chatRoomId=1, message=메뉴 추처
2025-06-29 20:48:34.361 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:34.367 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:34.377 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:48:34.383 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 20:48:34.385 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:34.388 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:34.398 [http-nio-8080-exec-9] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=1, sessionId=ce26c452-4456-4e61-8f90-5b1177dd6d14, isUserMessage=true
2025-06-29 20:48:34.398 [http-nio-8080-exec-9] INFO  a.s.k.p.c.ChatHistoryController - 사용자 메시지 저장 성공: userId=8, chatRoomId=1, message=메뉴 추처
2025-06-29 20:48:34.398 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:34.402 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:34.415 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:48:34.419 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:34.422 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:34.425 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:48:34.433 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:48:34.433 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:48:34.435 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 20:48:34.435 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 20:48:34.437 [http-nio-8080-exec-1] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=1, sessionId=ce26c452-4456-4e61-8f90-5b1177dd6d14, isUserMessage=true
2025-06-29 20:48:34.437 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추처, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 20:48:34.438 [http-nio-8080-exec-10] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=1, sessionId=ce26c452-4456-4e61-8f90-5b1177dd6d14, isUserMessage=true
2025-06-29 20:48:34.438 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추처, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 20:48:34.438 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:34.438 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:48:34.439 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:48:34.439 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 20:48:34.439 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:48:34.439 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 20:48:34.439 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추처
2025-06-29 20:48:34.439 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추처
2025-06-29 20:48:34.439 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:48:34.439 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 20:48:34.439 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 20:48:34.439 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 20:48:34.448 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:48:34.448 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:48:34.449 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 20:48:34.449 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 20:48:34.450 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:48:34.450 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 20:48:34.450 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추처
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 각 메뉴의 상세 레시피

**1. [메뉴명 1] 레시피**
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**2. [메뉴명 2] 레시피**
[위와 동일한 형식으로 2번 메뉴의 상세 레시피]

**3. [메뉴명 3] 레시피**
[위와 동일한 형식으로 3번 메뉴의 상세 레시피]

**4. [메뉴명 4] 레시피**
[위와 동일한 형식으로 4번 메뉴의 상세 레시피]

**5. [메뉴명 5] 레시피**
[위와 동일한 형식으로 5번 메뉴의 상세 레시피]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 각 메뉴의 상세 레시피를 반드시 포함해주세요.
**중요**: 각 레시피는 1번부터 8번까지 모든 섹션을 빠짐없이 포함해야 합니다.
**중요**: 7번 이미지 URL은 Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 20:48:34.450 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:48:34.450 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추처
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 각 메뉴의 상세 레시피

**1. [메뉴명 1] 레시피**
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**2. [메뉴명 2] 레시피**
[위와 동일한 형식으로 2번 메뉴의 상세 레시피]

**3. [메뉴명 3] 레시피**
[위와 동일한 형식으로 3번 메뉴의 상세 레시피]

**4. [메뉴명 4] 레시피**
[위와 동일한 형식으로 4번 메뉴의 상세 레시피]

**5. [메뉴명 5] 레시피**
[위와 동일한 형식으로 5번 메뉴의 상세 레시피]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 각 메뉴의 상세 레시피를 반드시 포함해주세요.
**중요**: 각 레시피는 1번부터 8번까지 모든 섹션을 빠짐없이 포함해야 합니다.
**중요**: 7번 이미지 URL은 Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 20:48:34.450 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 20:49:03.865 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:49:03.866 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response with detailed recipes
2025-06-29 20:49:03.866 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 두부조림
2. 순두부찌개
3. 오이달걀볶음밥
4. 목살구이와 버섯구이
5. 어묵탕

---

### 각 메뉴의 상세 레시피

**1. 두부조림 레시피**
1. 요리 이름: 두부조림
2. 카테고리: 한식
3. 조리 시간: 20분
4. 조리 방법:
   1. 두부를 1.5cm 두께로 자르고 키친타월로 물기를 제거합니다.
   2. 팬에 기름을 두르고 중불에서 두부를 노릇하게 앞뒤로 굽습니다.
   3. 그릇에 간장 3큰술, 설탕 1큰술, 고춧가루 1큰술, 다진마늘 1큰술, 참기름 1작은술, 물 50ml, 후추를 섞어 양념장을 만듭니다.
   4. 구운 두부 위에 양념장을 부어 약불에서 10분 정도 조립니다.
   5. 대파, 청양고추를 송송 썰어 올리고 마지막에 통깨를 뿌립니다.
5. 필요한 재료와 양:
   - 두부 1모
   - 간장 3큰술
   - 설탕 1큰술
   - 고춧가루 1큰술
   - 다진마늘 1큰술
   - 참기름 1작은술
   - 물 50ml
   - 대파 1/2대
   - 청양고추 1개 (생략 가능)
   - 통깨 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/1rXvFPS
8. 요리 팁:
   - 두부는 미리 키친타월로 수분을 제거해주면 더 쫄깃하고 맛있어요.
   - 자극적인 맛을 원하면 청양고추를 더 넣어도 좋습니다.

---

**2. 순두부찌개 레시피**
1. 요리 이름: 순두부찌개
2. 카테고리: 한식
3. 조리 시간: 20분
4. 조리 방법:
   1. 냄비에 참기름을 두르고 다진 마늘, 양파, 대파를 볶아 향을 냅니다.
   2. 고춧가루 1큰술을 넣고 살짝 볶아 매운 오일을 만듭니다.
   3. 물 400ml를 붓고 끓인 뒤, 순두부 한 봉을 숟가락으로 퍼넣습니다.
   4. 간장과 소금으로 간을 맞춥니다.
   5. 해물이 있다면 추가, 없으면 달걀 1개를 넣고 마무리합니다.
   6. 마지막에 대파와 청양고추를 올려줍니다.
5. 필요한 재료와 양:
   - 순두부 1봉
   - 양파 1/4개
   - 대파 1/2대
   - 다진마늘 1큰술
   - 고춧가루 1큰술
   - 참기름 1큰술
   - 간장 1큰술
   - 소금 약간
   - 물 400ml
   - 달걀 1개
6. 난이도: 하
7. 이미지 URL: https://imgur.com/kdjmuEa
8. 요리 팁:
   - 해물, 소고기, 돼지고기를 추가하면 더욱 깊은 맛을 냅니다.
   - 순두부는 숟가락으로 크게 떠넣어 식감을 살려주세요.

---

**3. 오이달걀볶음밥 레시피**
1. 요리 이름: 오이달걀볶음밥
2. 카테고리: 한식/간편식
3. 조리 시간: 15분
4. 조리 방법:
   1. 오이는 반으로 갈라 씨를 빼내고 얇게 썰어 소금에 살짝 절였다 헹굽니다.
   2. 달걀 2개를 풀어 스크램블로 만들어 따로 빼둡니다.
   3. 팬에 기름을 두르고 오이를 볶다가 밥(1공기)과 달걀을 넣어 함께 볶습니다.
   4. 간장, 소금, 후추로 간을 맞춥니다.
   5. 통깨와 참기름을 뿌려 마무리합니다.
5. 필요한 재료와 양:
   - 밥 1공기
   - 오이 1/2개
   - 달걀 2개
   - 소금 약간
   - 간장 1큰술
   - 후추 약간
   - 참기름 1작은술
   - 통깨 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/XCPEpKt
8. 요리 팁:
   - 오이는 소금에 절인 뒤 물기를 꼭 짜야 밥이 질어지지 않습니다.
   - 냉장고에 있는 다른 채소를 추가해도 좋아요.

---

**4. 목살구이와 버섯구이 레시피**
1. 요리 이름: 목살구이와 버섯구이
2. 카테고리: 한식
3. 조리 시간: 25분
4. 조리 방법:
   1. 돼지목살은 키친타월로 핏물을 제거하고, 소금과 후추로 밑간합니다.
   2. 버섯(새송이, 표고 등)은 적당히 썰어 준비합니다.
   3. 팬이나 에어프라이어에 목살을 중불에서 익혀줍니다.
   4. 버섯도 함께 구워줍니다.
   5. 완성된 목살과 버섯을 그릇에 담고, 겉절이나 깻잎장아찌와 곁들입니다.
5. 필요한 재료와 양:
   - 돼지목살 200g
   - 소금, 후추 약간
   - 새송이 버섯 1~2개
   - 표고버섯 2개
   - 올리브유 약간
6. 난이도: 중
7. 이미지 URL: https://imgur.com/kFQdP2m
8. 요리 팁:
   - 에어프라이어 사용 시 180도에서 10~12분 정도 구워주면 기름기는 쏙 빠집니다.
   - 버섯은 올리브유를 살짝 바르면 향이 더 살아나요.

---

**5. 어묵탕 레시피**
1. 요리 이름: 어묵탕
2. 카테고리: 한식
3. 조리 시간: 25분
4. 조리 방법:
   1. 무는 두껍게 반달로 썰어 끓는 물에 넣고 10분간 끓입니다.
   2. 국간장 1큰술, 다진마늘 1큰술, 멸치, 다시마를 넣어 육수를 만듭니다.
   3. 어묵을 먹기 좋은 크기로 썰어 넣고 5분간 더 끓입니다.
   4. 대파, 후추로 마무리합니다.
5. 필요한 재료와 양:
   - 어묵 200g
   - 무 1/4개
   - 대파 1/2대
   - 국간장 1큰술
   - 다진마늘 1큰술
   - 다시마 1장, 멸치 10마리
   - 소금, 후추 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/z6X2C8n
8. 요리 팁:
   - 어묵은 마지막에 넣어야 부드럽게 유지됩니다.
   - 마른 고추를 넣으면 칼칼한 국물 맛을 낼 수 있습니다.

---

### 추천 이유

- 상황 분석: 사용자 요청인 ‘메뉴 추처’는 상황이 명확히 언급되어 있지 않았으나, 아침에 밥을 먹으면 배가 아프므로 점심 또는 저녁에 간단하면서도 건강한 한식 메뉴를 추천했습니다.
- 추천 기준: 간단하게 만들 수 있고, 기름지지 않으며, 부담 없이 즐길 수 있는 대표 한식 메뉴 위주로 선정(밥, 국, 구이, 찜 등). 아침에 속이 약한 점을 감안해 자극적이거나 소화에 부담이 가지 않는 메뉴 위주로 골랐습니다[2][3][4].
- 개인화 고려사항: 새우 알레르기가 있어 해산물(새우)류는 배제했고, 소화에 부담이 가지 않는 재료 위주로 선택했습니다.
- 추가 팁: 위 메뉴는 모두 간단하게 만들 수 있으며, 속이 편안한 재료를 써서 출근 전 혹은 저녁 식사로도 부담 없이 먹을 수 있습니다. 필요에 따라 간은 약하게, 매운 재료는 조절해 드세요.

한식 선호도와 건강상태, 알레르기를 고려한 메뉴이니 마음 편히 시도해보세요!
2025-06-29 20:49:03.867 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 두부조림
2025-06-29 20:49:03.869 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:03.869 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/1rXvFPS
2025-06-29 20:49:03.869 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/1rXvFPS
2025-06-29 20:49:03.870 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 두부를 1.5cm 두께로 자르고 키친타월로 물기를 제거합니다.
   2. 팬에 기름을 두르고 중불에서 두부를 노릇하게 앞뒤로 굽습니다.
   3. 그릇에 간장 3큰술, 설탕 
2025-06-29 20:49:03.878 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:49:03.880 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 두부조림
2025-06-29 20:49:03.907 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:49:03.911 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 111
2025-06-29 20:49:03.911 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 두부조림
2025-06-29 20:49:03.911 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 순두부찌개
2025-06-29 20:49:03.911 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:03.911 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/kdjmuEa
2025-06-29 20:49:03.911 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/kdjmuEa
2025-06-29 20:49:03.911 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 냄비에 참기름을 두르고 다진 마늘, 양파, 대파를 볶아 향을 냅니다.
   2. 고춧가루 1큰술을 넣고 살짝 볶아 매운 오일을 만듭니다.
   3. 물 400ml를 붓고 끓인
2025-06-29 20:49:03.913 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:49:03.917 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 순두부찌개
2025-06-29 20:49:03.918 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:49:03.918 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 112
2025-06-29 20:49:03.919 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 순두부찌개
2025-06-29 20:49:03.919 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 오이달걀볶음밥
2025-06-29 20:49:03.919 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/간편식
2025-06-29 20:49:03.919 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/XCPEpKt
2025-06-29 20:49:03.919 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/XCPEpKt
2025-06-29 20:49:03.920 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 오이는 반으로 갈라 씨를 빼내고 얇게 썰어 소금에 살짝 절였다 헹굽니다.
   2. 달걀 2개를 풀어 스크램블로 만들어 따로 빼둡니다.
   3. 팬에 기름을 두르고 오이를 
2025-06-29 20:49:03.921 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:49:03.922 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 오이달걀볶음밥
2025-06-29 20:49:03.936 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy144.persist(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy144.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:894)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:49:03.938 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 오이달걀볶음밥
2025-06-29 20:49:03.938 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 목살구이와 버섯구이
2025-06-29 20:49:03.938 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:03.939 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/kFQdP2m
2025-06-29 20:49:03.939 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/kFQdP2m
2025-06-29 20:49:03.939 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지목살은 키친타월로 핏물을 제거하고, 소금과 후추로 밑간합니다.
   2. 버섯(새송이, 표고 등)은 적당히 썰어 준비합니다.
   3. 팬이나 에어프라이어에 목살을 중불에
2025-06-29 20:49:03.947 [http-nio-8080-exec-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 20:49:03.949 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:49:04.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 목살구이와 버섯구이
2025-06-29 20:49:04.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 어묵탕
2025-06-29 20:49:04.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:04.020 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/z6X2C8n
2025-06-29 20:49:04.020 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/z6X2C8n
2025-06-29 20:49:04.021 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 무는 두껍게 반달로 썰어 끓는 물에 넣고 10분간 끓입니다.
   2. 국간장 1큰술, 다진마늘 1큰술, 멸치, 다시마를 넣어 육수를 만듭니다.
   3. 어묵을 먹기 좋은 
2025-06-29 20:49:04.046 [http-nio-8080-exec-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 20:49:04.048 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:49:04.049 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 어묵탕
2025-06-29 20:49:04.049 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 5 detailed menu recommendations
2025-06-29 20:49:04.058 [http-nio-8080-exec-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 20:49:04.059 [http-nio-8080-exec-1] ERROR a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 실패: userId=8, chatRoomId=1, message=메뉴 추천:
- 두부조림
- 순두부찌개
- 오이달걀볶음밥
- 목살구이와 버섯구이
- 어묵탕

org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy155.findByUserIdAndChatRoomIdOrderByCreatedAtAsc(Unknown Source)
	at ac.su.kdt.prompttest.service.ChatService.getSessionIdForChatRoom(ChatService.java:64)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:60)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:49:04.070 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 채팅 메시지 저장에 실패했습니다: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)] with root cause
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy155.findByUserIdAndChatRoomIdOrderByCreatedAtAsc(Unknown Source)
	at ac.su.kdt.prompttest.service.ChatService.getSessionIdForChatRoom(ChatService.java:64)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:60)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:49:25.686 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 20:49:25.687 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response with detailed recipes
2025-06-29 20:49:25.687 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 두부조림
2. 어묵탕(오뎅탕)
3. 부들부들 만둣국
4. 돼지고기김치찌개
5. 목살구이와 버섯구이

### 각 메뉴의 상세 레시피

**1. 두부조림 레시피**
1. 요리 이름: 두부조림
2. 카테고리: 한식
3. 조리 시간: 20분
4. 조리 방법:
   1. 두부는 도톰하게 썰어 키친타월에 올려 물기를 제거한다.
   2. 팬에 기름을 두르고 두부 앞뒤로 노릇하게 굽는다.
   3. 고추장, 간장, 설탕, 다진 마늘, 물, 참기름을 섞어 양념장을 만든다.
   4. 구운 두부 위에 양념장을 붓고, 양파, 청양고추, 대파를 슬라이스해서 올린다.
   5. 뚜껑을 덮고 중약불에서 10분간 조린다.
5. 필요한 재료와 양:
   - 두부 1모
   - 간장 3큰술
   - 고추장 1큰술
   - 설탕 1큰술
   - 다진 마늘 1작은술
   - 물 100ml
   - 참기름 1큰술
   - 양파 1/2개
   - 청양고추 1개
   - 대파 1/4대
6. 난이도: 하
7. 이미지 URL: https://imgur.com/GQjgd7m
8. 요리 팁:
   - 두부는 구울 때 충분히 물기를 빼야 잘 부서지지 않습니다.
   - 매운맛이 싫다면 청양고추는 생략해도 좋습니다.

**2. 어묵탕(오뎅탕) 레시피**
1. 요리 이름: 어묵탕(오뎅탕)
2. 카테고리: 한식
3. 조리 시간: 25분
4. 조리 방법:
   1. 무는 먹기 좋은 크기로 썰고, 다시마와 멸치로 육수를 낸다.
   2. 어묵, 양파, 대파, 청양고추는 적당한 크기로 썬다.
   3. 육수에 무를 넣고 10분 정도 삶는다.
   4. 어묵과 나머지 재료를 넣고 10분 더 끓인다.
   5. 소금, 간장으로 간을 맞춘다.
5. 필요한 재료와 양:
   - 어묵 200g
   - 무 1/4개
   - 양파 1/2개
   - 대파 1/2대
   - 청양고추 1개
   - 다시마 10g, 멸치 10마리
   - 소금, 간장 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/XpQkNwY
8. 요리 팁:
   - 국물 맛을 더 깊게 내고 싶다면 표고버섯이나 건새우를 추가해도 좋습니다.
   - 어묵은 끓이기 직전에 넣어야 쫄깃한 식감을 유지할 수 있습니다.

**3. 부들부들 만둣국 레시피**
1. 요리 이름: 만둣국
2. 카테고리: 한식
3. 조리 시간: 20분
4. 조리 방법:
   1. 멸치와 다시마로 육수를 준비한다.
   2. 만두는 끓는 육수에 넣어준다.
   3. 국간장과 소금으로 간을 맞추고, 대파와 계란을 풀어 넣는다.
   4. 마지막에 참기름 한 방울을 더해준다.
5. 필요한 재료와 양:
   - 만두 5~7개 (기호에 따라)
   - 계란 1개
   - 대파 1/4대
   - 멸치 10마리, 다시마 5g
   - 국간장 1큰술, 소금 약간
   - 참기름 1작은술
6. 난이도: 하
7. 이미지 URL: https://imgur.com/z4FU4iQ
8. 요리 팁:
   - 냉동만두 사용 시 해동 후 넣으면 좀 더 부드러운 식감을 즐길 수 있습니다.
   - 김치를 곁들이면 더욱 궁합이 좋습니다.

**4. 돼지고기김치찌개 레시피**
1. 요리 이름: 돼지고기김치찌개
2. 카테고리: 한식
3. 조리 시간: 30분
4. 조리 방법:
   1. 돼지고기(목살 또는 삼겹살)는 먹기 좋은 크기로 썬다.
   2. 김치는 큼직하게 썰고, 양파, 두부, 대파도 준비한다.
   3. 냄비에 돼지고기를 노릇하게 볶다가 김치를 넣고 함께 볶는다.
   4. 물을 붓고 끓기 시작하면 두부와 양파를 추가한다.
   5. 국간장, 고춧가루, 다진 마늘로 간을 맞추고 20분 끓인다.
   6. 마지막에 대파와 참기름을 넣는다.
5. 필요한 재료와 양:
   - 돼지고기 150g
   - 김치 1컵
   - 두부 1/2모
   - 양파 1/2개
   - 대파 1/4대
   - 국간장 1큰술
   - 고춧가루 1큰술
   - 다진 마늘 1작은술
   - 물 400ml
   - 참기름 1작은술
6. 난이도: 중
7. 이미지 URL: https://imgur.com/UMgyH7A
8. 요리 팁:
   - 신김치를 사용할수록 더 깊은 맛을 냅니다.
   - 기름기가 적은 고기를 쓰면 담백한 맛을 즐길 수 있습니다.

**5. 목살구이와 버섯구이 레시피**
1. 요리 이름: 목살구이와 버섯구이
2. 카테고리: 한식
3. 조리 시간: 20분
4. 조리 방법:
   1. 목살은 소금, 후추로 밑간해 10분간 재운다.
   2. 버섯(새송이, 표고 등)은 굵게 썬다.
   3. 팬에 기름을 두르고 목살, 버섯을 앞뒤로 노릇하게 굽는다.
   4. 마지막에 통깨와 참기름을 뿌려 마무리한다.
5. 필요한 재료와 양:
   - 목살 200g
   - 새송이버섯 1개
   - 표고버섯 2개
   - 소금, 후추 약간
   - 참기름 1큰술
   - 통깨 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/YwPKWj1
8. 요리 팁:
   - 목살 대신 삼겹살도 활용할 수 있습니다.
   - 쌈채소와 함께 먹으면 더욱 건강하게 즐길 수 있습니다.

### 추천 이유
- 상황 분석: “아침에 밥 먹으면 배 아프다”는 개인 건강상태를 고려해 저녁이나 일반 식사로 소화가 편한 메뉴를 구성했습니다. 빠르고 간단하게 만들 수 있으면서도 든든한 한식 위주로 추천드립니다.
- 추천 기준: 새우 알레르기를 반영해 모든 메뉴에서 새우와 해산물을 배제하였고, 복잡한 재료 없이 누구나 쉽게 만들 수 있으며 기름기가 많지 않은 건강한 메뉴로 골랐습니다.
- 개인화 고려사항: 새우 알레르기, 아침 식사 시 복부 불편 함 등의 건강 상태를 고려해 위에 부담이 적고 저녁이나 점심에 어울리는 메뉴만 포함했습니다.
- 추가 팁: 부담 없이 먹기 좋은 두부, 어묵, 만두, 목살 등 다양한 단백질 식자재를 활용한 메뉴로 영양 균형까지 챙길 수 있습니다. 간단하지만 정성도 느껴지는 한끼로 추천합니다.
2025-06-29 20:49:25.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found menu section: 두부조림
2025-06-29 20:49:25.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:25.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/GQjgd7m
2025-06-29 20:49:25.689 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/GQjgd7m
2025-06-29 20:49:25.689 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 두부는 도톰하게 썰어 키친타월에 올려 물기를 제거한다.
   2. 팬에 기름을 두르고 두부 앞뒤로 노릇하게 굽는다.
   3. 고추장, 간장, 설탕, 다진 마늘, 물, 참기름
2025-06-29 20:49:25.698 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:49:25.718 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 두부조림
2025-06-29 20:49:25.721 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:49:25.722 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 113
2025-06-29 20:49:25.723 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 두부조림
2025-06-29 20:49:25.723 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found menu section: 어묵탕(오뎅탕)
2025-06-29 20:49:25.723 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:25.723 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/XpQkNwY
2025-06-29 20:49:25.723 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/XpQkNwY
2025-06-29 20:49:25.723 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 무는 먹기 좋은 크기로 썰고, 다시마와 멸치로 육수를 낸다.
   2. 어묵, 양파, 대파, 청양고추는 적당한 크기로 썬다.
   3. 육수에 무를 넣고 10분 정도 삶는다.
2025-06-29 20:49:25.738 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:49:25.758 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 어묵탕(오뎅탕)
2025-06-29 20:49:25.778 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:49:25.798 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 114
2025-06-29 20:49:25.799 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 어묵탕(오뎅탕)
2025-06-29 20:49:25.799 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found menu section: 부들부들 만둣국
2025-06-29 20:49:25.799 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:25.799 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/z4FU4iQ
2025-06-29 20:49:25.799 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/z4FU4iQ
2025-06-29 20:49:25.799 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 멸치와 다시마로 육수를 준비한다.
   2. 만두는 끓는 육수에 넣어준다.
   3. 국간장과 소금으로 간을 맞추고, 대파와 계란을 풀어 넣는다.
   4. 마지막에 참기름 
2025-06-29 20:49:25.802 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:49:25.804 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 부들부들 만둣국
2025-06-29 20:49:25.806 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:49:25.807 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 115
2025-06-29 20:49:25.807 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 부들부들 만둣국
2025-06-29 20:49:25.807 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found menu section: 돼지고기김치찌개
2025-06-29 20:49:25.807 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:25.807 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/UMgyH7A
2025-06-29 20:49:25.808 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/UMgyH7A
2025-06-29 20:49:25.809 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 돼지고기(목살 또는 삼겹살)는 먹기 좋은 크기로 썬다.
   2. 김치는 큼직하게 썰고, 양파, 두부, 대파도 준비한다.
   3. 냄비에 돼지고기를 노릇하게 볶다가 김치를 
2025-06-29 20:49:25.820 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:49:25.821 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 돼지고기김치찌개
2025-06-29 20:49:25.821 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:49:25.822 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 116
2025-06-29 20:49:25.822 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 돼지고기김치찌개
2025-06-29 20:49:25.822 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found menu section: 목살구이와 버섯구이
2025-06-29 20:49:25.822 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 20:49:25.822 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/YwPKWj1
2025-06-29 20:49:25.823 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/YwPKWj1
2025-06-29 20:49:25.823 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 목살은 소금, 후추로 밑간해 10분간 재운다.
   2. 버섯(새송이, 표고 등)은 굵게 썬다.
   3. 팬에 기름을 두르고 목살, 버섯을 앞뒤로 노릇하게 굽는다.
   4
2025-06-29 20:49:25.824 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 20:49:25.825 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 목살구이와 버섯구이
2025-06-29 20:49:25.825 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:49:25.826 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 117
2025-06-29 20:49:25.826 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 목살구이와 버섯구이
2025-06-29 20:49:25.826 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Parsed 5 detailed menu recommendations
2025-06-29 20:49:25.828 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:49:25.830 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 20:49:25.831 [http-nio-8080-exec-10] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=1, sessionId=ce26c452-4456-4e61-8f90-5b1177dd6d14, isUserMessage=false
2025-06-29 20:53:57.748 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:53:57.748 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:53:57.777 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:53:57.777 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:53:57.802 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.804 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.808 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.811 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.826 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:53:57.828 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:53:57.846 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:53:57.846 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:53:57.847 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:53:57.847 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:53:57.851 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.851 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.855 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.855 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.863 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:53:57.863 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:53:57.878 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:53:57.880 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:53:57.884 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.887 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.889 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:53:57.918 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:53:57.921 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:53:57.926 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.930 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:53:57.934 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:01.730 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:01.733 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:01.736 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:01.740 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:01.748 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:54:13.513 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.provider=? 
        and u1_0.provider_id=?
2025-06-29 20:54:13.519 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        r1_0.user_user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_user_id=?
2025-06-29 20:54:14.148 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.149 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.152 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.153 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.158 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.161 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:54:14.190 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.194 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.199 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.202 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.207 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.212 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:54:14.237 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.254 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.260 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.278 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.293 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.309 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 20:54:14.399 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.400 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.404 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.405 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.418 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.420 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.429 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.429 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.438 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:14.441 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.483 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.483 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.485 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.485 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.488 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.488 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.498 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.498 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.502 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:14.502 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.523 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.526 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.538 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.542 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.546 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:14.571 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:14.574 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:14.578 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.580 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:14.586 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:16.083 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:16.085 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:16.087 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:16.091 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:16.096 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:54:21.328 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:21.329 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:21.333 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:21.333 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.334 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:21.335 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.335 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.336 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.337 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:21.341 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:21.354 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:21.357 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:21.360 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:21.360 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:21.362 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.362 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.368 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.368 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.372 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:21.372 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:21.391 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:21.394 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:21.398 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.400 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.406 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:21.419 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:21.420 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:21.422 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.425 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:21.434 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:23.055 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:23.060 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:23.065 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:23.067 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:23.072 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:54:23.918 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:23.918 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:23.920 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:23.920 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:23.968 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:23.968 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:23.972 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:23.972 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:23.977 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:23.977 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:23.997 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:23.997 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:23.999 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:23.999 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:24.002 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:24.002 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:24.004 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:24.004 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:24.010 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:24.014 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:24.031 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:24.032 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:24.036 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:24.040 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:24.049 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:24.066 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:24.068 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:24.072 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:24.075 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:24.077 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:31.573 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:31.576 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:31.582 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:31.586 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:31.589 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:54:32.497 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:32.501 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:32.512 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:32.516 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:32.520 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:54:36.342 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:36.342 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:36.344 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:36.344 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:36.353 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.353 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.355 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.355 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.358 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:36.358 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:36.374 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:36.374 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:36.376 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:36.376 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:36.378 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.378 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.382 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.382 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.387 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:36.387 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:36.407 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:36.409 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:36.410 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.412 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.418 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:36.448 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:36.450 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:36.452 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.455 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:36.457 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:54:50.643 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:50.647 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:50.652 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:50.655 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:50.671 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatRoom */insert 
    into
        chat_room (created_at, is_active, message_count, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 20:54:58.844 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:54:58.851 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:54:58.858 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:58.860 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:54:58.866 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:55:08.555 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:08.552 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:08.668 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:08.668 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:08.682 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.682 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.684 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.684 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.707 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:55:08.708 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:08.725 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:08.725 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:08.726 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:08.726 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:08.728 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.728 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.730 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.730 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.732 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:55:08.732 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:08.743 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:08.744 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:08.746 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.749 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.751 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:55:08.761 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:08.762 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:08.765 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.766 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:08.770 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:55:12.055 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:12.058 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:12.060 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:12.061 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:12.065 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 20:55:16.067 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:16.067 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:16.068 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:16.068 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:16.071 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.076 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.101 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.107 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:16.108 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.124 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:55:16.141 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:16.142 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:16.143 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:16.144 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:16.144 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.147 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.151 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.151 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.158 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:55:16.158 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:16.169 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:16.172 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:16.174 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.175 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.179 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:55:16.187 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:55:16.189 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:55:16.191 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.191 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:55:16.193 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 20:56:56.055 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Retrograde clock change detected (housekeeper delta=29s827ms), soft-evicting connections from pool.
2025-06-29 20:57:40.809 [http-nio-8080-exec-3] ERROR a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰 검증 실패: JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.
io.jsonwebtoken.security.SignatureException: JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:399)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at ac.su.kdt.prompttest.service.JwtService.extractAllClaims(JwtService.java:126)
	at ac.su.kdt.prompttest.service.JwtService.extractClaim(JwtService.java:56)
	at ac.su.kdt.prompttest.service.JwtService.extractUsername(JwtService.java:37)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 20:58:57.939 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 20:58:57.948 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 20:58:57.968 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 20:58:57.970 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 20:58:57.976 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:00:40.219 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:00:40.237 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:00:40.291 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:00:40.293 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:00:40.301 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:01:14.723 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:14.723 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:14.729 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:14.729 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:14.733 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.733 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.787 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.798 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.846 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:14.846 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:01:14.874 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:14.874 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:14.876 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:14.877 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:14.879 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.879 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.896 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.896 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.900 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:01:14.901 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:14.915 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:14.917 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:14.918 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.920 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.923 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:01:14.932 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:14.933 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:14.940 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.941 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:14.943 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:01:19.488 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:19.492 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:19.497 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:19.499 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:19.502 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:01:35.985 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:35.985 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:35.987 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:35.987 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:35.993 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:35.997 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:35.999 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:01:36.008 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.014 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.025 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:36.026 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:36.029 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:36.033 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.037 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.043 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:01:36.043 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:36.044 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:36.046 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.048 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.051 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:36.053 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:36.055 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:36.057 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.059 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.062 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:01:36.071 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:36.071 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:36.074 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.075 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:36.078 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:01:40.193 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:40.196 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:40.203 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:40.207 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:40.238 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:01:41.138 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:41.140 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:41.145 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:41.147 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:41.154 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:01:41.912 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:01:41.914 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:01:41.925 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:41.930 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:01:41.935 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:03:11.606 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:11.624 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:11.632 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:11.634 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:11.642 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:03:13.446 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:13.449 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:13.451 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:13.452 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:13.455 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:03:15.028 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:15.028 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:15.030 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:15.030 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:15.031 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.031 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.033 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.033 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.036 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:03:15.043 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:15.052 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:15.054 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:15.057 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:15.058 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.058 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:15.058 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.059 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.060 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.062 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:03:15.067 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:15.083 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:15.085 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:15.087 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.089 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.093 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:03:15.108 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:15.109 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:15.110 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.112 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:15.115 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:03:17.662 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:03:17.666 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:03:17.668 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:17.670 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:03:17.704 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:06:18.281 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:06:18.281 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:06:18.296 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:18.298 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:18.307 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.307 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.312 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.312 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.335 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:06:18.335 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:18.390 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:06:18.391 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:06:18.413 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:18.413 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:18.417 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.417 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.436 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.436 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.442 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:18.442 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:06:18.461 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:06:18.465 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:18.470 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.471 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.474 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:06:18.482 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:06:18.488 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:18.492 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.493 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:18.496 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:06:20.905 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:06:20.909 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:06:20.913 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:20.916 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:06:20.920 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:07:11.222 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:11.222 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:11.235 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:11.235 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:11.259 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.260 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.268 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.268 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.277 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:07:11.283 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:11.314 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:11.314 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:11.317 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:11.317 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:11.323 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.323 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.325 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.325 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.335 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:07:11.335 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:11.350 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:11.353 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:11.358 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.359 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.361 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:07:11.373 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:11.375 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:11.376 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.377 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:11.379 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:07:13.772 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:13.776 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:13.778 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:13.779 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:13.786 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:07:34.455 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:34.455 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:34.483 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:34.483 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:34.489 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.489 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.490 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.490 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.502 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:07:34.503 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:34.528 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:34.528 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:34.531 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:34.531 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:34.552 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.557 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.558 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.558 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.588 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:07:34.590 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:34.617 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:34.619 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:34.622 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.623 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.625 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:07:34.634 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:34.635 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:34.637 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.637 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:34.640 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:07:35.643 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:07:35.647 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:07:35.652 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:35.654 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:07:35.658 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:08:00.688 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:08:00.691 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:08:00.697 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:08:00.699 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:08:00.710 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:08:00.732 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:08:00.737 [http-nio-8080-exec-3] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=1, sessionId=ce26c452-4456-4e61-8f90-5b1177dd6d14, isUserMessage=true
2025-06-29 21:08:00.738 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 21:08:00.739 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:08:00.741 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:08:00.741 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:08:00.741 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천
2025-06-29 21:08:00.741 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:08:00.741 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 21:08:00.746 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:08:00.748 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 21:08:00.748 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:08:00.748 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 각 메뉴의 상세 레시피

**1. [메뉴명 1] 레시피**
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**2. [메뉴명 2] 레시피**
[위와 동일한 형식으로 2번 메뉴의 상세 레시피]

**3. [메뉴명 3] 레시피**
[위와 동일한 형식으로 3번 메뉴의 상세 레시피]

**4. [메뉴명 4] 레시피**
[위와 동일한 형식으로 4번 메뉴의 상세 레시피]

**5. [메뉴명 5] 레시피**
[위와 동일한 형식으로 5번 메뉴의 상세 레시피]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 각 메뉴의 상세 레시피를 반드시 포함해주세요.
**중요**: 각 레시피는 1번부터 8번까지 모든 섹션을 빠짐없이 포함해야 합니다.
**중요**: 7번 이미지 URL은 Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 21:08:00.748 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:08:41.375 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:08:41.376 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response with detailed recipes
2025-06-29 21:08:41.376 [http-nio-8080-exec-3] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 에그 토스트
2. 두부조림
3. 김치전
4. 어묵탕
5. 닭날개구이

### 각 메뉴의 상세 레시피

**1. 에그 토스트 레시피**
1. 요리 이름: 에그 토스트
2. 카테고리: 한식/간단식
3. 조리 시간: 15분
4. 조리 방법:
   1. 달걀 2개를 삶아 껍질을 깐다.
   2. 삶은 달걀을 잘게 으깨고, 마요네즈 2스푼, 소금, 후추를 넣어 에그 샐러드를 만든다.
   3. 식빵 2장에 버터를 살짝 바르고 달군 팬에서 노릇하게 굽는다.
   4. 식빵 한쪽에 에그 샐러드를 올리고, 다른 식빵으로 덮는다.
   5. 먹기 좋은 크기로 잘라서 접시에 담는다.
5. 필요한 재료와 양:
   - 식빵 2장
   - 달걀 2개
   - 마요네즈 2스푼
   - 소금, 후추 약간
   - 버터 조금
6. 난이도: 하
7. 이미지 URL: https://imgur.com/FOy6b6R
8. 요리 팁:
   - 에그 샐러드에 다진 피클이나 양파를 추가해도 맛있습니다.
   - 빵 대신 바게트를 사용해도 좋습니다.

**2. 두부조림 레시피**
1. 요리 이름: 두부조림
2. 카테고리: 한식
3. 조리 시간: 20분
4. 조리 방법:
   1. 두부 1모를 먹기 좋은 크기로 썬다.
   2. 팬에 기름을 두르고 두부를 앞뒤로 노릇하게 굽는다.
   3. 간장 3스푼, 물 4스푼, 고춧가루 1/2스푼, 설탕 1스푼, 다진 마늘 1/2스푼, 참기름 약간, 대파 다진 것 1스푼을 섞어 양념장을 만든다.
   4. 구운 두부 위에 양념장을 붓고 약불에서 조린다.
   5. 양념이 자작하게 남으면 접시에 담는다.
5. 필요한 재료와 양:
   - 두부 1모
   - 간장 3스푼
   - 물 4스푼
   - 고춧가루 1/2스푼
   - 설탕 1스푼
   - 다진 마늘 1/2스푼
   - 대파 다진 것 1스푼
   - 참기름 약간
   - 식용유 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/LfA9NSW
8. 요리 팁:
   - 두부를 팬에 구울 때 약불에서 천천히 구우면 겉이 바삭해집니다.
   - 청양고추를 추가하면 매콤한 맛을 즐길 수 있습니다.

**3. 김치전 레시피**
1. 요리 이름: 김치전
2. 카테고리: 한식/분식
3. 조리 시간: 15분
4. 조리 방법:
   1. 김치 1컵을 잘게 썬다.
   2. 부침가루 3스푼, 튀김가루 3스푼, 찬물(약간)을 넣고 반죽을 만든다.
   3. 김치와 설탕(약간), 반죽을 고루 섞는다.
   4. 팬에 기름을 두르고 반죽을 올려 앞뒤로 노릇하게 굽는다.
5. 필요한 재료와 양:
   - 김치 1컵
   - 부침가루 3스푼
   - 튀김가루 3스푼
   - 찬물 약간
   - 설탕 약간
   - 식용유 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/5Upn8Ak
8. 요리 팁:
   - 더욱 바삭하게 먹고 싶으면 기름을 넉넉히 사용하세요.
   - 김치가 신맛이 강하면 설탕을 조금 더 넣으면 맛이 조화롭습니다.[2]

**4. 어묵탕 레시피**
1. 요리 이름: 어묵탕
2. 카테고리: 한식/국물요리
3. 조리 시간: 20분
4. 조리 방법:
   1. 물 1리터에 다시마와 멸치를 넣고 10분간 끓여 육수를 만든다.
   2. 어묵을 먹기 좋은 크기로 자르고, 대파와 무도 썬다.
   3. 육수에 무를 넣고 끓이다가 어묵, 대파를 넣고 함께 끓인다.
   4. 간장 2스푼, 소금, 후추로 간을 맞춘다.
   5. 마무리로 다진 마늘, 청양고추(선택)를 넣고 1~2분 더 끓인다.
5. 필요한 재료와 양:
   - 어묵 200g
   - 무 약간
   - 대파 1/2대
   - 다시마, 멸치 약간
   - 간장 2스푼
   - 소금, 후추 약간
   - 다진 마늘 1/2스푼
   - 청양고추(선택)
6. 난이도: 하
7. 이미지 URL: https://imgur.com/YMYCG6l
8. 요리 팁:
   - 육수에 쌀뜨물을 사용하면 구수한 맛이 더해집니다.
   - 어묵은 끓이기 전에 열탕에 한 번 데치면 식감이 더 좋고 잡내가 줄어듭니다.[3][4]

**5. 닭날개구이 레시피**
1. 요리 이름: 닭날개구이
2. 카테고리: 한식/구이
3. 조리 시간: 25분
4. 조리 방법:
   1. 닭날개 350g을 우유에 10분간 담가 잡내를 제거한다.
   2. 물기를 제거한 뒤, 소금, 후추, 허브솔트로 밑간한다.
   3. 튀김가루 2스푼을 골고루 묻힌다.
   4. 팬에 오일을 두르고 닭날개를 앞뒤로 노릇하게 굽는다.
   5. 간장 3스푼, 굴소스 1/2스푼, 설탕 1스푼, 물엿 1~2스푼, 맛술 1스푼, 다진마늘 1스푼을 섞어 소스를 만든다.
   6. 닭날개가 익으면 소스를 부어 윤기나게 졸여낸다.
5. 필요한 재료와 양:
   - 닭날개 350g
   - 우유 약간
   - 소금, 후추, 허브솔트 각 약간
   - 튀김가루 2스푼
   - 오일 1스푼
   - 간장 3스푼
   - 굴소스 1/2스푼
   - 설탕 1스푼
   - 물엿 1~2스푼
   - 맛술 1스푼
   - 다진 마늘 1스푼
6. 난이도: 중
7. 이미지 URL: https://imgur.com/5cZEkAI
8. 요리 팁:
   - 오븐이 있다면 200도에서 20분간 구우면 더 바삭하게 완성됩니다.
   - 꿀이나 올리고당을 소스에 추가해도 좋습니다.[2]

### 추천 이유
- 상황 분석: 아침에 밥을 먹으면 배가 아프다고 하셨으므로, 소화가 쉽고 비교적 가볍거나 부담 없는 메뉴(빵, 국, 부침 등)를 중심으로 선택했습니다.
- 추천 기준: 알레르기 성분(새우)이 없으며, 조리가 비교적 간단하며 혼자 집에서 빠르고 건강하게 만들 수 있는 한식 위주로 구성했습니다.
- 개인화 고려사항: 사용자의 소화 특성을 고려해 아침에도 부담 없는 에그 토스트, 두부조림, 김치전, 어묵탕, 닭날개구이 등 밥이 들어가지 않거나 밥 대신 활용 가능한 메뉴로 선정했습니다. 새우 성분이 포함된 메뉴는 모두 제외했습니다.
- 추가 팁: 메뉴별로 재료 구입이 어렵지 않고, 전날 미리 준비해두거나 남은 재료로 활용할 수 있어 일상적인 집밥으로도 알맞습니다. 특히 두부조림, 어묵탕은 단백질과 야채가 모두 포함되어 한 끼로 영양 균형도 맞출 수 있습니다.
2025-06-29 21:08:41.380 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found menu section: 에그 토스트
2025-06-29 21:08:41.381 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/간단식
2025-06-29 21:08:41.381 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/FOy6b6R
2025-06-29 21:08:41.382 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/FOy6b6R
2025-06-29 21:08:41.382 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 달걀 2개를 삶아 껍질을 깐다.
   2. 삶은 달걀을 잘게 으깨고, 마요네즈 2스푼, 소금, 후추를 넣어 에그 샐러드를 만든다.
   3. 식빵 2장에 버터를 살짝 바르고 
2025-06-29 21:08:41.402 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 21:08:41.407 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 에그 토스트
2025-06-29 21:08:41.418 [http-nio-8080-exec-3] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at jdk.internal.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy144.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy144.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:894)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:08:41.420 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 에그 토스트
2025-06-29 21:08:41.420 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found menu section: 두부조림
2025-06-29 21:08:41.421 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 21:08:41.421 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/LfA9NSW
2025-06-29 21:08:41.422 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/LfA9NSW
2025-06-29 21:08:41.422 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 두부 1모를 먹기 좋은 크기로 썬다.
   2. 팬에 기름을 두르고 두부를 앞뒤로 노릇하게 굽는다.
   3. 간장 3스푼, 물 4스푼, 고춧가루 1/2스푼, 설탕 1스푼, 
2025-06-29 21:08:41.428 [http-nio-8080-exec-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:08:41.429 [http-nio-8080-exec-3] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:08:41.430 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 두부조림
2025-06-29 21:08:41.430 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found menu section: 김치전
2025-06-29 21:08:41.430 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/분식
2025-06-29 21:08:41.430 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/5Upn8Ak
2025-06-29 21:08:41.431 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/5Upn8Ak
2025-06-29 21:08:41.431 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 김치 1컵을 잘게 썬다.
   2. 부침가루 3스푼, 튀김가루 3스푼, 찬물(약간)을 넣고 반죽을 만든다.
   3. 김치와 설탕(약간), 반죽을 고루 섞는다.
   4. 팬
2025-06-29 21:08:41.433 [http-nio-8080-exec-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:08:41.433 [http-nio-8080-exec-3] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:08:41.434 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 김치전
2025-06-29 21:08:41.434 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found menu section: 어묵탕
2025-06-29 21:08:41.434 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/국물요리
2025-06-29 21:08:41.434 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/YMYCG6l
2025-06-29 21:08:41.434 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/YMYCG6l
2025-06-29 21:08:41.434 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 물 1리터에 다시마와 멸치를 넣고 10분간 끓여 육수를 만든다.
   2. 어묵을 먹기 좋은 크기로 자르고, 대파와 무도 썬다.
   3. 육수에 무를 넣고 끓이다가 어묵, 
2025-06-29 21:08:41.436 [http-nio-8080-exec-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:08:41.436 [http-nio-8080-exec-3] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:08:41.437 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 어묵탕
2025-06-29 21:08:41.437 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found menu section: 닭날개구이
2025-06-29 21:08:41.437 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/구이
2025-06-29 21:08:41.437 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/5cZEkAI
2025-06-29 21:08:41.437 [http-nio-8080-exec-3] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/5cZEkAI
2025-06-29 21:08:41.437 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 닭날개 350g을 우유에 10분간 담가 잡내를 제거한다.
   2. 물기를 제거한 뒤, 소금, 후추, 허브솔트로 밑간한다.
   3. 튀김가루 2스푼을 골고루 묻힌다.
   
2025-06-29 21:08:41.438 [http-nio-8080-exec-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:08:41.438 [http-nio-8080-exec-3] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:08:41.439 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 닭날개구이
2025-06-29 21:08:41.439 [http-nio-8080-exec-3] INFO  a.s.k.p.service.PerplexityService - Parsed 5 detailed menu recommendations
2025-06-29 21:08:41.440 [http-nio-8080-exec-3] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:08:41.440 [http-nio-8080-exec-3] ERROR a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 실패: userId=8, chatRoomId=1, message=메뉴 추천:
- 에그 토스트
- 두부조림
- 김치전
- 어묵탕
- 닭날개구이

org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy155.findByUserIdAndChatRoomIdOrderByCreatedAtAsc(Unknown Source)
	at ac.su.kdt.prompttest.service.ChatService.getSessionIdForChatRoom(ChatService.java:64)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:60)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:08:41.448 [http-nio-8080-exec-3] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 채팅 메시지 저장에 실패했습니다: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)] with root cause
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy155.findByUserIdAndChatRoomIdOrderByCreatedAtAsc(Unknown Source)
	at ac.su.kdt.prompttest.service.ChatService.getSessionIdForChatRoom(ChatService.java:64)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:60)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:09:00.457 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:00.469 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:00.477 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:00.479 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:00.490 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:00.563 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:00.613 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:00.733 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:00.743 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:00.748 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:00.764 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:09:01.735 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:01.753 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:01.772 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:01.773 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:01.785 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:09:02.196 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:02.198 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:02.205 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:02.206 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:02.210 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:09:02.939 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:02.941 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:02.945 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:02.947 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:02.950 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:02.955 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:02.970 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:02.971 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:02.975 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:02.976 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:02.981 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:09:03.624 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:03.626 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:03.628 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:03.628 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:03.630 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:03.632 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:04.745 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:04.747 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:04.749 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:04.751 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:04.760 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatRoom */insert 
    into
        chat_room (created_at, is_active, message_count, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 21:09:08.474 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:08.475 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:08.477 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:08.477 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:08.480 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:09:08.581 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:08.584 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:08.586 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:08.587 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:08.591 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:09:09.036 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:09.038 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:09.040 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:09.042 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:09.051 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:09.053 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:09.449 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:09.451 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:09.452 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:09.453 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:09.474 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:09.479 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:09.952 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:09.954 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:09.956 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:09.958 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:09.960 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:09.964 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:10.088 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:10.089 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:10.091 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.093 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.096 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:10.098 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:10.232 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:10.233 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:10.235 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.236 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.241 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:10.243 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:10.549 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:10.551 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:10.554 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.556 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.559 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:10.742 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:10.744 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:10.747 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.750 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.758 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:10.775 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:10.913 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:10.914 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:10.917 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.918 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:10.920 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:10.921 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:11.100 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:11.102 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:11.103 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:11.104 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:11.106 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:11.108 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:11.309 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:11.310 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:11.312 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:11.313 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:11.317 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:11.319 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:11.974 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:11.975 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:11.977 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:11.979 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:11.982 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:11.986 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:12.108 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:12.111 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:12.114 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:12.117 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:12.120 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:12.123 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:12.160 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:12.161 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:12.169 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:12.171 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:12.176 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.chat_room_id=?
2025-06-29 21:09:12.181 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for ac.su.kdt.prompttest.entity.ChatRoom */update chat_room 
    set
        created_at=?,
        is_active=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        chat_room_id=?
2025-06-29 21:09:17.171 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:09:17.176 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:17.180 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:17.181 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:09:17.185 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:09:17.198 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:09:17.200 [http-nio-8080-exec-1] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=3585845e-4851-455e-8647-ff3bf72cb3ac, isUserMessage=true
2025-06-29 21:09:17.200 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 21:09:17.200 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:09:17.201 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:09:17.201 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:09:17.201 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천
2025-06-29 21:09:17.201 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:09:17.201 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 21:09:17.203 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:09:17.204 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 21:09:17.204 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:09:17.204 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 각 메뉴의 상세 레시피

**1. [메뉴명 1] 레시피**
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**2. [메뉴명 2] 레시피**
[위와 동일한 형식으로 2번 메뉴의 상세 레시피]

**3. [메뉴명 3] 레시피**
[위와 동일한 형식으로 3번 메뉴의 상세 레시피]

**4. [메뉴명 4] 레시피**
[위와 동일한 형식으로 4번 메뉴의 상세 레시피]

**5. [메뉴명 5] 레시피**
[위와 동일한 형식으로 5번 메뉴의 상세 레시피]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 각 메뉴의 상세 레시피를 반드시 포함해주세요.
**중요**: 각 레시피는 1번부터 8번까지 모든 섹션을 빠짐없이 포함해야 합니다.
**중요**: 7번 이미지 URL은 Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 21:09:17.204 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:09:31.602 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:09:31.602 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response with detailed recipes
2025-06-29 21:09:31.602 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 에그 토스트
2. 두부조림
3. 김치전 (오징어 제외)
4. 어묵탕
5. 아보카도 명란 덮밥

### 각 메뉴의 상세 레시피

**1. 에그 토스트 레시피**
1. 요리 이름: 에그 토스트
2. 카테고리: 한식/간편식
3. 조리 시간: 15분
4. 조리 방법:
   1. 계란 2개를 삶아 잘게 으깬다.
   2. 으깬 계란에 마요네즈 1큰술, 소금 약간, 후추 약간을 넣고 섞는다.
   3. 식빵 2장에 버터를 바르고 팬에 살짝 구운 뒤, 계란 샐러드를 올린다.
   4. 취향에 따라 양상추, 토마토 등을 추가해 샌드위치 형태로 완성한다.
5. 필요한 재료와 양:
   - 계란 2개
   - 식빵 2장
   - 마요네즈 1큰술
   - 소금, 후추 약간
   - 버터 약간
   - 양상추, 토마토(선택)
6. 난이도: 하
7. 이미지 URL: https://imgur.com/4TgGk46
8. 요리 팁:
   - 계란은 완숙으로 삶아야 샐러드가 잘 뭉친다.
   - 식빵은 버터를 바르면 풍미가 더 좋아진다.

**2. 두부조림 레시피**
1. 요리 이름: 두부조림
2. 카테고리: 한식
3. 조리 시간: 20분
4. 조리 방법:
   1. 두부 1모를 먹기 좋은 크기로 썰어 키친타월로 물기를 제거한다.
   2. 팬에 기름을 두르고 두부를 앞뒤로 노릇하게 굽는다.
   3. 두부를 한쪽에 놓고 양념장(간장 2큰술, 고춧가루 1큰술, 설탕 1/2큰술, 다진 마늘 1/2큰술, 참기름 1/2큰술, 물 3큰술, 대파 및 양파 약간)을 만들어 끓인다.
   4. 구운 두부 위에 양념장을 올려 한소끔 조린다.
5. 필요한 재료와 양:
   - 두부 1모
   - 간장 2큰술
   - 고춧가루 1큰술
   - 설탕 1/2큰술
   - 다진 마늘 1/2큰술
   - 참기름 1/2큰술
   - 물 3큰술
   - 대파, 양파 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/4zQir5I
8. 요리 팁:
   - 두부는 최대한 노릇하게 구워야 식감이 살아난다.
   - 양념장은 미리 섞어두면 조리 시간이 단축된다.

**3. 김치전 (오징어 제외) 레시피**
1. 요리 이름: 김치전 (오징어 제외)
2. 카테고리: 한식/부침개
3. 조리 시간: 15분
4. 조리 방법:
   1. 김치 1/4포기를 잘게 썬다.
   2. 볼에 부침가루 4큰술, 튀김가루 2큰술, 잘게 썬 김치, 김치국물 2큰술, 설탕 약간을 넣는다.
   3. 찬물로 반죽 농도를 맞춘다.
   4. 팬에 기름을 두르고 반죽을 한 국자씩 떠서 앞뒤로 노릇하게 굽는다.
5. 필요한 재료와 양:
   - 김치 1/4포기
   - 부침가루 4큰술
   - 튀김가루 2큰술
   - 김치국물 2큰술
   - 설탕 약간
   - 찬물 적당량
   - 식용유 적당량
6. 난이도: 하
7. 이미지 URL: https://imgur.com/vi7FrG3
8. 요리 팁:
   - 김치국물을 넣으면 더 깊은 맛이 난다.
   - 약불에서 천천히 구워야 바삭하다.

**4. 어묵탕 레시피**
1. 요리 이름: 어묵탕
2. 카테고리: 한식/탕
3. 조리 시간: 20분
4. 조리 방법:
   1. 어묵을 한입 크기로 자른다.
   2. 냄비에 다시마와 멸치를 넣고 15분간 끓여 국물을 우린 뒤, 건더기를 건진다.
   3. 국물에 무, 대파, 양파를 넣고 끓인다.
   4. 준비한 어묵을 넣고 간장 1큰술, 소금 약간, 다진 마늘 1작은술로 간한다.
   5. 모든 재료가 익으면 마지막에 후춧가루를 약간 뿌린다.
5. 필요한 재료와 양:
   - 어묵 200g
   - 무 1/8개
   - 대파 1대
   - 양파 1/4개
   - 다시마/멸치(육수용)
   - 간장 1큰술
   - 소금, 후춧가루 약간
   - 다진 마늘 1작은술
6. 난이도: 중
7. 이미지 URL: https://imgur.com/iFzXALp
8. 요리 팁:
   - 무를 넣으면 시원한 맛이 살아난다.
   - 어묵은 오래 끓이지 말고 마지막에 넣어야 쫄깃하다.

**5. 아보카도 명란 덮밥 레시피**
1. 요리 이름: 아보카도 명란 덮밥
2. 카테고리: 퓨전/덮밥
3. 조리 시간: 10분
4. 조리 방법:
   1. 밥 한 공기를 따뜻하게 준비한다.
   2. 아보카도 1/2개를 얇게 썬다.
   3. 명란 젓 1/2통을 준비해 껍질을 벗기고 발라낸다.
   4. 밥 위에 아보카도와 명란을 올린다.
   5. 간장 1작은술, 참기름 1/2작은술을 뿌린다.
   6. 취향에 따라 김, 깨소금 등을 올린다.
5. 필요한 재료와 양:
   - 밥 1공기
   - 아보카도 1/2개
   - 명란 젓 1/2통
   - 간장 1작은술
   - 참기름 1/2작은술
   - 김, 깨소금 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/VYEe6QX
8. 요리 팁:
   - 아보카도는 익은 것을 사용해야 부드럽다.
   - 명란의 짠맛에 따라 간장 양을 조절한다.

### 추천 이유

- 상황 분석: 아침에 밥을 먹으면 배가 아픈 건강 상태를 고려해, 속 부담이 적고 빠르게 준비 가능한 식사 메뉴로 구성했습니다. 메뉴들은 한식 위주로 선택하되, 간단하면서도 건강하게 즐길 수 있는 조식/경량식 중심입니다.
- 추천 기준: 새우 알레르기를 철저히 배제하였고, 아침에 먹어도 속이 편하거나 부담이 적은 메뉴(빵, 두부, 계란, 부침, 국물 등)를 우선 선정하였습니다.
- 개인화 고려사항: 속이 약한 아침 컨디션을 위해 기름진 음식·매운 음식은 최소화하였습니다. 새우가 들어가는 곤드레새우주먹밥 등은 제외하였습니다.
- 추가 팁: 부드러운 조식이나 간편한 한식으로 추천한 메뉴는 바쁜 아침·점심에도 활용도가 높고, 속이 편해야 할 때 특히 적합합니다. 모두 재료 준비와 조리 시간이 짧아 간단하게 만들 수 있으며, 자극적이지 않아 위에 부담이 덜합니다.
2025-06-29 21:09:31.606 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 에그 토스트
2025-06-29 21:09:31.606 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/간편식
2025-06-29 21:09:31.606 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/4TgGk46
2025-06-29 21:09:31.606 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/4TgGk46
2025-06-29 21:09:31.607 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란 2개를 삶아 잘게 으깬다.
   2. 으깬 계란에 마요네즈 1큰술, 소금 약간, 후추 약간을 넣고 섞는다.
   3. 식빵 2장에 버터를 바르고 팬에 살짝 구운 뒤, 계
2025-06-29 21:09:31.611 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 21:09:31.612 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 에그 토스트
2025-06-29 21:09:31.615 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
jakarta.validation.ConstraintViolationException: Validation failed for classes [ac.su.kdt.prompttest.entity.Recipe] during persist time for groups [jakarta.validation.groups.Default, ]
List of constraint violations:[
	ConstraintViolationImpl{interpolatedMessage='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.', propertyPath=category, rootBeanClass=class ac.su.kdt.prompttest.entity.Recipe, messageTemplate='카테고리는 '한식', '중식', '일식', '양식', '분식', '퓨전' 중 하나여야 합니다.'}
]
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.validate(BeanValidationEventListener.java:151)
	at org.hibernate.boot.beanvalidation.BeanValidationEventListener.onPreInsert(BeanValidationEventListener.java:81)
	at org.hibernate.action.internal.EntityIdentityInsertAction.preInsert(EntityIdentityInsertAction.java:186)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:75)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134)
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175)
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:754)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:738)
	at jdk.internal.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy144.persist(Unknown Source)
	at jdk.internal.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy144.persist(Unknown Source)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618)
	at jdk.internal.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.save(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:894)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:09:31.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 에그 토스트
2025-06-29 21:09:31.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 두부조림
2025-06-29 21:09:31.617 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 21:09:31.618 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/4zQir5I
2025-06-29 21:09:31.618 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/4zQir5I
2025-06-29 21:09:31.618 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 두부 1모를 먹기 좋은 크기로 썰어 키친타월로 물기를 제거한다.
   2. 팬에 기름을 두르고 두부를 앞뒤로 노릇하게 굽는다.
   3. 두부를 한쪽에 놓고 양념장(간장 2큰
2025-06-29 21:09:31.619 [http-nio-8080-exec-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:09:31.619 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:09:31.620 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 두부조림
2025-06-29 21:09:31.620 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 김치전 (오징어 제외)
2025-06-29 21:09:31.620 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/부침개
2025-06-29 21:09:31.620 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/vi7FrG3
2025-06-29 21:09:31.620 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/vi7FrG3
2025-06-29 21:09:31.620 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 김치 1/4포기를 잘게 썬다.
   2. 볼에 부침가루 4큰술, 튀김가루 2큰술, 잘게 썬 김치, 김치국물 2큰술, 설탕 약간을 넣는다.
   3. 찬물로 반죽 농도를 맞춘다
2025-06-29 21:09:31.621 [http-nio-8080-exec-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:09:31.621 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:09:31.622 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 김치전 (오징어 제외)
2025-06-29 21:09:31.622 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 어묵탕
2025-06-29 21:09:31.622 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/탕
2025-06-29 21:09:31.622 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/iFzXALp
2025-06-29 21:09:31.622 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/iFzXALp
2025-06-29 21:09:31.623 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 어묵을 한입 크기로 자른다.
   2. 냄비에 다시마와 멸치를 넣고 15분간 끓여 국물을 우린 뒤, 건더기를 건진다.
   3. 국물에 무, 대파, 양파를 넣고 끓인다.
  
2025-06-29 21:09:31.625 [http-nio-8080-exec-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:09:31.625 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:09:31.626 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 어묵탕
2025-06-29 21:09:31.626 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found menu section: 아보카도 명란 덮밥
2025-06-29 21:09:31.626 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 퓨전/덮밥
2025-06-29 21:09:31.626 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/VYEe6QX
2025-06-29 21:09:31.626 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/VYEe6QX
2025-06-29 21:09:31.626 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 밥 한 공기를 따뜻하게 준비한다.
   2. 아보카도 1/2개를 얇게 썬다.
   3. 명란 젓 1/2통을 준비해 껍질을 벗기고 발라낸다.
   4. 밥 위에 아보카도와 명란
2025-06-29 21:09:31.628 [http-nio-8080-exec-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:09:31.628 [http-nio-8080-exec-1] ERROR a.s.k.p.service.PerplexityService - Error saving recipe
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:564)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:223)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy158.findByTitle(Unknown Source)
	at ac.su.kdt.prompttest.service.PerplexityService.parseRecipeFromMenuSection(PerplexityService.java:887)
	at ac.su.kdt.prompttest.service.PerplexityService.parseMenuRecommendationResponse(PerplexityService.java:805)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponseWithRetry(PerplexityService.java:111)
	at ac.su.kdt.prompttest.service.PerplexityService.getResponse(PerplexityService.java:54)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:09:31.629 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed recipe for menu: 아보카도 명란 덮밥
2025-06-29 21:09:31.629 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 5 detailed menu recommendations
2025-06-29 21:09:31.630 [http-nio-8080-exec-1] ERROR org.hibernate.AssertionFailure - HHH000099: an assertion failure occurred (this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
2025-06-29 21:09:31.631 [http-nio-8080-exec-1] ERROR a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 실패: userId=8, chatRoomId=5, message=메뉴 추천:
- 에그 토스트
- 두부조림
- 김치전 (오징어 제외)
- 어묵탕
- 아보카도 명란 덮밥

org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy155.findByUserIdAndChatRoomIdOrderByCreatedAtAsc(Unknown Source)
	at ac.su.kdt.prompttest.service.ChatService.getSessionIdForChatRoom(ChatService.java:64)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:60)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:09:31.636 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 채팅 메시지 저장에 실패했습니다: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)] with root cause
org.hibernate.AssertionFailure: null id in ac.su.kdt.prompttest.entity.Recipe entry (don't flush the Session after an exception occurs)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.checkId(DefaultFlushEntityEventListener.java:83)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.getValues(DefaultFlushEntityEventListener.java:179)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:138)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:226)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:90)
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:52)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1366)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.lambda$new$2(ConcreteSqmSelectQueryPlan.java:136)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:362)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:303)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:509)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:427)
	at org.hibernate.query.Query.getResultList(Query.java:120)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:129)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy4/jdk.proxy4.$Proxy155.findByUserIdAndChatRoomIdOrderByCreatedAtAsc(Unknown Source)
	at ac.su.kdt.prompttest.service.ChatService.getSessionIdForChatRoom(ChatService.java:64)
	at ac.su.kdt.prompttest.service.ChatService.saveChat(ChatService.java:26)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.ChatService$$SpringCGLIB$$0.saveChat(<generated>)
	at ac.su.kdt.prompttest.service.RecipeService.requestRecipe(RecipeService.java:60)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at ac.su.kdt.prompttest.service.RecipeService$$SpringCGLIB$$0.requestRecipe(<generated>)
	at ac.su.kdt.prompttest.controller.RecipeController.requestRecipe(RecipeController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:259)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:192)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at ac.su.kdt.prompttest.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:101)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-29 21:12:50.356 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 21:12:50.361 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-29 21:12:50.365 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-29 21:12:56.320 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-06-29 21:12:56.348 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Starting PromptTestApplication using Java 17.0.13 with PID 40587 (/Users/lhj/Workspace/prompt-test/build/classes/java/main started by lhj in /Users/lhj/Workspace/prompt-test)
2025-06-29 21:12:56.349 [restartedMain] DEBUG a.s.k.p.PromptTestApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-06-29 21:12:56.350 [restartedMain] INFO  a.s.k.p.PromptTestApplication - The following 1 profile is active: "secret"
2025-06-29 21:12:56.488 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-06-29 21:12:56.488 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-06-29 21:12:57.437 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 21:12:57.438 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2025-06-29 21:12:57.487 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 21:12:57.489 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 21:12:57.490 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 21:12:57.491 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 21:12:57.492 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 21:12:57.493 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 21:12:57.495 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 21:12:57.496 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2025-06-29 21:12:57.496 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 56 ms. Found 0 JDBC repository interfaces.
2025-06-29 21:12:57.513 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 21:12:57.514 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-29 21:12:57.606 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 89 ms. Found 8 JPA repository interfaces.
2025-06-29 21:12:57.641 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-29 21:12:57.641 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-29 21:12:57.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatHistoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 21:12:57.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.ChatRoomRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 21:12:57.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.IngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 21:12:57.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.RecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 21:12:57.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserIngredientRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 21:12:57.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserPromptRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 21:12:57.653 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRecipeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 21:12:57.654 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface ac.su.kdt.prompttest.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-06-29 21:12:57.654 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-06-29 21:12:58.322 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-29 21:12:58.329 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-29 21:12:58.332 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-29 21:12:58.332 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-06-29 21:12:58.371 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-29 21:12:58.372 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1882 ms
2025-06-29 21:12:58.403 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-29 21:12:58.543 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5aa4093a
2025-06-29 21:12:58.546 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-29 21:12:58.563 [restartedMain] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/recipedb?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true'
2025-06-29 21:12:58.693 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-29 21:12:58.721 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-29 21:12:58.742 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-29 21:12:58.870 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-29 21:12:58.925 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-29 21:12:58.925 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-29 21:12:59.815 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-29 21:12:59.930 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-29 21:13:00.358 [restartedMain] DEBUG a.s.k.p.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-29 21:13:00.546 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - JSqlParser is in classpath; If applicable, JSqlParser will be used
2025-06-29 21:13:00.547 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-29 21:13:00.919 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API URL: https://api.perplexity.ai/chat/completions
2025-06-29 21:13:00.919 [restartedMain] INFO  a.s.k.p.service.PerplexityService - API Key length: 53
2025-06-29 21:13:01.850 [restartedMain] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-29 21:13:01.928 [restartedMain] INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2025-06-29 21:13:02.076 [restartedMain] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@968aaed, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@509e3a89, org.springframework.security.web.context.SecurityContextHolderFilter@4fc032bd, org.springframework.security.web.header.HeaderWriterFilter@2f9a013b, org.springframework.web.filter.CorsFilter@6a928fe1, org.springframework.security.web.authentication.logout.LogoutFilter@58bbe3ff, ac.su.kdt.prompttest.security.JwtAuthenticationFilter@3fb757eb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@131a80c7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7e638b52, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6315324d, org.springframework.security.web.session.SessionManagementFilter@63f63973, org.springframework.security.web.access.ExceptionTranslationFilter@1254bbad, org.springframework.security.web.access.intercept.AuthorizationFilter@1d9896e7]
2025-06-29 21:13:02.455 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-06-29 21:13:02.473 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-29 21:13:02.479 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-29 21:13:02.490 [restartedMain] INFO  a.s.k.p.PromptTestApplication - Started PromptTestApplication in 6.521 seconds (process running for 7.341)
2025-06-29 21:13:31.397 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-29 21:13:31.398 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-29 21:13:31.414 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 14 ms
2025-06-29 21:13:31.519 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:13:31.556 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:13:31.593 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:13:31.600 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:13:31.681 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:13:31.697 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:13:31.707 [http-nio-8080-exec-1] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=true
2025-06-29 21:13:31.710 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 메뉴 추천, useRefrigerator: false, isSpecificRecipe: false, retry: 0
2025-06-29 21:13:31.711 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:13:31.728 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:13:31.728 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:13:31.728 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 메뉴 추천
2025-06-29 21:13:31.728 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:13:31.728 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: false
2025-06-29 21:13:31.737 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:13:31.739 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 메뉴 추천 요청
2025-06-29 21:13:31.740 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:13:31.741 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 메뉴 추천 전문가입니다. 사용자의 요청에 맞는 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 메뉴 추천
**중요**: 위 요청의 맥락(아침/점심/저녁, 간단한/정성스러운, 건강한/기름진 등)을 정확히 파악하여 적절한 메뉴를 추천해주세요.
예시: '아침 메뉴' 요청 → 아침에 먹기 적절한 가벼운 메뉴 추천
예시: '간단한 저녁' 요청 → 저녁에 간단하게 만들 수 있는 메뉴 추천

## 개인화 정보 (3순위)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 알레르기: 새우
**중요**: 위 알레르기 재료가 포함된 메뉴는 추천하지 마세요.
**고려사항**: 위 개인화 정보를 바탕으로 건강하고 안전한 메뉴를 추천해주세요.

## 사용자 선호도 (4순위 - 참고사항)
- 선호도: 한식
**참고**: 위 선호도는 참고사항이며, 보유 재료, 사용자 요청, 개인화 정보가 우선입니다.

## 메뉴 추천 형식
**다음 형식으로 5개의 메뉴를 추천하고, 각 메뉴의 상세한 레시피를 제공해주세요:**

### 추천 메뉴 목록

1. [메뉴명 1]
2. [메뉴명 2]
3. [메뉴명 3]
4. [메뉴명 4]
5. [메뉴명 5]

### 각 메뉴의 상세 레시피

**1. [메뉴명 1] 레시피**
1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**2. [메뉴명 2] 레시피**
[위와 동일한 형식으로 2번 메뉴의 상세 레시피]

**3. [메뉴명 3] 레시피**
[위와 동일한 형식으로 3번 메뉴의 상세 레시피]

**4. [메뉴명 4] 레시피**
[위와 동일한 형식으로 4번 메뉴의 상세 레시피]

**5. [메뉴명 5] 레시피**
[위와 동일한 형식으로 5번 메뉴의 상세 레시피]

### 추천 이유
- 상황 분석: [사용자 요청에 맞는 상황 설명]
- 추천 기준: [어떤 기준으로 메뉴를 선택했는지 설명]
- 개인화 고려사항: [알레르기, 건강상태 등을 어떻게 고려했는지]
- 추가 팁: [선택한 메뉴에 대한 추가 조언]

**중요**: 각 메뉴의 상세 레시피를 반드시 포함해주세요.
**중요**: 각 레시피는 1번부터 8번까지 모든 섹션을 빠짐없이 포함해야 합니다.
**중요**: 7번 이미지 URL은 Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
**중요**: 각 메뉴의 추천 이유는 반드시 사용자 요청과의 연관성을 명확히 설명해주세요.
**우선순위**: 1순위(보유 재료) > 2순위(사용자 요청) > 3순위(개인화 정보) > 4순위(선호도) 순으로 고려해주세요.

2025-06-29 21:13:31.742 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:13:51.032 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:13:51.035 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse menu recommendation response
2025-06-29 21:13:51.035 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: ### 추천 메뉴 목록

1. 에그 토스트
2. 두부조림
3. 오뎅탕(어묵탕)
4. 닭날개구이
5. 김치전

---

### 각 메뉴의 상세 레시피

**1. 에그 토스트 레시피**
1. 요리 이름: 에그 토스트
2. 카테고리: 한식/브런치(간편식)
3. 조리 시간: 약 15분
4. 조리 방법:
   1. 달걀 2개를 삶아 잘게 으깬다.
   2. 으깬 달걀에 마요네즈(2큰술), 소금 약간, 후추 약간을 넣고 섞어 에그 샐러드를 만든다.
   3. 식빵 2장 위에 에그 샐러드를 넉넉히 올린다.
   4. 취향에 따라 케첩 또는 머스터드를 약간 뿌린다.
   5. 식빵을 덮거나 오픈 샌드위치로 완성한다.
5. 필요한 재료와 양:
   - 달걀 2개
   - 식빵 2장
   - 마요네즈 2큰술
   - 소금 약간
   - 후추 약간
   - (선택) 케첩, 머스터드 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/2v1Pb1k
8. 요리 팁:
   - 삶은 달걀은 미리 만들어두면 더욱 간편하게 아침을 준비할 수 있습니다.
   - 식빵 대신 잉글리시 머핀이나 바게트를 사용해도 좋습니다.

---

**2. 두부조림 레시피**
1. 요리 이름: 두부조림
2. 카테고리: 한식
3. 조리 시간: 약 20분
4. 조리 방법:
   1. 두부를 먹기 좋은 크기로 썬다.
   2. 팬에 기름을 두르고 두부를 노릇하게 앞뒤로 구워낸다.
   3. 간장(3큰술), 고춧가루(1큰술), 다진 마늘(1작은술), 물(3큰술), 설탕(1/2큰술), 참기름(1/2큰술), 대파, 청양고추 썬 것 등을 섞어 양념장을 만든다.
   4. 구운 두부 위에 양념장을 올리고, 뚜껑을 덮어 중불에서 졸여준다.
   5. 양념이 골고루 배도록 10분 정도 조리한다.
5. 필요한 재료와 양:
   - 두부 1모
   - 간장 3큰술
   - 고춧가루 1큰술
   - 다진 마늘 1작은술
   - 대파 1/2대
   - 청양고추 1개
   - 물 3큰술
   - 설탕 1/2큰술
   - 참기름 1/2큰술
   - 식용유 약간
6. 난이도: 하
7. 이미지 URL: https://imgur.com/AJYTdGe
8. 요리 팁:
   - 두부는 키친타월로 물기를 꼭 제거한 후 구워야 바삭합니다.
   - 남은 양념에 밥을 비벼 먹어도 좋습니다.

---

**3. 오뎅탕(어묵탕) 레시피**
1. 요리 이름: 오뎅탕(어묵탕)
2. 카테고리: 한식
3. 조리 시간: 약 20분
4. 조리 방법:
   1. 무, 양파, 다시마, 대파 등으로 육수를 내고 끓인다.
   2. 끓는 물에 어묵, 무, 쪽파, 청양고추 등을 넣는다.
   3. 간장(2큰술), 소금 약간, 후추, 다진 마늘(1작은술)로 간을 맞춘다.
   4. 모든 재료가 익으면 그릇에 담아낸다.
5. 필요한 재료와 양:
   - 어묵 200g
   - 무 1/8통
   - 양파 1/2개
   - 대파 1/2대
   - 다시마 1장
   - 쪽파, 청양고추 약간
   - 간장 2큰술
   - 소금 약간
   - 다진 마늘 1작은술
6. 난이도: 하
7. 이미지 URL: https://imgur.com/sRmAFKR
8. 요리 팁:
   - 멸치 육수를 함께 사용하면 풍미가 더 높아집니다.
   - 어묵은 한입 크기로 썰어서 넣으세요.

---

**4. 닭날개구이 레시피**
1. 요리 이름: 닭날개구이
2. 카테고리: 한식
3. 조리 시간: 약 30분
4. 조리 방법:
   1. 닭날개를 우유에 10분 정도 담가 잡내를 뺀 뒤, 물에 씻어 물기를 제거한다.
   2. 닭날개에 소금, 후추, 허브솔트 등으로 밑간을 한다.
   3. 튀김가루(또는 전분가루)를 살짝 묻혀준다.
   4. 팬에 기름을 두르고 닭날개를 노릇하게 굽는다.
   5. 간장, 굴소스, 설탕, 꿀, 맛술, 다진 마늘, 물을 섞어 소스를 만든다.
   6. 구운 닭날개에 소스를 붓고 약불에서 졸여 마무리한다.
5. 필요한 재료와 양:
   - 닭날개 350g
   - 우유 1컵
   - 소금, 후추, 허브솔트 약간
   - 튀김가루 2큰술
   - 식용유 1큰술
   - 간장 3큰술
   - 굴소스 1/2큰술
   - 설탕 1큰술
   - 꿀(또는 물엿) 2큰술
   - 맛술 1큰술
   - 다진마늘 1큰술
6. 난이도: 중
7. 이미지 URL: https://imgur.com/mqSpmrM
8. 요리 팁:
   - 에어프라이어도 활용 가능(180도 20분).
   - 소스는 졸이는 동안 약불을 유지해야 타지 않습니다.

---

**5. 김치전 레시피**
1. 요리 이름: 김치전
2. 카테고리: 한식/분식
3. 조리 시간: 약 15분
4. 조리 방법:
   1. 김치를 잘게 썬다.
   2. 볼에 자른 김치, 부침가루(3큰술), 튀김가루(3큰술), 찬물, 설탕 약간을 넣고 반죽한다.
   3. 팬에 기름을 두르고 반죽을 한 국자씩 넣어 앞뒤로 노릇하게 굽는다.
5. 필요한 재료와 양:
   - 김치 1/4포기
   - 부침가루 3큰술
   - 튀김가루 3큰술
   - 설탕 약간
   - 찬물 약간
   - 식용유 적당량
6. 난이도: 하
7. 이미지 URL: https://imgur.com/iBzSGDN
8. 요리 팁:
   - 김치가 너무 신맛이 강하면 설탕을 조금 더 추가하세요.
   - 반죽에 해물(오징어 등) 추가 가능(단, 새우는 금지).

---

### 추천 이유

- 상황 분석: 사용자는 아침에 밥을 먹으면 배가 아프고, 저녁 메뉴를 원하셨으므로 소화가 잘 되는 간단하거나 부담스럽지 않은 메뉴 위주로 선정했습니다.
- 추천 기준: 아침에 속에 무리가 가지 않고, 저녁에 가볍거나 부담 없이 즐길 수 있는 건강한 한식 위주로 메뉴를 선정했습니다. 본인의 건강 상태와 알레르기(새우)를 철저히 배제했습니다.
- 개인화 고려사항: 
  - 새우를 포함하지 않는 안전한 메뉴만 추천했습니다.
  - 아침에 밥을 피해야 하므로, 빵을 활용한 에그 토스트를 포함했으며 부드럽고 소화 잘 되는 메뉴(두부조림, 어묵탕 등)를 엄선했습니다.
- 추가 팁: 
  - 각 메뉴는 간단하면서도 저녁 식사로 부담스럽지 않으며, 필요시 재료를 더해 응용이 가능합니다.
  - 에그 토스트는 아침/저녁 모두 활용 가능, 두부조림은 밥 없이도 반찬이나 안주로 적합합니다.
  - 오뎅탕은 국물로 속을 달래며, 김치전과 닭날개구이는 식사/간식/안주로 모두 손색없습니다.

이처럼 건강, 알레르기, 식습관, 요청 상황을 모두 반영해 선정한 메뉴이니 안심하고 즐기세요.
2025-06-29 21:13:51.037 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/브런치(간편식)
2025-06-29 21:13:51.038 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.038 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.039 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 달걀 2개를 삶아 잘게 으깬다.
   2. 으깬 달걀에 마요네즈(2큰술), 소금 약간, 후추 약간을 넣고 섞어 에그 샐러드를 만든다.
   3. 식빵 2장 위에 에그 샐러드를
2025-06-29 21:13:51.043 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Created recipe object for menu recommendation: 에그 토스트
2025-06-29 21:13:51.044 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/브런치(간편식)
2025-06-29 21:13:51.045 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.045 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.047 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 달걀 2개를 삶아 잘게 으깬다.
   2. 으깬 달걀에 마요네즈(2큰술), 소금 약간, 후추 약간을 넣고 섞어 에그 샐러드를 만든다.
   3. 식빵 2장 위에 에그 샐러드를
2025-06-29 21:13:51.048 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Created recipe object for menu recommendation: 두부조림
2025-06-29 21:13:51.048 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/브런치(간편식)
2025-06-29 21:13:51.048 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.048 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.048 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 달걀 2개를 삶아 잘게 으깬다.
   2. 으깬 달걀에 마요네즈(2큰술), 소금 약간, 후추 약간을 넣고 섞어 에그 샐러드를 만든다.
   3. 식빵 2장 위에 에그 샐러드를
2025-06-29 21:13:51.049 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Created recipe object for menu recommendation: 오뎅탕(어묵탕)
2025-06-29 21:13:51.049 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/브런치(간편식)
2025-06-29 21:13:51.049 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.050 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.050 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 달걀 2개를 삶아 잘게 으깬다.
   2. 으깬 달걀에 마요네즈(2큰술), 소금 약간, 후추 약간을 넣고 섞어 에그 샐러드를 만든다.
   3. 식빵 2장 위에 에그 샐러드를
2025-06-29 21:13:51.051 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Created recipe object for menu recommendation: 닭날개구이
2025-06-29 21:13:51.051 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식/브런치(간편식)
2025-06-29 21:13:51.051 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.051 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Invalid image URL format: https://imgur.com/2v1Pb1k
2025-06-29 21:13:51.052 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 달걀 2개를 삶아 잘게 으깬다.
   2. 으깬 달걀에 마요네즈(2큰술), 소금 약간, 후추 약간을 넣고 섞어 에그 샐러드를 만든다.
   3. 식빵 2장 위에 에그 샐러드를
2025-06-29 21:13:51.053 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Created recipe object for menu recommendation: 김치전
2025-06-29 21:13:51.053 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Parsed 5 menu recommendations
2025-06-29 21:13:51.063 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:13:51.069 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:13:51.074 [http-nio-8080-exec-1] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=false
2025-06-29 21:16:10.739 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:16:10.741 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:16:10.760 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:10.766 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:10.785 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.785 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.791 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.791 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.825 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:16:10.879 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:16:10.885 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:10.894 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.917 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:10.917 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.924 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:16:10.952 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:16:10.953 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:10.961 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.967 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.966 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:16:10.969 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:10.975 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.976 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:16:10.982 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:10.996 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:10.996 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:16:11.002 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:11.011 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:11.015 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:11.020 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:16:16.008 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:16:16.012 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:16.016 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:16.020 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:16.027 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:16:36.446 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:16:36.449 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:36.452 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:36.456 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:16:36.468 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:16:36.472 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:16:36.475 [http-nio-8080-exec-9] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=true
2025-06-29 21:16:36.475 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 에그 토스트 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 21:16:36.476 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:16:36.477 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:16:36.477 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:16:36.477 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 사용자 요청: 에그 토스트 레시피 알려줘
2025-06-29 21:16:36.478 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:16:36.478 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 21:16:36.480 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:16:36.482 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 21:16:36.482 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:16:36.482 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 에그 토스트 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 21:16:36.483 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:16:41.384 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:16:41.385 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 21:16:41.385 [http-nio-8080-exec-9] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 에그 토스트

2. 카테고리: 양식

3. 조리 시간: 15분

4. 조리 방법:
   1. 계란 2개를 볼에 담아 소금 한 꼬집을 넣고 곱게 풀어줍니다[1].
   2. 팬을 약불로 달군 후 버터 1/2큰술을 녹여줍니다[1][3].
   3. 계란물을 팬에 붓고, 식빵 한 장을 계란물이 위로 오도록 올려줍니다[1].
   4. 계란이 반쯤 익으면 식빵을 뒤집어 계란을 접어 식빵 크기에 맞춥니다[1].
   5. 그 위에 체다 치즈 1장과 (선택 사항) 슬라이스 햄 또는 베이컨 2장, 양상추 1장을 올려줍니다[1][3].
   6. 치즈가 녹을 때까지 구운 뒤, 잼 1큰술(선택 사항)을 가운데 올리고 식빵을 반으로 접어줍니다[1].
   7. 원하는 경우 파슬리 가루를 뿌려 마무리합니다[2].

5. 필요한 재료와 양:
   - 식빵 2장
   - 계란 2개
   - 버터 1/2큰술
   - 소금 한 꼬집
   - 체다 치즈 1장
   - 슬라이스 햄 또는 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 잼 1큰술(선택)
   - 파슬리 가루(선택)

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/1TSzrU1.jpg

8. 요리 팁:
   - 계란을 너무 익히지 않고 적당히 촉촉하게 두면 더 부드러운 식감을 즐길 수 있습니다.
   - 햄이나 베이컨은 미리 팬에 구워서 넣으면 더욱 풍미가 살아납니다.
   - 잼이나 소스는 기호에 따라 넣지 않아도 됩니다.
   - 빵이 흐트러지지 않게 계란을 최대한 빵 크기에 맞춰 정리해 주세요.
2025-06-29 21:16:41.391 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:16:41.398 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 양식
2025-06-29 21:16:41.398 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/1TSzrU1.jpg
2025-06-29 21:16:41.399 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/1TSzrU1.jpg
2025-06-29 21:16:41.399 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/1TSzrU1.jpg
2025-06-29 21:16:41.399 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 2장
   - 계란 2개
   - 버터 1/2큰술
   - 소금 한 꼬집
   - 체다 치즈 1장
   - 슬라이스 햄 또는 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 잼 1큰술(선택)
   - 파슬리 가루(선택)
2025-06-29 21:16:41.400 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 21:16:41.400 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 2장
2025-06-29 21:16:41.402 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 2장
2025-06-29 21:16:41.402 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 2장
2025-06-29 21:16:41.409 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:16:41.411 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-29 21:16:41.411 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 계란 2개
2025-06-29 21:16:41.412 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 계란, Amount: 2개
2025-06-29 21:16:41.412 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 계란, Amount: 2개
2025-06-29 21:16:41.415 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:16:41.416 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '계란' not found in DB. Skipping.
2025-06-29 21:16:41.416 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1/2큰술
2025-06-29 21:16:41.416 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1/2큰술
2025-06-29 21:16:41.416 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 한 꼬집
2025-06-29 21:16:41.416 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 한 꼬집
2025-06-29 21:16:41.416 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 체다 치즈 1장
2025-06-29 21:16:41.416 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 치즈, Amount: 1장
2025-06-29 21:16:41.416 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 치즈, Amount: 1장
2025-06-29 21:16:41.418 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:16:41.421 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found existing ingredient with ID: 2
2025-06-29 21:16:41.421 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 슬라이스 햄 또는 베이컨 2장(선택)
2025-06-29 21:16:41.422 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 베이컨, Amount: 2장
2025-06-29 21:16:41.422 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 베이컨, Amount: 2장
2025-06-29 21:16:41.424 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:16:41.424 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '베이컨' not found in DB. Skipping.
2025-06-29 21:16:41.424 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 양상추 1장(선택)
2025-06-29 21:16:41.425 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 양상추, Amount: 1장
2025-06-29 21:16:41.425 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 양상추, Amount: 1장
2025-06-29 21:16:41.426 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:16:41.427 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '양상추' not found in DB. Skipping.
2025-06-29 21:16:41.427 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 잼 1큰술(선택)
2025-06-29 21:16:41.427 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 잼, Amount: 1큰술
2025-06-29 21:16:41.427 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 잼, Amount: 1큰술
2025-06-29 21:16:41.430 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:16:41.431 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Ingredient '잼' not found in DB. Skipping.
2025-06-29 21:16:41.431 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 파슬리 가루(선택)
2025-06-29 21:16:41.431 [http-nio-8080-exec-9] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 파슬리 가루(선택)
2025-06-29 21:16:41.431 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 계란 2개를 볼에 담아 소금 한 꼬집을 넣고 곱게 풀어줍니다[1].
   2. 팬을 약불로 달군 후 버터 1/2큰술을 녹여줍니다[1][3].
   3. 계란물을 팬에 붓고, 
2025-06-29 21:16:41.431 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 21:16:41.431 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 2장
   - 계란 2개
   - 버터 1/2큰술
   - 소금 한 꼬집
   - 체다 치즈 1장
   - 슬라이스 햄 또는 베이컨 2장(선택)
   - 양상추 1장(선택)
   - 잼 1큰술(선택)
   - 파슬리 가루(선택)

조리 방법:
1. 계란 2개를 볼에 담아 소금 한 꼬집을 넣고 곱게 풀어줍니다[1].
   2. 팬을 약불로 달군 후 버터 1/2큰술을 녹여줍니다[1][3].
   3. 계란물을 팬에 붓고, 식빵 한 장을 계란물이 위로 오도록 올려줍니다[1].
   4. 계란이 반쯤 익으면 식빵을 뒤집어 계란을 접어 식빵 크기에 맞춥니다[1].
   5. 그 위에 체다 치즈 1장과 (선택 사항) 슬라이스 햄 또는 베이컨 2장, 양상추 1장을 올려줍니다[1][3].
   6. 치즈가 녹을 때까지 구운 뒤, 잼 1큰술(선택 사항)을 가운데 올리고 식빵을 반으로 접어줍니다[1].
   7. 원하는 경우 파슬리 가루를 뿌려 마무리합니다[2].
2025-06-29 21:16:41.433 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 21:16:41.435 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 에그 토스트
2025-06-29 21:16:41.462 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 21:16:41.465 [http-nio-8080-exec-9] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 118
2025-06-29 21:16:41.469 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:16:41.470 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:16:41.471 [http-nio-8080-exec-9] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=false
2025-06-29 21:18:55.599 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:18:55.609 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:18:55.615 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:18:55.617 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:18:55.631 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:18:55.640 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:18:55.642 [http-nio-8080-exec-10] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=true
2025-06-29 21:18:55.642 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 김치전 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 21:18:55.645 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:18:55.649 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:18:55.651 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:18:55.651 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 사용자 요청: 김치전 레시피 알려줘
2025-06-29 21:18:55.651 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:18:55.651 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 21:18:55.662 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:18:55.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 21:18:55.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:18:55.676 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 김치전 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 21:18:55.677 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:19:01.100 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:19:01.100 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 21:19:01.100 [http-nio-8080-exec-10] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 김치전

2. 카테고리: 한식

3. 조리 시간: 20분

4. 조리 방법:
   1. 김치는 볼에 넣고 가위로 잘게 썰어 준비합니다.
   2. 썬 김치에 감칠맛을 더하기 위해 설탕 1/2큰술, 고춧가루 1큰술을 넣고 잘 섞습니다[1].
   3. 대파 1/2대는 송송 썰어 함께 준비합니다[1].
   4. 볼에 부침가루 2컵, 썬 김치 2컵, 김치국물 1/3컵, 물 2컵을 넣고 고루 섞습니다[1][3][4].
   5. 다진마늘 1/2큰술을 넣고 섞으면 기본 반죽이 완성됩니다[3].
   6. 팬을 예열한 후 식용유를 넉넉히 두르고 반죽을 한 국자씩 팬에 올려 얇게 펴줍니다.
   7. 중불에서 앞뒤로 노릇하게 구워줍니다. 팬에 한 번에 너무 많이 올리지 않도록 주의합니다.
   8. 바삭하게 먹고 싶다면 기름을 넉넉하게 두르고, 한 면이 익을 때는 가만히 두었다가 뒤집으세요.

5. 필요한 재료와 양:
   - 김치 2컵 (잘게 썬 것)
   - 부침가루 2컵
   - 물 2컵
   - 김치국물 1/3컵
   - 설탕 1/2큰술
   - 고춧가루 1큰술
   - 대파 1/2대
   - 다진마늘 1/2큰술
   - 식용유 적당량

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/5RUjUFh.jpg

8. 요리 팁:
   - 김치전은 김치가 어느 정도 묵은 것이 맛이 더 좋으며, 신김치를 사용하면 더욱 감칠맛이 납니다.
   - 반죽이 너무 묽으면 바삭하지 않고, 너무 되면 뻑뻑하므로 부침가루와 물의 양은 김치의 수분 상태에 따라 조금씩 조절하세요.
   - 바삭하게 구우려면 기름은 충분하게 두르고, 한 번 익힐 때 가급적 반죽을 많이 뒤적이지 마세요.
   - 부침가루 대신 밀가루와 튀김가루를 1:1로 섞어 사용해도 좋습니다[1][2][4].
2025-06-29 21:19:01.107 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:19:01.109 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 21:19:01.109 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/5RUjUFh.jpg
2025-06-29 21:19:01.110 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/5RUjUFh.jpg
2025-06-29 21:19:01.110 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/5RUjUFh.jpg
2025-06-29 21:19:01.110 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 김치 2컵 (잘게 썬 것)
   - 부침가루 2컵
   - 물 2컵
   - 김치국물 1/3컵
   - 설탕 1/2큰술
   - 고춧가루 1큰술
   - 대파 1/2대
   - 다진마늘 1/2큰술
   - 식용유 적당량
2025-06-29 21:19:01.110 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 21:19:01.110 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 김치 2컵 (잘게 썬 것)
2025-06-29 21:19:01.110 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 김치, Amount: 2컵
2025-06-29 21:19:01.110 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 김치, Amount: 2컵
2025-06-29 21:19:01.114 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:01.116 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '김치' not found in DB. Skipping.
2025-06-29 21:19:01.116 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 부침가루 2컵
2025-06-29 21:19:01.116 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 부침가루, Amount: 2컵
2025-06-29 21:19:01.116 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 부침가루, Amount: 2컵
2025-06-29 21:19:01.120 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:01.122 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '부침가루' not found in DB. Skipping.
2025-06-29 21:19:01.122 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 2컵
2025-06-29 21:19:01.122 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 2컵
2025-06-29 21:19:01.122 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 2컵
2025-06-29 21:19:01.124 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:01.125 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 21:19:01.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 김치국물 1/3컵
2025-06-29 21:19:01.125 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 김치국물 1/3컵
2025-06-29 21:19:01.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1/2큰술
2025-06-29 21:19:01.125 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 설탕 1/2큰술
2025-06-29 21:19:01.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 1큰술
2025-06-29 21:19:01.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 1큰술
2025-06-29 21:19:01.125 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 1큰술
2025-06-29 21:19:01.126 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/2대
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/2대
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진마늘 1/2큰술
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진마늘 1/2큰술
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유 적당량
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유 적당량
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 김치는 볼에 넣고 가위로 잘게 썰어 준비합니다.
   2. 썬 김치에 감칠맛을 더하기 위해 설탕 1/2큰술, 고춧가루 1큰술을 넣고 잘 섞습니다[1].
   3. 대파 1/2
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 21:19:01.127 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 김치 2컵 (잘게 썬 것)
   - 부침가루 2컵
   - 물 2컵
   - 김치국물 1/3컵
   - 설탕 1/2큰술
   - 고춧가루 1큰술
   - 대파 1/2대
   - 다진마늘 1/2큰술
   - 식용유 적당량

조리 방법:
1. 김치는 볼에 넣고 가위로 잘게 썰어 준비합니다.
   2. 썬 김치에 감칠맛을 더하기 위해 설탕 1/2큰술, 고춧가루 1큰술을 넣고 잘 섞습니다[1].
   3. 대파 1/2대는 송송 썰어 함께 준비합니다[1].
   4. 볼에 부침가루 2컵, 썬 김치 2컵, 김치국물 1/3컵, 물 2컵을 넣고 고루 섞습니다[1][3][4].
   5. 다진마늘 1/2큰술을 넣고 섞으면 기본 반죽이 완성됩니다[3].
   6. 팬을 예열한 후 식용유를 넉넉히 두르고 반죽을 한 국자씩 팬에 올려 얇게 펴줍니다.
   7. 중불에서 앞뒤로 노릇하게 구워줍니다. 팬에 한 번에 너무 많이 올리지 않도록 주의합니다.
   8. 바삭하게 먹고 싶다면 기름을 넉넉하게 두르고, 한 면이 익을 때는 가만히 두었다가 뒤집으세요.
2025-06-29 21:19:01.129 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 21:19:01.130 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 김치전
2025-06-29 21:19:01.130 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 21:19:01.132 [http-nio-8080-exec-10] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 119
2025-06-29 21:19:01.133 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:19:01.135 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:19:01.136 [http-nio-8080-exec-10] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=false
2025-06-29 21:19:01.292 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:19:01.294 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:19:01.300 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:19:01.305 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:19:01.309 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:19:01.312 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:19:01.313 [http-nio-8080-exec-1] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=true
2025-06-29 21:19:01.314 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 닭날개구이 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 21:19:01.314 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:19:01.315 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:19:01.315 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:19:01.315 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 닭날개구이 레시피 알려줘
2025-06-29 21:19:01.315 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:19:01.315 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 21:19:01.320 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:19:01.322 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 21:19:01.322 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:19:01.322 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 닭날개구이 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 21:19:01.322 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:19:12.660 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:19:12.661 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 21:19:12.662 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 닭날개구이

2. 카테고리: 한식

3. 조리 시간: 약 40분

4. 조리 방법:
   1. 닭날개를 깨끗이 씻어 물기를 제거합니다.
   2. 소금, 후추, 허브솔트로 밑간을 해줍니다. 포크로 닭날개를 콕콕 찔러 양념이 잘 배게 준비합니다[1].
   3. 볼에 한라봉마말레이드(또는 오렌지/유자마말레이드), 간장, 굴소스, 미림, 다진 마늘, 소금, 후추를 모두 넣고 잘 섞어 양념장을 만듭니다[1].
   4. 밑간한 닭날개에 양념장을 넣고 골고루 버무립니다[1].
   5. 에어프라이어 또는 오븐을 200도로 예열한 뒤 닭날개를 겹치지 않게 올립니다[1].
   6. 200도에서 10분간 굽고, 뒤집어서 다시 10분간 더 구워줍니다[1].
   7. 완전히 익으면 꺼내어 바로 먹습니다.

5. 필요한 재료와 양:
   - 닭날개 10~20개
   - 한라봉마말레이드(또는 오렌지/유자마말레이드) 2큰술
   - 간장 2큰술
   - 미림 1큰술
   - 굴소스 1큰술
   - 다진 마늘 1큰술
   - 소금 1작은술
   - 후추 약간
   - 허브솔트 약간 (선택)[1]

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/gFq2Kxu.jpg

8. 요리 팁:
   - 에어프라이어 바스켓에 종이호일을 깔면 청소가 쉽고, 닭날개가 타지 않습니다.
   - 닭날개를 구울 때 절반 정도 됐을 때 뒤집으면 더 고르게 익고, 바삭하게 즐길 수 있습니다.
   - 마말레이드가 없다면 꿀이나 올리고당을 약간 추가해도 풍미가 좋습니다.
2025-06-29 21:19:12.683 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:19:12.698 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 21:19:12.698 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/gFq2Kxu.jpg
2025-06-29 21:19:12.699 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/gFq2Kxu.jpg
2025-06-29 21:19:12.699 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/gFq2Kxu.jpg
2025-06-29 21:19:12.699 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 닭날개 10~20개
   - 한라봉마말레이드(또는 오렌지/유자마말레이드) 2큰술
   - 간장 2큰술
   - 미림 1큰술
   - 굴소스 1큰술
   - 다진 마늘 1큰술
   - 소금 1작은술
   - 후추 약간
   - 허브솔트 약간 (선택)[1]
2025-06-29 21:19:12.699 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 21:19:12.699 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 닭날개 10~20개
2025-06-29 21:19:12.699 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 닭날개 10~20개
2025-06-29 21:19:12.699 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 한라봉마말레이드(또는 오렌지/유자마말레이드) 2큰술
2025-06-29 21:19:12.700 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 한라봉마말레이드(또는 오렌지/유자마말레이드) 2큰술
2025-06-29 21:19:12.700 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2큰술
2025-06-29 21:19:12.700 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2큰술
2025-06-29 21:19:12.700 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2큰술
2025-06-29 21:19:12.701 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:12.704 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 21:19:12.704 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미림 1큰술
2025-06-29 21:19:12.704 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 미림, Amount: 1큰술
2025-06-29 21:19:12.704 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 미림, Amount: 1큰술
2025-06-29 21:19:12.705 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:12.706 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '미림' not found in DB. Skipping.
2025-06-29 21:19:12.706 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굴소스 1큰술
2025-06-29 21:19:12.707 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 굴소스, Amount: 1큰술
2025-06-29 21:19:12.707 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 굴소스, Amount: 1큰술
2025-06-29 21:19:12.708 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:12.708 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '굴소스' not found in DB. Skipping.
2025-06-29 21:19:12.708 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-29 21:19:12.708 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-29 21:19:12.708 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-29 21:19:12.709 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:12.710 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 21:19:12.710 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1작은술
2025-06-29 21:19:12.711 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소금, Amount: 1작은술
2025-06-29 21:19:12.711 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 1작은술
2025-06-29 21:19:12.712 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:12.712 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-29 21:19:12.712 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 21:19:12.713 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 21:19:12.713 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 허브솔트 약간 (선택)[1]
2025-06-29 21:19:12.713 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 허브솔트 약간 (선택)[1]
2025-06-29 21:19:12.713 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 닭날개를 깨끗이 씻어 물기를 제거합니다.
   2. 소금, 후추, 허브솔트로 밑간을 해줍니다. 포크로 닭날개를 콕콕 찔러 양념이 잘 배게 준비합니다[1].
   3. 볼에 한
2025-06-29 21:19:12.713 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 21:19:12.713 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 닭날개 10~20개
   - 한라봉마말레이드(또는 오렌지/유자마말레이드) 2큰술
   - 간장 2큰술
   - 미림 1큰술
   - 굴소스 1큰술
   - 다진 마늘 1큰술
   - 소금 1작은술
   - 후추 약간
   - 허브솔트 약간 (선택)[1]

조리 방법:
1. 닭날개를 깨끗이 씻어 물기를 제거합니다.
   2. 소금, 후추, 허브솔트로 밑간을 해줍니다. 포크로 닭날개를 콕콕 찔러 양념이 잘 배게 준비합니다[1].
   3. 볼에 한라봉마말레이드(또는 오렌지/유자마말레이드), 간장, 굴소스, 미림, 다진 마늘, 소금, 후추를 모두 넣고 잘 섞어 양념장을 만듭니다[1].
   4. 밑간한 닭날개에 양념장을 넣고 골고루 버무립니다[1].
   5. 에어프라이어 또는 오븐을 200도로 예열한 뒤 닭날개를 겹치지 않게 올립니다[1].
   6. 200도에서 10분간 굽고, 뒤집어서 다시 10분간 더 구워줍니다[1].
   7. 완전히 익으면 꺼내어 바로 먹습니다.
2025-06-29 21:19:12.714 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 21:19:12.715 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 닭날개구이
2025-06-29 21:19:12.717 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 21:19:12.718 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 120
2025-06-29 21:19:12.720 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:19:12.723 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:19:12.724 [http-nio-8080-exec-1] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=false
2025-06-29 21:19:19.791 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:19:19.804 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:19:19.810 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:19:19.814 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:19:19.819 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:19:19.823 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:19:19.824 [http-nio-8080-exec-2] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=true
2025-06-29 21:19:19.825 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 김치전 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 21:19:19.827 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:19:19.828 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:19:19.828 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:19:19.828 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 사용자 요청: 김치전 레시피 알려줘
2025-06-29 21:19:19.828 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:19:19.829 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 21:19:19.831 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:19:19.835 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 21:19:19.835 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:19:19.835 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 김치전 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 21:19:19.835 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:19:33.724 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:19:33.729 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 21:19:33.731 [http-nio-8080-exec-2] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 김치전

2. 카테고리: 한식

3. 조리 시간: 20분

4. 조리 방법:
   1. 김치(배추김치 1/4포기, 약 2컵 분량)는 깨끗이 씻은 후 가위로 잘게 썰어 준비합니다.
   2. 볼에 김치, 부침가루 2컵, 물 2컵, 김치국물 1/3컵, 설탕 1/2큰술, 고춧가루 1큰술, 다진마늘 1/2스푼을 넣고 잘 섞습니다[1][3].
   3. 대파(1/2대)는 송송 썰어 함께 넣고 섞어줍니다[1].
   4. 반죽 농도가 너무 뻑뻑하면 물을 한두 스푼 더 추가해서 조절합니다.
   5. 달궈진 프라이팬에 식용유를 넉넉히 두르고, 반죽을 얇게 펼쳐 중불에서 앞뒤로 노릇하게 부쳐줍니다[2][3].
   6. 완성된 김치전을 키친타월에 올려 남은 기름을 제거한 후 접시에 담아냅니다.

5. 필요한 재료와 양:
   - 배추김치 2컵(1/4포기 분량)
   - 부침가루 2컵
   - 물 2컵
   - 김치국물 1/3컵
   - 설탕 1/2큰술
   - 고춧가루 1큰술
   - 다진마늘 1/2스푼
   - 대파 1/2대
   - 식용유(부침용 적당량)

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/PXCBdvj.jpg

8. 요리 팁:
   - 김치국물을 넣으면 감칠맛과 색감이 더 살아납니다.
   - 부침가루 대신 밀가루를 쓸 경우, 소금 약간 추가가 필요합니다.
   - 반죽은 너무 묽지 않게, 떠도 흐르지 않을 정도가 적당합니다.
   - 불을 너무 세게 하면 금방 타기 쉬우므로 중불에서 천천히 부치는 것이 바삭하게 만드는 비결입니다.

**알레르기 주의:** 새우는 전통 김치전에는 들어가지 않으며, 제시한 레시피에는 새우가 포함되어 있지 않습니다.
2025-06-29 21:19:33.742 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:19:33.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 21:19:33.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/PXCBdvj.jpg
2025-06-29 21:19:33.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/PXCBdvj.jpg
2025-06-29 21:19:33.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/PXCBdvj.jpg
2025-06-29 21:19:33.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 배추김치 2컵(1/4포기 분량)
   - 부침가루 2컵
   - 물 2컵
   - 김치국물 1/3컵
   - 설탕 1/2큰술
   - 고춧가루 1큰술
   - 다진마늘 1/2스푼
   - 대파 1/2대
   - 식용유(부침용 적당량)
2025-06-29 21:19:33.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 9
2025-06-29 21:19:33.762 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 배추김치 2컵(1/4포기 분량)
2025-06-29 21:19:33.763 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 배추김치, Amount: 2컵
2025-06-29 21:19:33.763 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 배추김치, Amount: 2컵
2025-06-29 21:19:33.765 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:33.766 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '배추김치' not found in DB. Skipping.
2025-06-29 21:19:33.766 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 부침가루 2컵
2025-06-29 21:19:33.766 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 부침가루, Amount: 2컵
2025-06-29 21:19:33.766 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 부침가루, Amount: 2컵
2025-06-29 21:19:33.769 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:33.771 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '부침가루' not found in DB. Skipping.
2025-06-29 21:19:33.771 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물 2컵
2025-06-29 21:19:33.771 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 물, Amount: 2컵
2025-06-29 21:19:33.771 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 물, Amount: 2컵
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '물' not found in DB. Skipping.
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 김치국물 1/3컵
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 김치국물 1/3컵
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1/2큰술
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 설탕 1/2큰술
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 1큰술
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 1큰술
2025-06-29 21:19:33.772 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 1큰술
2025-06-29 21:19:33.773 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진마늘 1/2스푼
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 다진마늘 1/2스푼
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 대파 1/2대
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 대파 1/2대
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식용유(부침용 적당량)
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 식용유(부침용 적당량)
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 김치(배추김치 1/4포기, 약 2컵 분량)는 깨끗이 씻은 후 가위로 잘게 썰어 준비합니다.
   2. 볼에 김치, 부침가루 2컵, 물 2컵, 김치국물 1/3컵, 설탕 1/2큰
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 21:19:33.774 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 배추김치 2컵(1/4포기 분량)
   - 부침가루 2컵
   - 물 2컵
   - 김치국물 1/3컵
   - 설탕 1/2큰술
   - 고춧가루 1큰술
   - 다진마늘 1/2스푼
   - 대파 1/2대
   - 식용유(부침용 적당량)

조리 방법:
1. 김치(배추김치 1/4포기, 약 2컵 분량)는 깨끗이 씻은 후 가위로 잘게 썰어 준비합니다.
   2. 볼에 김치, 부침가루 2컵, 물 2컵, 김치국물 1/3컵, 설탕 1/2큰술, 고춧가루 1큰술, 다진마늘 1/2스푼을 넣고 잘 섞습니다[1][3].
   3. 대파(1/2대)는 송송 썰어 함께 넣고 섞어줍니다[1].
   4. 반죽 농도가 너무 뻑뻑하면 물을 한두 스푼 더 추가해서 조절합니다.
   5. 달궈진 프라이팬에 식용유를 넉넉히 두르고, 반죽을 얇게 펼쳐 중불에서 앞뒤로 노릇하게 부쳐줍니다[2][3].
   6. 완성된 김치전을 키친타월에 올려 남은 기름을 제거한 후 접시에 담아냅니다.
2025-06-29 21:19:33.775 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 21:19:33.778 [http-nio-8080-exec-2] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 김치전
2025-06-29 21:19:33.779 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:19:33.782 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:19:33.784 [http-nio-8080-exec-2] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=false
2025-06-29 21:20:53.166 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:20:53.223 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:20:53.228 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:20:53.232 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:20:53.243 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:20:53.249 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:20:53.257 [http-nio-8080-exec-4] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=true
2025-06-29 21:20:53.258 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 닭날개구이 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 21:20:53.260 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:20:53.272 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:20:53.273 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:20:53.273 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 사용자 요청: 닭날개구이 레시피 알려줘
2025-06-29 21:20:53.273 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:20:53.273 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 21:20:53.276 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:20:53.278 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 21:20:53.278 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:20:53.278 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 닭날개구이 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 21:20:53.278 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:20:58.799 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:20:58.799 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 21:20:58.799 [http-nio-8080-exec-4] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 닭날개구이

2. 카테고리: 한식

3. 조리 시간: 약 40분

4. 조리 방법:
   1. 닭날개를 깨끗이 씻은 뒤, 물기를 제거합니다.
   2. 닭날개에 소금, 후추, 맛술(또는 청주), 다진 마늘을 넣고 30분 정도 밑간해 둡니다[2][3][4].
   3. 양념장(간장, 굴소스, 마늘, 미림, 마말레이드 또는 케찹, 물엿, 고추장, 고춧가루 등 취향에 따라)을 잘 섞어 준비합니다[1][3].
   4. 밑간한 닭날개에 포크로 몇 군데 콕콕 찔러 양념이 잘 스며들게 합니다[1].
   5. 준비한 양념장과 닭날개를 볼에 모두 넣고 잘 버무립니다.
   6. 오븐이나 에어프라이어에서 200도(혹은 180도)로 예열한 뒤, 닭날개를 넣고 앞면 15~20분, 뒷면 15분 정도 노릇하게 굽습니다[1][2].
   7. 한 번 뒤집어서 양쪽이 고루 익도록 한 번 더 구워줍니다.

5. 필요한 재료와 양:
   - 닭날개 10~12개
   - 소금 1작은술
   - 후추 약간
   - 맛술(청주) 1~2큰술
   - 다진 마늘 1큰술
   - 간장 2큰술
   - 굴소스 1큰술 (또는 없이도 가능)
   - 미림 1큰술
   - 마말레이드(혹은 케찹) 2큰술
   - 물엿 2~4큰술 (또는 꿀/올리고당)
   - 고추장 1큰술 (매운맛 원할 경우)
   - 고춧가루 1큰술 (매운맛 원할 경우)
   - (선택) 생강즙 약간

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/aTrZQAv.jpg

8. 요리 팁:
   - 닭날개 굽기 전 포크로 찔러주면 양념이 더 잘 배고, 식감이 부드러워집니다.
   - 오븐/에어프라이어마다 세기가 다르니, 중간에 색깔을 확인하며 시간과 온도를 조절하세요.
   - 굴소스와 마말레이드가 없을 경우 케찹/올리고당으로 대체해도 맛있게 즐길 수 있습니다.

*본 레시피에는 새우 등 알레르기 유발 재료가 포함되어 있지 않습니다.*
2025-06-29 21:20:58.805 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/aTrZQAv.jpg
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/aTrZQAv.jpg
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/aTrZQAv.jpg
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 닭날개 10~12개
   - 소금 1작은술
   - 후추 약간
   - 맛술(청주) 1~2큰술
   - 다진 마늘 1큰술
   - 간장 2큰술
   - 굴소스 1큰술 (또는 없이도 가능)
   - 미림 1큰술
   - 마말레이드(혹은 케찹) 2큰술
   - 물엿 2~4큰술 (또는 꿀/올리고당)
   - 고추장 1큰술 (매운맛 원할 경우)
   - 고춧가루 1큰술 (매운맛 원할 경우)
   - (선택) 생강즙 약간
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 13
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 닭날개 10~12개
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 닭날개 10~12개
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 1작은술
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 소금, Amount: 1작은술
2025-06-29 21:20:58.806 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 소금, Amount: 1작은술
2025-06-29 21:20:58.808 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:20:58.810 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '소금' not found in DB. Skipping.
2025-06-29 21:20:58.810 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 후추 약간
2025-06-29 21:20:58.811 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 후추 약간
2025-06-29 21:20:58.811 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 맛술(청주) 1~2큰술
2025-06-29 21:20:58.811 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 맛술(청주) 1~2큰술
2025-06-29 21:20:58.811 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 다진 마늘 1큰술
2025-06-29 21:20:58.811 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 마늘, Amount: 1큰술
2025-06-29 21:20:58.811 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 마늘, Amount: 1큰술
2025-06-29 21:20:58.813 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:20:58.814 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '마늘' not found in DB. Skipping.
2025-06-29 21:20:58.814 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 간장 2큰술
2025-06-29 21:20:58.814 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 간장, Amount: 2큰술
2025-06-29 21:20:58.814 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 간장, Amount: 2큰술
2025-06-29 21:20:58.815 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:20:58.815 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '간장' not found in DB. Skipping.
2025-06-29 21:20:58.815 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 굴소스 1큰술 (또는 없이도 가능)
2025-06-29 21:20:58.816 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 굴소스, Amount: 1큰술
2025-06-29 21:20:58.816 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 굴소스, Amount: 1큰술
2025-06-29 21:20:58.826 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:20:58.827 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '굴소스' not found in DB. Skipping.
2025-06-29 21:20:58.827 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 미림 1큰술
2025-06-29 21:20:58.828 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 미림, Amount: 1큰술
2025-06-29 21:20:58.828 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 미림, Amount: 1큰술
2025-06-29 21:20:58.830 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:20:58.831 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '미림' not found in DB. Skipping.
2025-06-29 21:20:58.831 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 마말레이드(혹은 케찹) 2큰술
2025-06-29 21:20:58.831 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 마말레이드(혹은 케찹) 2큰술
2025-06-29 21:20:58.831 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 물엿 2~4큰술 (또는 꿀/올리고당)
2025-06-29 21:20:58.831 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 물엿 2~4큰술 (또는 꿀/올리고당)
2025-06-29 21:20:58.831 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고추장 1큰술 (매운맛 원할 경우)
2025-06-29 21:20:58.831 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고추장, Amount: 1큰술
2025-06-29 21:20:58.831 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고추장, Amount: 1큰술
2025-06-29 21:20:58.833 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:20:58.834 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '고추장' not found in DB. Skipping.
2025-06-29 21:20:58.834 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 고춧가루 1큰술 (매운맛 원할 경우)
2025-06-29 21:20:58.834 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 고춧가루, Amount: 1큰술
2025-06-29 21:20:58.834 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 고춧가루, Amount: 1큰술
2025-06-29 21:20:58.835 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:20:58.836 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Ingredient '고춧가루' not found in DB. Skipping.
2025-06-29 21:20:58.836 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: (선택) 생강즙 약간
2025-06-29 21:20:58.836 [http-nio-8080-exec-4] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: (선택) 생강즙 약간
2025-06-29 21:20:58.836 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 닭날개를 깨끗이 씻은 뒤, 물기를 제거합니다.
   2. 닭날개에 소금, 후추, 맛술(또는 청주), 다진 마늘을 넣고 30분 정도 밑간해 둡니다[2][3][4].
   3. 
2025-06-29 21:20:58.836 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 21:20:58.836 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 닭날개 10~12개
   - 소금 1작은술
   - 후추 약간
   - 맛술(청주) 1~2큰술
   - 다진 마늘 1큰술
   - 간장 2큰술
   - 굴소스 1큰술 (또는 없이도 가능)
   - 미림 1큰술
   - 마말레이드(혹은 케찹) 2큰술
   - 물엿 2~4큰술 (또는 꿀/올리고당)
   - 고추장 1큰술 (매운맛 원할 경우)
   - 고춧가루 1큰술 (매운맛 원할 경우)
   - (선택) 생강즙 약간

조리 방법:
1. 닭날개를 깨끗이 씻은 뒤, 물기를 제거합니다.
   2. 닭날개에 소금, 후추, 맛술(또는 청주), 다진 마늘을 넣고 30분 정도 밑간해 둡니다[2][3][4].
   3. 양념장(간장, 굴소스, 마늘, 미림, 마말레이드 또는 케찹, 물엿, 고추장, 고춧가루 등 취향에 따라)을 잘 섞어 준비합니다[1][3].
   4. 밑간한 닭날개에 포크로 몇 군데 콕콕 찔러 양념이 잘 스며들게 합니다[1].
   5. 준비한 양념장과 닭날개를 볼에 모두 넣고 잘 버무립니다.
   6. 오븐이나 에어프라이어에서 200도(혹은 180도)로 예열한 뒤, 닭날개를 넣고 앞면 15~20분, 뒷면 15분 정도 노릇하게 굽습니다[1][2].
   7. 한 번 뒤집어서 양쪽이 고루 익도록 한 번 더 구워줍니다.
2025-06-29 21:20:58.837 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 21:20:58.838 [http-nio-8080-exec-4] INFO  a.s.k.p.service.PerplexityService - Found existing recipe with same title: 닭날개구이
2025-06-29 21:20:58.838 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:20:58.840 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:20:58.841 [http-nio-8080-exec-4] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=false
2025-06-29 21:21:39.733 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:21:39.733 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:21:39.741 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:39.741 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:39.756 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.756 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.758 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.758 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.768 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:21:39.773 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:39.804 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:21:39.804 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:21:39.805 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:39.806 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:39.824 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.834 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.834 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.836 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.839 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:21:39.840 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:39.859 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:21:39.861 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:39.864 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.869 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.873 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:21:39.889 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:21:39.891 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:39.893 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.895 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:39.897 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:21:41.710 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:21:41.714 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:21:41.723 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:41.725 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:21:41.739 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:22:49.214 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:22:49.221 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:22:49.227 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:22:49.230 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:22:49.240 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:22:49.246 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:22:49.254 [http-nio-8080-exec-1] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=true
2025-06-29 21:22:49.254 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting getResponse for userId: 8, prompt: 팬을 약불로 달군 후 버터 1/2큰술을 녹여줍니다[1][3]. 레시피 알려줘, useRefrigerator: false, isSpecificRecipe: true, retry: 0
2025-06-29 21:22:49.254 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:22:49.257 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 시작 ===
2025-06-29 21:22:49.257 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 ID: 8
2025-06-29 21:22:49.257 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 사용자 요청: 팬을 약불로 달군 후 버터 1/2큰술을 녹여줍니다[1][3]. 레시피 알려줘
2025-06-29 21:22:49.257 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 냉장고 사용 여부: false
2025-06-29 21:22:49.257 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 특정 레시피 요청 여부: true
2025-06-29 21:22:49.264 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:22:49.266 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 요청 유형: 특정 레시피 요청
2025-06-29 21:22:49.266 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 최종 생성된 프롬프트 ===
2025-06-29 21:22:49.266 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - 당신은 레시피 전문가입니다. 사용자가 요청한 특정 요리의 상세한 레시피를 제공해주세요.

## 사용자 요청 (2순위)
요청: 팬을 약불로 달군 후 버터 1/2큰술을 녹여줍니다[1][3]. 레시피 알려줘
**중요**: 위 요청에 맞는 특정 요리의 상세한 레시피를 제공해주세요.

## 알레르기 정보 (3순위)
사용자 알레르기: 새우
**중요**: 요청한 요리에 위 알레르기 재료가 포함되어 있다면, '알레르기 재료가 포함되어 섭취할 수 없습니다'라고 명시하고 대체 레시피를 제안하세요.

## 사용자 선호도 (4순위 - 참고사항)
- 나이: 25세
- 성별: 남성
- 건강 상태: 아침에 밥먹으면 배아파요
- 선호도: 한식
**참고**: 위 정보는 참고사항이며, 보유 재료와 사용자 요청이 우선입니다.

## 레시피 형식
**반드시 다음 형식으로 정확히 제공해주세요. 모든 섹션을 빠짐없이 포함해야 합니다:**

1. 요리 이름: [요리명]
2. 카테고리: [한식/중식/일식/양식/분식/기타]
3. 조리 시간: [분]
4. 조리 방법:
   1. 첫 번째 단계 (구체적인 조리 방법)
   2. 두 번째 단계 (구체적인 조리 방법)
   3. 세 번째 단계 (구체적인 조리 방법)
   ...

5. 필요한 재료와 양:
   - 재료명과 양
   - 재료명과 양
   ...

6. 난이도: [상/중/하]
7. 이미지 URL: [실제 요리 이미지 URL]
   **중요**: Imgur (https://imgur.com) 사이트에서만 해당 요리의 이미지를 찾아주세요.
   **중요**: Imgur에서 요리명으로 검색하여 실제 존재하는 요리 이미지의 URL을 제공해주세요.
   **예시**: https://i.imgur.com/example.jpg
   **참고**: 이는 교육 및 개인 학습 목적으로만 사용되며, 상업적 목적이 아닙니다.
8. 요리 팁:
   - 팁이나 주의사항
   - 팁이나 주의사항

**필수**: 반드시 위의 8개 섹션을 모두 포함해주세요. 1번부터 8번까지 빠짐없이 작성해야 합니다.
**중요**: 재료는 5번에서만 나열하고, 4번 조리 방법에서는 실제 조리 단계만 설명해주세요.
**중요**: 7번 이미지 URL은 인터넷 검색을 통해 실제 요리 이미지의 URL을 제공해주세요. (교육/개인 목적)
**경고**: 섹션이 누락되면 답변하지 마세요. 모든 섹션이 완성된 레시피만 제공해주세요.

2025-06-29 21:22:49.267 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PromptService - === 프롬프트 생성 완료 ===
2025-06-29 21:22:53.521 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - === AI 응답 파싱 완료 ===
2025-06-29 21:22:53.521 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Starting to parse recipe response (retry: 0)
2025-06-29 21:22:53.521 [http-nio-8080-exec-1] DEBUG a.s.k.p.service.PerplexityService - Content to parse: 1. 요리 이름: 프렌치 토스트

2. 카테고리: 한식

3. 조리 시간: 15분

4. 조리 방법:
   1. 팬을 약불로 달군 후 버터 1/2큰술을 넣어 녹여줍니다.
   2. 볼에 달걀 1개, 우유 3큰술, 설탕 1큰술, 소금 한 꼬집을 넣고 잘 섞어줍니다.
   3. 식빵 2장을 준비해 달걀물에 앞뒤로 충분히 적십니다.
   4. 버터가 녹은 팬에 달걀물에 적신 식빵을 올려 양면이 노릇하게 구워줍니다.
   5. 원한다면 구운 식빵 위에 추가로 설탕이나 시나몬을 뿌려 마무리합니다.

5. 필요한 재료와 양:
   - 식빵 2장
   - 달걀 1개
   - 우유 3큰술
   - 설탕 1큰술
   - 소금 한 꼬집
   - 버터 1/2큰술

6. 난이도: 하

7. 이미지 URL: https://i.imgur.com/PTNdmDg.jpg

8. 요리 팁:
   - 팬을 약불로 유지하면 버터가 타지 않고 빵이 천천히 노릇해집니다.
   - 설탕 대신 꿀이나 시럽을 곁들여도 좋습니다.
   - 식빵 대신 바게트 등 다른 빵을 사용해도 풍미가 색다릅니다.

**해당 레시피에는 새우 등 알레르기 유발 재료가 포함되어 있지 않습니다. 안심하고 드실 수 있습니다.**
2025-06-29 21:22:53.529 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        up1_0.id,
        up1_0.age,
        up1_0.allergy,
        up1_0.created_at,
        up1_0.gender,
        up1_0.health_status,
        up1_0.is_pregnant,
        up1_0.name,
        up1_0.nickname,
        up1_0.preference,
        up1_0.updated_at,
        up1_0.user_id 
    from
        user_prompt up1_0 
    where
        up1_0.user_id=?
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found category from AI response: 한식
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL from AI response (Pattern 7): https://i.imgur.com/PTNdmDg.jpg
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Valid Imgur image URL found: https://i.imgur.com/PTNdmDg.jpg
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found image URL: https://i.imgur.com/PTNdmDg.jpg
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found ingredients text: - 식빵 2장
   - 달걀 1개
   - 우유 3큰술
   - 설탕 1큰술
   - 소금 한 꼬집
   - 버터 1/2큰술
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Number of ingredient lines: 6
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 식빵 2장
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 식빵, Amount: 2장
2025-06-29 21:22:53.532 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 식빵, Amount: 2장
2025-06-29 21:22:53.536 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:22:53.538 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '식빵' not found in DB. Skipping.
2025-06-29 21:22:53.538 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 달걀 1개
2025-06-29 21:22:53.538 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 달걀, Amount: 1개
2025-06-29 21:22:53.538 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 달걀, Amount: 1개
2025-06-29 21:22:53.539 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:22:53.539 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '달걀' not found in DB. Skipping.
2025-06-29 21:22:53.540 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 우유 3큰술
2025-06-29 21:22:53.540 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 우유, Amount: 3큰술
2025-06-29 21:22:53.540 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 우유, Amount: 3큰술
2025-06-29 21:22:53.541 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:22:53.542 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '우유' not found in DB. Skipping.
2025-06-29 21:22:53.542 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 설탕 1큰술
2025-06-29 21:22:53.542 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Pattern 2 matched - Name: 설탕, Amount: 1큰술
2025-06-29 21:22:53.542 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found valid ingredient - Name: 설탕, Amount: 1큰술
2025-06-29 21:22:53.543 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        i1_0.ingredient_id,
        i1_0.calories,
        i1_0.creator_user_id,
        i1_0.name,
        i1_0.nutrition_info,
        i1_0.required_amount 
    from
        ingredient i1_0 
    where
        i1_0.name=?
2025-06-29 21:22:53.545 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Ingredient '설탕' not found in DB. Skipping.
2025-06-29 21:22:53.545 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 소금 한 꼬집
2025-06-29 21:22:53.545 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 소금 한 꼬집
2025-06-29 21:22:53.545 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Processing ingredient line: 버터 1/2큰술
2025-06-29 21:22:53.545 [http-nio-8080-exec-1] WARN  a.s.k.p.service.PerplexityService - Failed to parse ingredient line: 버터 1/2큰술
2025-06-29 21:22:53.546 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Found cooking method (Pattern 4): 1. 팬을 약불로 달군 후 버터 1/2큰술을 넣어 녹여줍니다.
   2. 볼에 달걀 1개, 우유 3큰술, 설탕 1큰술, 소금 한 꼬집을 넣고 잘 섞어줍니다.
   3. 식빵 2장을
2025-06-29 21:22:53.546 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Successfully parsed cooking method
2025-06-29 21:22:53.546 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Final description: 필요한 재료와 양:
- 식빵 2장
   - 달걀 1개
   - 우유 3큰술
   - 설탕 1큰술
   - 소금 한 꼬집
   - 버터 1/2큰술

조리 방법:
1. 팬을 약불로 달군 후 버터 1/2큰술을 넣어 녹여줍니다.
   2. 볼에 달걀 1개, 우유 3큰술, 설탕 1큰술, 소금 한 꼬집을 넣고 잘 섞어줍니다.
   3. 식빵 2장을 준비해 달걀물에 앞뒤로 충분히 적십니다.
   4. 버터가 녹은 팬에 달걀물에 적신 식빵을 올려 양면이 노릇하게 구워줍니다.
   5. 원한다면 구운 식빵 위에 추가로 설탕이나 시나몬을 뿌려 마무리합니다.
2025-06-29 21:22:53.547 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        r1_0.recipe_id,
        r1_0.category,
        r1_0.cooking_time,
        r1_0.description,
        r1_0.difficulty,
        r1_0.image_url,
        r1_0.title 
    from
        recipe r1_0 
    where
        r1_0.title=?
2025-06-29 21:22:53.548 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saving new recipe with title: 프렌치 토스트
2025-06-29 21:22:53.552 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.Recipe */insert 
    into
        recipe (category, cooking_time, description, difficulty, image_url, title) 
    values
        (?, ?, ?, ?, ?, ?)
2025-06-29 21:22:53.554 [http-nio-8080-exec-1] INFO  a.s.k.p.service.PerplexityService - Saved recipe with ID: 121
2025-06-29 21:22:53.557 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:22:53.560 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        ac.su.kdt.prompttest.entity.ChatHistory */insert 
    into
        chat_history (chat_room_id, created_at, is_user_message, message, recipe_id, session_id, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-29 21:22:53.561 [http-nio-8080-exec-1] INFO  a.s.k.prompttest.service.ChatService - 채팅 메시지 저장 성공: userId=8, chatRoomId=5, sessionId=9a90ceed-b84b-4e50-a3ca-fffab6bf94dd, isUserMessage=false
2025-06-29 21:23:29.619 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:29.620 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:29.625 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:29.625 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:29.632 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.632 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.635 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.635 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.643 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:23:29.643 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:29.659 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:29.659 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:29.661 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:29.661 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:29.663 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.663 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.665 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.665 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.672 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:29.672 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:23:29.716 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:29.720 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:29.723 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.724 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.726 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:23:29.748 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:29.750 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:29.751 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.752 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:29.755 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:23:32.162 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:32.165 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:32.167 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:32.169 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:32.172 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ch1_0.chat_id,
        ch1_0.chat_room_id,
        ch1_0.created_at,
        ch1_0.is_user_message,
        ch1_0.message,
        ch1_0.recipe_id,
        ch1_0.session_id,
        ch1_0.user_id 
    from
        chat_history ch1_0 
    where
        ch1_0.user_id=? 
        and ch1_0.chat_room_id=? 
    order by
        ch1_0.created_at
2025-06-29 21:23:40.115 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:40.115 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:40.118 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:40.118 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:40.131 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.131 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.140 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.141 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.141 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:40.141 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:40.143 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:40.143 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:40.146 [http-nio-8080-exec-2] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.146 [http-nio-8080-exec-5] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.150 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:23:40.150 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:23:40.172 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:40.183 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:40.201 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:23:40.201 [http-nio-8080-exec-2] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.201 [http-nio-8080-exec-5] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.203 [http-nio-8080-exec-1] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.206 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:40.207 [http-nio-8080-exec-1] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.211 [http-nio-8080-exec-4] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.214 [http-nio-8080-exec-4] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:23:40.220 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:40.220 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:23:40.220 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:23:40.220 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:37:48.829 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:37:48.830 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:37:48.943 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:37:48.945 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:37:49.034 [http-nio-8080-exec-7] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.034 [http-nio-8080-exec-3] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.069 [http-nio-8080-exec-7] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.070 [http-nio-8080-exec-3] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.118 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:37:49.133 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:37:49.169 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:37:49.169 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:37:49.171 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:37:49.171 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:37:49.173 [http-nio-8080-exec-6] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.173 [http-nio-8080-exec-8] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.174 [http-nio-8080-exec-6] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.174 [http-nio-8080-exec-8] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.178 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:37:49.178 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ui1_0.ingredient_id,
        ui1_0.user_id,
        ui1_0.amount,
        ui1_0.ingredient_name,
        ui1_0.unit 
    from
        user_ingredient ui1_0 
    join
        user u1_0 
            on u1_0.user_id=ui1_0.user_id 
    where
        u1_0.user_id=?
2025-06-29 21:37:49.193 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:37:49.194 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:37:49.196 [http-nio-8080-exec-9] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.197 [http-nio-8080-exec-9] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.200 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:37:49.207 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - JWT 토큰에서 추출된 정보: userId=8, username=이형준
2025-06-29 21:37:49.208 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        u1_0.profile_image,
        u1_0.provider,
        u1_0.provider_id,
        u1_0.updated_at,
        u1_0.username,
        r1_0.user_user_id,
        r1_0.roles 
    from
        user u1_0 
    left join
        user_roles r1_0 
            on u1_0.user_id=r1_0.user_user_id 
    where
        u1_0.user_id=?
2025-06-29 21:37:49.209 [http-nio-8080-exec-10] DEBUG a.s.k.p.s.JwtAuthenticationFilter - DB에서 조회된 사용자: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.210 [http-nio-8080-exec-10] INFO  a.s.k.p.s.JwtAuthenticationFilter - JWT 인증 성공: userId=8, username=이형준, provider=kakao
2025-06-29 21:37:49.211 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cr1_0.chat_room_id,
        cr1_0.created_at,
        cr1_0.is_active,
        cr1_0.message_count,
        cr1_0.title,
        cr1_0.updated_at,
        cr1_0.user_id 
    from
        chat_room cr1_0 
    where
        cr1_0.user_id=? 
        and cr1_0.is_active 
    order by
        cr1_0.updated_at desc
2025-06-29 21:40:03.525 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m34s672ms).
2025-06-29 21:54:29.163 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=14m25s639ms).
2025-06-29 22:35:00.283 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=40m31s121ms).
